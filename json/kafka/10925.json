[{"authorTime":"2018-07-19 00:30:52","codes":[{"authorDate":"2018-04-24 02:41:03","commitOrder":3,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(inner,\n                                            \"scope\",\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2018-04-24 02:41:03","endLine":86,"groupId":"8306","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/d190aa28419cf1e0018427681308505bd267ef.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(inner,\n                                            \"scope\",\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"NB"},{"authorDate":"2018-07-19 00:30:52","commitOrder":3,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2018-07-19 00:30:52","endLine":87,"groupId":"8306","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/94c8c31d96ac93be1bead782364b5d20de71c4.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"06d96628f0e098d93aecc650534c9e9965127d92","commitMessage":"@@@MINOR: remove unused MeteredKeyValueStore (#5380)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-07-19 00:30:52","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-07-19 00:30:52","codes":[{"authorDate":"2019-03-01 01:33:53","commitOrder":4,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-03-01 01:33:53","endLine":94,"groupId":"10047","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/bf192dee95e7bbf7d54d9f3f351b3dbf70e7bf.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(inner,\n                                            \"scope\",\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2018-07-19 00:30:52","commitOrder":4,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2018-07-19 00:30:52","endLine":87,"groupId":"8306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/94c8c31d96ac93be1bead782364b5d20de71c4.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"3c46b5669de856f4510b8d291a8af7dbd809c07b","commitMessage":"@@@MINOR: Remove types from caching stores (#6331)\n\n* MINOR: remove types from caching stores\n\n* Github comments and rebased\n","date":"2019-03-01 01:33:53","modifiedFileCount":"32","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-03-02 07:39:23","codes":[{"authorDate":"2019-03-01 01:33:53","commitOrder":5,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-03-01 01:33:53","endLine":94,"groupId":"10047","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/bf192dee95e7bbf7d54d9f3f351b3dbf70e7bf.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2019-03-02 07:39:23","commitOrder":5,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-03-02 07:39:23","endLine":95,"groupId":"10047","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/fc88e62f82de08ee88bf909790f6d042d9fe8e.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        EasyMock.expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"33ba2820f4fbb459172022a83d761a7c674a8fdd","commitMessage":"@@@KAFKA-3522: Add TimestampedKeyValueStore builder/runtime classes (#6152)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-03-02 07:39:23","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-04-21 02:30:20","codes":[{"authorDate":"2019-04-21 02:30:20","commitOrder":6,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(context.appConfigs()).andReturn(new HashMap<>());\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-04-21 02:30:20","endLine":97,"groupId":"10047","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/eb9e0bfaa0537bae5b5b7152cca8bf8fb98b79.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-04-21 02:30:20","commitOrder":6,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(context.appConfigs()).andReturn(new HashMap<>());\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-04-21 02:30:20","endLine":98,"groupId":"10047","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/c14ba206bf2676e4e032fccddfff6d4092e2dd.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"e56ebbffca57741d398283e46073ed4170f8f927","commitMessage":"@@@[KAFKA-3729] Auto-configure non-default SerDes passed alongside the topology builder (#6461)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-04-21 02:30:20","modifiedFileCount":"11","status":"M","submitter":"Ted Yu"},{"authorTime":"2019-05-01 15:33:53","codes":[{"authorDate":"2019-05-01 15:33:53","commitOrder":7,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-05-01 15:33:53","endLine":95,"groupId":"10047","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/c382b19c1c9b5fc259bd1e54503584a955eb95.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(context.appConfigs()).andReturn(new HashMap<>());\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2019-05-01 15:33:53","commitOrder":7,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","date":"2019-05-01 15:33:53","endLine":96,"groupId":"10047","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/be95cea2d37c0da2f0ec7cc1b599f199e36cd0.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(context.appConfigs()).andReturn(new HashMap<>());\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"56c64803fa190814232c5f71e9a758346c474bb4","commitMessage":"@@@KAFKA-3729: Revert adding Serde auto-config (#6630)\n\n* Revert \"MINOR: Add unit test for SerDe auto-configuration (#6610)\"\n\nThis reverts commit 172fbb2dd55144e2e44777174f970b56768e1777.\n\n* Revert \"[KAFKA-3729] Auto-configure non-default SerDes passed alongside the topology builder (#6461)\"\n\nThis reverts commit e56ebbffca57741d398283e46073ed4170f8f927.\n\nThe two merged PRs introduce a breaking change. Reverting to preserve backward compatibility. Jira ticket reopened.\n\nReviewers: Ted Yu <yuzhihong@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-05-01 15:33:53","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":8,"curCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics())\n            .andReturn(new StreamsMetricsImpl(metrics, \"test-client\", builtInMetricsVersion)).anyTimes();\n        expect(context.taskId()).andReturn(taskId).anyTimes();\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", \"metered\")\n        );\n    }\n","date":"2019-10-31 00:24:59","endLine":132,"groupId":"13822","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/89c5b5951e8240841cf435c78aae68db464977.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-10-31 00:24:59","commitOrder":8,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics())\n            .andReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion)).anyTimes();\n        expect(context.taskId()).andReturn(taskId).anyTimes();\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", \"metered\")\n        );\n    }\n","date":"2019-10-31 00:24:59","endLine":134,"groupId":"13822","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/7c089657aa8cf63f6b4e63636a6ebe16cbbef4.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            \"scope\",\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics()).andReturn(new MockStreamsMetrics(metrics));\n        expect(context.taskId()).andReturn(taskId);\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-07-10 02:50:31","codes":[{"authorDate":"2020-07-10 02:50:31","commitOrder":9,"curCode":"    public void before() {\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(innerStore.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-07-10 02:50:31","endLine":154,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/136f4690acea6214462ca938825015f2f06b54.src","preCode":"    public void before() {\n        metered = new MeteredSessionStore<>(\n            inner,\n            \"scope\",\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics())\n            .andReturn(new StreamsMetricsImpl(metrics, \"test-client\", builtInMetricsVersion)).anyTimes();\n        expect(context.taskId()).andReturn(taskId).anyTimes();\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", \"metered\")\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2020-07-10 02:50:31","commitOrder":9,"curCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(inner.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-07-10 02:50:31","endLine":149,"groupId":"12208","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/c882cdee2878b07f5ffa051c8cd37b526232c7.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.metrics())\n            .andReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion)).anyTimes();\n        expect(context.taskId()).andReturn(taskId).anyTimes();\n        expect(inner.name()).andReturn(\"metered\").anyTimes();\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", \"metered\")\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"813f92c21ad4bd7ffdd8acc66c20d31927e7a67f","commitMessage":"@@@KAFKA-10179: Pass correct changelog topic to state serdes (#8902)\n\nUntil now we always passed the default changelog topic name\nto the state serdes. However.  for optimized source tables\nand global tables the changelog topic is the source topic.\n\nMost serdes do not use the topic name passed to them.\nHowever.  if the serdes actually use the topic name for\n(de)serialization a\norg.apache.kafka.common.errors.SerializationException is thrown.\n\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-07-10 02:50:31","modifiedFileCount":"30","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":10,"curCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            Serdes.String(),\n            Serdes.String(),\n            mockTime\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics())\n            .andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, mockTime));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(innerStore.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-08-14 03:40:40","endLine":157,"groupId":"13693","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/efbf9cc01a34a617ae06271a3a77c2f7cf1eee.src","preCode":"    public void before() {\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(innerStore.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":10,"curCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            mockTime,\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, mockTime)\n        );\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(inner.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-08-14 03:40:40","endLine":153,"groupId":"1158","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f6/3925589e5693769922bcfec2606b195f7a0041.src","preCode":"    public void before() {\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            new MockTime(),\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(inner.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            Serdes.String(),\n            Serdes.String(),\n            mockTime\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics())\n            .andStubReturn(new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, mockTime));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(innerStore.name()).andStubReturn(STORE_NAME);\n        tags = mkMap(\n            mkEntry(THREAD_ID_TAG_KEY, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":132,"groupId":"10925","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/bea75f404cf5d3a7c1b6c4f6d5386ea84246ae.src","preCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            Serdes.String(),\n            Serdes.String(),\n            mockTime\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics())\n            .andStubReturn(new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, mockTime));\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(innerStore.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            mockTime,\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, mockTime)\n        );\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(inner.name()).andStubReturn(STORE_NAME);\n        tags = mkMap(\n            mkEntry(THREAD_ID_TAG_KEY, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":130,"groupId":"10925","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/5c3d78c5960ad1a9e3a0b1020be370e0e787bc.src","preCode":"    public void before() {\n        final Time mockTime = new MockTime();\n        metered = new MeteredKeyValueStore<>(\n            inner,\n            STORE_TYPE,\n            mockTime,\n            Serdes.String(),\n            Serdes.String()\n        );\n        metrics.config().recordLevel(Sensor.RecordingLevel.DEBUG);\n        expect(context.applicationId()).andStubReturn(APPLICATION_ID);\n        expect(context.metrics()).andStubReturn(\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, mockTime)\n        );\n        expect(context.taskId()).andStubReturn(taskId);\n        expect(context.changelogFor(STORE_NAME)).andStubReturn(CHANGELOG_TOPIC);\n        expect(inner.name()).andStubReturn(STORE_NAME);\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", taskId.toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
