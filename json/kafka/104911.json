[{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":133,"groupId":"15343","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/382b6665d3c334616994ea0e1ee1d655d85f30.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":162,"groupId":"806","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/382b6665d3c334616994ea0e1ee1d655d85f30.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"}],"commitId":"f2031d40639ef34c1591c22971394ef41c87652c","commitMessage":"@@@KAFKA-2774: Rename Copycat to Kafka Connect\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Gwen Shapira\n\nCloses #456 from ewencp/kafka-2774-rename-copycat\n","date":"2015-11-09 14:11:03","modifiedFileCount":"1","status":"B","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2016-02-04 03:28:58","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-04 03:28:58","endLine":145,"groupId":"13472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/88534ea09241a44493fd51fabf1d966938b9df.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-04 03:28:58","endLine":175,"groupId":"806","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/88534ea09241a44493fd51fabf1d966938b9df.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.start(EMPTY_TASK_PROPS);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"1d80f563bcd043cd464003782802906b60a0ade8","commitMessage":"@@@KAFKA-3092: Replace SinkTask onPartitionsAssigned/onPartitionsRevoked with open/close\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #815 from hachikuji/KAFKA-3092\n","date":"2016-02-04 03:28:58","modifiedFileCount":"9","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-02-18 00:12:41","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":3,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-04 03:28:58","endLine":145,"groupId":"13472","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/88534ea09241a44493fd51fabf1d966938b9df.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2016-02-18 00:12:41","commitOrder":3,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.commit();\n        EasyMock.expectLastCall();\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-18 00:12:41","endLine":177,"groupId":"7941","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/e9b862455d34d057ddaea8e9758783d9ab9d7c.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"8c90b1a98acb1222a0e907153bf52a85af0fe443","commitMessage":"@@@KAFKA-3225: Method commit() of class SourceTask never invoked\n\n1. Added a test case to prove commit() on SourceTask was not being called.\n2. Added commitSourceTask() which logs potential exceptions.\n3. Added after call to finishSuccessfulFlush().\n\nAuthor: Jeremy Custenborder <jeremy@scarcemedia.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #909 from jcustenborder/KAFKA-3225\n","date":"2016-02-18 00:12:41","modifiedFileCount":"2","status":"M","submitter":"Jeremy Custenborder"},{"authorTime":"2016-02-24 14:47:31","codes":[{"authorDate":"2016-02-24 14:47:31","commitOrder":4,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":152,"groupId":"16472","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/9eb72361e2661782ddacd465925760e7418bef.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-02-24 14:47:31","commitOrder":4,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.commit();\n        EasyMock.expectLastCall();\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":222,"groupId":"1455","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/9eb72361e2661782ddacd465925760e7418bef.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.commit();\n        EasyMock.expectLastCall();\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"f7d019ed408fa988129be9af3689bfa4878bc627","commitMessage":"@@@KAFKA-3093: Add Connect status tracking API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #920 from hachikuji/KAFKA-3093\n","date":"2016-02-24 14:47:31","modifiedFileCount":"28","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-03-03 09:22:14","codes":[{"authorDate":"2016-02-24 14:47:31","commitOrder":5,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":152,"groupId":"16472","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/9eb72361e2661782ddacd465925760e7418bef.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"},{"authorDate":"2016-03-03 09:22:14","commitOrder":5,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-03 09:22:14","endLine":219,"groupId":"16471","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/c0c6ef186064fc5e691acd1de2aab0f1ca32ad.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.commit();\n        EasyMock.expectLastCall();\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"cfc324333fa13e06ec7ac5ef3a09d8a6b6b54485","commitMessage":"@@@KAFKA-3290: fix transient test failures in WorkerSourceTaskTest\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Gwen Shapira\n\nCloses #998 from hachikuji/KAFKA-3290\n","date":"2016-03-03 09:22:14","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-03-04 06:58:43","codes":[{"authorDate":"2016-03-04 06:58:43","commitOrder":6,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-04 06:58:43","endLine":152,"groupId":"16472","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/4be0ba68ac1a413f8712b3d1ea8fd9d0bf44d5.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-03-04 06:58:43","commitOrder":6,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-04 06:58:43","endLine":220,"groupId":"16471","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/4be0ba68ac1a413f8712b3d1ea8fd9d0bf44d5.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertEquals(true, workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"7079f57f70dfb5e731baf0a19bbf16e7364c15bb","commitMessage":"@@@KAFKA-3290: fix race condition with worker task shutdown and mock validation\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Gwen Shapira\n\nCloses #1008 from hachikuji/KAFKA-3290-REVISITED\n","date":"2016-03-04 06:58:43","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-03-16 05:32:22","codes":[{"authorDate":"2016-03-16 05:32:22","commitOrder":7,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        expectCommitRecord(10);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-16 05:32:22","endLine":154,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/e298569e07e3d02a61472e1571123952a4d62c.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-03-16 05:32:22","commitOrder":7,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n        \n        expectCommitRecord(1);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-16 05:32:22","endLine":225,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/e298569e07e3d02a61472e1571123952a4d62c.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"6eacc0de303e4d29e083b89c1f53615c1dfa291e","commitMessage":"@@@KAFKA-3260 - Added SourceTask.commitRecord\n\nAdded commitRecord(SourceRecord record) to SourceTask. This method is called during the callback from producer.send() when the message has been sent successfully. Added commitTaskRecord(SourceRecord record) to WorkerSourceTask to handle calling commitRecord on the SourceTask. Updated tests for calls to commitRecord.\n\nAuthor: Jeremy Custenborder <jcustenborder@gmail.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #950 from jcustenborder/KAFKA-3260\n","date":"2016-03-16 05:32:22","modifiedFileCount":"3","status":"M","submitter":"Jeremy Custenborder"},{"authorTime":"2016-03-16 23:24:18","codes":[{"authorDate":"2016-03-16 23:24:18","commitOrder":8,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-16 23:24:18","endLine":152,"groupId":"16472","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/d07a699fe9c271b105cda51cac5f96270a50ad.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        expectCommitRecord(10);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-03-16 23:24:18","commitOrder":8,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-03-16 23:24:18","endLine":221,"groupId":"16471","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/d07a699fe9c271b105cda51cac5f96270a50ad.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n        \n        expectCommitRecord(1);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"6834b91e349f2ed4b8ff5c97eb3b0c390bc27648","commitMessage":"@@@MINOR: KAFKA-3260 follow up.  fix commitRecord calls in tests\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1080 from ewencp/minor-kafka-3260-followup-tests\n","date":"2016-03-16 23:24:18","modifiedFileCount":"1","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":9,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":244,"groupId":"16472","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/805dae47ab1c8d037cf042fb7b3ad2c7e843ae.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":9,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":313,"groupId":"16471","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/805dae47ab1c8d037cf042fb7b3ad2c7e843ae.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-06-15 04:21:30","codes":[{"authorDate":"2016-06-15 04:21:30","commitOrder":10,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitLatch(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-06-15 04:21:30","endLine":249,"groupId":"16472","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/61245142337cdb39a905624e3c9d0b71474b09.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2016-06-15 04:21:30","commitOrder":10,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitLatch(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-06-15 04:21:30","endLine":318,"groupId":"16471","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/61245142337cdb39a905624e3c9d0b71474b09.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitPolls(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"9ff54cb5dd99fab83533ddfdf0ed89508e5525fb","commitMessage":"@@@MINOR: Catch Throwable in commitSourceTask()\n\nAuthor: Liquan Pei <liquanpei@gmail.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1402 from Ishiihara/source-task-commit-record\n","date":"2016-06-15 04:21:30","modifiedFileCount":"2","status":"M","submitter":"Liquan Pei"},{"authorTime":"2016-06-21 11:32:09","codes":[{"authorDate":"2016-06-21 11:32:09","commitOrder":11,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-06-21 11:32:09","endLine":253,"groupId":"16472","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/9863c03f4eb14a16b82fab04f1bfdf6dbddce5.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitLatch(pollLatch);\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2016-06-21 11:32:09","commitOrder":11,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-06-21 11:32:09","endLine":334,"groupId":"16471","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/9863c03f4eb14a16b82fab04f1bfdf6dbddce5.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        executor.submit(workerTask);\n        awaitLatch(pollLatch);\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"50781b75d8368ae67cf06d15ea11579a2aa4fb2c","commitMessage":"@@@KAFKA-3865: Fix transient failure in WorkerSourceTaskTest.testSlowTaskStart\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1531 from hachikuji/KAFKA-3865\n","date":"2016-06-21 11:32:09","modifiedFileCount":"1","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-13 05:06:37","codes":[{"authorDate":"2016-08-13 05:06:37","commitOrder":12,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-13 05:06:37","endLine":262,"groupId":"4984","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/c7118739be1b8037f85fe7366207f57865f916.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2016-08-13 05:06:37","commitOrder":12,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-13 05:06:37","endLine":348,"groupId":"4986","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/c7118739be1b8037f85fe7366207f57865f916.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"208ecae23994812d2a707b776de6b95d9f591bb7","commitMessage":"@@@KAFKA-3847: Use a separate producer per source task\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Jason Gustafson.  Gwen Shapira\n\nCloses #1727 from ewencp/kafka-3847-per-task-producers and squashes the following commits:\n\n7d39724 [Ewen Cheslack-Postava] Add timeout for closing producers.\n98ec7f6 [Ewen Cheslack-Postava] KAFKA-3847: Use a separate producer per source task\n","date":"2016-08-13 05:06:37","modifiedFileCount":"3","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-01-13 08:14:53","codes":[{"authorDate":"2017-01-13 08:14:53","commitOrder":13,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":262,"groupId":"12724","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/07ba157f4f079ed645c136b5e4c998b0a7a057.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2017-01-13 08:14:53","commitOrder":13,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":354,"groupId":"19761","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/07ba157f4f079ed645c136b5e4c998b0a7a057.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"2f904883237c476fd82a202f7ddda93fe56eef36","commitMessage":"@@@KAFKA-3209: KIP-66: single message transforms\n\nBesides API and runtime changes.  this PR also includes 2 data transformations (`InsertField`.  `HoistToStruct`) and 1 routing transformation (`TimestampRouter`).\n\nThere is some gnarliness in `ConnectorConfig` / `ConfigDef` around creating.  parsing and validating a dynamic `ConfigDef`.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2299 from shikhar/smt-2017\n","date":"2017-01-13 08:14:53","modifiedFileCount":"16","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2017-09-29 00:52:08","codes":[{"authorDate":"2017-09-29 00:52:08","commitOrder":14,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-29 00:53:19","endLine":278,"groupId":"12724","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8a/23ad53cf47f94a1ba213b5300ef99e30b7e222.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2017-09-29 00:52:08","commitOrder":14,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-29 00:53:19","endLine":372,"groupId":"19761","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8a/23ad53cf47f94a1ba213b5300ef99e30b7e222.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"89ba0c1525b8f8a4e36d1e1b486ca660d5c24a7b","commitMessage":"@@@KAFKA-5901: Added Connect metrics specific to source tasks (KIP-196)\n\nAdded Connect metrics specific to source tasks.  and builds upon #3864 and #3911 that have already been merged into `trunk`.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: tedyu <yuzhihong@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3959 from rhauch/kafka-5901\n","date":"2017-09-29 00:53:19","modifiedFileCount":"8","status":"M","submitter":"Randall Hauch"},{"authorTime":"2019-01-16 00:48:32","codes":[{"authorDate":"2019-01-16 00:48:32","commitOrder":15,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-01-16 00:48:32","endLine":289,"groupId":"14363","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/24/a13c2be267d99ae107bdd140f5261d5d5be083.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2019-01-16 00:48:32","commitOrder":15,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-01-16 00:48:32","endLine":383,"groupId":"7282","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/24/a13c2be267d99ae107bdd140f5261d5d5be083.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"af634a4a98eaa2457752e3f2841720020e0e9ad0","commitMessage":"@@@KAFKA-7391; Introduce close(Duration) to Producer and AdminClient instead of close(long.  TimeUnit) (#5667)\n\nSee KIP-367: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=89070496.\n\nReviewers: Viktor Somogyi <viktorsomogyi@gmail.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-01-16 00:48:32","modifiedFileCount":"11","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":16,"curCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        expectTopicCreation(TOPIC);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        expectClose();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":325,"groupId":"104911","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollsInBackground","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/61ea3dc7cffddb9205ee83b64deb1f420c3154.src","preCode":"    public void testPollsInBackground() throws Exception {\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        final CountDownLatch pollLatch = expectPolls(10);\n        \r\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(10);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":16,"curCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        expectTopicCreation(TOPIC);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        expectClose();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":454,"groupId":"104911","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/61ea3dc7cffddb9205ee83b64deb1f420c3154.src","preCode":"    public void testCommit() throws Exception {\n        \r\n        createWorkerTask();\n\n        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));\n        EasyMock.expectLastCall();\n        sourceTask.start(TASK_PROPS);\n        EasyMock.expectLastCall();\n        statusListener.onStartup(taskId);\n        EasyMock.expectLastCall();\n\n        \r\n        final CountDownLatch pollLatch = expectPolls(1);\n        expectOffsetFlush(true);\n\n        sourceTask.stop();\n        EasyMock.expectLastCall();\n        expectOffsetFlush(true);\n\n        statusListener.onShutdown(taskId);\n        EasyMock.expectLastCall();\n\n        producer.close(EasyMock.anyObject(Duration.class));\n        EasyMock.expectLastCall();\n\n        transformationChain.close();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        Future<?> taskFuture = executor.submit(workerTask);\n\n        assertTrue(awaitLatch(pollLatch));\n        assertTrue(workerTask.commitOffsets());\n        workerTask.stop();\n        assertTrue(workerTask.awaitStop(1000));\n\n        taskFuture.get();\n        assertPollMetrics(1);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"}]
