[{"authorTime":"2019-10-17 13:40:57","codes":[{"authorDate":"2019-10-17 13:40:57","commitOrder":1,"curCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","date":"2019-10-17 13:40:57","endLine":98,"groupId":"18279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotForwardWhenHashDoesNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/c19de384254c69ae85fc7ab77562f8cdb49b1d.src","preCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2019-10-17 13:40:57","commitOrder":1,"curCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","date":"2019-10-17 13:40:57","endLine":197,"groupId":"18279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEmitResultForLeftJoinWhenRightIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/c19de384254c69ae85fc7ab77562f8cdb49b1d.src","preCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"f93c473be1d24774f9c2d29576b063835f8d2737","commitMessage":"@@@KAFKA-9000: fix flaky FK join test by using TTD (#7517)\n\nMigrate this integration test to use TopologyTestDriver instead of running 3 Streams instances.\n\nDropped one test that was attempting to produce specific interleavings. If anything.  these should be verified deterministically by unit testing.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-17 13:40:57","modifiedFileCount":"3","status":"B","submitter":"John Roesler"},{"authorTime":"2020-03-14 12:04:14","codes":[{"authorDate":"2020-03-14 12:04:14","commitOrder":2,"curCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","date":"2020-03-14 12:04:14","endLine":99,"groupId":"18279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotForwardWhenHashDoesNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/e99ec6687d71d26e50d9cc8402d5d14d119cf0.src","preCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-03-14 12:04:14","commitOrder":2,"curCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","date":"2020-03-14 12:04:14","endLine":202,"groupId":"18279","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEmitResultForLeftJoinWhenRightIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/e99ec6687d71d26e50d9cc8402d5d14d119cf0.src","preCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"7945cbc73bec5529c3c6915809379f00f8604a77","commitMessage":"@@@MINOR: reuse pseudo-topic in FKJoin (#8296)\n\nReuse the same pseudo-topic for serializing the LHS value in the foreign-key join resolver as\nwe originally used to serialize it before sending the subscription request.\n\nReviewers: Boyang Chen <boyang@confluent.io>","date":"2020-03-14 12:04:14","modifiedFileCount":"4","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-30 05:17:34","codes":[{"authorDate":"2020-04-30 05:17:34","commitOrder":3,"curCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","date":"2020-04-30 05:17:34","endLine":99,"groupId":"18279","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotForwardWhenHashDoesNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5569f7906c8b9820779e89e2f7609bfa1b264a.src","preCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-04-30 05:17:34","commitOrder":3,"curCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","date":"2020-04-30 05:17:34","endLine":202,"groupId":"18279","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEmitResultForLeftJoinWhenRightIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5569f7906c8b9820779e89e2f7609bfa1b264a.src","preCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"688f2e9c0f1b7a493d16da41d96dc7cd17195502","commitMessage":"@@@KAFKA-9925: decorate pseudo-topics with app id (#8574)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Kin Siu","date":"2020-04-30 05:17:34","modifiedFileCount":"10","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-22 22:17:11","commitOrder":4,"curCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final org.apache.kafka.streams.processor.Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","date":"2021-06-22 22:17:11","endLine":96,"groupId":"101636","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldNotForwardWhenHashDoesNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/379d611d60d9e8a5be3f35fb9ba3451b225e9a.src","preCode":"    public void shouldNotForwardWhenHashDoesNotMatch() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = false;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] oldHash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"oldLhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(oldHash, \"rhsValue\"));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded, empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":4,"curCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final org.apache.kafka.streams.processor.Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","date":"2021-06-22 22:17:11","endLine":199,"groupId":"101636","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldEmitResultForLeftJoinWhenRightIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/379d611d60d9e8a5be3f35fb9ba3451b225e9a.src","preCode":"    public void shouldEmitResultForLeftJoinWhenRightIsNull() {\n        final TestKTableValueGetterSupplier<String, String> valueGetterSupplier =\n            new TestKTableValueGetterSupplier<>();\n        final boolean leftJoin = true;\n        final SubscriptionResolverJoinProcessorSupplier<String, String, String, String> processorSupplier =\n            new SubscriptionResolverJoinProcessorSupplier<>(\n                valueGetterSupplier,\n                STRING_SERIALIZER,\n                () -> \"value-hash-dummy-topic\",\n                JOINER,\n                leftJoin\n            );\n        final Processor<String, SubscriptionResponseWrapper<String>> processor = processorSupplier.get();\n        final MockProcessorContext context = new MockProcessorContext();\n        processor.init(context);\n        context.setRecordMetadata(\"topic\", 0, 0, new RecordHeaders(), 0);\n\n        valueGetterSupplier.put(\"lhs1\", \"lhsValue\");\n        final long[] hash = Murmur3.hash128(STRING_SERIALIZER.serialize(\"topic-join-resolver\", \"lhsValue\"));\n        processor.process(\"lhs1\", new SubscriptionResponseWrapper<>(hash, null));\n        final List<MockProcessorContext.CapturedForward> forwarded = context.forwarded();\n        assertThat(forwarded.size(), is(1));\n        assertThat(forwarded.get(0).keyValue(), is(new KeyValue<>(\"lhs1\", \"(lhsValue,null)\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResolverJoinProcessorSupplierTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"c3475081c5e8228e9bd3a45022a93d61e542f72e","commitMessage":"@@@KAFKA-10546: Deprecate old PAPI (#10869)\n\n* Deprecate the old Processor API\n* Suppress warnings on all internal usages of the old API\n  (which will be migrated in other child tickets of KAFKA-8410)\n* Add new KStream#process methods.  since KAFKA-10603 has not seen any action.\n","date":"2021-06-22 22:17:11","modifiedFileCount":"124","status":"M","submitter":"John Roesler"}]
