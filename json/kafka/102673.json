[{"authorTime":"2018-10-02 14:10:34","codes":[{"authorDate":"2018-10-02 14:10:34","commitOrder":1,"curCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","date":"2018-10-02 14:10:34","endLine":320,"groupId":"12055","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownWhenRecordConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/920e3a6f17d8f2a5bace378f55a114e673e5ee.src","preCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"},{"authorDate":"2018-10-02 14:10:34","commitOrder":1,"curCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","date":"2018-10-02 14:10:34","endLine":420,"groupId":"12055","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldShutdownWhenBytesConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/920e3a6f17d8f2a5bace378f55a114e673e5ee.src","preCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"}],"commitId":"5ba9cade7b066cc26842aeaac5662a57c502ffcb","commitMessage":"@@@KAFKA-7223: In-Memory Suppression Buffering (#5693)\n\nReviewer: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-10-02 14:10:34","modifiedFileCount":"19","status":"B","submitter":"John Roesler"},{"authorTime":"2018-10-04 00:52:13","codes":[{"authorDate":"2018-10-04 00:52:13","commitOrder":2,"curCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2018-10-04 00:52:13","endLine":317,"groupId":"12055","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownWhenRecordConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/8f1eb3c50bce05c86e599dd298ea59c3a8e4ce.src","preCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2018-10-04 00:52:13","commitOrder":2,"curCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2018-10-04 00:52:13","endLine":419,"groupId":"12055","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldShutdownWhenBytesConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/8f1eb3c50bce05c86e599dd298ea59c3a8e4ce.src","preCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final KafkaStreams driver = getCleanStartedStreams(appId, builder);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"b793eaade4fcb0705ab80c2a806331fab8c29f9f","commitMessage":"@@@KAFKA-7223: Make suppression buffer durable (#5724)\n\nThis is Part 4 of suppression (durability)\nPart 1 was #5567 (the API)\nPart 2 was #5687 (the tests)\nPart 3 was #5693 (in-memory buffering)\n\nImplement a changelog for the suppression buffer so that the buffer state may be recovered on restart or recovery.\nAs of this PR.  suppression is suitable for general usage.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-10-04 00:52:13","modifiedFileCount":"5","status":"M","submitter":"John Roesler"},{"authorTime":"2019-04-27 00:30:20","codes":[{"authorDate":"2018-10-04 00:52:13","commitOrder":3,"curCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2018-10-04 00:52:13","endLine":317,"groupId":"12055","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownWhenRecordConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/8f1eb3c50bce05c86e599dd298ea59c3a8e4ce.src","preCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"},{"authorDate":"2019-04-27 00:30:20","commitOrder":3,"curCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2019-04-27 00:30:20","endLine":314,"groupId":"1398","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldShutdownWhenBytesConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/f0a4121e35107bdcc7acc031405d544fa73159.src","preCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(Duration.ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"eecb403bae80b82b6fb7a27bebb5b53d6c8f3115","commitMessage":"@@@KAFKA-8254: Pass Changelog as Topic in Suppress Serdes (#6602)\n\nReviewers:  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-04-27 00:30:20","modifiedFileCount":"15","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-30 06:11:49","codes":[{"authorDate":"2020-04-30 06:11:49","commitOrder":4,"curCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            quietlyCleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2020-04-30 06:11:49","endLine":277,"groupId":"102673","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownWhenRecordConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/7c23d73c631af9ed2c964771a7b696f20942c9.src","preCode":"    public void shouldShutdownWhenRecordConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenRecordConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxRecords(1L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-04-30 06:11:49","commitOrder":4,"curCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            quietlyCleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","date":"2020-04-30 06:11:49","endLine":319,"groupId":"102673","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldShutdownWhenBytesConstraintIsViolated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/7c23d73c631af9ed2c964771a7b696f20942c9.src","preCode":"    public void shouldShutdownWhenBytesConstraintIsViolated() throws InterruptedException {\n        final String testId = \"-shouldShutdownWhenBytesConstraintIsViolated\";\n        final String appId = getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;\n        final String input = \"input\" + testId;\n        final String outputSuppressed = \"output-suppressed\" + testId;\n        final String outputRaw = \"output-raw\" + testId;\n\n        cleanStateBeforeTest(CLUSTER, input, outputRaw, outputSuppressed);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, Long> valueCounts = buildCountsTable(input, builder);\n\n        valueCounts\n            \r\n            .suppress(untilTimeLimit(ofMillis(MAX_VALUE), maxBytes(200L).shutDownWhenFull()))\n            .toStream()\n            .to(outputSuppressed, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        valueCounts\n            .toStream()\n            .to(outputRaw, Produced.with(STRING_SERDE, Serdes.Long()));\n\n        final Properties streamsConfig = getStreamsConfig(appId);\n        final KafkaStreams driver = IntegrationTestUtils.getStartedStreams(streamsConfig, builder, true);\n        try {\n            produceSynchronously(\n                input,\n                asList(\n                    new KeyValueTimestamp<>(\"k1\", \"v1\", scaledTime(0L)),\n                    new KeyValueTimestamp<>(\"k1\", \"v2\", scaledTime(1L)),\n                    new KeyValueTimestamp<>(\"k2\", \"v1\", scaledTime(2L)),\n                    new KeyValueTimestamp<>(\"x\", \"x\", scaledTime(3L))\n                )\n            );\n            verifyErrorShutdown(driver);\n        } finally {\n            driver.close();\n            cleanStateAfterTest(CLUSTER, driver);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"dc4d439825b2d117707b01c7c64769e700246fc6","commitMessage":"@@@KAFKA-9875: Make integration tests more resilient (#8578)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-30 06:11:49","modifiedFileCount":"25","status":"M","submitter":"John Roesler"}]
