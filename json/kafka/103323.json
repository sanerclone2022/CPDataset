[{"authorTime":"2017-05-17 00:57:15","codes":[{"authorDate":"2017-06-01 12:31:52","commitOrder":2,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2017-06-01 12:31:52","endLine":507,"groupId":"8412","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/34f595bd1c048614d99f0815c5b605064ea4fc.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"B"},{"authorDate":"2017-05-17 00:57:15","commitOrder":2,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2017-05-17 00:57:15","endLine":521,"groupId":"8412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/8a2f0dc83eecab0ace0fc9985ec0c6f3c61899.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"NB"}],"commitId":"e4a6b50deca8fabc9880c6764334bfaa830a6d5e","commitMessage":"@@@KAFKA-5340; Batch splitting should preserve magic and transactional flag\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Apurva Mehta <apurva@confluent.io>.  Jiangjie Qin <becket.qin@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3162 from hachikuji/KAFKA-5340\n","date":"2017-06-01 12:31:52","modifiedFileCount":"10","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-10-10 08:13:33","codes":[{"authorDate":"2018-10-10 08:13:33","commitOrder":3,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() throws Exception {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2018-10-10 08:13:33","endLine":616,"groupId":"8412","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/2b4e6c42b0320519617a3e867e37621754b5b8.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"M"},{"authorDate":"2018-10-10 08:13:33","commitOrder":3,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() throws Exception {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2018-10-10 08:13:33","endLine":650,"groupId":"8412","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/2b4e6c42b0320519617a3e867e37621754b5b8.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"}],"commitId":"741cb761c5239297029a446518c332f6c4ed08f6","commitMessage":"@@@KAFKA-4514; Add Codec for ZStandard Compression (#2267)\n\nThis patch adds support for zstandard compression to Kafka as documented in KIP-110: https://cwiki.apache.org/confluence/display/KAFKA/KIP-110%3A+Add+Codec+for+ZStandard+Compression. \n\nReviewers: Ivan Babrou <ibobrik@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>","date":"2018-10-10 08:13:33","modifiedFileCount":"19","status":"M","submitter":"Lee Dongjin"},{"authorTime":"2019-01-21 05:25:35","codes":[{"authorDate":"2019-01-21 05:25:35","commitOrder":4,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2019-01-21 05:25:35","endLine":616,"groupId":"8412","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/560f9b95072caee965cac120f0c4a085890606.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() throws Exception {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"M"},{"authorDate":"2019-01-21 05:25:35","commitOrder":4,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2019-01-21 05:25:35","endLine":650,"groupId":"8412","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/560f9b95072caee965cac120f0c4a085890606.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() throws Exception {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"}],"commitId":"e87e3f2cb286add0c315069b3b2a13c31d65043e","commitMessage":"@@@MINOR: Remove unused imports.  exceptions.  and values (#6117)\n\n1. Remove unthrown exceptions from MemoryRecordsBuilderTest\n2. Remove unused imports from ReplicaFetcherThread.  ZooKeeperClient.  ApiVersionTest.  PartitionTest\n3. Remove unused value from PartitionTest","date":"2019-01-21 05:25:35","modifiedFileCount":"1","status":"M","submitter":"Lee Dongjin"},{"authorTime":"2019-02-12 14:06:14","codes":[{"authorDate":"2019-02-12 14:06:14","commitOrder":5,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::build);\n    }\n","date":"2019-02-12 14:06:14","endLine":627,"groupId":"8412","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/2915f064034a48d7b82076dddd6e5f3622c726.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.build();\n            fail(\"Should have thrown KafkaException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2019-02-12 14:06:14","commitOrder":5,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2019-02-12 14:06:14","endLine":663,"groupId":"8412","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/2915f064034a48d7b82076dddd6e5f3622c726.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() {\n        expectExceptionWithZStd(compressionType, RecordBatch.MAGIC_VALUE_V0);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V0, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"}],"commitId":"c7f99bc2bd9af5eb6ca9e20a02d5806c52d434b3","commitMessage":"@@@MINOR: Update JUnit to 4.13 and annotate log cleaner integration test (#6248)\n\nJUnit 4.13 fixes the issue where `Category` and `Parameterized` annotations\ncould not be used together. It also deprecates `ExpectedException` and\n`assertThat`. Given this.  we:\n\n- Replace `ExpectedException` with the newly introduced `assertThrows`.\n- Replace `Assert.assertThat` with `MatcherAssert.assertThat`.\n- Annotate `AbstractLogCleanerIntegrationTest` with `IntegrationTest` category.\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>.  David Arthur <mumrah@gmail.com>","date":"2019-02-12 14:06:14","modifiedFileCount":"40","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":6,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args args) {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic, args.compressionType);\n\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, args.compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::build);\n    }\n","date":"2021-01-14 08:17:45","endLine":708,"groupId":"8412","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/a3801f2e2b011d1049c2879d9a284e26bce88b.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted() {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::build);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":6,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args args) {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic, args.compressionType);\n\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, args.compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":744,"groupId":"8412","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/a3801f2e2b011d1049c2879d9a284e26bce88b.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted() {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic);\n\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-02-18 11:15:56","codes":[{"authorDate":"2021-02-18 11:15:56","commitOrder":7,"curCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, args.magic, args.compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::build);\n    }\n","date":"2021-02-18 11:15:56","endLine":686,"groupId":"103323","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnBuildWhenAborted","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/eaa9d21cba1291906138fb0a625835796c4a33.src","preCode":"    public void shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args args) {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic, args.compressionType);\n\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, args.compressionType,\n                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH,\n                RecordBatch.NO_SEQUENCE, false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::build);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"M"},{"authorDate":"2021-02-18 11:15:56","commitOrder":7,"curCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, args.magic, args.compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        assertThrows(IllegalStateException.class, builder::close, \"Should have thrown IllegalStateException\");\n    }\n","date":"2021-02-18 11:15:56","endLine":711,"groupId":"103323","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIllegalStateExceptionOnCloseWhenAborted","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/eaa9d21cba1291906138fb0a625835796c4a33.src","preCode":"    public void shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args args) {\n        byte magic = RecordBatch.MAGIC_VALUE_V0;\n        assumeAtLeastV2OrNotZstd(magic, args.compressionType);\n\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, magic, args.compressionType,\n                                                                TimestampType.CREATE_TIME, 0L, 0L, RecordBatch.NO_PRODUCER_ID, RecordBatch.NO_PRODUCER_EPOCH, RecordBatch.NO_SEQUENCE,\n                                                                false, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.abort();\n        try {\n            builder.close();\n            fail(\"Should have thrown IllegalStateException\");\n        } catch (IllegalStateException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"M"}],"commitId":"46690113cd0066e57f914539978cfdf69ebbef63","commitMessage":"@@@KAFKA-10885 Refactor MemoryRecordsBuilderTest/MemoryRecordsTest to avoid a lot of? (#9906)\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-02-18 11:15:56","modifiedFileCount":"2","status":"M","submitter":"Geordie"}]
