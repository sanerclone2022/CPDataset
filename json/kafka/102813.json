[{"authorTime":"2020-08-22 09:29:40","codes":[{"authorDate":"2020-08-22 09:29:40","commitOrder":2,"curCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        if (forward) {\n            iter.seek(from.get());\n            rawLastKey = to.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + to);\n            }\n        } else {\n            iter.seekForPrev(to.get());\n            rawLastKey = from.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + from);\n            }\n        }\n    }\n","date":"2020-08-22 09:29:40","endLine":56,"groupId":"13485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"RocksDBRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriter@finalSet<KeyValueIterator<Bytes@byte[]>>openIterators@finalBytesfrom@finalBytesto@finalbooleanforward)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/154860af3d2a2f8f58760a18fc5910edaf8d35.src","preCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        if (forward) {\n            iter.seek(from.get());\n            rawLastKey = to.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + to);\n            }\n        } else {\n            iter.seekForPrev(to.get());\n            rawLastKey = from.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + from);\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBRangeIterator.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2020-08-22 09:29:40","commitOrder":2,"curCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            if (forward) {\n                iterWithTimestamp.seek(from.get());\n                iterNoTimestamp.seek(from.get());\n                rawLastKey = to.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + to);\n                }\n            } else {\n                iterWithTimestamp.seekForPrev(to.get());\n                iterNoTimestamp.seekForPrev(to.get());\n                rawLastKey = from.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + from);\n                }\n            }\n        }\n","date":"2020-08-22 09:29:40","endLine":409,"groupId":"410","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"RocksDBDualCFRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriterWithTimestamp@finalRocksIteratoriterNoTimestamp@finalBytesfrom@finalBytesto@finalbooleanforward)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/6577513395e664d72923b15d3e1da703ef82ff.src","preCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            if (forward) {\n                iterWithTimestamp.seek(from.get());\n                iterNoTimestamp.seek(from.get());\n                rawLastKey = to.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + to);\n                }\n            } else {\n                iterWithTimestamp.seekForPrev(to.get());\n                iterNoTimestamp.seekForPrev(to.get());\n                rawLastKey = from.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + from);\n                }\n            }\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBTimestampedStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"MB"}],"commitId":"89d06780a0f5f27a7420fc2cd8063294367f6693","commitMessage":"@@@KAFKA-9929: Support reverse iterator on KeyValueStore (#9137)\n\nAdd new methods to KeyValueStore interfaces to support reverse iteration.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-08-22 09:29:40","modifiedFileCount":"43","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-02-04 02:26:30","codes":[{"authorDate":"2021-02-04 02:26:30","commitOrder":3,"curCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward,\n                         final boolean toInclusive) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        this.toInclusive = toInclusive;\n        if (forward) {\n            iter.seek(from.get());\n            rawLastKey = to.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + to);\n            }\n        } else {\n            iter.seekForPrev(to.get());\n            rawLastKey = from.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + from);\n            }\n        }\n    }\n","date":"2021-02-04 02:26:30","endLine":59,"groupId":"13485","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"RocksDBRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriter@finalSet<KeyValueIterator<Bytes@byte[]>>openIterators@finalBytesfrom@finalBytesto@finalbooleanforward@finalbooleantoInclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/76/46eb56e189085d2dc919fbb4b4cbfa1e55269f.src","preCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        if (forward) {\n            iter.seek(from.get());\n            rawLastKey = to.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + to);\n            }\n        } else {\n            iter.seekForPrev(to.get());\n            rawLastKey = from.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + from);\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBRangeIterator.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-02-04 02:26:30","commitOrder":3,"curCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward,\n                                   final boolean toInclusive) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            this.toInclusive = toInclusive;\n            if (forward) {\n                iterWithTimestamp.seek(from.get());\n                iterNoTimestamp.seek(from.get());\n                rawLastKey = to.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + to);\n                }\n            } else {\n                iterWithTimestamp.seekForPrev(to.get());\n                iterNoTimestamp.seekForPrev(to.get());\n                rawLastKey = from.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + from);\n                }\n            }\n        }\n","date":"2021-02-04 02:26:30","endLine":427,"groupId":"410","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"RocksDBDualCFRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriterWithTimestamp@finalRocksIteratoriterNoTimestamp@finalBytesfrom@finalBytesto@finalbooleanforward@finalbooleantoInclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/3d17560bf3e4c77390ffb36ecca65665235434.src","preCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            if (forward) {\n                iterWithTimestamp.seek(from.get());\n                iterNoTimestamp.seek(from.get());\n                rawLastKey = to.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + to);\n                }\n            } else {\n                iterWithTimestamp.seekForPrev(to.get());\n                iterNoTimestamp.seekForPrev(to.get());\n                rawLastKey = from.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + from);\n                }\n            }\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBTimestampedStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"51833bf37c7ab5ce24aed82749d45f5c8550d12f","commitMessage":"@@@KAFKA-10648: Add Prefix Scan support to State Stores (#9508)\n\nAdd prefix scan support to State stores. Currently.  only RocksDB and InMemory key value stores are being supported.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-02-04 02:26:30","modifiedFileCount":"18","status":"M","submitter":"vamossagar12"},{"authorTime":"2021-07-30 10:52:16","codes":[{"authorDate":"2021-07-30 10:52:16","commitOrder":4,"curCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward,\n                         final boolean toInclusive) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        this.toInclusive = toInclusive;\n        if (forward) {\n            if (from == null) {\n                iter.seekToFirst();\n            } else {\n                iter.seek(from.get());\n            }\n            rawLastKey = to == null ? null : to.get();\n        } else {\n            if (to == null) {\n                iter.seekToLast();\n            } else {\n                iter.seekForPrev(to.get());\n            }\n            rawLastKey = from == null ? null : from.get();\n        }\n    }\n","date":"2021-07-30 10:52:16","endLine":61,"groupId":"102813","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"RocksDBRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriter@finalSet<KeyValueIterator<Bytes@byte[]>>openIterators@finalBytesfrom@finalBytesto@finalbooleanforward@finalbooleantoInclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/e220126184df1cc6bafeeb332e3884914f55fc.src","preCode":"    RocksDBRangeIterator(final String storeName,\n                         final RocksIterator iter,\n                         final Set<KeyValueIterator<Bytes, byte[]>> openIterators,\n                         final Bytes from,\n                         final Bytes to,\n                         final boolean forward,\n                         final boolean toInclusive) {\n        super(storeName, iter, openIterators, forward);\n        this.forward = forward;\n        this.toInclusive = toInclusive;\n        if (forward) {\n            iter.seek(from.get());\n            rawLastKey = to.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + to);\n            }\n        } else {\n            iter.seekForPrev(to.get());\n            rawLastKey = from.get();\n            if (rawLastKey == null) {\n                throw new NullPointerException(\"RocksDBRangeIterator: RawLastKey is null for key \" + from);\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBRangeIterator.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-07-30 10:52:16","commitOrder":4,"curCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward,\n                                   final boolean toInclusive) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            this.toInclusive = toInclusive;\n            if (forward) {\n                if (from == null) {\n                    iterWithTimestamp.seekToFirst();\n                    iterNoTimestamp.seekToFirst();\n                } else {\n                    iterWithTimestamp.seek(from.get());\n                    iterNoTimestamp.seek(from.get());\n                }\n                rawLastKey = to == null ? null : to.get();\n            } else {\n                if (to == null) {\n                    iterWithTimestamp.seekToLast();\n                    iterNoTimestamp.seekToLast();\n                } else {\n                    iterWithTimestamp.seekForPrev(to.get());\n                    iterNoTimestamp.seekForPrev(to.get());\n                }\n                rawLastKey = from == null ? null : from.get();\n            }\n        }\n","date":"2021-07-30 10:52:16","endLine":447,"groupId":"102813","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"RocksDBDualCFRangeIterator","params":"(finalStringstoreName@finalRocksIteratoriterWithTimestamp@finalRocksIteratoriterNoTimestamp@finalBytesfrom@finalBytesto@finalbooleanforward@finalbooleantoInclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/56e44e34296eba1ae4bcc96a5ae9b965e58bc5.src","preCode":"        RocksDBDualCFRangeIterator(final String storeName,\n                                   final RocksIterator iterWithTimestamp,\n                                   final RocksIterator iterNoTimestamp,\n                                   final Bytes from,\n                                   final Bytes to,\n                                   final boolean forward,\n                                   final boolean toInclusive) {\n            super(storeName, iterWithTimestamp, iterNoTimestamp, forward);\n            this.forward = forward;\n            this.toInclusive = toInclusive;\n            if (forward) {\n                iterWithTimestamp.seek(from.get());\n                iterNoTimestamp.seek(from.get());\n                rawLastKey = to.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + to);\n                }\n            } else {\n                iterWithTimestamp.seekForPrev(to.get());\n                iterNoTimestamp.seekForPrev(to.get());\n                rawLastKey = from.get();\n                if (rawLastKey == null) {\n                    throw new NullPointerException(\"RocksDBDualCFRangeIterator: rawLastKey is null for key \" + from);\n                }\n            }\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBTimestampedStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"22541361b7c62913bc848fb03e5f807e152a1023","commitMessage":"@@@Add support for infinite endpoints for range queries (#11120)\n\nAdd support to open endpoint range queries in key-value stores\n\nImplements: KIP-763\n\nReviewers: Almog Gavra <almog@confluent.io>.  Luke Chen <showuon@gmail.com>.  John Roesler <vvcephei@apache.org>","date":"2021-07-30 10:52:16","modifiedFileCount":"14","status":"M","submitter":"Patrick Stuedi"}]
