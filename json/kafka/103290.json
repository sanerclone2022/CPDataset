[{"authorTime":"2017-04-21 04:01:46","codes":[{"authorDate":"2017-04-21 04:01:46","commitOrder":2,"curCode":"    public void buildDefaultRecordBatch() {\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(RecordBatch.NO_PRODUCER_ID, batch.producerId());\n            assertEquals(RecordBatch.NO_PRODUCER_EPOCH, batch.producerEpoch());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.baseSequence());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","date":"2017-04-21 04:01:46","endLine":58,"groupId":"10976","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDefaultRecordBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/0c5b261ca70fa7fee5508c2a919cd9bc158123.src","preCode":"    public void buildDefaultRecordBatch() {\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(RecordBatch.NO_PRODUCER_ID, batch.producerId());\n            assertEquals(RecordBatch.NO_PRODUCER_EPOCH, batch.producerEpoch());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.baseSequence());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordBatchTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"MB"},{"authorDate":"2017-04-21 04:01:46","commitOrder":2,"curCode":"    public void buildDefaultRecordBatchWithProducerId() {\n        long pid = 23423L;\n        short epoch = 145;\n        int baseSequence = 983;\n\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L, RecordBatch.NO_TIMESTAMP, pid, epoch, baseSequence);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(pid, batch.producerId());\n            assertEquals(epoch, batch.producerEpoch());\n            assertEquals(baseSequence, batch.baseSequence());\n            assertEquals(baseSequence + 1, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","date":"2017-04-21 04:01:46","endLine":88,"groupId":"30","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDefaultRecordBatchWithProducerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/0c5b261ca70fa7fee5508c2a919cd9bc158123.src","preCode":"    public void buildDefaultRecordBatchWithProducerId() {\n        long pid = 23423L;\n        short epoch = 145;\n        int baseSequence = 983;\n\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L, RecordBatch.NO_TIMESTAMP, pid, epoch, baseSequence);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(pid, batch.producerId());\n            assertEquals(epoch, batch.producerEpoch());\n            assertEquals(baseSequence, batch.baseSequence());\n            assertEquals(baseSequence + 1, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordBatchTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"588ed4644fe8842e4217c8e2add39f6e08e07db9","commitMessage":"@@@MINOR: Improvements to PID snapshot management\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jun Rao <junrao@gmail.com>\n\nCloses #2866 from hachikuji/improve-snapshot-management\n","date":"2017-04-21 04:01:46","modifiedFileCount":"5","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-04-19 21:40:07","codes":[{"authorDate":"2021-04-19 21:40:07","commitOrder":3,"curCode":"    public void buildDefaultRecordBatch() {\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(RecordBatch.NO_PRODUCER_ID, batch.producerId());\n            assertEquals(RecordBatch.NO_PRODUCER_EPOCH, batch.producerEpoch());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.baseSequence());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.lastSequence());\n\n            for (Record record : batch) record.ensureValid();\n        }\n    }\n","date":"2021-04-19 21:40:07","endLine":99,"groupId":"103290","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDefaultRecordBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/06/5f1b51b39aa291f7cb2b8f16cd9d8d3e1d84e5.src","preCode":"    public void buildDefaultRecordBatch() {\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(RecordBatch.NO_PRODUCER_ID, batch.producerId());\n            assertEquals(RecordBatch.NO_PRODUCER_EPOCH, batch.producerEpoch());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.baseSequence());\n            assertEquals(RecordBatch.NO_SEQUENCE, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordBatchTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-04-19 21:40:07","commitOrder":3,"curCode":"    public void buildDefaultRecordBatchWithProducerId() {\n        long pid = 23423L;\n        short epoch = 145;\n        int baseSequence = 983;\n\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L, RecordBatch.NO_TIMESTAMP, pid, epoch, baseSequence);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(pid, batch.producerId());\n            assertEquals(epoch, batch.producerEpoch());\n            assertEquals(baseSequence, batch.baseSequence());\n            assertEquals(baseSequence + 1, batch.lastSequence());\n\n            for (Record record : batch) record.ensureValid();\n        }\n    }\n","date":"2021-04-19 21:40:07","endLine":127,"groupId":"103290","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDefaultRecordBatchWithProducerId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/06/5f1b51b39aa291f7cb2b8f16cd9d8d3e1d84e5.src","preCode":"    public void buildDefaultRecordBatchWithProducerId() {\n        long pid = 23423L;\n        short epoch = 145;\n        int baseSequence = 983;\n\n        ByteBuffer buffer = ByteBuffer.allocate(2048);\n\n        MemoryRecordsBuilder builder = MemoryRecords.builder(buffer, RecordBatch.MAGIC_VALUE_V2, CompressionType.NONE,\n                TimestampType.CREATE_TIME, 1234567L, RecordBatch.NO_TIMESTAMP, pid, epoch, baseSequence);\n        builder.appendWithOffset(1234567, 1L, \"a\".getBytes(), \"v\".getBytes());\n        builder.appendWithOffset(1234568, 2L, \"b\".getBytes(), \"v\".getBytes());\n\n        MemoryRecords records = builder.build();\n        for (MutableRecordBatch batch : records.batches()) {\n            assertTrue(batch.isValid());\n            assertEquals(1234567, batch.baseOffset());\n            assertEquals(1234568, batch.lastOffset());\n            assertEquals(2L, batch.maxTimestamp());\n            assertEquals(pid, batch.producerId());\n            assertEquals(epoch, batch.producerEpoch());\n            assertEquals(baseSequence, batch.baseSequence());\n            assertEquals(baseSequence + 1, batch.lastSequence());\n\n            for (Record record : batch) {\n                assertTrue(record.isValid());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordBatchTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"937054bb5e424d07075a758aad46abea129d0b24","commitMessage":"@@@MINOR: remove `checksumOrNull` and `isValid` from Record (#10498)\n\n1. rewrite the checksum of DumpLogSegments\n2. remove checksumOrNull and isValid from Record\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-04-19 21:40:07","modifiedFileCount":"5","status":"M","submitter":"Chia-Ping Tsai"}]
