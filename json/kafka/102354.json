[{"authorTime":"2020-03-03 00:22:01","codes":[{"authorDate":"2020-04-01 07:39:28","commitOrder":7,"curCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-04-01 07:39:28","endLine":165,"groupId":"9710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetCommitRatioSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/b5708ad7c3170e1ab431f6e6d3967affb4e27f.src","preCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2020-03-03 00:22:01","commitOrder":7,"curCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":275,"groupId":"913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetPunctuateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"NB"}],"commitId":"353aa6206d43b4923d21510797709bbbb210f6b6","commitMessage":"@@@KAFKA-9753: Add active tasks process ratio (#8370)\n\nMeasure the percentage ratio the stream thread spent on processing each task among all assigned active tasks (KIP-444). Also add unit tests to cover the added metrics in this PR and the previous #8358. Also trying to fix the flaky test reported in KAFKA-5842\n\nCo-authored-by: John Roesler <vvcephei@apache.org>\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-01 07:39:28","modifiedFileCount":"12","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":282,"groupId":"9710","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetCommitRatioSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":341,"groupId":"913","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetPunctuateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":9,"curCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":248,"groupId":"102354","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetCommitRatioSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetCommitRatioSensor() {\n        final String operation = \"commit-ratio\";\n        final String ratioDescription = \"The fraction of time the thread spent on committing all tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addValueMetricToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            ratioDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.commitRatioSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":9,"curCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":303,"groupId":"102354","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetPunctuateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetPunctuateSensor() {\n        final String operation = \"punctuate\";\n        final String operationLatency = operation + StreamsMetricsImpl.LATENCY_SUFFIX;\n        final String totalDescription = \"The total number of calls to punctuate\";\n        final String rateDescription = \"The average per-second number of calls to punctuate\";\n        final String avgLatencyDescription = \"The average punctuate latency\";\n        final String maxLatencyDescription = \"The maximum punctuate latency\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operationLatency,\n            avgLatencyDescription,\n            maxLatencyDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.punctuateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
