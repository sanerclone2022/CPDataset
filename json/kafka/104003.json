[{"authorTime":"2015-10-29 05:14:11","codes":[{"authorDate":"2015-11-05 03:02:30","commitOrder":2,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2015-11-05 03:02:30","endLine":163,"groupId":"1232","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/d6d88720aa89c81df199f4f1819c6feb57eedb.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2015-10-29 05:14:11","commitOrder":2,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2015-10-29 05:14:11","endLine":275,"groupId":"1233","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/3da420fe6197abd33f16f6e9477ff26ba9ea9c.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"NB"}],"commitId":"c39e79bb5af5b4e56bec358f8ec3758e6822dbcf","commitMessage":"@@@KAFKA-2691: Improve handling of authorization failure during metadata refresh\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jun Rao\n\nCloses #394 from hachikuji/KAFKA-2691\n","date":"2015-11-05 03:02:30","modifiedFileCount":"30","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-05-06 03:03:28","codes":[{"authorDate":"2016-05-06 03:03:28","commitOrder":3,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2016-05-06 03:03:28","endLine":159,"groupId":"14868","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2016-05-06 03:03:28","commitOrder":3,"curCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2016-05-06 03:03:28","endLine":289,"groupId":"1460","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"32bf83e5a792c5ee9eb88660da71b73aad5bbc02","commitMessage":"@@@KAFKA-3659: Handle coordinator disconnects more gracefully in client\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Grant Henke <granthenke@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1322 from hachikuji/KAFKA-3659\n","date":"2016-05-06 03:03:28","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-18 02:50:04","codes":[{"authorDate":"2016-08-18 02:50:04","commitOrder":4,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-18 02:50:04","endLine":159,"groupId":"14868","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2016-08-18 02:50:04","commitOrder":4,"curCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-18 02:50:04","endLine":289,"groupId":"1460","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"40b1dd3f495a59abef8a0cba5450526994c92c04","commitMessage":"@@@KAFKA-3888: send consumer heartbeats from a background thread (KIP-62)\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1627 from hachikuji/KAFKA-3888\n","date":"2016-08-18 02:50:04","modifiedFileCount":"24","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-20 12:59:55","codes":[{"authorDate":"2016-08-20 12:59:55","commitOrder":5,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-20 12:59:55","endLine":163,"groupId":"14868","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/86e6c0c4e2f454c9845dbe5c76a53bf15ec3b0.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2016-08-20 12:59:55","commitOrder":5,"curCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-20 12:59:55","endLine":292,"groupId":"1460","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/86e6c0c4e2f454c9845dbe5c76a53bf15ec3b0.src","preCode":"    public void testJoinGroupInvalidGroupId() { \n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"317c4fdede41f2026b34f473af1ad69f8ee62a1d","commitMessage":"@@@KAFKA-3949: Fix race condition when metadata update arrives during rebalance\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Vahid Hashemian.  Guozhang Wang\n\nCloses #1762 from hachikuji/KAFKA-3949\n","date":"2016-08-20 12:59:55","modifiedFileCount":"11","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-01-16 18:56:03","codes":[{"authorDate":"2016-08-20 12:59:55","commitOrder":6,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-20 12:59:55","endLine":163,"groupId":"14868","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/86e6c0c4e2f454c9845dbe5c76a53bf15ec3b0.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"},{"authorDate":"2017-01-16 18:56:03","commitOrder":6,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-01-16 18:56:03","endLine":297,"groupId":"1460","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/8c0b93de6d94f8f0dcc5fcafea06423db9f548.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        \r\n        metadata.setTopics(Arrays.asList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"b712b8675d6977a9171edc6569cf382ffcd91354","commitMessage":"@@@KAFKA-4622; Consumer should handle group authorization errors in offset fetch\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #2384 from hachikuji/KAFKA-4622\n","date":"2017-01-16 18:56:03","modifiedFileCount":"3","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-01-24 02:45:45","codes":[{"authorDate":"2017-01-24 02:45:45","commitOrder":7,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-01-24 02:45:45","endLine":175,"groupId":"14868","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2017-01-24 02:45:45","commitOrder":7,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-01-24 02:45:45","endLine":304,"groupId":"1460","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topicName));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"3400d0c3cc07d5d3136bf9a19142b36cca93f92d","commitMessage":"@@@KAFKA-4633; Always using regex pattern subscription in StreamThread\n\n1. In StreamThread.  always use subscribe(Pattern.  ..) function in order to avoid sending MetadataRequest with specific topic names and cause brokers to possibly auto-create subscribed topics; the pattern is generated as \"topic-1|topic-2..|topic-n\".\n\n2. In ConsumerCoordinator.  let the leader to refresh its metadata if the generated assignment contains some topics that is not contained in the subscribed topics; also in SubscriptionState.  modified the verification for regex subscription to against the regex pattern instead of the matched topics since the returned assignment may contain some topics not yet created when joining the group but existed after the rebalance; also modified some unit tests in `KafkaConsumerTest` to accommodate the above changes.\n\n3. Minor cleanup: changed String[] to List<String> to avoid overloaded functions.\n\n4. Minor cleanup: enforced strong typing in SinkNodeFactory and removed unnecessary unchecked tags.\n\n5. Minor cleanup: augmented unit test error message and fixed a potential transient failure in KafkaStreamTest.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2379 from guozhangwang/K4633-regex-pattern\n","date":"2017-01-24 02:45:45","modifiedFileCount":"19","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-02-10 13:03:46","codes":[{"authorDate":"2017-02-10 13:03:46","commitOrder":8,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-02-10 13:03:46","endLine":174,"groupId":"17668","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2017-02-10 13:03:46","commitOrder":8,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-02-10 13:03:46","endLine":303,"groupId":"6284","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"9898d665d1ab201405d66c70e3ea9710d9dcecd7","commitMessage":"@@@MINOR: Use an explicit `Errors` object when possible instead of a numeric error code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2475 from vahidhashemian/minor/use_explicit_Errors_type_when_possible\n","date":"2017-02-10 13:03:46","modifiedFileCount":"48","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2017-03-03 09:49:01","codes":[{"authorDate":"2017-02-10 13:03:46","commitOrder":9,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-02-10 13:03:46","endLine":174,"groupId":"17668","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"N"},{"authorDate":"2017-03-03 09:49:01","commitOrder":9,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2017-03-03 09:49:10","endLine":303,"groupId":"3150","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/ce87472d444c77b2e9f78f153245b0412552f3.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"a3c45b0c9263ca4481b1af7af3f7d8ae8cb5d5cd","commitMessage":"@@@KAFKA-4631; Request metadata in consumer if topic/partitions unavailable\n\nIf leader node of one more more partitions in a consumer subscription are temporarily unavailable.  request metadata refresh so that partitions skipped for assignment dont have to wait for metadata expiry before reassignment. Metadata refresh is also requested if a subscribe topic or assigned partition doesn't exist.\n\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nReviewers: Vahid Hashemian <vahidhashemian@us.ibm.com>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2622 from rajinisivaram/KAFKA-4631\n","date":"2017-03-03 09:49:10","modifiedFileCount":"17","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2017-05-25 18:23:18","codes":[{"authorDate":"2017-05-25 18:23:18","commitOrder":10,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds(), Long.MAX_VALUE);\n    }\n","date":"2017-05-25 18:23:18","endLine":174,"groupId":"17668","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/77/0d4f7f652524666041427b5eab85c8a7678ce4.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2017-05-25 18:23:18","commitOrder":10,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds(), Long.MAX_VALUE);\n    }\n","date":"2017-05-25 18:23:18","endLine":303,"groupId":"3150","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/77/0d4f7f652524666041427b5eab85c8a7678ce4.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"64fc1a7cae348fad10e84c5ebc457c2a391573ee","commitMessage":"@@@KAFKA-5263: Avoid tight polling loop in consumer with no ready nodes\n\nFor consumers with manual partition assignment.  await metadata when there are no ready nodes to avoid busy polling.\n\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #3124 from rajinisivaram/KAFKA-5263\n","date":"2017-05-25 18:23:18","modifiedFileCount":"8","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2018-05-27 02:50:51","codes":[{"authorDate":"2018-05-27 02:50:51","commitOrder":11,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(Long.MAX_VALUE);\n    }\n","date":"2018-05-27 02:50:51","endLine":178,"groupId":"15922","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.milliseconds(), Long.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2018-05-27 02:50:51","commitOrder":11,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(Long.MAX_VALUE);\n    }\n","date":"2018-05-27 02:50:51","endLine":365,"groupId":"20402","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.milliseconds(), Long.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"c470ff70d3e829c8b12f6eb6cc812c4162071a1f","commitMessage":"@@@KAFKA-5697; Implement new consumer poll API from KIP-266 (#4855)\n\nAdd the new stricter-timeout version of `poll` proposed in KIP-266.\n\nThe pre-existing variant `poll(long timeout)` would block indefinitely for metadata\nupdates if they were needed.  then it would issue a fetch and poll for `timeout` ms \nfor new records. The initial indefinite metadata block caused applications to become\nstuck when the brokers became unavailable. The existence of the timeout parameter\nmade the indefinite block especially unintuitive.\n\nThis PR adds `poll(Duration timeout)` with the semantics:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses (counts against timeout)\n        - if no response within timeout.  **return an empty collection immediately**\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nThe old method.  `poll(long timeout)` is deprecated.  but we do not change its semantics.  so it remains:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses *indefinitely until we get it*\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nOne notable usage is prohibited by the new `poll`: previously.  you could call `poll(0)` to block for metadata updates.  for example to initialize the client.  supposedly without fetching records. Note.  though.  that this behavior is not according to any contract.  and there is no guarantee that `poll(0)` won't return records the first time it's called. Therefore.  it has always been unsafe to ignore the response.","date":"2018-05-27 02:50:51","modifiedFileCount":"20","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 08:25:07","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":12,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":182,"groupId":"3922","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(Long.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2018-08-04 08:25:07","commitOrder":12,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":369,"groupId":"2591","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(Long.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"fc5f6b0e46ff81302b3e445fed0cdf454c942792","commitMessage":"@@@MINOR: Add Timer to simplify timeout bookkeeping and use it in the consumer (#5087)\n\nWe currently do a lot of bookkeeping for timeouts which is both error-prone and distracting. This patch adds a new `Timer` class to simplify this logic and control unnecessary calls to system time. In particular.  this helps with nested timeout operations. The consumer has been updated to use the new class.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-04 08:25:07","modifiedFileCount":"17","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-10-31 04:20:13","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":13,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":182,"groupId":"3922","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"},{"authorDate":"2018-10-31 04:20:13","commitOrder":13,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-10-31 04:20:13","endLine":377,"groupId":"2591","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/808c87feca62592bd1224fc549e2c40021f814.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        metadata.update(cluster, Collections.<String>emptySet(), time.milliseconds());\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"d71cb54672e63d2f0f4b999668336642a9a63a1d","commitMessage":"@@@KAFKA-7567; Clean up internal metadata usage for consistency and extensibility (#5813)\n\nThis patch makes two improvements to internal metadata handling logic and testing:\n\n1. It reduce dependence on the public object `Cluster` for internal metadata propagation since it is not easy to evolve. As an example.  we need to propagate leader epochs from the metadata response to `Metadata`.  but it is not straightforward to do this without exposing it in `PartitionInfo` since that is what `Cluster` uses internally. By doing this change.  we are able to remove some redundant `Cluster` building logic. \n2. We want to make the metadata handling in `MockClient` simpler and more consistent. Currently we have mix of metadata update mechanisms which are internally inconsistent with each other and do not match the implementation in `NetworkClient`.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-10-31 04:20:13","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-03-08 08:29:19","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":14,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":182,"groupId":"3922","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"},{"authorDate":"2019-03-08 08:29:19","commitOrder":14,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2019-03-08 08:29:19","endLine":378,"groupId":"2591","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/5b3574034e31a76f7223d746d9aab455eca203.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        metadata.setTopics(singletonList(topic1));\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"}],"commitId":"460e46c3bb76a361d0706b263c03696005e12566","commitMessage":"@@@KAFKA-7831; Do not modify subscription state from background thread (#6221)\n\nMetadata may be updated from the background thread.  so we need to protect access to SubscriptionState. This patch restructures the metadata handling so that we only check pattern subscriptions in the foreground. Additionally.  it improves the following:\n\n1. SubscriptionState is now the source of truth for the topics that will be fetched. We had a lot of messy logic previously to try and keep the the topic set in Metadata consistent with the subscription.  so this simplifies the logic.\n2. The metadata needs for the producer and consumer are quite different.  so it made sense to separate the custom logic into separate extensions of Metadata. For example.  only the producer requires topic expiration.\n3. We've always had an edge case in which a metadata change with an inflight request may cause us to effectively miss an expected update. This patch implements a separate version inside Metadata which is bumped when the needed topics changes.\n4. This patch removes the MetadataListener.  which was the cause of https://issues.apache.org/jira/browse/KAFKA-7764. \n\nReviewers: David Arthur <mumrah@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2019-03-08 08:29:19","modifiedFileCount":"30","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-08-09 05:31:22","codes":[{"authorDate":"2019-08-09 05:31:22","commitOrder":15,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2019-08-09 05:31:22","endLine":256,"groupId":"14598","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/d3529ea10e4bc44a9753601bd61b35f4f3fec9.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.<String, List<String>>emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2019-08-09 05:31:22","commitOrder":15,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","date":"2019-08-09 05:31:22","endLine":467,"groupId":"8740","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/d3529ea10e4bc44a9753601bd61b35f4f3fec9.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.<String, List<String>>emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"e867a58425876767b952e06892c72b5e13066acc","commitMessage":"@@@KAFKA-8179: Part 3.  Add PartitionsLost API for resetGenerations and metadata/subscription change (#6884)\n\n1. Add onPartitionsLost into the RebalanceListener.  which will be triggered when the consumer found that the generation is reset due to fatal errors in response handling.\n\n2. Semantical behavior change: with COOPERATIVE protocol.  if the revoked / lost partitions are empty.  do not trigger the corresponding callback at all. For added partitions though.  even if it is empty we would still trigger the callback as a way to notify the rebalance event; with EAGER protocol.  revoked / assigned callbacks are always triggered.\n\nThe ordering of the callback would be the following:\n\na. Callback onPartitionsRevoked / onPartitionsLost triggered.\nb. Update the assignment (both revoked and added).\nc. Callback onPartitionsAssigned triggered.\n\nIn this way we are assured that users can still access the partitions being revoked.  whereas they can also access the partitions being added.\n\n3. Semantical behavior change (KAFKA-4600): if the rebalance listener throws an exception.  pass it along all the way to the consumer.poll caller.  but still completes the rest of the actions. Also.  the newly assigned partitions list does not gets affected with exception thrown since it is just for notifying the users.\n\n4. Semantical behavior change: the ConsumerCoordinator would not try to modify assignor's returned assignments.  instead it will validate that assignments and set the error code accordingly: if there are overlaps between added / revoked partitions.  it is a fatal error and would be communicated to all members to stop; if revoked is not empty.  it is an error indicate re-join; otherwise.  it is normal.\n\n5. Minor: with the error code removed from the Assignment.  ConsumerCoordinator will request re-join if the revoked partitions list is not empty.\n\n6. Updated ConsumerCoordinatorTest accordingly. Also found a minor bug in MetadataUpdate that removed topic would still be retained with null value of num.partitions.\n\n6. Updated a few other flaky tests that are exposed due to this change.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Jason Gustafson <jason@confluent.io>","date":"2019-08-09 05:31:22","modifiedFileCount":"15","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":16,"curCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        assertThrows(GroupAuthorizationException.class, () -> coordinator.poll(time.timer(Long.MAX_VALUE)));\n    }\n","date":"2021-01-10 20:20:13","endLine":325,"groupId":"104003","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupReadUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/e73d30c830b3db4a714e3b20ee3ceddd783f5e.src","preCode":"    public void testGroupReadUnauthorized() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, \"memberId\", Collections.emptyMap(),\n                Errors.GROUP_AUTHORIZATION_FAILED));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2021-01-10 20:20:13","commitOrder":16,"curCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        assertThrows(ApiException.class, () -> coordinator.poll(time.timer(Long.MAX_VALUE)));\n    }\n","date":"2021-01-10 20:20:13","endLine":689,"groupId":"104003","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupInvalidGroupId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/e73d30c830b3db4a714e3b20ee3ceddd783f5e.src","preCode":"    public void testJoinGroupInvalidGroupId() {\n        final String consumerId = \"leader\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        \r\n        client.updateMetadata(metadataResponse);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        client.prepareResponse(joinGroupLeaderResponse(0, consumerId, Collections.emptyMap(),\n                Errors.INVALID_GROUP_ID));\n        coordinator.poll(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"}]
