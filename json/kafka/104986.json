[{"authorTime":"2017-04-05 06:07:32","codes":[{"authorDate":"2017-04-05 06:07:32","commitOrder":1,"curCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-04-05 06:07:32","endLine":236,"groupId":"17473","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateConfigWithSimpleName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/8b520dedc9aaff9da998a552dcf7bb92fa60dc.src","preCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"},{"authorDate":"2017-04-05 06:07:32","commitOrder":1,"curCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-04-05 06:07:32","endLine":280,"groupId":"17473","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConfigWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/8b520dedc9aaff9da998a552dcf7bb92fa60dc.src","preCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"9160810072e540a3a037481505aaaa23e3b50546","commitMessage":"@@@KAFKA-4837: Fix class name comparison in connector-plugins REST endpoint\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2798 from kkonstantine/KAFKA-4837-Config-validation-in-Connector-plugins-need-to-compare-against-both-canonical-and-simple-class-names\n","date":"2017-04-05 06:07:32","modifiedFileCount":"2","status":"B","submitter":"Konstantine Karantasis"},{"authorTime":"2018-11-08 00:23:19","codes":[{"authorDate":"2018-11-08 00:23:19","commitOrder":2,"curCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-08 00:23:19","endLine":279,"groupId":"17473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateConfigWithSimpleName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/b5ad78d32aec44962448bd1e9498cc48da7975.src","preCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2018-11-08 00:23:19","commitOrder":2,"curCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-08 00:23:19","endLine":320,"groupId":"17473","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConfigWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/b5ad78d32aec44962448bd1e9498cc48da7975.src","preCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer(new IAnswer<ConfigInfos>() {\n            @Override\n            public ConfigInfos answer() {\n                ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n                List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n                Connector connector = new ConnectorPluginsResourceTestConnector();\n                Config config = connector.validate(props);\n                ConfigDef configDef = connector.config();\n                Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n                List<ConfigValue> configValues = config.configValues();\n\n                Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n                resultConfigKeys.putAll(connectorConfigDef.configKeys());\n                configValues.addAll(connectorConfigValues);\n\n                return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n                );\n            }\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"8abbf33b5978b93354ae35c5e21c474816c9cc76","commitMessage":"@@@KAFKA-7431: Clean up connect unit tests\n\n[KAFKA-7431](https://issues.apache.org/jira/browse/KAFKA-7431)\n\nChanges made to improve the code readability:\n - Removed `throws Exception` from the place where there won't be an\n exception\n - Removed type arguments where those can be inferred explicitly by compiler\n - Rewritten Anonymous classes to Java 8 with lambdas\n\nAuthor: Srinivas Reddy <mrsrinivas@users.noreply.github.com>\nAuthor: Srinivas Reddy <srinivas96alluri@gmail.com>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Ryanne Dolan <ryannedolan@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5681 from mrsrinivas/cleanup-connect-uts\n","date":"2018-11-08 00:23:19","modifiedFileCount":"17","status":"M","submitter":"Srinivas Reddy"},{"authorTime":"2020-03-25 07:41:58","codes":[{"authorDate":"2020-03-25 07:41:58","commitOrder":3,"curCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-03-25 07:41:58","endLine":283,"groupId":"17473","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateConfigWithSimpleName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/ef29f6212d979ebdccfd907010671cf27e5baf.src","preCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2020-03-25 07:41:58","commitOrder":3,"curCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-03-25 07:41:58","endLine":324,"groupId":"17473","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConfigWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/ef29f6212d979ebdccfd907010671cf27e5baf.src","preCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props));\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"a5c257890e843ea7d755aee8ecde2e4e4f89d0ab","commitMessage":"@@@MINOR: Add method to Herder to control logging of connector configs during validation (#8263)\n\n* The Herder interface is extended with a default method that allows choosing whether to log all the connector configurations during connector validation or not. \n\n* The `PUT /connector-plugins/{connector-type}/config/validate` is modified to stop logging the connector's configurations when a validation request is hitting this endpoint. Validations during creation or reconfiguration of a connector are still logging all the connector configurations at the INFO level.  which is useful in general and during troubleshooting in particular. \n\nCo-authored-by: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ismael Juma <github@juma.me.uk> ","date":"2020-03-25 07:41:58","modifiedFileCount":"4","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":4,"curCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        Capture<Callback<ConfigInfos>> configInfosCallback = EasyMock.newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.capture(configInfosCallback), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            ConfigInfos configInfos = AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n            configInfosCallback.getValue().onCompletion(null, configInfos);\n            return null;\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":291,"groupId":"104986","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateConfigWithSimpleName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/e5d8217164179828b69ae613464d7330226117.src","preCode":"    public void testValidateConfigWithSimpleName() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            ConnectorPluginsResourceTestConnector.class.getSimpleName(),\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-06-11 16:29:23","commitOrder":4,"curCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        Capture<Callback<ConfigInfos>> configInfosCallback = EasyMock.newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.capture(configInfosCallback), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            ConfigInfos configInfos = AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n            configInfosCallback.getValue().onCompletion(null, configInfos);\n            return null;\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":335,"groupId":"104986","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateConfigWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/e5d8217164179828b69ae613464d7330226117.src","preCode":"    public void testValidateConfigWithAlias() throws Throwable {\n        herder.validateConnectorConfig(EasyMock.eq(props), EasyMock.anyBoolean());\n\n        PowerMock.expectLastCall().andAnswer((IAnswer<ConfigInfos>) () -> {\n            ConfigDef connectorConfigDef = ConnectorConfig.configDef();\n            List<ConfigValue> connectorConfigValues = connectorConfigDef.validate(props);\n\n            Connector connector = new ConnectorPluginsResourceTestConnector();\n            Config config = connector.validate(props);\n            ConfigDef configDef = connector.config();\n            Map<String, ConfigDef.ConfigKey> configKeys = configDef.configKeys();\n            List<ConfigValue> configValues = config.configValues();\n\n            Map<String, ConfigDef.ConfigKey> resultConfigKeys = new HashMap<>(configKeys);\n            resultConfigKeys.putAll(connectorConfigDef.configKeys());\n            configValues.addAll(connectorConfigValues);\n\n            return AbstractHerder.generateResult(\n                    ConnectorPluginsResourceTestConnector.class.getName(),\n                    resultConfigKeys,\n                    configValues,\n                    Collections.singletonList(\"Test\")\n            );\n        });\n\n        PowerMock.replayAll();\n\n        \r\n        ConfigInfos configInfos = connectorPluginsResource.validateConfigs(\n            \"ConnectorPluginsResourceTest\",\n            props\n        );\n        assertEquals(CONFIG_INFOS.name(), configInfos.name());\n        assertEquals(0, configInfos.errorCount());\n        assertEquals(CONFIG_INFOS.groups(), configInfos.groups());\n        assertEquals(new HashSet<>(CONFIG_INFOS.values()), new HashSet<>(configInfos.values()));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorPluginsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"}]
