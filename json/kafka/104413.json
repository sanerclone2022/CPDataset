[{"authorTime":"2021-03-20 01:09:38","codes":[{"authorDate":"2021-03-20 01:09:38","commitOrder":1,"curCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, new OffsetAndEpoch(20, 2)),\n                resultOffsetAndEpoch);\n    }\n","date":"2021-03-20 01:09:38","endLine":739,"groupId":"10441","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/7f1310ac032d23d0ae023ecbe0f566413f792b.src","preCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, new OffsetAndEpoch(20, 2)),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"B"},{"authorDate":"2021-03-20 01:09:38","commitOrder":1,"curCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, olderEpochSnapshotId),\n                resultOffsetAndEpoch);\n    }\n","date":"2021-03-20 01:09:38","endLine":758,"groupId":"10441","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateEpochLessThanFirstEpochInLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/7f1310ac032d23d0ae023ecbe0f566413f792b.src","preCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, olderEpochSnapshotId),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"B"}],"commitId":"a19806f2628e79baa2dbf84ea307787af7ca186f","commitMessage":"@@@KAFKA-12253: Add tests that cover all of the cases for ReplicatedLog's validateOffsetAndEpoch (#10276)\n\nImproves test coverage of `validateOffsetAndEpoch`. \n\nReviewers: Jos? Armando Garc?a Sancio <jsancio@users.noreply.github.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-03-20 01:09:38","modifiedFileCount":"3","status":"B","submitter":"Rohit Deshpande"},{"authorTime":"2021-06-16 01:32:01","codes":[{"authorDate":"2021-06-16 01:32:01","commitOrder":2,"curCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, new OffsetAndEpoch(20, 2)),\n                resultOffsetAndEpoch);\n    }\n","date":"2021-06-16 01:32:01","endLine":842,"groupId":"16245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/4c8d46b315a0abc9ef82c73b49e2e67dedf559.src","preCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, new OffsetAndEpoch(20, 2)),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"M"},{"authorDate":"2021-06-16 01:32:01","commitOrder":2,"curCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, olderEpochSnapshotId),\n                resultOffsetAndEpoch);\n    }\n","date":"2021-06-16 01:32:01","endLine":861,"groupId":"16246","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidateEpochLessThanFirstEpochInLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/4c8d46b315a0abc9ef82c73b49e2e67dedf559.src","preCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.createSnapshot(olderEpochSnapshotId)) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, olderEpochSnapshotId),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"M"}],"commitId":"b67a77d5b9ed497b5b3cf0dde95a4f3ef7f0b74f","commitMessage":"@@@KAFKA-12787; Integrate controller snapshoting with raft client (#10786)\n\nDirectly use `RaftClient.Listener`.  `SnapshotWriter` and `SnapshotReader` in the quorum controller.\n\n1. Allow `RaftClient` users to create snapshots by specifying the last committed offset and last committed epoch. These values are validated against the log and leader epoch cache.\n2. Remove duplicate classes in the metadata module for writing and reading snapshots.\n3. Changed the logic for comparing snapshots. The old logic was assuming a certain batch grouping. This didn't match the implementation of the snapshot writer. The snapshot writer is free to merge batches before writing them.\n4. Improve `LocalLogManager` to keep track of multiple snapshots.\n5. Improve the documentation and API for the snapshot classes to highlight the distinction between the offset of batches in the snapshot vs the offset of batches in the log. These two offsets are independent of one another. `SnapshotWriter` and `SnapshotReader` expose a method called `lastOffsetFromLog` which represents the last inclusive offset from the log that is represented in the snapshot.\n\nReviewers: dengziming <swzmdeng@163.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-06-16 01:32:01","modifiedFileCount":"21","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-07-24 12:54:44","codes":[{"authorDate":"2021-07-24 12:54:44","commitOrder":3,"curCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(ValidOffsetAndEpoch.diverging(new OffsetAndEpoch(20, 2)), resultOffsetAndEpoch);\n    }\n","date":"2021-07-24 12:54:44","endLine":836,"groupId":"104413","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/656406422abd44f30e8bef2a98c7ffad3739a9.src","preCode":"    public void testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 1);\n        appendBatch(numberOfRecords, 2);\n        appendBatch(numberOfRecords, 4);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 3);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, new OffsetAndEpoch(20, 2)),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"},{"authorDate":"2021-07-24 12:54:44","commitOrder":3,"curCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(ValidOffsetAndEpoch.diverging(olderEpochSnapshotId), resultOffsetAndEpoch);\n    }\n","date":"2021-07-24 12:54:44","endLine":854,"groupId":"104413","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testValidateEpochLessThanFirstEpochInLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/656406422abd44f30e8bef2a98c7ffad3739a9.src","preCode":"    public void testValidateEpochLessThanFirstEpochInLog() throws IOException {\n        int numberOfRecords = 5;\n        int offset = 10;\n\n        OffsetAndEpoch olderEpochSnapshotId = new OffsetAndEpoch(offset, 1);\n        try (RawSnapshotWriter snapshot = log.storeSnapshot(olderEpochSnapshotId).get()) {\n            snapshot.freeze();\n        }\n        log.truncateToLatestSnapshot();\n\n        appendBatch(numberOfRecords, 3);\n\n        \r\n        ValidOffsetAndEpoch resultOffsetAndEpoch = log.validateOffsetAndEpoch(100, 2);\n        assertEquals(new ValidOffsetAndEpoch(ValidOffsetAndEpoch.Kind.DIVERGING, olderEpochSnapshotId),\n                resultOffsetAndEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/MockLogTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":839,"status":"M"}],"commitId":"55d9acad65826176595bf7f9242524bda1985ba9","commitMessage":"@@@KAFKA-13113; Support unregistering Raft listeners (#11109)\n\nThis patch adds support for unregistering listeners to `RaftClient`. \n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Jason Gustafson <jason@confluent.io>","date":"2021-07-24 12:54:44","modifiedFileCount":"6","status":"M","submitter":"Jos? Armando Garc?a Sancio"}]
