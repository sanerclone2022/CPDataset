[{"authorTime":"2015-11-06 02:22:21","codes":[{"authorDate":"2015-11-06 02:22:21","commitOrder":2,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2015-11-06 02:22:21","endLine":440,"groupId":"19251","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/47fc373b1bbd9ce03f31fb40b8780af101bc60.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"B"},{"authorDate":"2015-11-06 02:22:21","commitOrder":2,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.ensurePartitionAssignment();\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2015-11-06 02:22:21","endLine":524,"groupId":"19251","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/47fc373b1bbd9ce03f31fb40b8780af101bc60.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.ensurePartitionAssignment();\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"MB"}],"commitId":"7eee11451e1f0d17efa27775becfb370a9894d56","commitMessage":"@@@KAFKA-2753: improve SyncGroup error handling in client\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Guozhang Wang\n\nCloses #433 from hachikuji/KAFKA-2753\n","date":"2015-11-06 02:22:21","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-05-06 03:03:28","codes":[{"authorDate":"2016-05-06 03:03:28","commitOrder":3,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","date":"2016-05-06 03:03:28","endLine":471,"groupId":"19251","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2016-05-06 03:03:28","commitOrder":3,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.ensurePartitionAssignment();\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-05-06 03:03:28","endLine":555,"groupId":"19251","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.ensurePartitionAssignment();\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"}],"commitId":"32bf83e5a792c5ee9eb88660da71b73aad5bbc02","commitMessage":"@@@KAFKA-3659: Handle coordinator disconnects more gracefully in client\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Grant Henke <granthenke@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1322 from hachikuji/KAFKA-3659\n","date":"2016-05-06 03:03:28","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-18 02:50:04","codes":[{"authorDate":"2016-08-18 02:50:04","commitOrder":4,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-18 02:50:04","endLine":472,"groupId":"19251","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.ensurePartitionAssignment();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2016-08-18 02:50:04","commitOrder":4,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.poll(time.milliseconds());\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-08-18 02:50:04","endLine":556,"groupId":"19251","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.ensurePartitionAssignment();\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"}],"commitId":"40b1dd3f495a59abef8a0cba5450526994c92c04","commitMessage":"@@@KAFKA-3888: send consumer heartbeats from a background thread (KIP-62)\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1627 from hachikuji/KAFKA-3888\n","date":"2016-08-18 02:50:04","modifiedFileCount":"24","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-20 12:59:55","codes":[{"authorDate":"2016-08-20 12:59:55","commitOrder":5,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","date":"2016-08-20 12:59:55","endLine":533,"groupId":"19251","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/86e6c0c4e2f454c9845dbe5c76a53bf15ec3b0.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"M"},{"authorDate":"2016-08-20 12:59:55","commitOrder":5,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.poll(time.milliseconds());\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-08-20 12:59:55","endLine":614,"groupId":"6402","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/86e6c0c4e2f454c9845dbe5c76a53bf15ec3b0.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(Arrays.asList(topicName), rebalanceListener);\n        subscriptions.needReassignment();\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Arrays.asList(tp), Errors.NONE.code()));\n\n        coordinator.poll(time.milliseconds());\n\n        assertFalse(subscriptions.partitionAssignmentNeeded());\n        assertEquals(Collections.singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"317c4fdede41f2026b34f473af1ad69f8ee62a1d","commitMessage":"@@@KAFKA-3949: Fix race condition when metadata update arrives during rebalance\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Vahid Hashemian.  Guozhang Wang\n\nCloses #1762 from hachikuji/KAFKA-3949\n","date":"2016-08-20 12:59:55","modifiedFileCount":"11","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-09-11 15:46:20","codes":[{"authorDate":"2016-09-11 15:46:20","commitOrder":6,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.doJoinGroup();\n    }\n","date":"2016-09-11 15:46:20","endLine":533,"groupId":"19251","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/4e14449aa1e9e2208db67256dfaaa05871e1a1.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.poll(time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"M"},{"authorDate":"2016-09-11 15:46:20","commitOrder":6,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.doJoinGroup();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-09-11 15:46:20","endLine":614,"groupId":"6402","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/4e14449aa1e9e2208db67256dfaaa05871e1a1.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.poll(time.milliseconds());\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"1933f12a5368f1f60816d986a2777fa324754f80","commitMessage":"@@@KAFKA-4147; Fix transient failure in ConsumerCoordinatorTest.testAutoCommitDynamicAssignment\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>\n\nCloses #1841 from hachikuji/KAFKA-4147\n","date":"2016-09-11 15:46:20","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-09-15 13:31:52","codes":[{"authorDate":"2016-09-15 13:31:52","commitOrder":7,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","date":"2016-09-15 13:31:52","endLine":533,"groupId":"19251","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/4a582b1dcb93521a54d543e5877468139e5b62.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.doJoinGroup();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"M"},{"authorDate":"2016-09-15 13:31:52","commitOrder":7,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-09-15 13:31:52","endLine":614,"groupId":"6402","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/4a582b1dcb93521a54d543e5877468139e5b62.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.doJoinGroup();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"M"}],"commitId":"f197ad4997032a848540a7d577b5846f76a26bfb","commitMessage":"@@@KAFKA-4160: Ensure rebalance listener not called with coordinator lock\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1855 from hachikuji/KAFKA-4160\n","date":"2016-09-15 13:31:52","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-11-15 08:31:04","codes":[{"authorDate":"2016-09-15 13:31:52","commitOrder":8,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","date":"2016-09-15 13:31:52","endLine":533,"groupId":"19251","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/4a582b1dcb93521a54d543e5877468139e5b62.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"N"},{"authorDate":"2016-11-15 08:31:04","commitOrder":8,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","date":"2016-11-15 08:31:04","endLine":613,"groupId":"19251","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/ba401a4dcc822a724789732645982ead54ed47.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(ClientRequest request) {\n                JoinGroupRequest joinRequest = new JoinGroupRequest(request.request().body());\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"M"}],"commitId":"3b4c347949c02b1e2b1dd473deda0f8d2304d027","commitMessage":"@@@KAFKA-2066; Use client-side FetchRequest/FetchResponse on server\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jun Rao <junrao@gmail.com>\n\nCloses #2069 from hachikuji/KAFKA-2066\n","date":"2016-11-15 08:31:04","modifiedFileCount":"80","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-01-24 02:45:45","codes":[{"authorDate":"2017-01-24 02:45:45","commitOrder":9,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","date":"2017-01-24 02:45:45","endLine":627,"groupId":"19251","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2017-01-24 02:45:45","commitOrder":9,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2017-01-24 02:45:45","endLine":708,"groupId":"19251","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topicName), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(tp), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(tp), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"M"}],"commitId":"3400d0c3cc07d5d3136bf9a19142b36cca93f92d","commitMessage":"@@@KAFKA-4633; Always using regex pattern subscription in StreamThread\n\n1. In StreamThread.  always use subscribe(Pattern.  ..) function in order to avoid sending MetadataRequest with specific topic names and cause brokers to possibly auto-create subscribed topics; the pattern is generated as \"topic-1|topic-2..|topic-n\".\n\n2. In ConsumerCoordinator.  let the leader to refresh its metadata if the generated assignment contains some topics that is not contained in the subscribed topics; also in SubscriptionState.  modified the verification for regex subscription to against the regex pattern instead of the matched topics since the returned assignment may contain some topics not yet created when joining the group but existed after the rebalance; also modified some unit tests in `KafkaConsumerTest` to accommodate the above changes.\n\n3. Minor cleanup: changed String[] to List<String> to avoid overloaded functions.\n\n4. Minor cleanup: enforced strong typing in SinkNodeFactory and removed unnecessary unchecked tags.\n\n5. Minor cleanup: augmented unit test error message and fixed a potential transient failure in KafkaStreamTest.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2379 from guozhangwang/K4633-regex-pattern\n","date":"2017-01-24 02:45:45","modifiedFileCount":"19","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-02-10 13:03:46","codes":[{"authorDate":"2017-02-10 13:03:46","commitOrder":10,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN));\n        coordinator.joinGroupIfNeeded();\n    }\n","date":"2017-02-10 13:03:46","endLine":626,"groupId":"5258","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN.code()));\n        coordinator.joinGroupIfNeeded();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2017-02-10 13:03:46","commitOrder":10,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2017-02-10 13:03:46","endLine":707,"groupId":"5258","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION.code()));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE.code()));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE.code()));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"M"}],"commitId":"9898d665d1ab201405d66c70e3ea9710d9dcecd7","commitMessage":"@@@MINOR: Use an explicit `Errors` object when possible instead of a numeric error code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2475 from vahidhashemian/minor/use_explicit_Errors_type_when_possible\n","date":"2017-02-10 13:03:46","modifiedFileCount":"48","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2017-02-10 13:03:46","codes":[{"authorDate":"2017-07-23 03:35:32","commitOrder":11,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded();\n    }\n","date":"2017-07-23 03:35:32","endLine":626,"groupId":"13302","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/1b411ea4a9f741b22d82520f19b24a9128264a.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN));\n        coordinator.joinGroupIfNeeded();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2017-02-10 13:03:46","commitOrder":11,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2017-02-10 13:03:46","endLine":707,"groupId":"5258","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"N"}],"commitId":"fc93fb4b6116e809f2b69ddb2f7e0f12548fef51","commitMessage":"@@@KAFKA-4763; Handle disk failure for JBOD (KIP-112)\n\nAuthor: Dong Lin <lindong28@gmail.com>\n\nReviewers: Jiangjie Qin <becket.qin@gmail.com>.  Jun Rao <junrao@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Onur Karaman <okaraman@linkedin.com>\n\nCloses #2929 from lindong28/KAFKA-4763\n","date":"2017-07-23 03:35:32","modifiedFileCount":"22","status":"M","submitter":"Dong Lin"},{"authorTime":"2018-05-27 02:50:51","codes":[{"authorDate":"2018-05-27 02:50:51","commitOrder":12,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE);\n    }\n","date":"2018-05-27 02:50:51","endLine":676,"groupId":"15925","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"M"},{"authorDate":"2018-05-27 02:50:51","commitOrder":12,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE);\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2018-05-27 02:50:51","endLine":757,"groupId":"14649","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded();\n\n        assertFalse(coordinator.needRejoin());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":731,"status":"M"}],"commitId":"c470ff70d3e829c8b12f6eb6cc812c4162071a1f","commitMessage":"@@@KAFKA-5697; Implement new consumer poll API from KIP-266 (#4855)\n\nAdd the new stricter-timeout version of `poll` proposed in KIP-266.\n\nThe pre-existing variant `poll(long timeout)` would block indefinitely for metadata\nupdates if they were needed.  then it would issue a fetch and poll for `timeout` ms \nfor new records. The initial indefinite metadata block caused applications to become\nstuck when the brokers became unavailable. The existence of the timeout parameter\nmade the indefinite block especially unintuitive.\n\nThis PR adds `poll(Duration timeout)` with the semantics:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses (counts against timeout)\n        - if no response within timeout.  **return an empty collection immediately**\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nThe old method.  `poll(long timeout)` is deprecated.  but we do not change its semantics.  so it remains:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses *indefinitely until we get it*\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nOne notable usage is prohibited by the new `poll`: previously.  you could call `poll(0)` to block for metadata updates.  for example to initialize the client.  supposedly without fetching records. Note.  though.  that this behavior is not according to any contract.  and there is no guarantee that `poll(0)` won't return records the first time it's called. Therefore.  it has always been unsafe to ignore the response.","date":"2018-05-27 02:50:51","modifiedFileCount":"20","status":"M","submitter":"John Roesler"},{"authorTime":"2018-06-14 07:21:30","codes":[{"authorDate":"2018-06-14 07:21:30","commitOrder":13,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE, time.milliseconds());\n    }\n","date":"2018-06-14 07:21:30","endLine":678,"groupId":"15925","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/0038d2be2f5f67788d3fe462b6989eafb317bb.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"},{"authorDate":"2018-06-14 07:21:30","commitOrder":13,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE, time.milliseconds());\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2018-06-14 07:21:30","endLine":759,"groupId":"14649","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/0038d2be2f5f67788d3fe462b6989eafb317bb.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE);\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"}],"commitId":"443091b844d4119637d252a5303568e22d4f1d48","commitMessage":"@@@KAFKA-7050; Decrease default consumer request timeout to 30s (#5203)\n\nThis patch changes the default `request.timeout.ms` of the consumer to 30 seconds. Additionally.  it adds logic to `NetworkClient` and related to components to support timeouts at the request level. We use this to handle the special case of the JoinGroup request.  which may block for as long as the value configured by `max.poll.interval.ms`.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-06-14 07:21:30","modifiedFileCount":"18","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-08-04 08:25:07","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":14,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":753,"groupId":"3934","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE, time.milliseconds());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"M"},{"authorDate":"2018-08-04 08:25:07","commitOrder":14,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2018-08-04 08:25:07","endLine":834,"groupId":"5258","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(Long.MAX_VALUE, time.milliseconds());\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"M"}],"commitId":"fc5f6b0e46ff81302b3e445fed0cdf454c942792","commitMessage":"@@@MINOR: Add Timer to simplify timeout bookkeeping and use it in the consumer (#5087)\n\nWe currently do a lot of bookkeeping for timeouts which is both error-prone and distracting. This patch adds a new `Timer` class to simplify this logic and control unnecessary calls to system time. In particular.  this helps with nested timeout operations. The consumer has been updated to use the new class.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-04 08:25:07","modifiedFileCount":"17","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-03-19 04:26:09","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":15,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":753,"groupId":"3934","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"N"},{"authorDate":"2019-03-19 04:26:09","commitOrder":15,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2019-03-19 04:26:09","endLine":964,"groupId":"14619","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/bbcec206b0a5c8721588c9f835139fff232712.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":938,"status":"M"}],"commitId":"8406f3624d8f99b614eb7171b71fae8b0e663dcb","commitMessage":"@@@KAFKA-7858: Automatically generate JoinGroup request/response\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>","date":"2019-03-19 04:26:09","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-07-27 14:13:37","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":16,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":753,"groupId":"3934","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"N"},{"authorDate":"2019-07-27 14:13:37","commitOrder":16,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2019-07-27 14:13:37","endLine":1020,"groupId":"0","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/273cb6f1a17543bc914423d43614c9ba1d459e.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n                return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n            }\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"M"}],"commitId":"74c90f46c34727be9484e9826ff543b451ada775","commitMessage":"@@@KAFKA-8221; Add batch leave group request (#6714)\n\nThis patch is part of KIP-345. We are aiming to support batch leave group request issued from admin client. This diff is the first effort to bump leave group request version.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-07-27 14:13:37","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-08-09 05:31:22","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":17,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","date":"2018-08-04 08:25:07","endLine":753,"groupId":"3934","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"N"},{"authorDate":"2019-08-09 05:31:22","commitOrder":17,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2019-08-09 05:31:22","endLine":1069,"groupId":"6679","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/d3529ea10e4bc44a9753601bd61b35f4f3fec9.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.<TopicPartition>emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1046,"status":"M"}],"commitId":"e867a58425876767b952e06892c72b5e13066acc","commitMessage":"@@@KAFKA-8179: Part 3.  Add PartitionsLost API for resetGenerations and metadata/subscription change (#6884)\n\n1. Add onPartitionsLost into the RebalanceListener.  which will be triggered when the consumer found that the generation is reset due to fatal errors in response handling.\n\n2. Semantical behavior change: with COOPERATIVE protocol.  if the revoked / lost partitions are empty.  do not trigger the corresponding callback at all. For added partitions though.  even if it is empty we would still trigger the callback as a way to notify the rebalance event; with EAGER protocol.  revoked / assigned callbacks are always triggered.\n\nThe ordering of the callback would be the following:\n\na. Callback onPartitionsRevoked / onPartitionsLost triggered.\nb. Update the assignment (both revoked and added).\nc. Callback onPartitionsAssigned triggered.\n\nIn this way we are assured that users can still access the partitions being revoked.  whereas they can also access the partitions being added.\n\n3. Semantical behavior change (KAFKA-4600): if the rebalance listener throws an exception.  pass it along all the way to the consumer.poll caller.  but still completes the rest of the actions. Also.  the newly assigned partitions list does not gets affected with exception thrown since it is just for notifying the users.\n\n4. Semantical behavior change: the ConsumerCoordinator would not try to modify assignor's returned assignments.  instead it will validate that assignments and set the error code accordingly: if there are overlaps between added / revoked partitions.  it is a fatal error and would be communicated to all members to stop; if revoked is not empty.  it is an error indicate re-join; otherwise.  it is normal.\n\n5. Minor: with the error code removed from the Assignment.  ConsumerCoordinator will request re-join if the revoked partitions list is not empty.\n\n6. Updated ConsumerCoordinatorTest accordingly. Also found a minor bug in MetadataUpdate that removed topic would still be retained with null value of num.partitions.\n\n6. Updated a few other flaky tests that are exposed due to this change.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Jason Gustafson <jason@confluent.io>","date":"2019-08-09 05:31:22","modifiedFileCount":"15","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-03-13 13:28:52","codes":[{"authorDate":"2020-03-13 13:28:52","commitOrder":18,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","date":"2020-03-13 13:28:52","endLine":1200,"groupId":"3934","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/6fe1a0c98e72748813b28ceb12e65cda819ea3.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1190,"status":"M"},{"authorDate":"2020-03-13 13:28:52","commitOrder":18,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2020-03-13 13:28:52","endLine":1269,"groupId":"6679","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/6fe1a0c98e72748813b28ceb12e65cda819ea3.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        final String consumerId = \"consumer\";\n\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"M"}],"commitId":"2d2311d75c081745c7a24f7da7c8ec14feddd259","commitMessage":"@@@KAFKA-9657: Throw upon offset fetch unsupported stable flag protocol  (#8265)\n\nThis PR tries to add an internal flag to throw if we hit an unexpected protocol version for offset fetch. It could be used together with EOS_BETA flag so that if server side downgrades unexpectedly.  we shall fail the application ASAP.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-13 13:28:52","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-03-13 13:28:52","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":19,"curCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        assertThrows(KafkaException.class, () -> coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE)));\n    }\n","date":"2021-01-10 20:20:13","endLine":1288,"groupId":"104018","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnexpectedErrorOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/e73d30c830b3db4a714e3b20ee3ceddd783f5e.src","preCode":"    public void testUnexpectedErrorOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.UNKNOWN_SERVER_ERROR));\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"M"},{"authorDate":"2020-03-13 13:28:52","commitOrder":19,"curCode":"    public void testIllegalGenerationOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","date":"2020-03-13 13:28:52","endLine":1269,"groupId":"104018","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalGenerationOnSyncGroup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/6fe1a0c98e72748813b28ceb12e65cda819ea3.src","preCode":"    public void testIllegalGenerationOnSyncGroup() {\n        subscriptions.subscribe(singleton(topic1), rebalanceListener);\n\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        client.prepareResponse(joinGroupFollowerResponse(1, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(Collections.emptyList(), Errors.ILLEGAL_GENERATION));\n\n        \r\n        client.prepareResponse(body -> {\n            JoinGroupRequest joinRequest = (JoinGroupRequest) body;\n            return joinRequest.data().memberId().equals(JoinGroupRequest.UNKNOWN_MEMBER_ID);\n        }, joinGroupFollowerResponse(2, consumerId, \"leader\", Errors.NONE));\n        client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n\n        coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));\n\n        assertFalse(coordinator.rejoinNeededOrPending());\n        assertEquals(singleton(t1p), subscriptions.assignedPartitions());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"N"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"}]
