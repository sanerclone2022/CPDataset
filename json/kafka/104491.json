[{"authorTime":"2020-12-29 10:37:08","codes":[{"authorDate":"2020-12-29 10:37:08","commitOrder":1,"curCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","date":"2020-12-29 10:37:08","endLine":471,"groupId":"21074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchResponseWithSnapshotId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/fb5b9c16eb437d2e5815374fd19888d218e834.src","preCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"B"},{"authorDate":"2020-12-29 10:37:08","commitOrder":1,"curCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","date":"2020-12-29 10:37:08","endLine":681,"groupId":"21074","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSnapshotResponseFromNewerEpochNotLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/fb5b9c16eb437d2e5815374fd19888d218e834.src","preCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"B"}],"commitId":"2023aed59d863278a6302e03066d387f994f085c","commitMessage":"@@@KAFKA-10427:  Fetch snapshot API (#9553)\n\nImplements the code necessary for the leader to response to fetch snapshot requests and for the follower to fetch snapshots. This API is described in more detail in KIP-630: https://cwiki.apache.org/confluence/display/KAFKA/KIP-630%3A+Kafka+Raft+Snapshot.  More specifically.  this patch includes the following changes:\n\nLeader Changes:\n1. Raft leader response to FetchSnapshot request by reading the local snapshot and sending the requested bytes in the response. This implementation currently copies the bytes to memory. This will be fixed in a future PR.\n\nFollower Changes:\n1. Raft followers will start fetching snapshot if the leader sends a Fetch response that includes a SnapshotId.\n\n2. Raft followers send FetchSnapshot requests if there is a pending download. The same timer is used for both Fetch and FetchSnapshot requests.\n\n3. Raft follower handle FetchSnapshot responses by comping the bytes to the pending SnapshotWriter. This implementation doesn't fix the replicated log after the snapshot has been downloaded. This will be implemented in a future PR.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-12-29 10:37:08","modifiedFileCount":"17","status":"B","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2020-12-29 10:37:08","codes":[{"authorDate":"2021-01-30 06:06:01","commitOrder":2,"curCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","date":"2021-01-30 06:06:01","endLine":749,"groupId":"21074","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchResponseWithSnapshotId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/4ff327cffed3dfd8ddcf40a67459d34b05e706.src","preCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":687,"status":"M"},{"authorDate":"2020-12-29 10:37:08","commitOrder":2,"curCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","date":"2020-12-29 10:37:08","endLine":681,"groupId":"21074","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSnapshotResponseFromNewerEpochNotLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/fb5b9c16eb437d2e5815374fd19888d218e834.src","preCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"N"}],"commitId":"5b3351e10b339f5ef43fa4ec9e23544acad298c3","commitMessage":"@@@KAFKA-10761; Kafka Raft update log start offset (#9816)\n\nAdds support for nonzero log start offsets.\n\nChanges to `Log`:\n1. Add a new \"reason\" for increasing the log start offset. This is used by `KafkaMetadataLog` when a snapshot is generated.\n2. `LogAppendInfo` should return if it was rolled because of an records append. A log is rolled when a new segment is created. This is used by `KafkaMetadataLog` to in some cases delete the created segment based on the log start offset.\n\nChanges to `KafkaMetadataLog`:\n1. Update both append functions to delete old segments based on the log start offset whenever the log is rolled.\n2. Update `lastFetchedEpoch` to return the epoch of the latest snapshot whenever the log is empty.\n3. Add a function that empties the log whenever the latest snapshot is greater than the replicated log. This is used when first loading the `KafkaMetadataLog` and whenever the `KafkaRaftClient` downloads a snapshot from the leader.\n\nChanges to `KafkaRaftClient`:\n1. Improve `validateFetchOffsetAndEpoch` so that it can handle fetch offset and last fetched epoch that are smaller than the log start offset. This is in addition to the existing code that check for a diverging log. This is used by the raft client to determine if the Fetch response should include a diverging epoch or a snapshot id. \n2. When a follower finishes fetching a snapshot from the leader fully truncate the local log.\n3. When polling the current state the raft client should check if the state machine has generated a new snapshot and update the log start offset accordingly.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-01-30 06:06:01","modifiedFileCount":"11","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2020-12-29 10:37:08","codes":[{"authorDate":"2021-05-02 01:05:45","commitOrder":3,"curCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        \r\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n\n        \r\n        try (SnapshotReader<String> snapshot = context.listener.drainHandledSnapshot().get()) {\n            assertEquals(snapshotId, snapshot.snapshotId());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","date":"2021-05-02 01:05:45","endLine":922,"groupId":"21074","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchResponseWithSnapshotId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/d514742116573b7a81c163bef1e341b9a25edc.src","preCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"},{"authorDate":"2020-12-29 10:37:08","commitOrder":3,"curCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","date":"2020-12-29 10:37:08","endLine":681,"groupId":"21074","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSnapshotResponseFromNewerEpochNotLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/fb5b9c16eb437d2e5815374fd19888d218e834.src","preCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"N"}],"commitId":"6203bf8b94c7c340671c1729f4a8e4fcc302605e","commitMessage":"@@@KAFKA-12154; Raft Snapshot Loading API (#10085)\n\nImplement Raft Snapshot loading API.\n\n1. Adds a new method `handleSnapshot` to `raft.Listener` which is called whenever the `RaftClient` determines that the `Listener` needs to load a new snapshot before reading the log. This happens when the `Listener`'s next offset is less than the log start offset also known as the earliest snapshot.\n\n2.  Adds a new type `SnapshotReader<T>` which provides a `Iterator<Batch<T>>` interface and de-serializes records in the `RawSnapshotReader` into `T`s\n\n3.  Adds a new type `RecordsIterator<T>` that implements an `Iterator<Batch<T>>` by scanning a `Records` object and deserializes the batches and records into `Batch<T>`. This type is used by both `SnapshotReader<T>` and `RecordsBatchReader<T>` internally to implement the `Iterator` interface that they expose. \n\n4. Changes the `MockLog` implementation to read one or two batches at a time. The previous implementation always read from the given offset to the high-watermark. This made it impossible to test interesting snapshot loading scenarios.\n\n5. Removed `throws IOException` from some methods. Some of types were inconsistently throwing `IOException` in some cases and throwing `RuntimeException(....  new IOException(...))` in others. This PR improves the consistent by wrapping `IOException` in `RuntimeException` in a few more places and replacing `Closeable` with `AutoCloseable`.\n\n6. Updated the Kafka Raft simulation test to take into account snapshot. `ReplicatedCounter` was updated to generate snapshot after 10 records get committed. This means that the `ConsistentCommittedData` validation was extended to take snapshots into account. Also added a new invariant to ensure that the log start offset is consistently set with the earliest snapshot.\n\nReviewers: dengziming <swzmdeng@163.com>.  David Arthur <mumrah@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-05-02 01:05:45","modifiedFileCount":"25","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2020-12-29 10:37:08","codes":[{"authorDate":"2021-05-19 02:14:17","commitOrder":4,"curCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        \r\n        RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get();\n        assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n        SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n\n        \r\n        try (SnapshotReader<String> reader = context.listener.drainHandledSnapshot().get()) {\n            assertEquals(snapshotId, reader.snapshotId());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), reader);\n        }\n    }\n","date":"2021-05-19 02:14:17","endLine":918,"groupId":"21074","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchResponseWithSnapshotId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/cf287961a61c1d88309357aba81edfef86d459.src","preCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        \r\n        try (RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get()) {\n            assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n\n        \r\n        try (SnapshotReader<String> snapshot = context.listener.drainHandledSnapshot().get()) {\n            assertEquals(snapshotId, snapshot.snapshotId());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"},{"authorDate":"2020-12-29 10:37:08","commitOrder":4,"curCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","date":"2020-12-29 10:37:08","endLine":681,"groupId":"21074","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSnapshotResponseFromNewerEpochNotLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/fb5b9c16eb437d2e5815374fd19888d218e834.src","preCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"N"}],"commitId":"924c870fb102041363acc00227f8dba152dc830f","commitMessage":"@@@KAFKA-12543: Change RawSnapshotReader ownership model (#10431)\n\nKafka networking layer doesn't close FileRecords and assumes that they are already open when sending them over a channel. To support this pattern this commit changes the ownership model for FileRawSnapshotReader so that they are owned by KafkaMetadataLog.\n\nReviewers: dengziming <swzmdeng@163.com>.  David Arthur <mumrah@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-05-19 02:14:17","modifiedFileCount":"8","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, context.metadataTopicId, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        \r\n        RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get();\n        assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n        SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n\n        \r\n        try (SnapshotReader<String> reader = context.listener.drainHandledSnapshot().get()) {\n            assertEquals(snapshotId, reader.snapshotId());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), reader);\n        }\n    }\n","date":"2021-07-08 07:02:37","endLine":948,"groupId":"104491","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testFetchResponseWithSnapshotId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/7103110603ba598fd7297ffbe3bad5f12abb1d.src","preCode":"    public void testFetchResponseWithSnapshotId() throws Exception {\n        int localId = 0;\n        int leaderId = localId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, leaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, leaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, leaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        List<String> records = Arrays.asList(\"foo\", \"bar\");\n        MemorySnapshotWriter memorySnapshot = new MemorySnapshotWriter(snapshotId);\n        try (SnapshotWriter<String> snapshotWriter = snapshotWriter(context, memorySnapshot)) {\n            snapshotWriter.append(records);\n            snapshotWriter.freeze();\n        }\n\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            fetchSnapshotResponse(\n                context.metadataPartition,\n                epoch,\n                leaderId,\n                snapshotId,\n                memorySnapshot.buffer().remaining(),\n                0L,\n                memorySnapshot.buffer().slice()\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, snapshotId.offset, snapshotId.epoch);\n\n        \r\n        RawSnapshotReader snapshot = context.log.readSnapshot(snapshotId).get();\n        assertEquals(memorySnapshot.buffer().remaining(), snapshot.sizeInBytes());\n        SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), snapshot);\n\n        \r\n        try (SnapshotReader<String> reader = context.listener.drainHandledSnapshot().get()) {\n            assertEquals(snapshotId, reader.snapshotId());\n            SnapshotWriterReaderTest.assertSnapshot(Arrays.asList(records), reader);\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":880,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, context.metadataTopicId, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","date":"2021-07-08 07:02:37","endLine":1166,"groupId":"104491","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testFetchSnapshotResponseFromNewerEpochNotLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/7103110603ba598fd7297ffbe3bad5f12abb1d.src","preCode":"    public void testFetchSnapshotResponseFromNewerEpochNotLeader() throws Exception {\n        int localId = 0;\n        int firstLeaderId = localId + 1;\n        int secondLeaderId = firstLeaderId + 1;\n        Set<Integer> voters = Utils.mkSet(localId, firstLeaderId, secondLeaderId);\n        int epoch = 2;\n        OffsetAndEpoch snapshotId = new OffsetAndEpoch(100L, 1);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, firstLeaderId)\n            .build();\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch, 0L, 0);\n\n        context.deliverResponse(\n            fetchRequest.correlationId,\n            fetchRequest.destinationId(),\n            snapshotFetchResponse(context.metadataPartition, epoch, firstLeaderId, snapshotId, 200L)\n        );\n\n        context.pollUntilRequest();\n        RaftRequest.Outbound snapshotRequest = context.assertSentFetchSnapshotRequest();\n        FetchSnapshotRequestData.PartitionSnapshot request = assertFetchSnapshotRequest(\n                snapshotRequest,\n                context.metadataPartition,\n                localId,\n                Integer.MAX_VALUE\n        ).get();\n        assertEquals(snapshotId.offset, request.snapshotId().endOffset());\n        assertEquals(snapshotId.epoch, request.snapshotId().epoch());\n        assertEquals(0, request.position());\n\n        \r\n        context.deliverResponse(\n            snapshotRequest.correlationId,\n            snapshotRequest.destinationId(),\n            FetchSnapshotResponse.singleton(\n                context.metadataPartition,\n                responsePartitionSnapshot -> {\n                    responsePartitionSnapshot\n                        .currentLeader()\n                        .setLeaderEpoch(epoch + 1)\n                        .setLeaderId(secondLeaderId);\n\n                    return responsePartitionSnapshot\n                        .setErrorCode(Errors.FENCED_LEADER_EPOCH.code());\n                }\n            )\n        );\n\n        context.pollUntilRequest();\n        fetchRequest = context.assertSentFetchRequest();\n        context.assertFetchRequestData(fetchRequest, epoch + 1, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientSnapshotTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1111,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
