[{"authorTime":"2020-09-23 02:32:44","codes":[{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Collections.singleton(new SimpleRecord(\"foo\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n        assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2020-09-23 02:32:44","endLine":1051,"groupId":"22348","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/c573b7fee46db25c7da2ba93779278ea23df6c.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Collections.singleton(new SimpleRecord(\"foo\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n        assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1037,"status":"B"},{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Arrays.asList(\n                new SimpleRecord(\"foo\".getBytes()),\n                new SimpleRecord(\"bar\".getBytes())), lastEpoch);\n        log.appendAsLeader(Arrays.asList(\n            new SimpleRecord(\"baz\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n        assertEquals(3L, log.endOffset().offset);\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        client.poll();\n        assertEquals(2L, log.endOffset().offset);\n\n        \r\n        client.poll();\n        assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2020-09-23 02:32:44","endLine":1941,"groupId":"2240","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/c573b7fee46db25c7da2ba93779278ea23df6c.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Arrays.asList(\n                new SimpleRecord(\"foo\".getBytes()),\n                new SimpleRecord(\"bar\".getBytes())), lastEpoch);\n        log.appendAsLeader(Arrays.asList(\n            new SimpleRecord(\"baz\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n        assertEquals(3L, log.endOffset().offset);\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        client.poll();\n        assertEquals(2L, log.endOffset().offset);\n\n        \r\n        client.poll();\n        assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1907,"status":"B"}],"commitId":"b7c8490cf47b0c18253d6a776b2b35c76c71c65d","commitMessage":"@@@KAFKA-10492; Core Kafka Raft Implementation (KIP-595) (#9130)\n\nThis is the core Raft implementation specified by KIP-595: https://cwiki.apache.org/confluence/display/KAFKA/KIP-595%3A+A+Raft+Protocol+for+the+Metadata+Quorum. We have created a separate \"raft\" module where most of the logic resides. The new APIs introduced in this patch in order to support Raft election and such are disabled in the server until the integration with the controller is complete. Until then.  there is a standalone server which can be used for testing the performance of the Raft implementation. See `raft/README.md` for details.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>\n\nCo-authored-by: Boyang Chen <boyang@confluent.io>\nCo-authored-by: Guozhang Wang <wangguoz@gmail.com> ","date":"2020-09-23 02:32:44","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2020-10-23 09:14:27","codes":[{"authorDate":"2020-10-23 09:14:27","commitOrder":2,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .updateLog(log -> {\n                log.appendAsLeader(Collections.singleton(new SimpleRecord(\"foo\".getBytes())), lastEpoch);\n            })\n            .build();\n\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2020-10-23 09:14:27","endLine":986,"groupId":"16293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/e928559612a26108add4aea670ccb4b02d1e26.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Collections.singleton(new SimpleRecord(\"foo\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n        assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":967,"status":"M"},{"authorDate":"2020-10-23 09:14:27","commitOrder":2,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .updateLog(log -> {\n                log.appendAsLeader(Arrays.asList(\n                            new SimpleRecord(\"foo\".getBytes()),\n                            new SimpleRecord(\"bar\".getBytes())), lastEpoch);\n                log.appendAsLeader(Arrays.asList(\n                            new SimpleRecord(\"baz\".getBytes())), lastEpoch);\n            })\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2020-10-23 09:14:27","endLine":1886,"groupId":"16301","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/e928559612a26108add4aea670ccb4b02d1e26.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        log.appendAsLeader(Arrays.asList(\n                new SimpleRecord(\"foo\".getBytes()),\n                new SimpleRecord(\"bar\".getBytes())), lastEpoch);\n        log.appendAsLeader(Arrays.asList(\n            new SimpleRecord(\"baz\".getBytes())), lastEpoch);\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n        assertEquals(3L, log.endOffset().offset);\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        client.poll();\n        assertEquals(2L, log.endOffset().offset);\n\n        \r\n        client.poll();\n        assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1850,"status":"M"}],"commitId":"94820ca652aceccef5f617e6ca139d139fa25a1b","commitMessage":"@@@MINOR: Refactor RaftClientTest to be used by other tests (#9476)\n\nThere is a lot of functionality in KafkaRaftClientTest that is useful for writing other tests. Refactor that functionality into another class that can be reused in other tests.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-10-23 09:14:27","modifiedFileCount":"1","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2020-11-03 07:06:58","codes":[{"authorDate":"2020-11-03 07:06:58","commitOrder":3,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2020-11-03 07:06:58","endLine":737,"groupId":"11842","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/b13822b0b684451055221e8df0af2fe584d750.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .updateLog(log -> {\n                log.appendAsLeader(Collections.singleton(new SimpleRecord(\"foo\".getBytes())), lastEpoch);\n            })\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"M"},{"authorDate":"2020-11-03 07:06:58","commitOrder":3,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2020-11-03 07:06:58","endLine":1561,"groupId":"12760","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/b13822b0b684451055221e8df0af2fe584d750.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .updateLog(log -> {\n                log.appendAsLeader(Arrays.asList(\n                            new SimpleRecord(\"foo\".getBytes()),\n                            new SimpleRecord(\"bar\".getBytes())), lastEpoch);\n                log.appendAsLeader(Arrays.asList(\n                            new SimpleRecord(\"baz\".getBytes())), lastEpoch);\n            })\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1530,"status":"M"}],"commitId":"21a65e10436fc81cac0518dd4babb9612eeaf667","commitMessage":"@@@KAFKA-10632; Raft client should push all committed data to state machines (#9482)\n\nIn #9418.  we add a listener to the `RaftClient` interface. In that patch.  we used it only to send commit notifications for writes from the leader. In this PR.  we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally.  we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.\n\nFinally.  this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.\n\nReviewers: Jos? Armando Garc?a Sancio <jsancio@users.noreply.github.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-11-03 07:06:58","modifiedFileCount":"24","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-12-22 10:15:15","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":4,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2020-12-22 10:15:15","endLine":955,"groupId":"11842","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":939,"status":"M"},{"authorDate":"2020-12-22 10:15:15","commitOrder":4,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2020-12-22 10:15:15","endLine":1806,"groupId":"11857","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1775,"status":"M"}],"commitId":"eb9fe411bbbfca1baf5e0900ee9cfb9147e5099e","commitMessage":"@@@KAFKA-10842; Use `InterBrokerSendThread` for raft's outbound network channel (#9732)\n\nThis patch contains the following improvements:\n\n- Separate inbound/outbound request flows so that we can open the door for concurrent inbound request handling\n- Rewrite `KafkaNetworkChannel` to use `InterBrokerSendThread` which fixes a number of bugs/shortcomings\n- Get rid of a lot of boilerplate conversions in `KafkaNetworkChannel` \n- Improve validation of inbound responses in `KafkaRaftClient` by checking correlationId. This fixes a bug which could cause an out of order Fetch to be applied incorrectly.\n\nReviewers: David Arthur <mumrah@gmail.com>","date":"2020-12-22 10:15:15","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-12-29 10:37:08","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":5,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2020-12-22 10:15:15","endLine":955,"groupId":"11842","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":939,"status":"N"},{"authorDate":"2020-12-29 10:37:08","commitOrder":5,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.divergingFetchResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2020-12-29 10:37:08","endLine":1806,"groupId":"11857","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/a41e3a2e644ff3d78ca8d0b695041e2223f0e8.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.outOfRangeFetchRecordsResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1775,"status":"M"}],"commitId":"2023aed59d863278a6302e03066d387f994f085c","commitMessage":"@@@KAFKA-10427:  Fetch snapshot API (#9553)\n\nImplements the code necessary for the leader to response to fetch snapshot requests and for the follower to fetch snapshots. This API is described in more detail in KIP-630: https://cwiki.apache.org/confluence/display/KAFKA/KIP-630%3A+Kafka+Raft+Snapshot.  More specifically.  this patch includes the following changes:\n\nLeader Changes:\n1. Raft leader response to FetchSnapshot request by reading the local snapshot and sending the requested bytes in the response. This implementation currently copies the bytes to memory. This will be fixed in a future PR.\n\nFollower Changes:\n1. Raft followers will start fetching snapshot if the leader sends a Fetch response that includes a SnapshotId.\n\n2. Raft followers send FetchSnapshot requests if there is a pending download. The same timer is used for both Fetch and FetchSnapshot requests.\n\n3. Raft follower handle FetchSnapshot responses by comping the bytes to the pending SnapshotWriter. This implementation doesn't fix the replicated log after the snapshot has been downloaded. This will be implemented in a future PR.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-12-29 10:37:08","modifiedFileCount":"17","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-02-19 08:44:40","codes":[{"authorDate":"2021-02-19 08:44:40","commitOrder":6,"curCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","date":"2021-02-19 08:44:40","endLine":957,"groupId":"104433","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerNonEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testInitializeAsFollowerNonEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, singletonList(\"foo\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n        context.assertSentFetchRequest(epoch, 1L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":941,"status":"M"},{"authorDate":"2021-02-19 08:44:40","commitOrder":6,"curCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.divergingFetchResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","date":"2021-02-19 08:44:40","endLine":1808,"groupId":"104433","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFollowerLogReconciliation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testFollowerLogReconciliation() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        int lastEpoch = 3;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .appendToLog(0L, lastEpoch, Arrays.asList(\"foo\", \"bar\"))\n            .appendToLog(2L, lastEpoch, Arrays.asList(\"baz\"))\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n        assertEquals(3L, context.log.endOffset().offset);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 3L, lastEpoch);\n\n        FetchResponseData response = context.divergingFetchResponse(epoch, otherNodeId, 2L,\n            lastEpoch, 1L);\n        context.deliverResponse(correlationId, otherNodeId, response);\n\n        \r\n        context.client.poll();\n        assertEquals(2L, context.log.endOffset().offset);\n\n        \r\n        context.client.poll();\n        context.assertSentFetchRequest(epoch, 2L, lastEpoch);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1777,"status":"M"}],"commitId":"e29f7a36dbbd316ae03008140a1a0d282a26b82d","commitMessage":"@@@KAFKA-12331: Use LEO for the base offset of LeaderChangeMessage batch (#10138)\n\nThe `KafkaMetadataLog` implementation of `ReplicatedLog` validates that batches appended using `appendAsLeader` and `appendAsFollower` have an offset that matches the LEO. This is enforced by `KafkaRaftClient` and `BatchAccumulator`. When creating control batches for the `LeaderChangeMessage` the default base offset of `0` was being used instead of using the LEO. This is fixed by:\n\n1. Changing the implementation for `MockLog` to validate against this and throw an `RuntimeException` if this invariant is violated.\n2. Always create a batch for `LeaderChangeMessage` with an offset equal to the LEO.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-19 08:44:40","modifiedFileCount":"9","status":"M","submitter":"Jos? Armando Garc?a Sancio"}]
