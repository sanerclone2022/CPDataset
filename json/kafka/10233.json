[{"authorTime":"2020-07-03 07:14:46","codes":[{"authorDate":"2020-07-03 07:14:46","commitOrder":1,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-07-03 07:14:46","endLine":97,"groupId":"2366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/c7d5d82ebffad25ae604c227439341ce6f7e56.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2020-07-03 07:14:46","commitOrder":1,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-07-03 07:14:46","endLine":97,"groupId":"2366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/c7d5d82ebffad25ae604c227439341ce6f7e56.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"3b2ae7b95a27176a22e5356160a9df468c483778","commitMessage":"@@@KAFKA-10173: Use SmokeTest for upgrade system tests (#8938)\n\nReplaces the previous upgrade test's trivial Streams app\nwith the commonly used SmokeTest.  exercising many more\nfeatures. Also adjust the test matrix to test upgrading\nfrom each released version since 2.2 to the current branch.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-07-03 07:14:46","modifiedFileCount":"3","status":"B","submitter":"John Roesler"},{"authorTime":"2020-08-06 04:52:50","codes":[{"authorDate":"2020-08-06 04:52:50","commitOrder":2,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"10233","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-08-06 04:52:50","commitOrder":2,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"10233","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"26a217c8e75b238bbba5f1799b7d91b5b4910123","commitMessage":"@@@MINOR: Streams integration tests should not call exit (#9067)\n\n- replace System.exit with Exit.exit in all relevant classes\n- forbid use of System.exit in all relevant classes and add exceptions for others\n\nCo-authored-by: John Roesler <vvcephei@apache.org>\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Lucas Bradstreet <lucas@confluent.io>.  Ismael Juma <ismael@confluent.io>","date":"2020-08-06 04:52:50","modifiedFileCount":"14","status":"M","submitter":"John Roesler"}]
