[{"authorTime":"2020-11-10 04:52:28","codes":[{"authorDate":"2020-11-10 04:52:28","commitOrder":1,"curCode":"    public void testInitializeAsResignedCandidate() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withVotedCandidate(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertTrue(state.isCandidate());\n        assertEquals(epoch, state.epoch());\n\n        CandidateState candidateState = state.candidateStateOrThrow();\n        assertEquals(epoch, candidateState.epoch());\n        assertEquals(election, candidateState.election());\n        assertEquals(Utils.mkSet(node1, node2), candidateState.unrecordedVoters());\n        assertEquals(Utils.mkSet(localId), candidateState.grantingVoters());\n        assertEquals(Collections.emptySet(), candidateState.rejectingVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            candidateState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","date":"2020-11-10 04:52:28","endLine":163,"groupId":"4143","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsResignedCandidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/e9e14d5bafec559892c916bf54dbd09dc70f13.src","preCode":"    public void testInitializeAsResignedCandidate() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withVotedCandidate(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertTrue(state.isCandidate());\n        assertEquals(epoch, state.epoch());\n\n        CandidateState candidateState = state.candidateStateOrThrow();\n        assertEquals(epoch, candidateState.epoch());\n        assertEquals(election, candidateState.election());\n        assertEquals(Utils.mkSet(node1, node2), candidateState.unrecordedVoters());\n        assertEquals(Utils.mkSet(localId), candidateState.grantingVoters());\n        assertEquals(Collections.emptySet(), candidateState.rejectingVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            candidateState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2020-11-10 04:52:28","commitOrder":1,"curCode":"    public void testInitializeAsResignedLeader() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withElectedLeader(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        \r\n        \r\n        \r\n\n        \r\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertFalse(state.isLeader());\n        assertEquals(epoch, state.epoch());\n\n        ResignedState resignedState = state.resignedStateOrThrow();\n        assertEquals(epoch, resignedState.epoch());\n        assertEquals(election, resignedState.election());\n        assertEquals(Utils.mkSet(node1, node2), resignedState.unackedVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            resignedState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","date":"2020-11-10 04:52:28","endLine":193,"groupId":"4144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInitializeAsResignedLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/e9e14d5bafec559892c916bf54dbd09dc70f13.src","preCode":"    public void testInitializeAsResignedLeader() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withElectedLeader(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        \r\n        \r\n        \r\n\n        \r\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertFalse(state.isLeader());\n        assertEquals(epoch, state.epoch());\n\n        ResignedState resignedState = state.resignedStateOrThrow();\n        assertEquals(epoch, resignedState.epoch());\n        assertEquals(election, resignedState.election());\n        assertEquals(Utils.mkSet(node1, node2), resignedState.unackedVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            resignedState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"f49c6c203f6ce5c4eb643907c7f164b47db65989","commitMessage":"@@@KAFKA-10661; Add new resigned state for graceful shutdown/initialization (#9531)\n\nWhen initializing the raft state machine after shutting down as a leader.  we were previously entering the \"unattached\" state.  which means we have no leader and no voted candidate. This was a bug because it allowed a reinitialized leader to cast a vote for a candidate in the same epoch that it was already the leader of. This patch fixes the problem by introducing a new \"resigned\" state which allows us to retain the leader state so that we cannot change our vote and we will not accept additional appends.\n\nThis patch also revamps the shutdown logic to make use of the new \"resigned\" state. Previously we had a separate path in `KafkaRaftClient.poll` for the shutdown logic which resulted in some duplication. Instead now we incorporate shutdown behavior into each state's respective logic.\n\nFinally.  this patch changes the shutdown logic so that `EndQuorumEpoch` is only sent by resigning leaders. Previously we allowed this request to be sent by candidates as well.\n\nReviewers: dengziming <dengziming1993@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-11-10 04:52:28","modifiedFileCount":"6","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2021-09-06 23:55:52","codes":[{"authorDate":"2021-09-06 23:55:52","commitOrder":2,"curCode":"    public void testInitializeAsResignedCandidate() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withVotedCandidate(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        int jitterMs = 2500;\n        random.mockNextInt(jitterMs);\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertTrue(state.isCandidate());\n        assertEquals(epoch, state.epoch());\n\n        CandidateState candidateState = state.candidateStateOrThrow();\n        assertEquals(epoch, candidateState.epoch());\n        assertEquals(election, candidateState.election());\n        assertEquals(Utils.mkSet(node1, node2), candidateState.unrecordedVoters());\n        assertEquals(Utils.mkSet(localId), candidateState.grantingVoters());\n        assertEquals(Collections.emptySet(), candidateState.rejectingVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            candidateState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","date":"2021-09-06 23:55:52","endLine":173,"groupId":"104372","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testInitializeAsResignedCandidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/63a5d763c04f982af05acc039351373ee8ef9c.src","preCode":"    public void testInitializeAsResignedCandidate() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withVotedCandidate(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertTrue(state.isCandidate());\n        assertEquals(epoch, state.epoch());\n\n        CandidateState candidateState = state.candidateStateOrThrow();\n        assertEquals(epoch, candidateState.epoch());\n        assertEquals(election, candidateState.election());\n        assertEquals(Utils.mkSet(node1, node2), candidateState.unrecordedVoters());\n        assertEquals(Utils.mkSet(localId), candidateState.grantingVoters());\n        assertEquals(Collections.emptySet(), candidateState.rejectingVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            candidateState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-09-06 23:55:52","commitOrder":2,"curCode":"    public void testInitializeAsResignedLeader() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withElectedLeader(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        \r\n        \r\n        \r\n\n        \r\n        int jitterMs = 2500;\n        random.mockNextInt(jitterMs);\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertFalse(state.isLeader());\n        assertEquals(epoch, state.epoch());\n\n        ResignedState resignedState = state.resignedStateOrThrow();\n        assertEquals(epoch, resignedState.epoch());\n        assertEquals(election, resignedState.election());\n        assertEquals(Utils.mkSet(node1, node2), resignedState.unackedVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            resignedState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","date":"2021-09-06 23:55:52","endLine":203,"groupId":"104372","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testInitializeAsResignedLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/63a5d763c04f982af05acc039351373ee8ef9c.src","preCode":"    public void testInitializeAsResignedLeader() throws IOException {\n        int node1 = 1;\n        int node2 = 2;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, node1, node2);\n        ElectionState election = ElectionState.withElectedLeader(epoch, localId, voters);\n        store.writeElectionState(election);\n\n        \r\n        \r\n        \r\n\n        \r\n        int jitterMs = 2500;\n        Mockito.doReturn(jitterMs).when(random).nextInt(Mockito.anyInt());\n\n        QuorumState state = buildQuorumState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        assertFalse(state.isLeader());\n        assertEquals(epoch, state.epoch());\n\n        ResignedState resignedState = state.resignedStateOrThrow();\n        assertEquals(epoch, resignedState.epoch());\n        assertEquals(election, resignedState.election());\n        assertEquals(Utils.mkSet(node1, node2), resignedState.unackedVoters());\n        assertEquals(electionTimeoutMs + jitterMs,\n            resignedState.remainingElectionTimeMs(time.milliseconds()));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"0118330103e992253a7875a523de3526cad4a6c5","commitMessage":"@@@KAFKA-13273: Add support for Java 17 (#11296)\n\nJava 17 is at release candidate stage and it will be a LTS release once\nit's out (previous LTS release was Java 11).\n\nDetails:\n* Replace Java 16 with Java 17 in Jenkins and Readme.\n* Replace `--illegal-access=permit` (which was removed from Java 17)\n   with  `--add-opens` for the packages we require internal access to.\n   Filed KAFKA-13275 for updating the tests not to require `--add-opens`\n   (where possible).\n* Update `release.py` to use JDK8. and JDK 17 (instead of JDK 8 and JDK 15).\n* Removed all but one Streams test from `testsToExclude`. The\n   Connect test exclusion list remains the same.\n* Add notable change to upgrade.html\n* Upgrade to Gradle 7.2 as it's required for proper Java 17 support.\n* Upgrade mockito to 3.12.4 for better Java 17 support.\n* Adjusted `KafkaRaftClientTest` and `QuorumStateTest` not to require\n   private access to `jdk.internal.util.random`.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-09-06 23:55:52","modifiedFileCount":"3","status":"M","submitter":"Ismael Juma"}]
