[{"authorTime":"2017-09-22 20:45:19","codes":[{"authorDate":"2017-09-22 20:45:19","commitOrder":1,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","date":"2017-09-22 20:45:19","endLine":146,"groupId":"7002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4c/e202b94abce95337fdc7e5b00406e9bd59f9e1.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2017-09-22 20:45:19","commitOrder":1,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","date":"2017-09-22 20:45:19","endLine":162,"groupId":"14745","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4c/e202b94abce95337fdc7e5b00406e9bd59f9e1.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"125d8d6f70829b9a0dbeabfef8f6b2df438dc12b","commitMessage":"@@@KAFKA-5956; use serdes from materialized in table and globalTable\n\nThe new overloads `StreamBuilder.table(String.  Materialized)` and `StreamsBuilder.globalTable(String.  Materialized)` need to set the serdes from `Materialized` on the internal `Consumed` instance that is created.  otherwise the defaults will be used and may result in serialization errors\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3936 from dguy/table-materialized\n","date":"2017-09-22 20:45:19","modifiedFileCount":"2","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-01-19 05:12:44","codes":[{"authorDate":"2018-01-19 05:12:44","commitOrder":2,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore<Long, String>) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","date":"2018-01-19 05:12:44","endLine":257,"groupId":"7002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/496b8dd282d65b04239b95be3f8389f465d4e1.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2018-01-19 05:12:44","commitOrder":2,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore<Long, String>) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","date":"2018-01-19 05:12:44","endLine":273,"groupId":"14745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/496b8dd282d65b04239b95be3f8389f465d4e1.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"75e37d7e2063b726aa0185f4b695f32cde69d95c","commitMessage":"@@@KAFKA-6398: Return value getter based on KTable materialization status\n\nThis is a bug fix that is composed of two parts:\n\n1. The major part is.  for all operators that is generating a KTable.  we should construct its value getter based on whether the KTable itself is materialized.\n1.a If yes.  then query the materialized store directly for value getter.\n1.b If not.  then hand over to its parents value getter (recursively) and apply the computation to return.\n\n2. The minor part is.  in KStreamImpl.  when joining with a table.  we should connect with table's `valueGetterSupplier().storeNames()`.  not the `internalStoreName()` as the latter always assume that the KTable is materialized.  but that is not always true.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4421 from guozhangwang/K6398-KTableValueGetter\n","date":"2018-01-19 05:12:44","modifiedFileCount":"17","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":3,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n        driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n        final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","date":"2018-04-27 02:30:42","endLine":264,"groupId":"7002","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/e01faf32ba21c69eb7ed9be4241386ac2c3684.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore<Long, String>) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":3,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n        driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n        final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","date":"2018-04-27 02:30:42","endLine":282,"groupId":"7002","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/e01faf32ba21c69eb7ed9be4241386ac2c3684.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(0L);\n        driver.process(topic, 1L, \"value1\");\n        driver.process(topic, 2L, \"value2\");\n        driver.flushState();\n        final KeyValueStore<Long, String> store = (KeyValueStore<Long, String>) driver.allStateStores().get(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":4,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n            assertThat(results.get(1L), equalTo(\"value1\"));\n            assertThat(results.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":243,"groupId":"7002","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/2bfa6b16aa3a2df03ce9724bc846a72d64e604.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n        driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n        final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n        assertThat(results.get(1L), equalTo(\"value1\"));\n        assertThat(results.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":4,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":261,"groupId":"7002","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/2bfa6b16aa3a2df03ce9724bc846a72d64e604.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n        driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n        final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n        assertThat(store.get(1L), equalTo(\"value1\"));\n        assertThat(store.get(2L), equalTo(\"value2\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2019-01-09 05:32:53","commitOrder":5,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = results::put;\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        final ConsumerRecordFactory<Long, String> recordFactory =\n            new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n            assertThat(results.get(1L), equalTo(\"value1\"));\n            assertThat(results.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2019-01-09 05:32:53","endLine":315,"groupId":"7002","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/88a87b402019f25993b4b848040adc7dd12811.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = new ForeachAction<Long, String>() {\n            @Override\n            public void apply(final Long key, final String value) {\n                results.put(key, value);\n            }\n        };\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n            assertThat(results.get(1L), equalTo(\"value1\"));\n            assertThat(results.get(2L), equalTo(\"value2\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":5,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":261,"groupId":"7002","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/2bfa6b16aa3a2df03ce9724bc846a72d64e604.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        final ConsumerRecordFactory<Long, String> recordFactory = new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":6,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = results::put;\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Long, String> inputTopic =\n                    driver.createInputTopic(topic, new LongSerializer(), new StringSerializer());\n            inputTopic.pipeInput(1L, \"value1\");\n            inputTopic.pipeInput(2L, \"value2\");\n\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n            assertThat(results.get(1L), equalTo(\"value1\"));\n            assertThat(results.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":341,"groupId":"102560","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/1829771ef77d4cb3aedb45b870f8a508499d4b.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeTable() {\n        final Map<Long, String> results = new HashMap<>();\n        final String topic = \"topic\";\n        final ForeachAction<Long, String> action = results::put;\n        builder.table(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()))\n                .toStream().foreach(action);\n\n        final ConsumerRecordFactory<Long, String> recordFactory =\n            new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n            assertThat(results.get(1L), equalTo(\"value1\"));\n            assertThat(results.get(2L), equalTo(\"value2\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":6,"curCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Long, String> inputTopic =\n                    driver.createInputTopic(topic, new LongSerializer(), new StringSerializer());\n            inputTopic.pipeInput(1L, \"value1\");\n            inputTopic.pipeInput(2L, \"value2\");\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":360,"groupId":"102560","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/1829771ef77d4cb3aedb45b870f8a508499d4b.src","preCode":"    public void shouldUseSerdesDefinedInMaterializedToConsumeGlobalTable() {\n        final String topic = \"topic\";\n        builder.globalTable(topic, Materialized.<Long, String, KeyValueStore<Bytes, byte[]>>as(\"store\")\n                .withKeySerde(Serdes.Long())\n                .withValueSerde(Serdes.String()));\n\n        final ConsumerRecordFactory<Long, String> recordFactory =\n            new ConsumerRecordFactory<>(new LongSerializer(), new StringSerializer());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic, 1L, \"value1\"));\n            driver.pipeInput(recordFactory.create(topic, 2L, \"value2\"));\n            final KeyValueStore<Long, String> store = driver.getKeyValueStore(\"store\");\n\n            assertThat(store.get(1L), equalTo(\"value1\"));\n            assertThat(store.get(2L), equalTo(\"value2\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"}]
