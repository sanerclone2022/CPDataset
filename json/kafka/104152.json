[{"authorTime":"2020-06-12 02:28:57","codes":[{"authorDate":"2020-06-12 02:28:57","commitOrder":1,"curCode":"    private static SupportedFeatureKeyCollection createSupportedFeatureKeys(\n        Features<SupportedVersionRange> latestSupportedFeatures) {\n        SupportedFeatureKeyCollection converted = new SupportedFeatureKeyCollection();\n        for (Map.Entry<String, SupportedVersionRange> feature : latestSupportedFeatures.features().entrySet()) {\n            SupportedFeatureKey key = new SupportedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersion(feature.getValue().min());\n            key.setMaxVersion(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","date":"2020-06-12 02:28:57","endLine":203,"groupId":"2722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSupportedFeatureKeys","params":"(Features<SupportedVersionRange>latestSupportedFeatures)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/5a942dc3f348a227968228cc52e4060ee978c6.src","preCode":"    private static SupportedFeatureKeyCollection createSupportedFeatureKeys(\n        Features<SupportedVersionRange> latestSupportedFeatures) {\n        SupportedFeatureKeyCollection converted = new SupportedFeatureKeyCollection();\n        for (Map.Entry<String, SupportedVersionRange> feature : latestSupportedFeatures.features().entrySet()) {\n            SupportedFeatureKey key = new SupportedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersion(feature.getValue().min());\n            key.setMaxVersion(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"},{"authorDate":"2020-06-12 02:28:57","commitOrder":1,"curCode":"    private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n        Features<FinalizedVersionRange> finalizedFeatures) {\n        FinalizedFeatureKeyCollection converted = new FinalizedFeatureKeyCollection();\n        for (Map.Entry<String, FinalizedVersionRange> feature : finalizedFeatures.features().entrySet()) {\n            FinalizedFeatureKey key = new FinalizedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersionLevel(feature.getValue().min());\n            key.setMaxVersionLevel(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","date":"2020-06-12 02:28:57","endLine":217,"groupId":"2722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizedFeatureKeys","params":"(Features<FinalizedVersionRange>finalizedFeatures)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/5a942dc3f348a227968228cc52e4060ee978c6.src","preCode":"    private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n        Features<FinalizedVersionRange> finalizedFeatures) {\n        FinalizedFeatureKeyCollection converted = new FinalizedFeatureKeyCollection();\n        for (Map.Entry<String, FinalizedVersionRange> feature : finalizedFeatures.features().entrySet()) {\n            FinalizedFeatureKey key = new FinalizedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersionLevel(feature.getValue().min());\n            key.setMaxVersionLevel(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"}],"commitId":"4f96c5b424956355339dd3216c426c1c0388fe9e","commitMessage":"@@@KAFKA-10027: Implement read path for feature versioning system (KIP-584) (#8680)\n\nIn this PR.  I have implemented various classes and integration for the read path of the feature versioning system (KIP-584). The ultimate plan is that the cluster-wide finalized features information is going to be stored in ZK under the node /feature. The read path implemented in this PR is centered around reading this finalized features information from ZK.  and.  processing it inside the Broker.\n\nHere is a summary of what's in this PR (a lot of it is new classes):\n\nA facility is provided in the broker to declare its supported features.  and advertise its supported features via its own BrokerIdZNode under a features key.\nA facility is provided in the broker to listen to and propagate cluster-wide finalized feature changes from ZK.\nWhen new finalized features are read from ZK.  feature incompatibilities are detected by comparing against the broker's own supported features.\nApiVersionsResponse is now served containing supported and finalized feature information (using the newly added tagged fields).\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jun Rao <junrao@gmail.com>","date":"2020-06-12 02:28:57","modifiedFileCount":"4","status":"B","submitter":"Kowshik Prakasam"},{"authorTime":"2020-10-08 01:23:16","codes":[{"authorDate":"2020-10-08 01:23:16","commitOrder":2,"curCode":"    private static SupportedFeatureKeyCollection createSupportedFeatureKeys(\n        Features<SupportedVersionRange> latestSupportedFeatures) {\n        SupportedFeatureKeyCollection converted = new SupportedFeatureKeyCollection();\n        for (Map.Entry<String, SupportedVersionRange> feature : latestSupportedFeatures.features().entrySet()) {\n            final SupportedFeatureKey key = new SupportedFeatureKey();\n            final SupportedVersionRange versionRange = feature.getValue();\n            key.setName(feature.getKey());\n            key.setMinVersion(versionRange.min());\n            key.setMaxVersion(versionRange.max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","date":"2020-10-08 01:23:16","endLine":231,"groupId":"104152","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSupportedFeatureKeys","params":"(Features<SupportedVersionRange>latestSupportedFeatures)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/10d3347d2b7c4cd9eb4c5e3a1e971325f6aa96.src","preCode":"    private static SupportedFeatureKeyCollection createSupportedFeatureKeys(\n        Features<SupportedVersionRange> latestSupportedFeatures) {\n        SupportedFeatureKeyCollection converted = new SupportedFeatureKeyCollection();\n        for (Map.Entry<String, SupportedVersionRange> feature : latestSupportedFeatures.features().entrySet()) {\n            SupportedFeatureKey key = new SupportedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersion(feature.getValue().min());\n            key.setMaxVersion(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2020-10-08 01:23:16","commitOrder":2,"curCode":"    private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n        Features<FinalizedVersionRange> finalizedFeatures) {\n        FinalizedFeatureKeyCollection converted = new FinalizedFeatureKeyCollection();\n        for (Map.Entry<String, FinalizedVersionRange> feature : finalizedFeatures.features().entrySet()) {\n            final FinalizedFeatureKey key = new FinalizedFeatureKey();\n            final FinalizedVersionRange versionLevelRange = feature.getValue();\n            key.setName(feature.getKey());\n            key.setMinVersionLevel(versionLevelRange.min());\n            key.setMaxVersionLevel(versionLevelRange.max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","date":"2020-10-08 01:23:16","endLine":246,"groupId":"104152","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizedFeatureKeys","params":"(Features<FinalizedVersionRange>finalizedFeatures)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/10d3347d2b7c4cd9eb4c5e3a1e971325f6aa96.src","preCode":"    private static FinalizedFeatureKeyCollection createFinalizedFeatureKeys(\n        Features<FinalizedVersionRange> finalizedFeatures) {\n        FinalizedFeatureKeyCollection converted = new FinalizedFeatureKeyCollection();\n        for (Map.Entry<String, FinalizedVersionRange> feature : finalizedFeatures.features().entrySet()) {\n            FinalizedFeatureKey key = new FinalizedFeatureKey();\n            key.setName(feature.getKey());\n            key.setMinVersionLevel(feature.getValue().min());\n            key.setMaxVersionLevel(feature.getValue().max());\n            converted.add(key);\n        }\n\n        return converted;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/ApiVersionsResponse.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"fb4f297207ef62f71e4a6d2d0dac75752933043d","commitMessage":"@@@KAFKA-10028: Implement write path for feature versioning system (KIP-584) (#9001)\n\nSummary:\nIn this PR.  I have implemented the write path of the feature versioning system (KIP-584). Here is a summary of what's in this PR:\n\nNew APIs in org.apache.kafka.clients.admin.Admin interface.  and their client and server implementations. These APIs can be used to describe features and update finalized features. These APIs are: Admin#describeFeatures and Admin#updateFeatures.\nThe write path is provided by the Admin#updateFeatures API. The corresponding server-side implementation is provided in KafkaApis and KafkaController classes. This can be a good place to start the code review.\nThe write path is supplemented by Admin#describeFeatures client API. This does not translate 1:1 to a server-side API. Instead.  under the hood the API makes an explicit ApiVersionsRequest to the Broker to fetch the supported and finalized features.\nImplemented a suite of integration tests in UpdateFeaturesTest.scala that thoroughly exercises the various cases in the write path.\n\nOther changes:\n\nThe data type of the FinalizedFeaturesEpoch field in ApiVersionsResponse has been modified from int32 to int64. This change is to conform with the latest changes to the KIP explained in the voting thread.\nAlong the way.  the class SupportedFeatures has been renamed to be called BrokerFeatures.  and.  it now holds both supported features as well as default minimum version levels.\nFor the purpose of testing.  both the BrokerFeatures and FinalizedFeatureCache classes have been changed to be no longer singleton in implementation. Instead.  these are now instantiated once and maintained in KafkaServer. The singleton instances are passed around to various classes.  as needed.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jun Rao <junrao@gmail.com>","date":"2020-10-08 01:23:16","modifiedFileCount":"13","status":"M","submitter":"Kowshik Prakasam"}]
