[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldNotThrowInvalidRangeExceptionWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.findSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                    \" This may be due to range arguments set in the wrong order, \" +\n                    \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                    \" Note that the built-in numerical serdes do not follow this for negative numbers\")\n            );\n        }\n    }\n","date":"2020-10-08 21:08:24","endLine":711,"groupId":"6479","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowInvalidRangeExceptionWithNegativeFromKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/84e2ca706b69fb6c55f307ac1b6f2ba88a3321.src","preCode":"    public void shouldNotThrowInvalidRangeExceptionWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.findSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                    \" This may be due to range arguments set in the wrong order, \" +\n                    \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                    \" Note that the built-in numerical serdes do not follow this for negative numbers\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                cachingStore.backwardFindSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\n                    \"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                        \" This may be due to range arguments set in the wrong order, \" +\n                        \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                        \" Note that the built-in numerical serdes do not follow this for negative numbers\"\n                )\n            );\n        }\n    }\n","date":"2020-10-08 21:08:24","endLine":697,"groupId":"6479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/72c7f5637dbcec95a7d99980dd6e71c8c0d2bc.src","preCode":"    public void shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                cachingStore.backwardFindSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\n                    \"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                        \" This may be due to range arguments set in the wrong order, \" +\n                        \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                        \" Note that the built-in numerical serdes do not follow this for negative numbers\"\n                )\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:25:22","codes":[{"authorDate":"2021-07-27 07:25:22","commitOrder":2,"curCode":"    public void shouldNotThrowInvalidRangeExceptionWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class);\n             final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.findSessions(keyFrom, keyTo, 0L, 10L)) {\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                    \" This may be due to range arguments set in the wrong order, \" +\n                    \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                    \" Note that the built-in numerical serdes do not follow this for negative numbers\")\n            );\n        }\n    }\n","date":"2021-07-27 07:25:22","endLine":724,"groupId":"101045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowInvalidRangeExceptionWithNegativeFromKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/7504628762f94bca97d60b6a7746659fdd9cfd.src","preCode":"    public void shouldNotThrowInvalidRangeExceptionWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.findSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                    \" This may be due to range arguments set in the wrong order, \" +\n                    \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                    \" Note that the built-in numerical serdes do not follow this for negative numbers\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"M"},{"authorDate":"2021-07-27 07:25:22","commitOrder":2,"curCode":"    public void shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class);\n             final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                 cachingStore.backwardFindSessions(keyFrom, keyTo, 0L, 10L)) {\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\n                    \"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                        \" This may be due to range arguments set in the wrong order, \" +\n                        \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                        \" Note that the built-in numerical serdes do not follow this for negative numbers\"\n                )\n            );\n        }\n    }\n","date":"2021-07-27 07:25:22","endLine":712,"groupId":"101045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/f329df538bcd4b42bc705ac6f6ee16ef15f7c3.src","preCode":"    public void shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey() {\n        final Bytes keyFrom = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", -1));\n        final Bytes keyTo = Bytes.wrap(Serdes.Integer().serializer().serialize(\"\", 1));\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(CachingSessionStore.class)) {\n            final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                cachingStore.backwardFindSessions(keyFrom, keyTo, 0L, 10L);\n            assertFalse(iterator.hasNext());\n\n            final List<String> messages = appender.getMessages();\n            assertThat(\n                messages,\n                hasItem(\n                    \"Returning empty iterator for fetch with invalid key range: from > to.\" +\n                        \" This may be due to range arguments set in the wrong order, \" +\n                        \"or serdes that don't preserve ordering when lexicographically comparing the serialized bytes.\" +\n                        \" Note that the built-in numerical serdes do not follow this for negative numbers\"\n                )\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"}],"commitId":"ded66d92a4e0fd5810311b727f76058386d92c25","commitMessage":"@@@KAFKA-13124: close KeyValueIterator instance in internals tests (part 1) (#11106)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:25:22","modifiedFileCount":"7","status":"M","submitter":"Luke Chen"}]
