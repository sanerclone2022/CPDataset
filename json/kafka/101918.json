[{"authorTime":"2021-04-29 04:22:15","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":2,"curCode":"    public void shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled() {\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-0_0\");\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-0_0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE);\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId\",\n            eosAlphaMockClientSupplier,\n            new TaskId(0, 0),\n            null,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","date":"2020-04-04 10:17:57","endLine":466,"groupId":"12926","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/779d4ea1ddf85cd39aebcc73bb505b337e1a40.src","preCode":"    public void shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled() {\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-0_0\");\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-0_0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE);\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId\",\n            eosAlphaMockClientSupplier,\n            new TaskId(0, 0),\n            null,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"NB"},{"authorDate":"2021-04-29 04:22:15","commitOrder":2,"curCode":"    public void shouldSetTransactionIdUsingProcessIdIfEosV2Enabled() {\n        final UUID processId = UUID.randomUUID();\n\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-\" + processId + \"-0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-\" + processId);\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-StreamThread-0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE_V2).anyTimes();\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId-StreamThread-0\",\n            eosAlphaMockClientSupplier,\n            null,\n            processId,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","date":"2021-04-29 04:22:15","endLine":496,"groupId":"5141","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetTransactionIdUsingProcessIdIfEosV2Enabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f4/dec89829464a66a0f450501f06afd3b0cc2a82.src","preCode":"    public void shouldSetTransactionIdUsingProcessIdIfEosV2Enabled() {\n        final UUID processId = UUID.randomUUID();\n\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-\" + processId + \"-0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-\" + processId);\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-StreamThread-0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE_V2).anyTimes();\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId-StreamThread-0\",\n            eosAlphaMockClientSupplier,\n            null,\n            processId,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"B"}],"commitId":"3805f3706f8f3ebba81b80915c9259590525fb05","commitMessage":"@@@KAFKA-12574: KIP-732.  Deprecate eos-alpha and replace eos-beta with eos-v2 (#10573)\n\nDeprecates the following \n\n1. StreamsConfig.EXACTLY_ONCE\n2. StreamsConfig.EXACTLY_ONCE_BETA\n3. Producer#sendOffsetsToTransaction(Map offsets.  String consumerGroupId)\n\nAnd introduces a new StreamsConfig.EXACTLY_ONCE_V2 config. Additionally.  this PR replaces usages of the term \"eos-beta\" throughout the code with the term \"eos-v2\"\n\nReviewers: Matthias J. Sax <mjsax@confluent.io>","date":"2021-04-29 04:22:15","modifiedFileCount":"32","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-08-31 06:39:25","codes":[{"authorDate":"2021-08-31 06:39:25","commitOrder":3,"curCode":"    public void shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled() {\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-0_0\");\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-0_0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE);\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId\",\n            eosAlphaMockClientSupplier,\n            new TaskId(0, 0),\n            null,\n            logContext,\n            mockTime\n        );\n\n        verify(mockMap);\n    }\n","date":"2021-08-31 06:39:25","endLine":494,"groupId":"101918","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/074bf89515edf3277d827680b8572acfa0cc05.src","preCode":"    public void shouldSetTransactionIdUsingTaskIdIfEosAlphaEnabled() {\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-0_0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-0_0\");\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-0_0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE);\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId\",\n            eosAlphaMockClientSupplier,\n            new TaskId(0, 0),\n            null,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"},{"authorDate":"2021-08-31 06:39:25","commitOrder":3,"curCode":"    public void shouldSetTransactionIdUsingProcessIdIfEosV2Enabled() {\n        final UUID processId = UUID.randomUUID();\n\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-\" + processId + \"-0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-\" + processId);\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-StreamThread-0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE_V2).anyTimes();\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId-StreamThread-0\",\n            eosAlphaMockClientSupplier,\n            null,\n            processId,\n            logContext,\n            mockTime\n        );\n\n        verify(mockMap);\n    }\n","date":"2021-08-31 06:39:25","endLine":522,"groupId":"101918","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetTransactionIdUsingProcessIdIfEosV2Enabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/074bf89515edf3277d827680b8572acfa0cc05.src","preCode":"    public void shouldSetTransactionIdUsingProcessIdIfEosV2Enabled() {\n        final UUID processId = UUID.randomUUID();\n\n        final Map<String, Object> mockMap = mock(Map.class);\n        expect(mockMap.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"appId-\" + processId + \"-0\")).andReturn(null);\n        expect(mockMap.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG)).andReturn(\"appId-\" + processId);\n\n        final StreamsConfig mockConfig = mock(StreamsConfig.class);\n        expect(mockConfig.getProducerConfigs(\"threadId-StreamThread-0-producer\")).andReturn(mockMap);\n        expect(mockConfig.getString(StreamsConfig.APPLICATION_ID_CONFIG)).andReturn(\"appId\");\n        expect(mockConfig.getString(StreamsConfig.PROCESSING_GUARANTEE_CONFIG)).andReturn(StreamsConfig.EXACTLY_ONCE_V2).anyTimes();\n\n        replay(mockMap, mockConfig);\n\n        new StreamsProducer(\n            mockConfig,\n            \"threadId-StreamThread-0\",\n            eosAlphaMockClientSupplier,\n            null,\n            processId,\n            logContext\n        );\n\n        verify(mockMap);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"M"}],"commitId":"01ab888dbd08ccd4b0de9333d21581ce24fe2c3b","commitMessage":"@@@KAFKA-13229: add total blocked time metric to streams (KIP-761) (#11149)\n\n* Add the following producer metrics:\nflush-time-total: cumulative sum of time elapsed during in flush.\ntxn-init-time-total: cumulative sum of time elapsed during in initTransactions.\ntxn-begin-time-total: cumulative sum of time elapsed during in beginTransaction.\ntxn-send-offsets-time-total: cumulative sum of time elapsed during in sendOffsetsToTransaction.\ntxn-commit-time-total: cumulative sum of time elapsed during in commitTransaction.\ntxn-abort-time-total: cumulative sum of time elapsed during in abortTransaction.\n\n* Add the following consumer metrics:\ncommited-time-total: cumulative sum of time elapsed during in committed.\ncommit-sync-time-total: cumulative sum of time elapsed during in commitSync.\n\n* Add a total-blocked-time metric to streams that is the sum of:\nconsumer?s io-waittime-total\nconsumer?s iotime-total\nconsumer?s committed-time-total\nconsumer?s commit-sync-time-total\nrestore consumer?s io-waittime-total\nrestore consumer?s iotime-total\nadmin client?s io-waittime-total\nadmin client?s iotime-total\nproducer?s bufferpool-wait-time-total\nproducer's flush-time-total\nproducer's txn-init-time-total\nproducer's txn-begin-time-total\nproducer's txn-send-offsets-time-total\nproducer's txn-commit-time-total\nproducer's txn-abort-time-total\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-08-31 06:39:25","modifiedFileCount":"23","status":"M","submitter":"Rohan"}]
