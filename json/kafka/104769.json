[{"authorTime":"2018-05-31 02:39:45","codes":[{"authorDate":"2018-05-31 02:39:45","commitOrder":1,"curCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 02:39:45","endLine":271,"groupId":"9914","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/8bcc5a6ccc2ae0df99d24c56d789a936de03ed.src","preCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"},{"authorDate":"2018-05-31 02:39:45","commitOrder":1,"curCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 02:39:45","endLine":330,"groupId":"9914","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasksWthBadConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/8bcc5a6ccc2ae0df99d24c56d789a936de03ed.src","preCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"}],"commitId":"f8dfbb067caa797c19494e12da6b4c6786980f73","commitMessage":"@@@KAFKA-6738: Implement error handling for source and sink tasks (KIP-298)\n\nThis PR implements the features described in this KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-298%3A+Error+Handling+in+Connect\n\nThis PR changes the Connect framework to allow it to automatically deal with errors encountered while processing records in a Connector. The following behavior changes are introduced here:\n\n**Retry on Failure**: Retry the failed operation a configurable number of times.  with backoff between each retry.\n**Task Tolerance Limits**: Tolerate a configurable number of failures in a task.\n\nWe also add the following ways to report errors.  along with sufficient context to simplify the debugging process:\n\n**Log Error Context**: The error information along with processing context is logged along with standard application logs.\n**Dead Letter Queue**: Produce the original message into a Kafka topic (applicable only to sink connectors).\n\nNew **metrics** which will monitor the number of failures.  and the behavior of the response handler are added.\n\nThe changes proposed here **are backward compatible**. The current behavior in Connect is to kill the task on the first error in any stage. This will remain the default behavior if the connector does not override any of the new configurations which are provided as part of this feature.\n\nTesting: added multiple unit tests to test the retry and tolerance logic.\n\nAuthor: Arjun Satish <arjun@confluent.io>\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5065 from wicknicks/KAFKA-6378\n","date":"2018-05-31 02:39:45","modifiedFileCount":"12","status":"B","submitter":"Arjun Satish"},{"authorTime":"2018-06-06 04:59:15","codes":[{"authorDate":"2018-06-06 04:59:15","commitOrder":2,"curCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps));\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-06-06 04:59:15","endLine":271,"groupId":"9914","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/31642afcc750ea95c441e84edeeb5d7ee780f6.src","preCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2018-06-06 04:59:15","commitOrder":2,"curCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps));\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-06-06 04:59:15","endLine":336,"groupId":"9914","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasksWthBadConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/31642afcc750ea95c441e84edeeb5d7ee780f6.src","preCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        LogReporter reporter = new LogReporter(taskId);\n        Map<String, Object> reportProps = new HashMap<>();\n        reportProps.put(LogReporter.LOG_ENABLE, \"true\");\n        reportProps.put(LogReporter.LOG_INCLUDE_MESSAGES, \"true\");\n        reporter.configure(reportProps);\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = new RetryWithToleranceOperator(time);\n        retryWithToleranceOperator.configure(OPERATION_EXECUTOR_PROPS);\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"faa15b8b758ed4e3f93aaa4d49a941562bdc86bb","commitMessage":"@@@KAFKA-6981: Move the error handling configuration properties into the ConnectorConfig and SinkConnectorConfig classes (KIP-298)\n\nMove the error handling configuration properties into the ConnectorConfig and SinkConnectorConfig classes.  and refactor the tests and classes to use these new properties.\n\nTesting: Unit tests and running the connect-standalone script with a file sink connector.\n\nAuthor: Arjun Satish <arjun@confluent.io>\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Robert Yokota <rayokota@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5125 from wicknicks/KAFKA-6981\n","date":"2018-06-06 04:59:15","modifiedFileCount":"17","status":"M","submitter":"Arjun Satish"},{"authorTime":"2018-08-03 05:36:02","codes":[{"authorDate":"2018-08-03 05:36:02","commitOrder":3,"curCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-08-03 05:36:02","endLine":269,"groupId":"9914","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/f9c717068e3098da95d231e665f74c782fc0fc.src","preCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps));\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2018-08-03 05:36:02","commitOrder":3,"curCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-08-03 05:36:02","endLine":333,"groupId":"9914","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasksWthBadConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/f9c717068e3098da95d231e665f74c782fc0fc.src","preCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps));\n        reporter.metrics(errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"70d882861e1bf3eb503c84a31834e8b628de2df9","commitMessage":"@@@KAFKA-7228: Set errorHandlingMetrics for dead letter queue\n\nDLQ reporter does not get a `errorHandlingMetrics` object when created by the worker. This results in an NPE.\n\nSigned-off-by: Arjun Satish <arjunconfluent.io>\n\n*More detailed description of your change. \nif necessary. The PR title and PR message become\nthe squashed commit message.  so use a separate\ncomment to ping reviewers.*\n\n*Summary of testing strategy (including rationale)\nfor the feature or bug fix. Unit and/or integration\ntests are expected for any behaviour change and\nsystem tests should be considered for larger changes.*\n\nAuthor: Arjun Satish <arjun@confluent.io>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5440 from wicknicks/KAFKA-7228\n","date":"2018-08-03 05:36:02","modifiedFileCount":"6","status":"M","submitter":"Arjun Satish"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":4,"curCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":393,"groupId":"9914","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/3490488f8d246c6911ace28f43ccd1179844f2.src","preCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":4,"curCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":458,"groupId":"9914","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlingInSourceTasksWthBadConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/3490488f8d246c6911ace28f43ccd1179844f2.src","preCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2021-07-21 06:39:26","codes":[{"authorDate":"2021-07-21 06:39:26","commitOrder":5,"curCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.initializeAndStart();\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-07-21 06:39:26","endLine":412,"groupId":"104769","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testErrorHandlingInSourceTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b0/cd0b414f1c87ad2ab5cac77b9d69b38e72e4fe.src","preCode":"    public void testErrorHandlingInSourceTasks() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator);\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 4.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"},{"authorDate":"2021-07-21 06:39:26","commitOrder":5,"curCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.initializeAndStart();\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-07-21 06:39:26","endLine":478,"groupId":"104769","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testErrorHandlingInSourceTasksWthBadConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b0/cd0b414f1c87ad2ab5cac77b9d69b38e72e4fe.src","preCode":"    public void testErrorHandlingInSourceTasksWthBadConverter() throws Exception {\n        Map<String, String> reportProps = new HashMap<>();\n        reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG, \"true\");\n        reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, \"true\");\n        LogReporter reporter = new LogReporter(taskId, connConfig(reportProps), errorHandlingMetrics);\n\n        RetryWithToleranceOperator retryWithToleranceOperator = operator();\n        retryWithToleranceOperator.metrics(errorHandlingMetrics);\n        retryWithToleranceOperator.reporters(singletonList(reporter));\n        createSourceTask(initialState, retryWithToleranceOperator, badConverter());\n\n        \r\n        Schema valSchema = SchemaBuilder.struct().field(\"val\", Schema.INT32_SCHEMA).build();\n        Struct struct1 = new Struct(valSchema).put(\"val\", 1234);\n        SourceRecord record1 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct1);\n        Struct struct2 = new Struct(valSchema).put(\"val\", 6789);\n        SourceRecord record2 = new SourceRecord(emptyMap(), emptyMap(), TOPIC, PARTITION1, valSchema, struct2);\n\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(false);\n        EasyMock.expect(workerSourceTask.isStopping()).andReturn(true);\n\n        EasyMock.expect(workerSourceTask.commitOffsets()).andReturn(true);\n\n        offsetWriter.offset(EasyMock.anyObject(), EasyMock.anyObject());\n        EasyMock.expectLastCall().times(2);\n        sourceTask.initialize(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        sourceTask.start(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record1));\n        EasyMock.expect(sourceTask.poll()).andReturn(singletonList(record2));\n        expectTopicCreation(TOPIC);\n        EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null).times(2);\n\n        PowerMock.replayAll();\n\n        workerSourceTask.initialize(TASK_CONFIG);\n        workerSourceTask.execute();\n\n        \r\n        assertSourceMetricValue(\"source-record-poll-total\", 2.0);\n        \r\n        assertSourceMetricValue(\"source-record-write-total\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-errors\", 0.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-record-failures\", 8.0);\n        \r\n        assertErrorHandlingMetricValue(\"total-records-skipped\", 0.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ErrorHandlingTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"0314801a8e67a96f8cdea85bf55cb5bed808fc34","commitMessage":"@@@KAFKA-9887 fix failed task or connector count on startup failure (#8844)\n\nMoved the responsibility for recording task and connector startup and failure metrics from the invocation code\ninto the status listener. The reason behind this is that the WorkerTasks (and subclasses) were either not propagating exceptions upwards.  or were unable to do so easily because they were running on completely different threads.\n\nAlso split out WorkerMetricsGroup from being an inner class into being a standard class. This was to make sure\nthe Data Abstraction Count checkStyle rule was not violated.\n\nAuthor: Michael Carter <michael.carter@instaclustr.com>\nReviewers: Chris Egerton <chrise@confluent.io>.  Randall Hauch <rhauch@gmail.com>","date":"2021-07-21 06:39:26","modifiedFileCount":"8","status":"M","submitter":"Michael Carter"}]
