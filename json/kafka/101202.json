[{"authorTime":"2019-08-14 22:58:28","codes":[{"authorDate":"2019-02-19 02:14:37","commitOrder":3,"curCode":"    public void shouldGetSegmentsWithinTimeRange() {\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(3);\n        final long streamTime = updateStreamTimeAndCreateSegment(4);\n        segments.getOrCreateSegmentIfLive(0, context, streamTime);\n        segments.getOrCreateSegmentIfLive(1, context, streamTime);\n        segments.getOrCreateSegmentIfLive(2, context, streamTime);\n        segments.getOrCreateSegmentIfLive(3, context, streamTime);\n        segments.getOrCreateSegmentIfLive(4, context, streamTime);\n\n        final List<KeyValueSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","date":"2019-02-19 02:14:37","endLine":192,"groupId":"5808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSegmentsWithinTimeRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/cec67a25a7dcf696b5ddf15057751770c7c3bc.src","preCode":"    public void shouldGetSegmentsWithinTimeRange() {\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(3);\n        final long streamTime = updateStreamTimeAndCreateSegment(4);\n        segments.getOrCreateSegmentIfLive(0, context, streamTime);\n        segments.getOrCreateSegmentIfLive(1, context, streamTime);\n        segments.getOrCreateSegmentIfLive(2, context, streamTime);\n        segments.getOrCreateSegmentIfLive(3, context, streamTime);\n        segments.getOrCreateSegmentIfLive(4, context, streamTime);\n\n        final List<KeyValueSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"NB"},{"authorDate":"2019-08-14 22:58:28","commitOrder":3,"curCode":"    public void shouldGetSegmentsWithinTimeRangeOutOfOrder() {\n        updateStreamTimeAndCreateSegment(4);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(3);\n\n        final List<TimestampedSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","date":"2019-08-14 22:58:28","endLine":207,"groupId":"5808","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSegmentsWithinTimeRangeOutOfOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c88d0c31f5384985128200103690916f11f84b.src","preCode":"    public void shouldGetSegmentsWithinTimeRangeOutOfOrder() {\n        updateStreamTimeAndCreateSegment(4);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(3);\n\n        final List<TimestampedSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"}],"commitId":"e6fe4c13deb9ca814513a8c12d79dd76af658762","commitMessage":"@@@MINOR: Correct typo in test name `TimetampedSegmentsTest` (#7210)\n\nReviewers: Sophie Blee-Goldman <sophie@confluent.io>.  Stanislav Kozlovski <stanislav@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-08-14 22:58:28","modifiedFileCount":"0","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-09-03 06:17:07","codes":[{"authorDate":"2020-09-03 06:17:07","commitOrder":4,"curCode":"    public void shouldGetSegmentsWithinTimeRange() {\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(3);\n        final long streamTime = updateStreamTimeAndCreateSegment(4);\n        segments.getOrCreateSegmentIfLive(0, context, streamTime);\n        segments.getOrCreateSegmentIfLive(1, context, streamTime);\n        segments.getOrCreateSegmentIfLive(2, context, streamTime);\n        segments.getOrCreateSegmentIfLive(3, context, streamTime);\n        segments.getOrCreateSegmentIfLive(4, context, streamTime);\n\n        final List<KeyValueSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL, true);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","date":"2020-09-03 06:17:07","endLine":195,"groupId":"101202","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSegmentsWithinTimeRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/ef8ce8e13f5ded7c14c3c3b1deee70b53de290.src","preCode":"    public void shouldGetSegmentsWithinTimeRange() {\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(3);\n        final long streamTime = updateStreamTimeAndCreateSegment(4);\n        segments.getOrCreateSegmentIfLive(0, context, streamTime);\n        segments.getOrCreateSegmentIfLive(1, context, streamTime);\n        segments.getOrCreateSegmentIfLive(2, context, streamTime);\n        segments.getOrCreateSegmentIfLive(3, context, streamTime);\n        segments.getOrCreateSegmentIfLive(4, context, streamTime);\n\n        final List<KeyValueSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2020-09-03 06:17:07","commitOrder":4,"curCode":"    public void shouldGetSegmentsWithinTimeRangeOutOfOrder() {\n        updateStreamTimeAndCreateSegment(4);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(3);\n\n        final List<TimestampedSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL, true);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","date":"2020-09-03 06:17:07","endLine":231,"groupId":"101202","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSegmentsWithinTimeRangeOutOfOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/8f1c9471b1ea0295b0fe881931263deaca4b82.src","preCode":"    public void shouldGetSegmentsWithinTimeRangeOutOfOrder() {\n        updateStreamTimeAndCreateSegment(4);\n        updateStreamTimeAndCreateSegment(2);\n        updateStreamTimeAndCreateSegment(0);\n        updateStreamTimeAndCreateSegment(1);\n        updateStreamTimeAndCreateSegment(3);\n\n        final List<TimestampedSegment> segments = this.segments.segments(0, 2 * SEGMENT_INTERVAL);\n        assertEquals(3, segments.size());\n        assertEquals(0, segments.get(0).id);\n        assertEquals(1, segments.get(1).id);\n        assertEquals(2, segments.get(2).id);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"4f06d9e7d083c30912c810f9deadea809fd74edf","commitMessage":"@@@KAFKA-9929: Support backward iterator on WindowStore (#9138)\n\nImplements KIP-617 on WindowStore that depends on #9137.\n\nTesting strategy: extend existing tests to validate reverse operations are supported.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-09-03 06:17:07","modifiedFileCount":"47","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
