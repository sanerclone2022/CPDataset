[{"authorTime":"2020-09-23 02:32:44","codes":[{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        assertSentFetchRequest(epoch, 0L, 0);\n    }\n","date":"2020-09-23 02:32:44","endLine":1034,"groupId":"2241","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/c573b7fee46db25c7da2ba93779278ea23df6c.src","preCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        assertSentFetchRequest(epoch, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"B"},{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, client::poll);\n    }\n","date":"2020-09-23 02:32:44","endLine":2013,"groupId":"2241","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAuthorizationFailedInFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/c573b7fee46db25c7da2ba93779278ea23df6c.src","preCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, client::poll);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1997,"status":"B"}],"commitId":"b7c8490cf47b0c18253d6a776b2b35c76c71c65d","commitMessage":"@@@KAFKA-10492; Core Kafka Raft Implementation (KIP-595) (#9130)\n\nThis is the core Raft implementation specified by KIP-595: https://cwiki.apache.org/confluence/display/KAFKA/KIP-595%3A+A+Raft+Protocol+for+the+Metadata+Quorum. We have created a separate \"raft\" module where most of the logic resides. The new APIs introduced in this patch in order to support Raft election and such are disabled in the server until the integration with the controller is complete. Until then.  there is a standalone server which can be used for testing the performance of the Raft implementation. See `raft/README.md` for details.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>\n\nCo-authored-by: Boyang Chen <boyang@confluent.io>\nCo-authored-by: Guozhang Wang <wangguoz@gmail.com> ","date":"2020-09-23 02:32:44","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2020-10-23 09:14:27","codes":[{"authorDate":"2020-10-23 09:14:27","commitOrder":2,"curCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n\n        context.assertSentFetchRequest(epoch, 0L, 0);\n    }\n","date":"2020-10-23 09:14:27","endLine":964,"groupId":"8529","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/e928559612a26108add4aea670ccb4b02d1e26.src","preCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n\n        KafkaRaftClient client = buildClient(voters);\n\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        assertSentFetchRequest(epoch, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":949,"status":"M"},{"authorDate":"2020-10-23 09:14:27","commitOrder":2,"curCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        context.deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, context.client::poll);\n    }\n","date":"2020-10-23 09:14:27","endLine":1961,"groupId":"8529","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAuthorizationFailedInFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/e928559612a26108add4aea670ccb4b02d1e26.src","preCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int otherNodeId = 1;\n        int epoch = 5;\n\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        quorumStateStore.writeElectionState(ElectionState.withElectedLeader(epoch, otherNodeId, voters));\n        KafkaRaftClient client = buildClient(voters);\n        assertEquals(ElectionState.withElectedLeader(epoch, otherNodeId, voters), quorumStateStore.readElectionState());\n\n        pollUntilSend(client);\n\n        int correlationId = assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, client::poll);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1942,"status":"M"}],"commitId":"94820ca652aceccef5f617e6ca139d139fa25a1b","commitMessage":"@@@MINOR: Refactor RaftClientTest to be used by other tests (#9476)\n\nThere is a lot of functionality in KafkaRaftClientTest that is useful for writing other tests. Refactor that functionality into another class that can be reused in other tests.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-10-23 09:14:27","modifiedFileCount":"1","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2020-12-22 10:15:15","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":3,"curCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n\n        context.assertSentFetchRequest(epoch, 0L, 0);\n    }\n","date":"2020-12-22 10:15:15","endLine":936,"groupId":"104431","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializeAsFollowerEmptyLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testInitializeAsFollowerEmptyLog() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n\n        context.assertSentFetchRequest(epoch, 0L, 0);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":921,"status":"M"},{"authorDate":"2020-12-22 10:15:15","commitOrder":3,"curCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilRequest();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        context.deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, context.client::poll);\n    }\n","date":"2020-12-22 10:15:15","endLine":1875,"groupId":"104431","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAuthorizationFailedInFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testClusterAuthorizationFailedInFetch() throws Exception {\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 5;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .withElectedLeader(epoch, otherNodeId)\n            .build();\n\n        context.assertElectedLeader(epoch, otherNodeId);\n\n        context.pollUntilSend();\n\n        int correlationId = context.assertSentFetchRequest(epoch, 0, 0);\n        FetchResponseData response = new FetchResponseData()\n            .setErrorCode(Errors.CLUSTER_AUTHORIZATION_FAILED.code());\n        context.deliverResponse(correlationId, otherNodeId, response);\n        assertThrows(ClusterAuthorizationException.class, context.client::poll);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1856,"status":"M"}],"commitId":"eb9fe411bbbfca1baf5e0900ee9cfb9147e5099e","commitMessage":"@@@KAFKA-10842; Use `InterBrokerSendThread` for raft's outbound network channel (#9732)\n\nThis patch contains the following improvements:\n\n- Separate inbound/outbound request flows so that we can open the door for concurrent inbound request handling\n- Rewrite `KafkaNetworkChannel` to use `InterBrokerSendThread` which fixes a number of bugs/shortcomings\n- Get rid of a lot of boilerplate conversions in `KafkaNetworkChannel` \n- Improve validation of inbound responses in `KafkaRaftClient` by checking correlationId. This fixes a bug which could cause an out of order Fetch to be applied incorrectly.\n\nReviewers: David Arthur <mumrah@gmail.com>","date":"2020-12-22 10:15:15","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"}]
