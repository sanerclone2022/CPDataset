[{"authorTime":"2017-05-07 02:49:35","codes":[{"authorDate":"2017-03-31 05:39:28","commitOrder":10,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp1));\n        \r\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                               listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.updateFetchPositions(singleton(tp1));\n        assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n        assertTrue(subscriptions.isFetchable(tp1));\n        assertEquals(5, subscriptions.position(tp1).longValue());\n    }\n","date":"2017-03-31 05:39:28","endLine":634,"groupId":"5967","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/2f54944b3bf2597737d9ee6fb066189123621d.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp1));\n        \r\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                               listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.updateFetchPositions(singleton(tp1));\n        assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n        assertTrue(subscriptions.isFetchable(tp1));\n        assertEquals(5, subscriptions.position(tp1).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"NB"},{"authorDate":"2017-05-07 02:49:35","commitOrder":10,"curCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp1));\n            subscriptions.needOffsetReset(tp1, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.updateFetchPositions(singleton(tp1));\n            assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n            assertTrue(subscriptions.isFetchable(tp1));\n            assertEquals(5, subscriptions.position(tp1).longValue());\n        }\n    }\n","date":"2017-05-07 02:49:35","endLine":841,"groupId":"5967","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/0f3d9ba8b408eea2d53a67d84d818f60cd8d52.src","preCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp1));\n            subscriptions.needOffsetReset(tp1, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.updateFetchPositions(singleton(tp1));\n            assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n            assertTrue(subscriptions.isFetchable(tp1));\n            assertEquals(5, subscriptions.position(tp1).longValue());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"B"}],"commitId":"e71dce89c0da50f3eccc47d0fc050c92d5a99b88","commitMessage":"@@@KAFKA-5121; Implement transaction index for KIP-98\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jun Rao <junrao@gmail.com>\n\nCloses #2910 from hachikuji/eos-txn-index\n","date":"2017-05-07 02:49:35","modifiedFileCount":"23","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-07-21 08:31:24","codes":[{"authorDate":"2017-07-21 08:31:24","commitOrder":11,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp0));\n        \r\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                               listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.updateFetchPositions(singleton(tp0));\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","date":"2017-07-21 08:38:30","endLine":901,"groupId":"19975","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/edcfd909b3299ef450a60742a598cc9aea1fbb.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp1));\n        \r\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                               listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.updateFetchPositions(singleton(tp1));\n        assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n        assertTrue(subscriptions.isFetchable(tp1));\n        assertEquals(5, subscriptions.position(tp1).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"},{"authorDate":"2017-07-21 08:31:24","commitOrder":11,"curCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp0));\n            subscriptions.needOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.updateFetchPositions(singleton(tp0));\n            assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n            assertTrue(subscriptions.isFetchable(tp0));\n            assertEquals(5, subscriptions.position(tp0).longValue());\n        }\n    }\n","date":"2017-07-21 08:38:30","endLine":937,"groupId":"19975","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/edcfd909b3299ef450a60742a598cc9aea1fbb.src","preCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp1));\n            subscriptions.needOffsetReset(tp1, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.updateFetchPositions(singleton(tp1));\n            assertFalse(subscriptions.isOffsetResetNeeded(tp1));\n            assertTrue(subscriptions.isFetchable(tp1));\n            assertEquals(5, subscriptions.position(tp1).longValue());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":917,"status":"M"}],"commitId":"5bb53e034e4f8a06550dd06377fae7b3c2137ce2","commitMessage":"@@@KAFKA-5534; KafkaConsumer `offsetForTimes` result should include partitions with no offset\n\nFor topics that support timestamp search.  if no offset is found for a partition.  the partition should still be included in the result with a `null` offset value. This `KafkaConsumer` method currently excludes such partitions from the result.\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3460 from vahidhashemian/KAFKA-5534\n","date":"2017-07-21 08:38:30","modifiedFileCount":"2","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2018-02-15 02:52:46","codes":[{"authorDate":"2018-02-15 02:52:46","commitOrder":12,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","date":"2018-02-15 02:52:46","endLine":923,"groupId":"9070","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/bb4e696ba21e5acb6c4945c45adab62c7138e6.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp0));\n        \r\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                               listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.updateFetchPositions(singleton(tp0));\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"M"},{"authorDate":"2018-02-15 02:52:46","commitOrder":12,"curCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp0));\n            subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.resetOffsetsIfNeeded();\n            consumerClient.pollNoWakeup();\n\n            assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n            assertTrue(subscriptions.isFetchable(tp0));\n            assertEquals(5, subscriptions.position(tp0).longValue());\n        }\n    }\n","date":"2018-02-15 02:52:46","endLine":962,"groupId":"19975","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/bb4e696ba21e5acb6c4945c45adab62c7138e6.src","preCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp0));\n            subscriptions.needOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.updateFetchPositions(singleton(tp0));\n            assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n            assertTrue(subscriptions.isFetchable(tp0));\n            assertEquals(5, subscriptions.position(tp0).longValue());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":940,"status":"M"}],"commitId":"6d18d882b850a8d757c32bb124b1e42e60587c69","commitMessage":"@@@KAFKA-6397: Consumer should not block setting positions of unavailable partitions (#4557)\n\nPrior to this patch.  the consumer always blocks in poll() if there are any partitions which are awaiting their initial positions. This behavior was inconsistent with normal fetch behavior since we allow fetching on available partitions even if one or more of the assigned partitions becomes unavailable _after_ initial offset lookup. With this patch.  the consumer will do offset resets asynchronously.  which allows other partitions to make progress even if the initial positions for some partitions cannot be found.\n\nI have added several new unit tests in `FetcherTest` and `KafkaConsumerTest` to verify the new behavior. One minor compatibility implication worth mentioning is apparent from the change I made in `DynamicBrokerReconfigurationTest`. Previously it was possible to assume that all partitions had a fetch position after `poll()` completed with a non-empty assignment. This assumption is no longer generally true.  but you can force the positions to be updated using the `position()` API which still blocks indefinitely until a position is available.\n\nNote that this this patch also removes the logic to cache committed offsets in `SubscriptionState` since it was no longer needed (the consumer's `committed()` API always does an offset lookup anyway). In addition to avoiding the complexity of maintaining the cache.  this avoids wasteful offset lookups to refresh the cache when `commitAsync()` is used.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-02-15 02:52:46","modifiedFileCount":"12","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-03-08 08:29:19","codes":[{"authorDate":"2019-03-08 08:29:19","commitOrder":13,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","date":"2019-03-08 08:29:19","endLine":1237,"groupId":"9070","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/e7ca05c0c67d0b72786aad7f9bd09a11025ac3.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        subscriptions.assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1225,"status":"M"},{"authorDate":"2019-03-08 08:29:19","commitOrder":13,"curCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","date":"2019-03-08 08:29:19","endLine":1323,"groupId":"17906","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"(IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/e7ca05c0c67d0b72786aad7f9bd09a11025ac3.src","preCode":"    public void testListOffsetsSendsIsolationLevel() {\n        for (final IsolationLevel isolationLevel : IsolationLevel.values()) {\n            Fetcher<byte[], byte[]> fetcher = createFetcher(subscriptions, new Metrics(), new ByteArrayDeserializer(),\n                    new ByteArrayDeserializer(), Integer.MAX_VALUE, isolationLevel);\n\n            subscriptions.assignFromUser(singleton(tp0));\n            subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n            client.prepareResponse(new MockClient.RequestMatcher() {\n                @Override\n                public boolean matches(AbstractRequest body) {\n                    ListOffsetRequest request = (ListOffsetRequest) body;\n                    return request.isolationLevel() == isolationLevel;\n                }\n            }, listOffsetResponse(Errors.NONE, 1L, 5L));\n            fetcher.resetOffsetsIfNeeded();\n            consumerClient.pollNoWakeup();\n\n            assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n            assertTrue(subscriptions.isFetchable(tp0));\n            assertEquals(5, subscriptions.position(tp0).longValue());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1306,"status":"M"}],"commitId":"460e46c3bb76a361d0706b263c03696005e12566","commitMessage":"@@@KAFKA-7831; Do not modify subscription state from background thread (#6221)\n\nMetadata may be updated from the background thread.  so we need to protect access to SubscriptionState. This patch restructures the metadata handling so that we only check pattern subscriptions in the foreground. Additionally.  it improves the following:\n\n1. SubscriptionState is now the source of truth for the topics that will be fetched. We had a lot of messy logic previously to try and keep the the topic set in Metadata consistent with the subscription.  so this simplifies the logic.\n2. The metadata needs for the producer and consumer are quite different.  so it made sense to separate the custom logic into separate extensions of Metadata. For example.  only the producer requires topic expiration.\n3. We've always had an edge case in which a metadata change with an inflight request may cause us to effectively miss an expected update. This patch implements a separate version inside Metadata which is bumped when the needed topics changes.\n4. This patch removes the MetadataListener.  which was the cause of https://issues.apache.org/jira/browse/KAFKA-7764. \n\nReviewers: David Arthur <mumrah@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2019-03-08 08:29:19","modifiedFileCount":"30","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-04-22 07:24:18","codes":[{"authorDate":"2019-04-22 07:24:18","commitOrder":14,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2019-04-22 07:24:18","endLine":1238,"groupId":"9070","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/0a4f3c2ee9c43646036fd70776a1f5ddbcec1e.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1226,"status":"M"},{"authorDate":"2019-04-22 07:24:18","commitOrder":14,"curCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2019-04-22 07:24:18","endLine":1324,"groupId":"17906","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"(IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/0a4f3c2ee9c43646036fd70776a1f5ddbcec1e.src","preCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).longValue());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1307,"status":"M"}],"commitId":"409fabc5610443f36574bdea2e2994b6c20e2829","commitMessage":"@@@KAFKA-7747; Check for truncation after leader changes [KIP-320] (#6371)\n\nAfter the client detects a leader change we need to check the offset of the current leader for truncation. These changes were part of KIP-320: https://cwiki.apache.org/confluence/display/KAFKA/KIP-320%3A+Allow+fetchers+to+detect+and+handle+log+truncation.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-04-22 07:24:18","modifiedFileCount":"14","status":"M","submitter":"David Arthur"},{"authorTime":"2019-04-22 07:24:18","codes":[{"authorDate":"2020-06-06 06:53:13","commitOrder":15,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP,\n            Optional.of(validLeaderEpoch)), listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2020-06-06 06:53:13","endLine":1442,"groupId":"9070","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/10965f47d57c91b2c52b65ce8138993b3e1e94.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP),\n                listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1430,"status":"M"},{"authorDate":"2019-04-22 07:24:18","commitOrder":15,"curCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2019-04-22 07:24:18","endLine":1324,"groupId":"17906","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"(IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/0a4f3c2ee9c43646036fd70776a1f5ddbcec1e.src","preCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1307,"status":"N"}],"commitId":"910f3179960067135ec8ad4ab83d4582ff3847b5","commitMessage":"@@@KAFKA-9840; Skip End Offset validation when the leader epoch is not reliable (#8486)\n\nThis PR provides two fixes:\n1. Skip offset validation if the current leader epoch cannot be reliably determined.\n2. Raise an out of range error if the leader returns an undefined offset in response to the OffsetsForLeaderEpoch request.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-06-06 06:53:13","modifiedFileCount":"14","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-04-22 07:24:18","codes":[{"authorDate":"2020-09-24 21:53:59","commitOrder":16,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP,\n            validLeaderEpoch), listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2020-09-24 21:53:59","endLine":1449,"groupId":"9070","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/bdcf63590e9c134009f7671bbe4a3c00800f55.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP,\n            Optional.of(validLeaderEpoch)), listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1437,"status":"M"},{"authorDate":"2019-04-22 07:24:18","commitOrder":16,"curCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2019-04-22 07:24:18","endLine":1324,"groupId":"17906","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"(IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/0a4f3c2ee9c43646036fd70776a1f5ddbcec1e.src","preCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1307,"status":"N"}],"commitId":"785de1e3d459b26c3ce383986827719388be7c6f","commitMessage":"@@@KAFKA-9627: Replace ListOffset request/response with automated protocol (#8295)\n\n\nReviewers: Boyang Chen <reluctanthero104@gmail.com>.  David Jacot <djacot@confluent.io>\n\nCo-authored-by: Mickael Maison <mickael.maison@gmail.com>\nCo-authored-by: Edoardo Comar <ecomar@uk.ibm.com>","date":"2020-09-24 21:53:59","modifiedFileCount":"12","status":"M","submitter":"Mickael Maison"},{"authorTime":"2020-12-16 22:33:10","codes":[{"authorDate":"2020-12-16 22:33:10","commitOrder":17,"curCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.EARLIEST_TIMESTAMP,\n            validLeaderEpoch), listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2020-12-16 22:33:10","endLine":1456,"groupId":"103933","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateFetchPositionResetToDefaultOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    public void testUpdateFetchPositionResetToDefaultOffset() {\n        buildFetcher();\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.EARLIEST_TIMESTAMP,\n            validLeaderEpoch), listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1444,"status":"M"},{"authorDate":"2020-12-16 22:33:10","commitOrder":17,"curCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetsRequest request = (ListOffsetsRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","date":"2020-12-16 22:33:10","endLine":1542,"groupId":"103933","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testListOffsetsSendsIsolationLevel","params":"(IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    private void testListOffsetsSendsIsolationLevel(IsolationLevel isolationLevel) {\n        buildFetcher(OffsetResetStrategy.EARLIEST, new ByteArrayDeserializer(), new ByteArrayDeserializer(),\n                Integer.MAX_VALUE, isolationLevel);\n\n        assignFromUser(singleton(tp0));\n        subscriptions.requestOffsetReset(tp0, OffsetResetStrategy.LATEST);\n\n        client.prepareResponse(body -> {\n            ListOffsetRequest request = (ListOffsetRequest) body;\n            return request.isolationLevel() == isolationLevel;\n        }, listOffsetResponse(Errors.NONE, 1L, 5L));\n        fetcher.resetOffsetsIfNeeded();\n        consumerClient.pollNoWakeup();\n\n        assertFalse(subscriptions.isOffsetResetNeeded(tp0));\n        assertTrue(subscriptions.isFetchable(tp0));\n        assertEquals(5, subscriptions.position(tp0).offset);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1525,"status":"M"}],"commitId":"782175dfbc4a6694ae9a3970cd92ebd20647bc7e","commitMessage":"@@@MINOR: Simplify ApiKeys by relying on ApiMessageType (#9748)\n\n* The naming for `ListOffsets` was inconsistent.  in some places it was `ListOffset` and in others\nit was `ListOffsets`. Picked the latter since it was used in metrics and the protocol documentation\nand made it consistent.\n* Removed unused methods in ApiKeys.\n* Deleted `CommonFields`.\n* Added `lowestSupportedVersion` and `highestSupportedVersion` to `ApiMessageType`\n* Removed tests in `MessageTest` that are no longer relevant.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-12-16 22:33:10","modifiedFileCount":"20","status":"M","submitter":"Ismael Juma"}]
