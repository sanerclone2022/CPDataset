[{"authorTime":"2020-03-20 02:31:51","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":1,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-03-20 02:31:51","endLine":147,"groupId":"12355","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/4dda9cf2c47ebecf5ba10ca923b4913ac2e3e4.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2020-03-20 02:31:51","commitOrder":1,"curCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (eosDisabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.info(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.info(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","date":"2020-03-20 02:31:51","endLine":350,"groupId":"1770","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/b0fd9919c7e6448e563208c7a354bc82c6e1eb.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (eosDisabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.info(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.info(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"}],"commitId":"89cd2f2a0b21368297323437fd15ba6341e4707b","commitMessage":"@@@KAFKA-9441: Unify committing within TaskManager (#8218)\n\n - part of KIP-447\n - commit all tasks at once using non-eos (and eos-beta in follow up work)\n - unified commit logic into TaskManager\n - split existing methods of Task interface in pre/post parts\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-20 02:31:51","modifiedFileCount":"21","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-21 06:26:13","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":2,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-03-20 02:31:51","endLine":147,"groupId":"12355","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/4dda9cf2c47ebecf5ba10ca923b4913ac2e3e4.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2020-03-21 06:26:13","commitOrder":2,"curCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.info(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.info(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","date":"2020-03-21 06:26:13","endLine":350,"groupId":"1770","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/00858a7de5ab8618ffe720d36fa1578801ca55.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (eosDisabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.info(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.info(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"c249ea8e5d9dad5e74b804a6f062b059517d6a8d","commitMessage":"@@@KAFKA-9727: cleanup the state store for standby task dirty close and check null for changelogs (#8307)\n\nThis PR fixes three things:\n\n* the state should be closed when standby task is restoring as well\n* the EOS standby task should also wipe out state under dirty close\n* the changelog reader should check for null as well\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-21 06:26:13","modifiedFileCount":"6","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-04-14 06:01:19","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":3,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-03-20 02:31:51","endLine":147,"groupId":"12355","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/4dda9cf2c47ebecf5ba10ca923b4913ac2e3e4.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2020-04-14 06:01:19","commitOrder":3,"curCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.debug(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","date":"2020-04-14 06:01:19","endLine":357,"groupId":"11390","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/d6d3d3c7e1fcf32c7e97537894c7d7420909bd.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.info(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.info(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"37f20c6924bc2b2d861508cdb79b78152cc01b60","commitMessage":"@@@HOTFIX: need to cleanup any tasks closed in TaskManager (#8463)\n\nWe were hitting an IllegalStateException: There is already a changelog registered for ... in trunk-eos due to failing to call TaskManager#cleanup on unrevoekd tasks that we end up closing in handleAssignment after failing to batch commit.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-14 06:01:19","modifiedFileCount":"3","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-06-06 01:40:59","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":4,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-03-20 02:31:51","endLine":147,"groupId":"12355","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/4dda9cf2c47ebecf5ba10ca923b4913ac2e3e4.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2020-06-06 01:40:59","commitOrder":4,"curCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case CREATED:\n            case SUSPENDED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","date":"2020-06-06 01:40:59","endLine":420,"groupId":"11390","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/45144cb8414260365b928cb9f461c04466c3d6.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.debug(\"Committed\");\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"9774c73e43dc2f628b9fb07a30ab4a595c0ee0a8","commitMessage":"@@@KAFKA-9441: Improve Kafka Streams task management (#8776)\n\n - make task manager agnostic to task state\n - make tasks state transitions idempotent\n\nReviewers: Boyang Chen <boyang@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-06-06 01:40:59","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-06-11 08:53:43","codes":[{"authorDate":"2020-06-11 08:53:43","commitOrder":5,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-06-11 08:53:43","endLine":159,"groupId":"12355","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/80fd7aef4681a58746cc6c02bcd4f1e3197120.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-06-11 08:53:43","commitOrder":5,"curCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpointIfNeed();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) { \r\n                    writeCheckpointIfNeed();\n                }\n\n                break;\n\n            case SUSPENDED:\n                writeCheckpointIfNeed();\n                \r\n                \r\n                partitionGroup.clear();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Committed\");\n    }\n","date":"2020-06-11 08:53:43","endLine":447,"groupId":"5483","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/25acc3e44d4b3667574eeefd0954b6cc4745c0.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case RUNNING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                if (!eosEnabled) {\n                    stateMgr.checkpoint(checkpointableOffsets());\n                }\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case RESTORING:\n                commitNeeded = false;\n                commitRequested = false;\n\n                stateMgr.checkpoint(checkpointableOffsets());\n\n                log.debug(\"Committed\");\n\n                break;\n\n            case CREATED:\n            case SUSPENDED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"}],"commitId":"8e083e1b8879e732522bb9a560c82ff84b176cc9","commitMessage":"@@@KAFKA-9441: remove prepareClose() to simplify task management (#8833)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-11 08:53:43","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-06-13 07:21:57","codes":[{"authorDate":"2020-06-13 07:21:57","commitOrder":6,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.debug(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-06-13 07:21:57","endLine":159,"groupId":"12355","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/069d6bfc03d71fc3ddc403e0ed280340c083a9.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.info(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-06-13 07:21:57","commitOrder":6,"curCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpointIfNeed();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) { \r\n                    writeCheckpointIfNeed();\n                }\n\n                break;\n\n            case SUSPENDED:\n                writeCheckpointIfNeed();\n                \r\n                \r\n                partitionGroup.clear();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Finalized commit\");\n    }\n","date":"2020-06-13 07:21:57","endLine":447,"groupId":"5483","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/086436485828127523c5eef0ea80b26df86ea9.src","preCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpointIfNeed();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) { \r\n                    writeCheckpointIfNeed();\n                }\n\n                break;\n\n            case SUSPENDED:\n                writeCheckpointIfNeed();\n                \r\n                \r\n                partitionGroup.clear();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Committed\");\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"}],"commitId":"03ed08d0d17a10ca4f96c8cc0a8694834ae01e6d","commitMessage":"@@@KAFKA-10144: clean up corrupted standby tasks before attempting a commit (#8849)\n\nWe need to make sure that corrupted standby tasks are actually cleaned up upon a TaskCorruptedException. However due to the commit prior to invoking handleCorruption.  it's possible to throw a TaskMigratedException before actually cleaning up any of the corrupted tasks.\n\nThis is fine for active tasks since handleLostAll will finish up the job.  but it does nothing with standby tasks. We should make sure that standby tasks are handled before attempting to commit (which we can do.  since we don't need to commit anything for the corrupted standbys)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-13 07:21:57","modifiedFileCount":"7","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-06-17 07:30:37","codes":[{"authorDate":"2020-06-13 07:21:57","commitOrder":7,"curCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.debug(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-06-13 07:21:57","endLine":159,"groupId":"12355","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/069d6bfc03d71fc3ddc403e0ed280340c083a9.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.debug(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2020-06-17 07:30:37","commitOrder":7,"curCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpoint();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) {\n                    writeCheckpoint();\n                }\n\n                break;\n\n            case SUSPENDED:\n                \r\n\r\n\r\n\r\n\r\n\n                partitionGroup.clear();\n\n                writeCheckpoint();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Finalized commit\");\n    }\n","date":"2020-06-17 07:30:37","endLine":453,"groupId":"7107","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/8b94ba854a0cb33e21d7ead15c711e54633723.src","preCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpointIfNeed();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) { \r\n                    writeCheckpointIfNeed();\n                }\n\n                break;\n\n            case SUSPENDED:\n                writeCheckpointIfNeed();\n                \r\n                \r\n                partitionGroup.clear();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Finalized commit\");\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"}],"commitId":"2239004907b29e00811fee9ded5a790172701a03","commitMessage":"@@@KAFKA-10150: task state transitions/management and committing cleanup (#8856)\n\n* KAFKA-10150: always transition to SUSPENDED during suspend.  no matter the current state only call prepareCommit before closing if task.commitNeeded is true\n\n* Don't commit any consumed offsets during handleAssignment -- revoked active tasks (and any others that need committing) will be committed during handleRevocation so we only need to worry about cleaning them up in handleAssignment\n\n* KAFKA-10152: when recycling a task we should always commit consumed offsets (if any).  but don't need to write the checkpoint (since changelog offsets are preserved across task transitions)\n\n* Make sure we close all tasks during shutdown.  even if an exception is thrown during commit\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-17 07:30:37","modifiedFileCount":"7","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-06-27 06:11:56","codes":[{"authorDate":"2020-06-27 06:11:56","commitOrder":8,"curCode":"    public void postCommit() {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n                if (commitNeeded()) {\n                    writeCheckpoint();\n                }\n                log.debug(\"Finalized commit for running task\");\n\n                break;\n\n            case SUSPENDED:\n                \r\n                if (checkpointNeededForSuspended) {\n                    writeCheckpoint();\n                    log.debug(\"Finalized commit for suspended task\");\n                    checkpointNeededForSuspended = false;\n                } else {\n                    log.debug(\"Skipped writing checkpoint for uninitialized suspended task\");\n                }\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-06-27 06:11:56","endLine":217,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/267809522b74f1a07b152168cf5ba804f81da6.src","preCode":"    public void postCommit() {\n        if (state() == State.RUNNING || state() == State.SUSPENDED) {\n            \r\n            \r\n            stateMgr.checkpoint(Collections.emptyMap());\n            offsetSnapshotSinceLastCommit = new HashMap<>(stateMgr.changelogOffsets());\n            log.debug(\"Finalized commit\");\n        } else {\n            throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-06-27 06:11:56","commitOrder":8,"curCode":"    public void postCommit() {\n        commitRequested = false;\n\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RESTORING:\n                writeCheckpoint();\n                log.debug(\"Finalized commit for restoring task\");\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) {\n                    writeCheckpoint();\n                }\n                log.debug(\"Finalized commit for running task\");\n\n                break;\n\n            case SUSPENDED:\n                \r\n\r\n\r\n\r\n\r\n\n                partitionGroup.clear();\n\n                if (checkpointNeededForSuspended) {\n                    \r\n                    \r\n                    writeCheckpoint();\n                    log.debug(\"Finalized commit for suspended task\");\n                    checkpointNeededForSuspended = false;\n                } else {\n                    log.debug(\"Skipped writing checkpoint for uninitialized suspended task\");\n                }\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","date":"2020-06-27 06:11:56","endLine":487,"groupId":"4285","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/dd56725c452e52c0fd602f0bf0340c9d0a0c2c.src","preCode":"    public void postCommit() {\n        commitRequested = false;\n        commitNeeded = false;\n\n        switch (state()) {\n            case RESTORING:\n                writeCheckpoint();\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) {\n                    writeCheckpoint();\n                }\n\n                break;\n\n            case SUSPENDED:\n                \r\n\r\n\r\n\r\n\r\n\n                partitionGroup.clear();\n\n                writeCheckpoint();\n\n                break;\n\n            case CREATED:\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        log.debug(\"Finalized commit\");\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"30df089631cf3c7667b609e2b9689cb02230c64e","commitMessage":"@@@KAFKA-10166: always write checkpoint before closing an (initialized) task (#8926)\n\nThis should address at least some of the excessive TaskCorruptedExceptions we've been seeing lately. Basically.  at the moment we only commit tasks if commitNeeded is true -- this seems obvious by definition. But the problem is we do some essential cleanup in postCommit that should always be done before a task is closed:\n\n* clear the PartitionGroup\n* write the checkpoint\n\nThe second is actually fine to skip when commitNeeded = false with ALOS.  as we will have already written a checkpoint during the last commit. But for EOS.  we only write the checkpoint before a close -- so even if there is no new pending data since the last commit.  we have to write the current offsets. If we don't.  the task will be assumed dirty and we will run into our friend the TaskCorruptedException during (re)initialization.\n\nTo fix this.  we should just always call prepareCommit and postCommit at the TaskManager level. Within the task.  it can decide whether or not to actually do something in those methods based on commitNeeded.\n\nOne subtle issue is that we still need to avoid checkpointing a task that was still in CREATED.  to avoid potentially overwriting an existing checkpoint with uninitialized empty offsets. Unfortunately we always suspend a task before closing and committing.  so we lose the information about whether the task as in CREATED or RUNNING/RESTORING by the time we get to the checkpoint. For this we introduce a special flag to keep track of whether a suspended task should actually be checkpointed or not\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-27 06:11:56","modifiedFileCount":"7","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-08-12 11:21:41","codes":[{"authorDate":"2020-08-12 11:21:41","commitOrder":9,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n\n                log.debug(\"Finalized commit for {} task\", state());\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-08-12 11:21:41","endLine":204,"groupId":"11477","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/b331b129511d8f8a6b8766c0c9f67737268ef6.src","preCode":"    public void postCommit() {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n                if (commitNeeded()) {\n                    writeCheckpoint();\n                }\n                log.debug(\"Finalized commit for running task\");\n\n                break;\n\n            case SUSPENDED:\n                \r\n                if (checkpointNeededForSuspended) {\n                    writeCheckpoint();\n                    log.debug(\"Finalized commit for suspended task\");\n                    checkpointNeededForSuspended = false;\n                } else {\n                    log.debug(\"Skipped writing checkpoint for uninitialized suspended task\");\n                }\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-08-12 11:21:41","commitOrder":9,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for {} task\", state());\n\n                break;\n\n            case RESTORING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n                log.debug(\"Finalized commit for {} task with enforce checkpoint {}\", state(), enforceCheckpoint);\n\n                break;\n\n            case RUNNING:\n                if (enforceCheckpoint || !eosEnabled) {\n                    maybeWriteCheckpoint(enforceCheckpoint);\n                }\n                log.debug(\"Finalized commit for {} task with eos {} enforce checkpoint {}\", state(), eosEnabled, enforceCheckpoint);\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        commitRequested = false;\n        commitNeeded = false;\n    }\n","date":"2020-08-12 11:21:41","endLine":468,"groupId":"7437","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/98ab42a2d0a3ac07c70114c2558b84ba0ef3d8.src","preCode":"    public void postCommit() {\n        commitRequested = false;\n\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RESTORING:\n                writeCheckpoint();\n                log.debug(\"Finalized commit for restoring task\");\n\n                break;\n\n            case RUNNING:\n                if (!eosEnabled) {\n                    writeCheckpoint();\n                }\n                log.debug(\"Finalized commit for running task\");\n\n                break;\n\n            case SUSPENDED:\n                \r\n\r\n\r\n\r\n\r\n\n                partitionGroup.clear();\n\n                if (checkpointNeededForSuspended) {\n                    \r\n                    \r\n                    writeCheckpoint();\n                    log.debug(\"Finalized commit for suspended task\");\n                    checkpointNeededForSuspended = false;\n                } else {\n                    log.debug(\"Skipped writing checkpoint for uninitialized suspended task\");\n                }\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"7915d5e5f826a71c11e1c9183c84702410f7209a","commitMessage":"@@@KAFKA-9450: Decouple flushing state from commiting (#8964)\n\nIn Kafka Streams the source-of-truth of a state store is in its changelog.  therefore when committing a state store we only need to make sure its changelog records are all flushed and committed.  but we do not actually need to make sure that the materialized state have to be flushed and persisted since they can always be restored from changelog when necessary.\n\nOn the other hand.  flushing a state store too frequently may have side effects.  e.g. rocksDB flushing would gets the memtable into an L0 sstable.  leaving many small L0 files to be compacted later.  which introduces larger overhead.\n\nTherefore this PR decouples flushing from committing.  such that we do not always flush the state store upon committing.  but only when sufficient data has been written since last time flushed. The checkpoint file would then also be overwritten only along with flushing the state store indicating its current known snapshot. This is okay since: a) if EOS is not enabled.  then it is fine if the local persisted state is actually ahead of the checkpoint.  b) if EOS is enabled.  then we would never write a checkpoint file until close.\n\nHere's a more detailed change list of this PR:\n\n1. Do not always flush state stores when calling pre-commit; move stateMgr.flush into post-commit to couple together with checkpointing.\n\n2. In post-commit.  we checkpoint when: a) The state store's snapshot has progressed much further compared to the previous checkpoint.  b) When the task is being closed.  in which case we enforce checkpointing.\n\n3. There are some tricky obstacles that I'd have to work around in a bit hacky way: for cache / suppression buffer.  we still need to flush them in pre-commit to make sure all records sent via producers.  while the underlying state store should not be flushed. I've decided to introduce a new API in CachingStateStore to be triggered in pre-commit.\n\nI've also made some minor changes piggy-backed in this PR:\n\n4. Do not delete checkpoint file upon loading it.  and as a result simplify the checkpointNeeded logic.  initializing the snapshotLastFlush to the loaded offsets.\n\n5. In closing.  also follow the commit -> suspend -> close ordering as in revocation / assignment.\n\n6. If enforceCheckpoint == true during RUNNING.  still calls maybeCheckpoint even with EOS since that is the case for suspending / closing.\n\nReviewers: John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-08-12 11:21:41","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2020-08-12 11:21:41","commitOrder":10,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n\n                log.debug(\"Finalized commit for {} task\", state());\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-08-12 11:21:41","endLine":204,"groupId":"11477","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/b331b129511d8f8a6b8766c0c9f67737268ef6.src","preCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n\n                log.debug(\"Finalized commit for {} task\", state());\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2021-01-07 06:01:02","commitOrder":10,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for {} task\", state());\n\n                break;\n\n            case RESTORING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n                log.debug(\"Finalized commit for {} task with enforce checkpoint {}\", state(), enforceCheckpoint);\n\n                break;\n\n            case RUNNING:\n                if (enforceCheckpoint || !eosEnabled) {\n                    maybeWriteCheckpoint(enforceCheckpoint);\n                }\n                log.debug(\"Finalized commit for {} task with eos {} enforce checkpoint {}\", state(), eosEnabled, enforceCheckpoint);\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        commitRequested = false;\n        commitNeeded = false;\n        hasPendingTxCommit = false;\n    }\n","date":"2021-01-07 06:01:02","endLine":482,"groupId":"7437","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/502121d6e77ac1029e1ef80ea04201e3ac3325.src","preCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for {} task\", state());\n\n                break;\n\n            case RESTORING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n                log.debug(\"Finalized commit for {} task with enforce checkpoint {}\", state(), enforceCheckpoint);\n\n                break;\n\n            case RUNNING:\n                if (enforceCheckpoint || !eosEnabled) {\n                    maybeWriteCheckpoint(enforceCheckpoint);\n                }\n                log.debug(\"Finalized commit for {} task with eos {} enforce checkpoint {}\", state(), eosEnabled, enforceCheckpoint);\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        commitRequested = false;\n        commitNeeded = false;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-03-30 05:06:22","codes":[{"authorDate":"2020-08-12 11:21:41","commitOrder":11,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n\n                log.debug(\"Finalized commit for {} task\", state());\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","date":"2020-08-12 11:21:41","endLine":204,"groupId":"103073","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/b331b129511d8f8a6b8766c0c9f67737268ef6.src","preCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for created task\");\n\n                break;\n\n            case RUNNING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n\n                log.debug(\"Finalized commit for {} task\", state());\n\n                break;\n\n            default:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing standby task \" + id);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StandbyTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2021-03-30 05:06:22","commitOrder":11,"curCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for {} task\", state());\n\n                break;\n\n            case RESTORING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n                log.debug(\"Finalized commit for {} task with enforce checkpoint {}\", state(), enforceCheckpoint);\n\n                break;\n\n            case RUNNING:\n                if (enforceCheckpoint || !eosEnabled) {\n                    maybeWriteCheckpoint(enforceCheckpoint);\n                }\n                log.debug(\"Finalized commit for {} task with eos {} enforce checkpoint {}\", state(), eosEnabled, enforceCheckpoint);\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        clearCommitStatuses();\n    }\n","date":"2021-03-30 05:06:22","endLine":498,"groupId":"103073","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(finalbooleanenforceCheckpoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e2/c5e03cb15efceced88244b4e14f91944d291c9.src","preCode":"    public void postCommit(final boolean enforceCheckpoint) {\n        switch (state()) {\n            case CREATED:\n                \r\n                \r\n                log.debug(\"Skipped writing checkpoint for {} task\", state());\n\n                break;\n\n            case RESTORING:\n            case SUSPENDED:\n                maybeWriteCheckpoint(enforceCheckpoint);\n                log.debug(\"Finalized commit for {} task with enforce checkpoint {}\", state(), enforceCheckpoint);\n\n                break;\n\n            case RUNNING:\n                if (enforceCheckpoint || !eosEnabled) {\n                    maybeWriteCheckpoint(enforceCheckpoint);\n                }\n                log.debug(\"Finalized commit for {} task with eos {} enforce checkpoint {}\", state(), eosEnabled, enforceCheckpoint);\n\n                break;\n\n            case CLOSED:\n                throw new IllegalStateException(\"Illegal state \" + state() + \" while post committing active task \" + id);\n\n            default:\n                throw new IllegalStateException(\"Unknown state \" + state() + \" while post committing active task \" + id);\n        }\n\n        commitRequested = false;\n        commitNeeded = false;\n        hasPendingTxCommit = false;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"}],"commitId":"fb2eef94a4ae91501d869e2075c511b433877099","commitMessage":"@@@KAFKA-12523: handle TaskCorruption and TimeoutException during handleCorruption  and handleRevocation (#10407)\n\nNeed to handle TaskCorruptedException and TimeoutException that can be thrown from offset commit during handleRevocation or handleCorruption\n\nReviewers: Matthias J. Sax <mjsax@confluent.org>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-03-30 05:06:22","modifiedFileCount":"6","status":"M","submitter":"A. Sophie Blee-Goldman"}]
