[{"authorTime":"2020-04-23 05:29:23","codes":[{"authorDate":"2020-04-23 05:29:23","commitOrder":1,"curCode":"    public void shouldWorkWithDefaultAndConsumedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\", Consumed.with(Serdes.String(), Serdes.String()));\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\");\n\n        validateTopologyCanProcessData(builder);\n    }\n","date":"2020-04-23 05:29:23","endLine":105,"groupId":"8635","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldWorkWithDefaultAndConsumedSerdes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/d3552fce6487ad4df3832fd5d1cd984f9be984.src","preCode":"    public void shouldWorkWithDefaultAndConsumedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\", Consumed.with(Serdes.String(), Serdes.String()));\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\");\n\n        validateTopologyCanProcessData(builder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2020-04-23 05:29:23","commitOrder":1,"curCode":"    public void shouldWorkWithDefaultAndProducedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\");\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\", Produced.with(Serdes.String(), Serdes.String()));\n\n        validateTopologyCanProcessData(builder);\n    }\n","date":"2020-04-23 05:29:23","endLine":178,"groupId":"8635","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldWorkWithDefaultAndProducedSerdes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/d3552fce6487ad4df3832fd5d1cd984f9be984.src","preCode":"    public void shouldWorkWithDefaultAndProducedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\");\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\", Produced.with(Serdes.String(), Serdes.String()));\n\n        validateTopologyCanProcessData(builder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"fbd8cf0d861dec5b7bac237e8221cfae51bec14a","commitMessage":"@@@KAFKA-9388: Refactor integration tests to always use different application ids (#8530)\n\nWhen debugging KAFKA-9388.  I found the reason that the second test method test takes much longer (10s) than the previous one (~500ms) is because they used the same app.id. When the previous clients are shutdown.  they would not send leave-group and hence we are still depending on the session timeout (10s) for the members to be removed out of the group.\n\nWhen the second test is triggered.  they will join the same group because of the same application id.  and the prepare-rebalance phase would would for the full rebalance timeout before it kicks out the previous members.\n\nSetting different application ids could resolve such issues for integration tests --- I did a quick search and found some other integration tests have the same issue. And after this PR my local unit test runtime reduced from about 14min to 7min.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  John Roesler <john@confluent.io>","date":"2020-04-23 05:29:23","modifiedFileCount":"22","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2020-06-12 23:00:38","codes":[{"authorDate":"2020-06-12 23:00:38","commitOrder":2,"curCode":"    public void shouldWorkWithDefaultAndConsumedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<Integer, String> aTable = builder.table(\"A\", Consumed.with(Serdes.Integer(), Serdes.String()));\n        final KTable<Integer, String> bTable = builder.table(\"B\");\n\n        final KTable<Integer, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> Integer.parseInt(value.split(\"-\")[0]),\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<Integer, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\");\n\n        validateTopologyCanProcessData(builder);\n    }\n","date":"2020-06-12 23:00:38","endLine":107,"groupId":"101576","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldWorkWithDefaultAndConsumedSerdes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/5a4cd93568520632f53ff0c0b5b20ca2da1053.src","preCode":"    public void shouldWorkWithDefaultAndConsumedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\", Consumed.with(Serdes.String(), Serdes.String()));\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\");\n\n        validateTopologyCanProcessData(builder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-06-12 23:00:38","commitOrder":2,"curCode":"    public void shouldWorkWithDefaultAndProducedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<Integer, String> aTable = builder.table(\"A\");\n        final KTable<Integer, String> bTable = builder.table(\"B\");\n\n        final KTable<Integer, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> Integer.parseInt(value.split(\"-\")[0]),\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<Integer, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\", Produced.with(Serdes.Integer(), Serdes.String()));\n\n        validateTopologyCanProcessData(builder);\n    }\n","date":"2020-06-12 23:00:38","endLine":179,"groupId":"101576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldWorkWithDefaultAndProducedSerdes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/5a4cd93568520632f53ff0c0b5b20ca2da1053.src","preCode":"    public void shouldWorkWithDefaultAndProducedSerdes() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KTable<String, String> aTable = builder.table(\"A\");\n        final KTable<String, String> bTable = builder.table(\"B\");\n\n        final KTable<String, String> fkJoinResult = aTable.join(\n            bTable,\n            value -> value.split(\"-\")[0],\n            (aVal, bVal) -> \"(\" + aVal + \",\" + bVal + \")\",\n            Materialized.as(\"asdf\")\n        );\n\n        final KTable<String, String> finalJoinResult = aTable.join(\n            fkJoinResult,\n            (aVal, fkJoinVal) -> \"(\" + aVal + \",\" + fkJoinVal + \")\"\n        );\n\n        finalJoinResult.toStream().to(\"output\", Produced.with(Serdes.String(), Serdes.String()));\n\n        validateTopologyCanProcessData(builder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableForeignKeyJoinScenarioTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"bcf45b09d34607d53e17d1f75a3097f3a8157903","commitMessage":"@@@KAFKA-10049: Fixed FKJ bug where wrapped serdes are set incorrectly when using default StreamsConfig serdes (#8764)\n\nBug Details:\nMistakenly setting the value serde to the key serde for an internal wrapped serde in the FKJ workflow.\n\nTesting:\nModified the existing test to reproduce the issue.  then verified that the test passes.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>","date":"2020-06-12 23:00:38","modifiedFileCount":"9","status":"M","submitter":"Adam Bellemare"}]
