[{"authorTime":"2019-08-28 05:41:33","codes":[{"authorDate":"2019-08-28 05:41:33","commitOrder":1,"curCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(Collections.emptyList()));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2019-08-28 05:41:33","endLine":73,"groupId":"12258","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/f67472152529a6deaa191c6a71f596826dcf8f.src","preCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(Collections.emptyList()));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2019-08-28 05:41:33","commitOrder":1,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2019-08-28 05:41:33","endLine":88,"groupId":"12258","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/f67472152529a6deaa191c6a71f596826dcf8f.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"cf32a1a6a06df910dd11f26abe7b62e560392e25","commitMessage":"@@@KAFKA-8179: Part 4.  add CooperativeStickyAssignor (#7130)\n\nSplits the existing StickyAssignor logic into an AbstractStickyAssignor class.  which is extended by the existing (eager) StickyAssignor and by the new CooperativeStickyAssignor which supports incremental cooperative rebalancing.\n\nThere is no actual change to the logic -- most methods from StickyAssignor were moved to AbstractStickyAssignor to be shared with CooperativeStickyAssignor.  and the abstract MemberData memberData(Subscription) method converts the Subscription to the embedded list of owned partitions for each assignor.\n\nThe \"generation\" logic is left in.  however this is always Optional.empty() for the CooperativeStickyAssignor as onPartitionsLost should always be called when a generation is missed.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-08-28 05:41:33","modifiedFileCount":"5","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-08-06 04:26:18","codes":[{"authorDate":"2021-08-06 04:26:18","commitOrder":2,"curCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(Collections.emptyList()));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":88,"groupId":"104076","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(Collections.emptyList()));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-08-06 04:26:18","commitOrder":2,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":104,"groupId":"104076","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n        subscriptions = Collections.singletonMap(consumerId, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"001afa8ebec2a1b5fd05319b02f7d3eb6410ab8e","commitMessage":"@@@KAFKA-13046: add test coverage for AbstractStickyAssignorTest (#11156)\n\n1) Add tests for partitionsTransferringOwnership\n  a. it should include revoked partitions and partitions claimed by multiple consumers.\n  b. for non-equal assignment case (general case).  it should be null so that the cooperative assignor knows to compute it from scratch\n\n2) Small optimization for allPreviousPartitionsToOwner check.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-08-06 04:26:18","modifiedFileCount":"2","status":"M","submitter":"Luke Chen"}]
