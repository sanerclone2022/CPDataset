[{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":4,"curCode":"    public void shouldCountWindowed() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L),\n                \"aggregate-by-key-windowed\")\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","date":"2017-08-01 06:28:59","endLine":524,"groupId":"494","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/7147f02a7736ccef12552a47c9d72716f1bb61.src","preCode":"    public void shouldCountWindowed() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L),\n                \"aggregate-by-key-windowed\")\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"MB"},{"authorDate":"2017-08-01 06:28:59","commitOrder":4,"curCode":"    public void shouldCountWindowedWithInternalStoreName() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L))\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","date":"2017-08-01 06:28:59","endLine":540,"groupId":"8623","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/7147f02a7736ccef12552a47c9d72716f1bb61.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L))\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"MB"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":5,"curCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L),\n                \"aggregate-by-key-windowed\")\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","date":"2017-09-11 16:42:10","endLine":526,"groupId":"494","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    public void shouldCountWindowed() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L),\n                \"aggregate-by-key-windowed\")\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":5,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L))\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","date":"2017-09-11 16:42:10","endLine":543,"groupId":"8623","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() throws Exception {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n                TimeWindows.of(500L))\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.add(KeyValue.pair(key, value));\n                    }\n                });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-05-08 08:34:34","codes":[{"authorDate":"2018-05-08 08:34:34","commitOrder":6,"curCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(500L)).count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","date":"2018-05-08 08:34:34","endLine":571,"groupId":"16964","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/ed49fea511a306a76599e174c66754d3e6e11d.src","preCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n            TimeWindows.of(500L),\n            \"aggregate-by-key-windowed\")\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"},{"authorDate":"2018-05-08 08:34:34","commitOrder":6,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(500L)).count()\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","date":"2018-05-08 08:34:34","endLine":586,"groupId":"16963","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/ed49fea511a306a76599e174c66754d3e6e11d.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.count(\n            TimeWindows.of(500L))\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"2b5a59406622affa1e333e073546f075f59b4ac9","commitMessage":"@@@KAFKA-6813: Remove deprecated APIs in KIP-182.  Part I (#4919)\n\nI'm breaking KAFKA-6813 into a couple of \"smaller\" PRs and this is the first one. It focused on:\n\nRemove deprecated APIs in KStream.  KTable.  KGroupedStream.  KGroupedTable.  SessionWindowedKStream.  TimeWindowedKStream.\n\nAlso found a couple of overlooked bugs while working on them:\n\n2.a) In KTable.filter / mapValues without the additional parameter indicating the materialized stores.  originally we will not materialize the store. After KIP-182 we mistakenly diverge the semantics: for KTable.mapValues it is still the case.  for KTable.filter we will always materialize.\n\n2.b) In XXStream/Table.reduce/count.  we used to try to reuse the serdes since their types are pre-known (for reduce it is the same types for both key / value.  for count it is the same types for key.  and Long for value). This was somehow lost in the past refactoring.\n\n2.c) We are enforcing to cast a Serde<V> to Serde<VR> for XXStream / Table.aggregate.  for which the returned value type is NOT known.  such the enforced casting should not be applied and we should require users to provide us the value serde if they believe the default ones are not applicable.\n\n2.d) Whenever we are creating a new MaterializedInternal we are effectively incrementing the suffix index for the store / processor-node names. However in some places this MaterializedInternal is only used for validation.  so the resulted processor-node / store suffix is not monotonic.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-05-08 08:34:34","modifiedFileCount":"33","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":7,"curCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(ofMillis(500L))).count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","date":"2018-10-05 04:51:39","endLine":572,"groupId":"16964","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/f36aa8bc580378665b73a3ead502ed6ec8626f.src","preCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(500L)).count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":7,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(ofMillis(500L))).count()\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","date":"2018-10-05 04:51:39","endLine":587,"groupId":"18144","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/f36aa8bc580378665b73a3ead502ed6ec8626f.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(500L)).count()\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2019-01-09 05:32:53","codes":[{"authorDate":"2019-01-09 05:32:53","commitOrder":8,"curCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count(Materialized.as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach((key, value) -> results.add(KeyValue.pair(key, value)));\n\n        doCountWindowed(results);\n    }\n","date":"2019-01-09 05:32:53","endLine":534,"groupId":"12032","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/dea13dfeb6e750c35b9dc14b0bb5cf20b760ef.src","preCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(ofMillis(500L))).count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"},{"authorDate":"2019-01-09 05:32:53","commitOrder":8,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count()\n            .toStream()\n            .foreach((key, value) -> results.add(KeyValue.pair(key, value)));\n\n        doCountWindowed(results);\n    }\n","date":"2019-01-09 05:32:53","endLine":546,"groupId":"12035","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/dea13dfeb6e750c35b9dc14b0bb5cf20b760ef.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream.windowedBy(TimeWindows.of(ofMillis(500L))).count()\n            .toStream()\n            .foreach(new ForeachAction<Windowed<String>, Long>() {\n                @Override\n                public void apply(final Windowed<String> key, final Long value) {\n                    results.add(KeyValue.pair(key, value));\n                }\n            });\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":9,"curCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count(Materialized.as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","date":"2019-05-18 07:48:07","endLine":604,"groupId":"13831","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldCountWindowed() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count(Materialized.as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .foreach((key, value) -> results.add(KeyValue.pair(key, value)));\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":9,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        final List<KeyValue<Windowed<String>, KeyValue<Long, Long>>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count()\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","date":"2019-05-18 07:48:07","endLine":617,"groupId":"12909","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final List<KeyValue<Windowed<String>, Long>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count()\n            .toStream()\n            .foreach((key, value) -> results.add(KeyValue.pair(key, value)));\n\n        doCountWindowed(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-22 00:25:45","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":10,"curCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count(Materialized.as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","date":"2019-05-18 07:48:07","endLine":604,"groupId":"101563","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count(Materialized.as(\"aggregate-by-key-windowed\"))\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"N"},{"authorDate":"2020-04-22 00:25:45","commitOrder":10,"curCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count()\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","date":"2020-04-22 00:25:45","endLine":663,"groupId":"101563","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowedWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/82da5a04c8491c77f35912814ba7e10d0fb821.src","preCode":"    public void shouldCountWindowedWithInternalStoreName() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        final List<KeyValue<Windowed<String>, KeyValue<Long, Long>>> results = new ArrayList<>();\n        groupedStream\n            .windowedBy(TimeWindows.of(ofMillis(500L)))\n            .count()\n            .toStream()\n            .process(supplier);\n\n        doCountWindowed(supplier);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"11d8ef76ff5348a48eb1c37cddf244e399666d59","commitMessage":"@@@MINOR: Improve usage of LogCaptureAppender (#8508)\n\nReviewers: Ismael Juma <ismael@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-22 00:25:45","modifiedFileCount":"40","status":"M","submitter":"Matthias J. Sax"}]
