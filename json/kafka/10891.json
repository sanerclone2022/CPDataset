[{"authorTime":"2016-09-17 00:58:36","codes":[{"authorDate":"2016-09-17 00:58:36","commitOrder":1,"curCode":"    public void shouldPutGet() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value);\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value);\n        assertEquals(cache.hits(), 3);\n    }\n","date":"2016-09-17 00:58:36","endLine":89,"groupId":"1147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPutGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fe/11c05eb77ec73e590b0f9d8e5030fa1baa0eb0.src","preCode":"    public void shouldPutGet() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value);\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value);\n        assertEquals(cache.hits(), 3);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2016-09-17 00:58:36","commitOrder":1,"curCode":"    public void shouldPutIfAbsent() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value);\n    }\n","date":"2016-09-17 00:58:36","endLine":99,"groupId":"22227","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fe/11c05eb77ec73e590b0f9d8e5030fa1baa0eb0.src","preCode":"    public void shouldPutIfAbsent() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"86aa0eb0f274c6e44eb190ce250433419e011a67","commitMessage":"@@@KAFKA-3776: Unify store and downstream caching in streams\n\nThis is joint work between dguy and enothereska. The work implements KIP-63. Overview of main changes:\n\n- New byte-based cache that acts as a buffer for any persistent store and for forwarding changes downstream.\n- Forwarding record path changes: previously a record in a task completed end-to-end. Now it may be buffered in a processor node while other records complete in the task.\n- Cleanup and state stores and decoupling of cache from state store and forwarding.\n- More than 80 new unit and integration tests.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #1752 from enothereska/KAFKA-3776-poc\n","date":"2016-09-17 00:58:36","modifiedFileCount":"77","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void shouldPutGet() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value);\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value);\n        assertEquals(cache.hits(), 3);\n    }\n","date":"2017-09-11 16:42:10","endLine":126,"groupId":"1147","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPutGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/c342395fadaaf5329d938a46b366ca5ebfe621.src","preCode":"    public void shouldPutGet() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value);\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value);\n        assertEquals(cache.hits(), 3);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void shouldPutIfAbsent() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value);\n    }\n","date":"2017-09-11 16:42:10","endLine":136,"groupId":"22227","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/c342395fadaaf5329d938a46b366ca5ebfe621.src","preCode":"    public void shouldPutIfAbsent() throws Exception {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-05-31 02:54:53","codes":[{"authorDate":"2018-05-31 02:54:53","commitOrder":3,"curCode":"    public void shouldPutGet() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value());\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value());\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value());\n        assertEquals(cache.hits(), 3);\n    }\n","date":"2018-05-31 02:54:53","endLine":123,"groupId":"10891","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPutGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/78be6dd4eaa506bdb041a8bf386c322897db2f.src","preCode":"    public void shouldPutGet() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.put(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{11}));\n        cache.put(Bytes.wrap(new byte[]{2}), new LRUCacheEntry(new byte[]{12}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {11}, cache.get(Bytes.wrap(new byte[] {1})).value);\n        assertArrayEquals(new byte[] {12}, cache.get(Bytes.wrap(new byte[] {2})).value);\n        assertEquals(cache.hits(), 3);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2018-05-31 02:54:53","commitOrder":3,"curCode":"    public void shouldPutIfAbsent() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value());\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value());\n    }\n","date":"2018-05-31 02:54:53","endLine":133,"groupId":"10891","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/78be6dd4eaa506bdb041a8bf386c322897db2f.src","preCode":"    public void shouldPutIfAbsent() {\n        cache.put(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{10}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{0}), new LRUCacheEntry(new byte[]{20}));\n        cache.putIfAbsent(Bytes.wrap(new byte[]{1}), new LRUCacheEntry(new byte[]{30}));\n\n        assertArrayEquals(new byte[] {10}, cache.get(Bytes.wrap(new byte[] {0})).value);\n        assertArrayEquals(new byte[] {30}, cache.get(Bytes.wrap(new byte[] {1})).value);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/NamedCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"f33e9a346e22e29bb66e0ea0f3442903d136ca67","commitMessage":"@@@KAFKA-4936: Add dynamic routing in Streams (#5018)\n\nimplements KIP-303\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-31 02:54:53","modifiedFileCount":"39","status":"M","submitter":"Guozhang Wang"}]
