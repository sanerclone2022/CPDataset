[{"authorTime":"2021-02-04 19:42:43","codes":[{"authorDate":"2021-02-04 19:42:43","commitOrder":1,"curCode":"    public void testReconnectAfterAddressChange() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            return (mockHostResolver.useNewAddresses() && newAddresses.contains(inetAddress)) ||\n                   (!mockHostResolver.useNewAddresses() && initialAddresses.contains(inetAddress));\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        mockHostResolver.changeAddresses();\n        selector.serverDisconnect(node.idString());\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        assertEquals(1, initialAddressConns.get());\n        assertEquals(1, newAddressConns.get());\n        assertEquals(2, mockHostResolver.resolutionCount());\n    }\n","date":"2021-02-04 19:42:43","endLine":972,"groupId":"2887","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconnectAfterAddressChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/130ff934ee96b89c0de633125dd48e3142259c.src","preCode":"    public void testReconnectAfterAddressChange() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            return (mockHostResolver.useNewAddresses() && newAddresses.contains(inetAddress)) ||\n                   (!mockHostResolver.useNewAddresses() && initialAddresses.contains(inetAddress));\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        mockHostResolver.changeAddresses();\n        selector.serverDisconnect(node.idString());\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        assertEquals(1, initialAddressConns.get());\n        assertEquals(1, newAddressConns.get());\n        assertEquals(2, mockHostResolver.resolutionCount());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":931,"status":"B"},{"authorDate":"2021-02-04 19:42:43","commitOrder":1,"curCode":"    public void testFailedConnectionToFirstAddress() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            \r\n            return initialAddressConns.get() > 1;\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        \r\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        \r\n        assertEquals(2, initialAddressConns.get());\n        assertEquals(0, newAddressConns.get());\n        assertEquals(1, mockHostResolver.resolutionCount());\n    }\n","date":"2021-02-04 19:42:43","endLine":1013,"groupId":"2887","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedConnectionToFirstAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/130ff934ee96b89c0de633125dd48e3142259c.src","preCode":"    public void testFailedConnectionToFirstAddress() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            \r\n            return initialAddressConns.get() > 1;\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        \r\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        \r\n        assertEquals(2, initialAddressConns.get());\n        assertEquals(0, newAddressConns.get());\n        assertEquals(1, mockHostResolver.resolutionCount());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":975,"status":"B"}],"commitId":"131d4753cfed65ed6dee0a8c754765c97c3d513f","commitMessage":"@@@KAFKA-12193: Re-resolve IPs after a client disconnects (#9902)\n\nThis patch changes the NetworkClient behavior to resolve the target node's hostname after disconnecting from an established connection.  rather than waiting until the previously-resolved addresses are exhausted. This is to handle the scenario when the node's IP addresses have changed during the lifetime of the connection.  and means that the client does not have to try to connect to invalid IP addresses until it has tried each address.\n\nReviewers: Mickael Maison <mickael.maison@gmail.com>.  Satish Duggana <satishd@apache.org>.  David Jacot <djacot@confluent.io>\n","date":"2021-02-04 19:42:43","modifiedFileCount":"7","status":"B","submitter":"Bob Barrett"},{"authorTime":"2021-04-01 22:59:59","codes":[{"authorDate":"2021-04-01 22:59:59","commitOrder":2,"curCode":"    public void testReconnectAfterAddressChange() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            return (mockHostResolver.useNewAddresses() && newAddresses.contains(inetAddress)) ||\n                   (!mockHostResolver.useNewAddresses() && initialAddresses.contains(inetAddress));\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        mockHostResolver.changeAddresses();\n        selector.serverDisconnect(node.idString());\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        assertEquals(1, initialAddressConns.get());\n        assertEquals(1, newAddressConns.get());\n        assertEquals(2, mockHostResolver.resolutionCount());\n    }\n","date":"2021-04-01 22:59:59","endLine":971,"groupId":"103763","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconnectAfterAddressChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/b5b201141fd9912a43a43e2fc9980212c23e8c.src","preCode":"    public void testReconnectAfterAddressChange() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            return (mockHostResolver.useNewAddresses() && newAddresses.contains(inetAddress)) ||\n                   (!mockHostResolver.useNewAddresses() && initialAddresses.contains(inetAddress));\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        mockHostResolver.changeAddresses();\n        selector.serverDisconnect(node.idString());\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        assertEquals(1, initialAddressConns.get());\n        assertEquals(1, newAddressConns.get());\n        assertEquals(2, mockHostResolver.resolutionCount());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"M"},{"authorDate":"2021-04-01 22:59:59","commitOrder":2,"curCode":"    public void testFailedConnectionToFirstAddress() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            \r\n            return initialAddressConns.get() > 1;\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        \r\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        \r\n        assertEquals(2, initialAddressConns.get());\n        assertEquals(0, newAddressConns.get());\n        assertEquals(1, mockHostResolver.resolutionCount());\n    }\n","date":"2021-04-01 22:59:59","endLine":1012,"groupId":"103763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedConnectionToFirstAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/b5b201141fd9912a43a43e2fc9980212c23e8c.src","preCode":"    public void testFailedConnectionToFirstAddress() {\n        AddressChangeHostResolver mockHostResolver = new AddressChangeHostResolver(\n                initialAddresses.toArray(new InetAddress[0]), newAddresses.toArray(new InetAddress[0]));\n        AtomicInteger initialAddressConns = new AtomicInteger();\n        AtomicInteger newAddressConns = new AtomicInteger();\n        MockSelector selector = new MockSelector(this.time, inetSocketAddress -> {\n            InetAddress inetAddress = inetSocketAddress.getAddress();\n            if (initialAddresses.contains(inetAddress)) {\n                initialAddressConns.incrementAndGet();\n            } else if (newAddresses.contains(inetAddress)) {\n                newAddressConns.incrementAndGet();\n            }\n            \r\n            return initialAddressConns.get() > 1;\n        });\n        NetworkClient client = new NetworkClient(metadataUpdater, null, selector, \"mock\", Integer.MAX_VALUE,\n                reconnectBackoffMsTest, reconnectBackoffMaxMsTest, 64 * 1024, 64 * 1024,\n                defaultRequestTimeoutMs, connectionSetupTimeoutMsTest, connectionSetupTimeoutMaxMsTest,\n                ClientDnsLookup.USE_ALL_DNS_IPS, time, false, new ApiVersions(), null, new LogContext(), mockHostResolver);\n\n        \r\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertFalse(client.isReady(node, time.milliseconds()));\n\n        \r\n        time.sleep(reconnectBackoffMaxMsTest);\n        client.ready(node, time.milliseconds());\n        time.sleep(connectionSetupTimeoutMaxMsTest);\n        client.poll(0, time.milliseconds());\n        assertTrue(client.isReady(node, time.milliseconds()));\n\n        \r\n        \r\n        assertEquals(2, initialAddressConns.get());\n        assertEquals(0, newAddressConns.get());\n        assertEquals(1, mockHostResolver.resolutionCount());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":974,"status":"M"}],"commitId":"2342ec1d1cc03f4f244fc2921978534af63ae54f","commitMessage":"@@@KAFKA-12600: Remove deprecated config value `default` for client config `client.dns.lookup` (#10458)\n\nThe config has been deprecated since Kafka 2.6 (released ~1 year before\n3.0).  but it was the default before it got deprecated. As such.  it's\nreasonably unlikely that people would have set it explicitly.\n\nGiven the confusing `default` name even though it's _not_ the default.  I\nthink we should remove it in 3.0.\n\nAlso remove `ClientDnsLookup.DEFAULT` (not public API).  which unlocks\na number of code simplications.\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-04-01 22:59:59","modifiedFileCount":"19","status":"M","submitter":"Ismael Juma"}]
