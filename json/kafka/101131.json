[{"authorTime":"2019-05-08 01:49:31","codes":[{"authorDate":"2019-05-08 01:49:31","commitOrder":1,"curCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore());\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","date":"2019-05-08 01:49:31","endLine":183,"groupId":"3005","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFindTimestampedKeyValueStores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/2d46d6360e3389e4329815690dc3610dc1f731.src","preCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore());\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2019-05-08 01:49:31","commitOrder":1,"curCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(\"timestamped-window-store\", windowStore());\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","date":"2019-05-08 01:49:31","endLine":247,"groupId":"15046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFindTimestampedWindowStoresAsWindowStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/2d46d6360e3389e4329815690dc3610dc1f731.src","preCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(\"timestamped-window-store\", windowStore());\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"}],"commitId":"a6d5efaf0d06f8a66350a8f1b959baf176fd482a","commitMessage":"@@@KAFKA-3522: Interactive Queries must return timestamped stores (#6661)\n\nReviewers: John Roesler <john@confluent.io>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-05-08 01:49:31","modifiedFileCount":"6","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-01-15 06:10:19","codes":[{"authorDate":"2020-01-15 06:10:19","commitOrder":2,"curCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore(), false);\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","date":"2020-01-16 03:47:40","endLine":181,"groupId":"3308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFindTimestampedKeyValueStores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/b1625678908a8928ec237dbf43c5d8f70d3a10.src","preCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore());\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-01-15 06:10:19","commitOrder":2,"curCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(\"timestamped-window-store\", QueryableStoreTypes.windowStore(), false);\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","date":"2020-01-16 03:47:40","endLine":245,"groupId":"3308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFindTimestampedWindowStoresAsWindowStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/b1625678908a8928ec237dbf43c5d8f70d3a10.src","preCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(\"timestamped-window-store\", windowStore());\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"0c76fbbbedb5d342080dcaf0207602c158d3116d","commitMessage":"@@@KAFKA-6144: IQ option to query standbys (#7962)\n\nAdd a new overload of KafkaStreams#store that allows users\nto query standby and restoring stores in addition to active ones.\n\nCloses: #7962\nImplements: KIP-535\nCo-authored-by: Navinder Pal Singh Brar <navinder_brar@yahoo.com>\nReviewed-by: John Roesler <vvcephei@apache.org>\n","date":"2020-01-16 03:47:40","modifiedFileCount":"15","status":"M","submitter":"vinoth chandar"},{"authorTime":"2020-01-30 15:45:47","codes":[{"authorDate":"2020-01-30 15:45:47","commitOrder":3,"curCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(StoreQueryParams.fromNameAndType(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore()));\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","date":"2020-01-30 15:45:47","endLine":184,"groupId":"18635","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFindTimestampedKeyValueStores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/f5f4e186b824ea11f65f510c7cfa40539c6516.src","preCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore(), false);\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-01-30 15:45:47","commitOrder":3,"curCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(StoreQueryParams.fromNameAndType(\"timestamped-window-store\", QueryableStoreTypes.windowStore()));\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","date":"2020-01-30 15:45:47","endLine":248,"groupId":"18635","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFindTimestampedWindowStoresAsWindowStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/f5f4e186b824ea11f65f510c7cfa40539c6516.src","preCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(\"timestamped-window-store\", QueryableStoreTypes.windowStore(), false);\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"05b2361c0412be25877cb106e9847e9a8a4f622a","commitMessage":"@@@KAFKA-9445: Allow adding changes to allow serving from a specific partition (#7984)\n\nImplements KIP-562.\n\nReviewers: Vinoth Chandar <vchandar@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-01-30 15:45:47","modifiedFileCount":"20","status":"M","submitter":"Navinder Pal Singh Brar"},{"authorTime":"2020-02-11 02:09:27","codes":[{"authorDate":"2020-02-11 02:09:27","commitOrder":4,"curCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(StoreQueryParameters.fromNameAndType(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore()));\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","date":"2020-02-11 02:09:27","endLine":190,"groupId":"101131","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFindTimestampedKeyValueStores","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/a759b3b309c0be9cebe90f8bb3db5c79b1036b.src","preCode":"    public void shouldFindTimestampedKeyValueStores() {\n        mockThread(true);\n        final List<ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>>> tkvStores =\n            provider.stores(StoreQueryParams.fromNameAndType(\"timestamped-kv-store\", QueryableStoreTypes.timestampedKeyValueStore()));\n        assertEquals(2, tkvStores.size());\n        for (final ReadOnlyKeyValueStore<String, ValueAndTimestamp<String>> store: tkvStores) {\n            assertThat(store, instanceOf(ReadOnlyKeyValueStore.class));\n            assertThat(store, instanceOf(TimestampedKeyValueStore.class));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-02-11 02:09:27","commitOrder":4,"curCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(StoreQueryParameters.fromNameAndType(\"timestamped-window-store\", QueryableStoreTypes.windowStore()));\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","date":"2020-02-11 02:09:27","endLine":254,"groupId":"101131","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFindTimestampedWindowStoresAsWindowStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/a759b3b309c0be9cebe90f8bb3db5c79b1036b.src","preCode":"    public void shouldFindTimestampedWindowStoresAsWindowStore() {\n        mockThread(true);\n        final List<ReadOnlyWindowStore<String, ValueAndTimestamp<String>>> windowStores =\n            provider.stores(StoreQueryParams.fromNameAndType(\"timestamped-window-store\", QueryableStoreTypes.windowStore()));\n        assertEquals(2, windowStores.size());\n        for (final ReadOnlyWindowStore<String, ValueAndTimestamp<String>> store: windowStores) {\n            assertThat(store, instanceOf(ReadOnlyWindowStore.class));\n            assertThat(store, not(instanceOf(TimestampedWindowStore.class)));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProviderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"d76fa1b22d4b06e1f1a7700272ca963091f13931","commitMessage":"@@@KAFKA-9487: Follow-up PR of Kafka-9445 (#8033)\n\nFollows up on the original PR for KAFKA-9445 to address a final round of feedback\n\nReviewers: John Roesler <vvcephei@apache.org>.  Matthias J. Sax <matthias@confluent.io>\n","date":"2020-02-11 02:09:27","modifiedFileCount":"24","status":"M","submitter":"Navinder Pal Singh Brar"}]
