[{"authorTime":"2019-01-31 08:13:19","codes":[{"authorDate":"2019-01-31 08:13:19","commitOrder":1,"curCode":"    private void verifyDBOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeDbOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(dbOptions, new ColumnFamilyOptions());\n\n        final Object[] parameters = getDBOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(dbOptions);\n            replay(dbOptions);\n            method.invoke(optionsFacadeDbOptions, parameters);\n            verify();\n            fail(\"Should have called DBOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call DBOptions\\\\.\" + method.getName() + \"((.*\\n*)*):\"));\n        }\n    }\n","date":"2019-01-31 08:13:19","endLine":124,"groupId":"11483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyDBOptionsMethodCall","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/7f94f5e4e07a4abeaf84afc80899cee5ec7258.src","preCode":"    private void verifyDBOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeDbOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(dbOptions, new ColumnFamilyOptions());\n\n        final Object[] parameters = getDBOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(dbOptions);\n            replay(dbOptions);\n            method.invoke(optionsFacadeDbOptions, parameters);\n            verify();\n            fail(\"Should have called DBOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call DBOptions\\\\.\" + method.getName() + \"((.*\\n*)*):\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2019-01-31 08:13:19","commitOrder":1,"curCode":"    private void verifyColumnFamilyOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeColumnFamilyOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(new DBOptions(), columnFamilyOptions);\n\n        final Object[] parameters = getColumnFamilyOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(columnFamilyOptions);\n            replay(columnFamilyOptions);\n            method.invoke(optionsFacadeColumnFamilyOptions, parameters);\n            verify();\n            fail(\"Should have called ColumnFamilyOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call ColumnFamilyOptions\\\\.\" + method.getName() +  \"(.*)\"));\n        }\n    }\n","date":"2019-01-31 08:13:19","endLine":207,"groupId":"11483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyColumnFamilyOptionsMethodCall","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/7f94f5e4e07a4abeaf84afc80899cee5ec7258.src","preCode":"    private void verifyColumnFamilyOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeColumnFamilyOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(new DBOptions(), columnFamilyOptions);\n\n        final Object[] parameters = getColumnFamilyOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(columnFamilyOptions);\n            replay(columnFamilyOptions);\n            method.invoke(optionsFacadeColumnFamilyOptions, parameters);\n            verify();\n            fail(\"Should have called ColumnFamilyOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call ColumnFamilyOptions\\\\.\" + method.getName() +  \"(.*)\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"73565b7f679c281f83a5df11e662b0f27cb1e55d","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedStore (#6149)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-31 08:13:19","modifiedFileCount":"5","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-02-19 03:29:14","codes":[{"authorDate":"2020-02-19 03:29:14","commitOrder":2,"curCode":"    private void verifyDBOptionsMethodCall(final Method method) throws Exception {\n        final DBOptions mockedDbOptions = mock(DBOptions.class);\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeDbOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(mockedDbOptions, new ColumnFamilyOptions());\n\n        final Object[] parameters = getDBOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(mockedDbOptions);\n            replay(mockedDbOptions);\n            method.invoke(optionsFacadeDbOptions, parameters);\n            verify();\n            fail(\"Should have called DBOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call DBOptions\\\\.\" + method.getName() + \"((.*\\n*)*):\"));\n        }\n    }\n","date":"2020-02-19 03:29:14","endLine":128,"groupId":"101125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyDBOptionsMethodCall","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/e9a95d56c658f1d1e4f6421c165e772adf9c6b.src","preCode":"    private void verifyDBOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeDbOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(dbOptions, new ColumnFamilyOptions());\n\n        final Object[] parameters = getDBOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(dbOptions);\n            replay(dbOptions);\n            method.invoke(optionsFacadeDbOptions, parameters);\n            verify();\n            fail(\"Should have called DBOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call DBOptions\\\\.\" + method.getName() + \"((.*\\n*)*):\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-02-19 03:29:14","commitOrder":2,"curCode":"    private void verifyColumnFamilyOptionsMethodCall(final Method method) throws Exception {\n        final ColumnFamilyOptions mockedColumnFamilyOptions = mock(ColumnFamilyOptions.class);\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeColumnFamilyOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(new DBOptions(), mockedColumnFamilyOptions);\n\n        final Object[] parameters = getColumnFamilyOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(mockedColumnFamilyOptions);\n            replay(mockedColumnFamilyOptions);\n            method.invoke(optionsFacadeColumnFamilyOptions, parameters);\n            verify();\n            fail(\"Should have called ColumnFamilyOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call ColumnFamilyOptions\\\\.\" + method.getName() +  \"(.*)\"));\n        }\n    }\n","date":"2020-02-19 03:29:14","endLine":215,"groupId":"101125","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyColumnFamilyOptionsMethodCall","params":"(finalMethodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/e9a95d56c658f1d1e4f6421c165e772adf9c6b.src","preCode":"    private void verifyColumnFamilyOptionsMethodCall(final Method method) throws Exception {\n        final RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter optionsFacadeColumnFamilyOptions\n            = new RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter(new DBOptions(), columnFamilyOptions);\n\n        final Object[] parameters = getColumnFamilyOptionsParameters(method.getParameterTypes());\n\n        try {\n            reset(columnFamilyOptions);\n            replay(columnFamilyOptions);\n            method.invoke(optionsFacadeColumnFamilyOptions, parameters);\n            verify();\n            fail(\"Should have called ColumnFamilyOptions.\" + method.getName() + \"()\");\n        } catch (final InvocationTargetException undeclaredMockMethodCall) {\n            assertThat(undeclaredMockMethodCall.getCause(), instanceOf(AssertionError.class));\n            assertThat(undeclaredMockMethodCall.getCause().getMessage().trim(),\n                matchesPattern(\"Unexpected method call ColumnFamilyOptions\\\\.\" + method.getName() +  \"(.*)\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"ebcdcd9fa94efbff80e52b02c85d4a61c09f850b","commitMessage":"@@@KAFKA-8025: Fix flaky RocksDB test (#8126)\n\nReviewers: Bill Bejeck <bill@confluent.io>","date":"2020-02-19 03:29:14","modifiedFileCount":"1","status":"M","submitter":"Matthias J. Sax"}]
