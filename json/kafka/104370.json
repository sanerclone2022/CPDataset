[{"authorTime":"2021-05-02 01:05:45","codes":[{"authorDate":"2021-05-02 01:05:45","commitOrder":1,"curCode":"    public void testAbortedSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","date":"2021-05-02 01:05:45","endLine":71,"groupId":"13982","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAbortedSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/862101d73bae3b4df8d1c9b3bb1c4ce346f822.src","preCode":"    public void testAbortedSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2021-05-02 01:05:45","commitOrder":1,"curCode":"    public void testAppendToFrozenSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","date":"2021-05-02 01:05:45","endLine":88,"groupId":"13982","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendToFrozenSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/862101d73bae3b4df8d1c9b3bb1c4ce346f822.src","preCode":"    public void testAppendToFrozenSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"6203bf8b94c7c340671c1729f4a8e4fcc302605e","commitMessage":"@@@KAFKA-12154; Raft Snapshot Loading API (#10085)\n\nImplement Raft Snapshot loading API.\n\n1. Adds a new method `handleSnapshot` to `raft.Listener` which is called whenever the `RaftClient` determines that the `Listener` needs to load a new snapshot before reading the log. This happens when the `Listener`'s next offset is less than the log start offset also known as the earliest snapshot.\n\n2.  Adds a new type `SnapshotReader<T>` which provides a `Iterator<Batch<T>>` interface and de-serializes records in the `RawSnapshotReader` into `T`s\n\n3.  Adds a new type `RecordsIterator<T>` that implements an `Iterator<Batch<T>>` by scanning a `Records` object and deserializes the batches and records into `Batch<T>`. This type is used by both `SnapshotReader<T>` and `RecordsBatchReader<T>` internally to implement the `Iterator` interface that they expose. \n\n4. Changes the `MockLog` implementation to read one or two batches at a time. The previous implementation always read from the given offset to the high-watermark. This made it impossible to test interesting snapshot loading scenarios.\n\n5. Removed `throws IOException` from some methods. Some of types were inconsistently throwing `IOException` in some cases and throwing `RuntimeException(....  new IOException(...))` in others. This PR improves the consistent by wrapping `IOException` in `RuntimeException` in a few more places and replacing `Closeable` with `AutoCloseable`.\n\n6. Updated the Kafka Raft simulation test to take into account snapshot. `ReplicatedCounter` was updated to generate snapshot after 10 records get committed. This means that the `ConsistentCommittedData` validation was extended to take snapshots into account. Also added a new invariant to ensure that the log start offset is consistently set with the earliest snapshot.\n\nReviewers: dengziming <swzmdeng@163.com>.  David Arthur <mumrah@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-05-02 01:05:45","modifiedFileCount":"25","status":"B","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-06-16 01:32:01","codes":[{"authorDate":"2021-06-16 01:32:01","commitOrder":2,"curCode":"    public void testAbortedSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","date":"2021-06-16 01:32:01","endLine":95,"groupId":"14606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAbortedSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/c3cdbc636d4bb1a098498c23bb6bf7fe2a1725.src","preCode":"    public void testAbortedSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-06-16 01:32:01","commitOrder":2,"curCode":"    public void testAppendToFrozenSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","date":"2021-06-16 01:32:01","endLine":125,"groupId":"14606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendToFrozenSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/c3cdbc636d4bb1a098498c23bb6bf7fe2a1725.src","preCode":"    public void testAppendToFrozenSnapshot() throws IOException {\n        OffsetAndEpoch id = new OffsetAndEpoch(10L, 3);\n        List<List<String>> expected = buildRecords(3, 3);\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters).build();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id)) {\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"b67a77d5b9ed497b5b3cf0dde95a4f3ef7f0b74f","commitMessage":"@@@KAFKA-12787; Integrate controller snapshoting with raft client (#10786)\n\nDirectly use `RaftClient.Listener`.  `SnapshotWriter` and `SnapshotReader` in the quorum controller.\n\n1. Allow `RaftClient` users to create snapshots by specifying the last committed offset and last committed epoch. These values are validated against the log and leader epoch cache.\n2. Remove duplicate classes in the metadata module for writing and reading snapshots.\n3. Changed the logic for comparing snapshots. The old logic was assuming a certain batch grouping. This didn't match the implementation of the snapshot writer. The snapshot writer is free to merge batches before writing them.\n4. Improve `LocalLogManager` to keep track of multiple snapshots.\n5. Improve the documentation and API for the snapshot classes to highlight the distinction between the offset of batches in the snapshot vs the offset of batches in the log. These two offsets are independent of one another. `SnapshotWriter` and `SnapshotReader` expose a method called `lastOffsetFromLog` which represents the last inclusive offset from the log that is represented in the snapshot.\n\nReviewers: dengziming <swzmdeng@163.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-06-16 01:32:01","modifiedFileCount":"21","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-06-30 00:37:20","codes":[{"authorDate":"2021-06-30 00:37:20","commitOrder":3,"curCode":"    public void testAbortedSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch, 0).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","date":"2021-06-30 00:37:20","endLine":140,"groupId":"104370","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAbortedSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/f80c53ee213586ea0415f7827abcab7d801642.src","preCode":"    public void testAbortedSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n        }\n\n        assertEquals(Optional.empty(), context.log.readSnapshot(id));\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-06-30 00:37:20","commitOrder":3,"curCode":"    public void testAppendToFrozenSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch, 0).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","date":"2021-06-30 00:37:20","endLine":170,"groupId":"104370","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAppendToFrozenSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/f80c53ee213586ea0415f7827abcab7d801642.src","preCode":"    public void testAppendToFrozenSnapshot() throws Exception {\n        int recordsPerBatch = 3;\n        int batches = 3;\n        OffsetAndEpoch id = new OffsetAndEpoch(recordsPerBatch * batches, 3);\n        List<List<String>> expected = buildRecords(recordsPerBatch, batches);\n\n        RaftClientTestContext.Builder contextBuilder = new RaftClientTestContext.Builder(localId, voters);\n        for (List<String> batch : expected) {\n            contextBuilder.appendToLog(id.epoch, batch);\n        }\n        RaftClientTestContext context = contextBuilder.build();\n\n        context.pollUntil(() -> context.currentLeader().equals(OptionalInt.of(localId)));\n        int epoch = context.currentEpoch();\n\n        context.advanceLocalLeaderHighWatermarkToLogEndOffset();\n\n        try (SnapshotWriter<String> snapshot = context.client.createSnapshot(id.offset - 1, id.epoch).get()) {\n            assertEquals(id, snapshot.snapshotId());\n            expected.forEach(batch -> {\n                assertDoesNotThrow(() -> snapshot.append(batch));\n            });\n\n            snapshot.freeze();\n\n            assertThrows(RuntimeException.class, () -> snapshot.append(expected.get(0)));\n        }\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/snapshot/SnapshotWriterReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"d3ec9f940cc4402270cba3ad159ec64a9676a385","commitMessage":"@@@KAFKA-12952 Add header and footer records for raft snapshots (#10899)\n\nAdd header and footer records for raft snapshots. This helps identify when the snapshot\nstarts and ends. The header also contains a time.  The time field is currently set to 0.\nKAFKA-12997 will add in the necessary wiring to use the correct timestamp.\n\nReviewers: Jose Sancio <jsancio@gmail.com>.  Colin P. McCabe <cmccabe@apache.org>","date":"2021-06-30 00:37:20","modifiedFileCount":"17","status":"M","submitter":"Niket"}]
