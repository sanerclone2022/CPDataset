[{"authorTime":"2017-05-19 08:02:51","codes":[{"authorDate":"2017-05-19 08:02:51","commitOrder":1,"curCode":"    public void testUpperBoundWithZeroTimestamp() throws Exception {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySerde.bytesToBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        );\n    }\n","date":"2017-05-19 08:02:51","endLine":126,"groupId":"12207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/82174b82c35dcc78a7dc3671f2c2b0a040608a.src","preCode":"    public void testUpperBoundWithZeroTimestamp() throws Exception {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySerde.bytesToBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2017-05-19 08:02:51","commitOrder":1,"curCode":"    public void testLowerBoundMatchesTrailingZeros() throws Exception {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(\n                SessionKeySerde.bytesToBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            ) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","date":"2017-05-19 08:02:51","endLine":150,"groupId":"12209","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/82174b82c35dcc78a7dc3671f2c2b0a040608a.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() throws Exception {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(\n                SessionKeySerde.bytesToBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            ) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"e28752357705568219315375c666f8e500db9c12","commitMessage":"@@@KAFKA-5192: add WindowStore range scan (KIP-155)\n\nImplements range scan for keys in windowed and session stores\n\nModifies caching session and windowed stores to use segmented cache keys.\nCache keys are internally prefixed with their segment id to ensure key ordering in the cache matches the ordering in the underlying store for keys spread across multiple segments.\nThis should also result in fewer cache keys getting scanned for queries spanning only some segments.\n\nAuthor: Xavier L?aut? <xavier@confluent.io>\n\nReviewers: Damian Guy.  Guozhang Wang\n\nCloses #3027 from xvrl/windowstore-range-scan\n","date":"2017-05-19 08:02:51","modifiedFileCount":"40","status":"B","submitter":"Xavier L?aut?"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void testUpperBoundWithZeroTimestamp() {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySerde.bytesToBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        );\n    }\n","date":"2017-09-11 16:42:10","endLine":126,"groupId":"12207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/f52c9c1b3000918981d4ca03c1f111ec197df0.src","preCode":"    public void testUpperBoundWithZeroTimestamp() throws Exception {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySerde.bytesToBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(\n                SessionKeySerde.bytesToBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            ) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","date":"2017-09-11 16:42:10","endLine":150,"groupId":"12209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/f52c9c1b3000918981d4ca03c1f111ec197df0.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() throws Exception {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(\n                SessionKeySerde.bytesToBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            ) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-03-10 03:08:08","codes":[{"authorDate":"2018-03-10 03:08:08","commitOrder":3,"curCode":"    public void testUpperBoundWithZeroTimestamp() {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        ));\n    }\n","date":"2018-03-10 03:08:08","endLine":149,"groupId":"19827","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/68/527218796c22943b90d6f448cb314e584bb1c9.src","preCode":"    public void testUpperBoundWithZeroTimestamp() {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySerde.bytesToBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2018-03-10 03:08:08","commitOrder":3,"curCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","date":"2018-03-10 03:08:08","endLine":173,"groupId":"7413","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/68/527218796c22943b90d6f448cb314e584bb1c9.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(\n                SessionKeySerde.bytesToBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            ) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySerde.bytesToBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"b1aa1912f08765d9914e3d036deee6b71ea009dd","commitMessage":"@@@KAFKA-4831: Extract WindowedSerde to public APIs (#3307)\n\nNow that we have augmented WindowSerde with non-arg parameters.  extract it out as part of the public APIs so that users who want to I/O windowed streams can use it. This is originally introduced by @vitaly-pushkar\n\nThis PR grows out to be a much larger one.  as I found a few tech debts and bugs while working on it. Here is a summary of the PR:\n\nPublic API changes (I will propose a KIP after a first round of reviews):\nAdd TimeWindowedSerializer.  TimeWindowedDeserializer.  SessionWindowedSerializer.  SessionWindowedDeserializer into o.a.k.streams.kstream. The serializers would implemented an internal WindowedSerializer interface for the serializeBaseKey function used in 3) below.\n\nAdd WindowedSerdes into o.a.k.streams.kstream. The reason to now add them into o.a.k.clients's Serdes is that it then needs dependency of streams.\n\nAdd \"default.windowed.key.serde.inner\" and \"default.windowed.value.serde.inner\" into StreamsConfig.  used when \"default.key.serde\" is specified to use time or session windowed serde. Note this requires the serde class.  not the type class.\n\nConsolidated serde format from multiple classes.  including SessionKeySerde.java for session.  and WindowStoreUtils for time window.  into SessionKeySchema and WindowKeySchema.\n\nBug fix: WindowedStreamPartitioner needs to consider both time window and session window serdes.\n\nRemoved RocksDBWindowBytesStore etc optimization since after KIP-182 all the serde know happens on metered store.  hence this optimization is not worth.\n\nBug fix: for time window.  the serdes used for store and the serdes used for piping (source and sink node) are different: the former needs to append sequence number but not for the later.\n\nOther minor cleanups: remove unnecessary throws.  etc.\n\nAuthors: Guozhang Wang <wangguoz@gmail.com>.  Vitaly Pushkar <vitaly.pushkar@gmail.com>\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>.  Xi Hu","date":"2018-03-10 03:08:08","modifiedFileCount":"37","status":"M","submitter":"Vitaly Pushkar"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":4,"curCode":"    public void testUpperBoundWithZeroTimestamp() {\n        final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        ));\n    }\n","date":"2018-08-04 04:19:46","endLine":149,"groupId":"19827","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/51687e0bdda200e65895d4e81ebe13deb19894.src","preCode":"    public void testUpperBoundWithZeroTimestamp() {\n        Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        ));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":4,"curCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","date":"2018-08-04 04:19:46","endLine":173,"groupId":"7413","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/51687e0bdda200e65895d4e81ebe13deb19894.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2019-01-19 04:08:14","commitOrder":5,"curCode":"    public void testUpperBoundWithZeroTimestamp() {\n        final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA}), new SessionWindow(0, Long.MAX_VALUE))))\n        ));\n    }\n","date":"2019-01-19 04:08:14","endLine":148,"groupId":"19827","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/9bc57fb10f4c548af175ace7135bf948425bd4.src","preCode":"    public void testUpperBoundWithZeroTimestamp() {\n        final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))\n        ));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":5,"curCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","date":"2018-08-04 04:19:46","endLine":173,"groupId":"7413","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/51687e0bdda200e65895d4e81ebe13deb19894.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"}],"commitId":"56139df84495a67d311b160045497ec26f60c3a9","commitMessage":"@@@KAFKA-7652: Part I; Fix SessionStore's findSession(single-key) (#6134)\n\nLet findSessions(final K key) to call on underlying bytes store directly.  using the more restricted range.\n\nFix the conservative upper range for multi-key range in session schema.\n\nMinor: removed unnecessary private WrappedSessionStoreBytesIterator class as it is only used in unit test.\n\nMinor: removed unnecessary schema#init function by using the direct bytes-to-binary function.\n\nPlease read the original PR for more detailed explanation of the root cause of the bug.\n\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Damian Guy <damian@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-01-19 04:08:14","modifiedFileCount":"13","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-31 09:31:31","codes":[{"authorDate":"2019-01-31 09:31:31","commitOrder":6,"curCode":"    public void testUpperBoundWithZeroTimestamp() {\n        final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA}), new SessionWindow(0, Long.MAX_VALUE))))\n        );\n    }\n","date":"2019-01-31 09:31:31","endLine":144,"groupId":"101117","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpperBoundWithZeroTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/34fb0accf5218ab783af6e9172672ea4e61751.src","preCode":"    public void testUpperBoundWithZeroTimestamp() {\n        final Bytes upper = sessionKeySchema.upperRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), 0);\n\n        assertThat(upper, equalTo(Bytes.wrap(SessionKeySchema.toBinary(\n            new Windowed<>(Bytes.wrap(new byte[]{0xA}), new SessionWindow(0, Long.MAX_VALUE))))\n        ));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2019-01-31 09:31:31","commitOrder":6,"curCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(SessionKeySchema.toBinary(\n                new Windowed<>(\n                    Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                    new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0)))));\n    }\n","date":"2019-01-31 09:31:31","endLine":166,"groupId":"101117","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLowerBoundMatchesTrailingZeros","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/34fb0accf5218ab783af6e9172672ea4e61751.src","preCode":"    public void testLowerBoundMatchesTrailingZeros() {\n        final Bytes lower = sessionKeySchema.lowerRange(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), Long.MAX_VALUE);\n\n        assertThat(\n            \"appending zeros to key should still be in range\",\n            lower.compareTo(Bytes.wrap(\n                    SessionKeySchema.toBinary(\n                    new Windowed<>(\n                        Bytes.wrap(new byte[]{0xA, 0xB, 0xC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}),\n                        new SessionWindow(Long.MAX_VALUE, Long.MAX_VALUE))\n                )\n            )) < 0\n        );\n\n        assertThat(lower, equalTo(Bytes.wrap(SessionKeySchema.toBinary(new Windowed<>(Bytes.wrap(new byte[]{0xA, 0xB, 0xC}), new SessionWindow(0, 0))))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionKeySchemaTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"9d5893d3d5c548ffbc11b8aa880f5a280892e47a","commitMessage":"@@@KAFKA-7652: Part II; Add single-point query for SessionStore and use for flushing / getter (#6161)\n\n#2972 tried to fix a bug about flushing operation.  but it was not complete.  since findSessions(key.  earliestEnd.  latestStart) does not guarantee to only return a single entry since its semantics are to return any sessions whose end > earliestEnd and whose start < latestStart.\n\nI've tried various ways to fix it completely and I ended up having to add a single-point query to the public ReadOnlySessionStore API for the exact needed semantics. It is used for flushing to read the old values (otherwise the wrong old values will be sent downstreams.  hence it is a correctness issue) and also for getting the value for value-getters (it is for perf only).","date":"2019-01-31 09:31:31","modifiedFileCount":"16","status":"M","submitter":"Guozhang Wang"}]
