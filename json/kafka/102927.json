[{"authorTime":"2018-07-19 00:30:52","codes":[{"authorDate":"2018-07-19 00:30:52","commitOrder":2,"curCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.get(Bytes.wrap(serdes.rawKey(key)))), getTime);\n            } else {\n                return outerValue(inner.get(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2018-07-19 00:30:52","endLine":184,"groupId":"12010","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/795438a10f0fc9448f17957ce8b041191f53ac.src","preCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.get(Bytes.wrap(serdes.rawKey(key)))), getTime);\n            } else {\n                return outerValue(inner.get(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2018-07-19 00:30:52","commitOrder":2,"curCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key)))), deleteTime);\n            } else {\n                return outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2018-07-19 00:30:52","endLine":242,"groupId":"22573","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"delete","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/795438a10f0fc9448f17957ce8b041191f53ac.src","preCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key)))), deleteTime);\n            } else {\n                return outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"MB"}],"commitId":"06d96628f0e098d93aecc650534c9e9965127d92","commitMessage":"@@@MINOR: remove unused MeteredKeyValueStore (#5380)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-07-19 00:30:52","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-01-10 01:03:16","codes":[{"authorDate":"2019-01-10 01:03:16","commitOrder":3,"curCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.get(keyBytes(key))), getTime);\n            } else {\n                return outerValue(inner.get(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-01-10 01:03:16","endLine":143,"groupId":"12010","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/d1cae65d6f3157c275b7f3713f5190e4b6a487.src","preCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.get(Bytes.wrap(serdes.rawKey(key)))), getTime);\n            } else {\n                return outerValue(inner.get(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-01-10 01:03:16","commitOrder":3,"curCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.delete(keyBytes(key))), deleteTime);\n            } else {\n                return outerValue(inner.delete(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-01-10 01:03:16","endLine":201,"groupId":"13720","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"delete","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/d1cae65d6f3157c275b7f3713f5190e4b6a487.src","preCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key)))), deleteTime);\n            } else {\n                return outerValue(inner.delete(Bytes.wrap(serdes.rawKey(key))));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"1c7bf4e4976e2b58826f68f1abe8ffc9fd41692c","commitMessage":"@@@MINOR: code cleanup (#6053)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Ryanne Dolan <ryannedolan@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-10 01:03:16","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-02-15 00:38:01","codes":[{"authorDate":"2019-02-15 00:38:01","commitOrder":4,"curCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(wrapped().get(keyBytes(key))), getTime);\n            } else {\n                return outerValue(wrapped().get(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-02-15 00:38:01","endLine":141,"groupId":"12010","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/0860604de51bb5980bf57c1767406a14a0a353.src","preCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.get(keyBytes(key))), getTime);\n            } else {\n                return outerValue(inner.get(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-02-15 00:38:01","commitOrder":4,"curCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(wrapped().delete(keyBytes(key))), deleteTime);\n            } else {\n                return outerValue(wrapped().delete(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-02-15 00:38:01","endLine":199,"groupId":"13720","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"delete","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/0860604de51bb5980bf57c1767406a14a0a353.src","preCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(inner.delete(keyBytes(key))), deleteTime);\n            } else {\n                return outerValue(inner.delete(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"01f0f0af28ea05921868171c88448e299766e773","commitMessage":"@@@KAFKA-7916: Unify store wrapping code for clarity (#6255)\n\nRefactor internal store wrapping for improved maintainability.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-02-15 00:38:01","modifiedFileCount":"27","status":"M","submitter":"John Roesler"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":5,"curCode":"    public V get(final K key) {\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().get(keyBytes(key))), time, getSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":138,"groupId":"6526","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/f510b18ba9d88ee7198c13491cdb19d2a56f31.src","preCode":"    public V get(final K key) {\n        try {\n            if (getTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(wrapped().get(keyBytes(key))), getTime);\n            } else {\n                return outerValue(wrapped().get(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2019-10-31 00:24:59","commitOrder":5,"curCode":"    public V delete(final K key) {\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().delete(keyBytes(key))), time, deleteSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":174,"groupId":"6526","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"delete","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/f510b18ba9d88ee7198c13491cdb19d2a56f31.src","preCode":"    public V delete(final K key) {\n        try {\n            if (deleteTime.shouldRecord()) {\n                return measureLatency(() -> outerValue(wrapped().delete(keyBytes(key))), deleteTime);\n            } else {\n                return outerValue(wrapped().delete(keyBytes(key)));\n            }\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-04-30 10:47:26","codes":[{"authorDate":"2021-04-30 10:47:26","commitOrder":6,"curCode":"    public V get(final K key) {\n        Objects.requireNonNull(key, \"key cannot be null\");\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().get(keyBytes(key))), time, getSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2021-04-30 10:47:26","endLine":196,"groupId":"102927","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/c44e8a49faa69be6f5d7070a4271e2e58d3a2b.src","preCode":"    public V get(final K key) {\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().get(keyBytes(key))), time, getSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2021-04-30 10:47:26","commitOrder":6,"curCode":"    public V delete(final K key) {\n        Objects.requireNonNull(key, \"key cannot be null\");\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().delete(keyBytes(key))), time, deleteSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2021-04-30 10:47:26","endLine":239,"groupId":"102927","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"delete","params":"(finalKkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/c44e8a49faa69be6f5d7070a4271e2e58d3a2b.src","preCode":"    public V delete(final K key) {\n        try {\n            return maybeMeasureLatency(() -> outerValue(wrapped().delete(keyBytes(key))), time, deleteSensor);\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), key);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"e454becb33faac0851b7d145452992f183cbff76","commitMessage":"@@@KAFKA-12396: added null check for state stores key (#10548)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-04-30 10:47:26","modifiedFileCount":"9","status":"M","submitter":"Valery Kokorev"}]
