[{"authorTime":"2020-07-31 01:29:39","codes":[{"authorDate":"2020-07-31 01:29:39","commitOrder":5,"curCode":"    private FetchResponse<MemoryRecords> createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponse.AbortedTransaction(234L, 999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n        return new FetchResponse<>(Errors.NONE, responseData, 25, sessionId);\n    }\n","date":"2020-07-31 01:29:39","endLine":1027,"groupId":"2255","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchResponse","params":"(intsessionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/f683d7f64d298838330150fac43eaee300e241.src","preCode":"    private FetchResponse<MemoryRecords> createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponse.AbortedTransaction(234L, 999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n        return new FetchResponse<>(Errors.NONE, responseData, 25, sessionId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1017,"status":"MB"},{"authorDate":"2020-07-31 01:29:39","commitOrder":5,"curCode":"    private FetchResponse<MemoryRecords> createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponse.AbortedTransaction(234L, 999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n\n        return new FetchResponse<>(Errors.NONE, responseData, 25, INVALID_SESSION_ID);\n    }\n","date":"2020-07-31 01:29:39","endLine":1045,"groupId":"17375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchResponse","params":"(booleanincludeAborted)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/f683d7f64d298838330150fac43eaee300e241.src","preCode":"    private FetchResponse<MemoryRecords> createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponse.AbortedTransaction(234L, 999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n\n        return new FetchResponse<>(Errors.NONE, responseData, 25, INVALID_SESSION_ID);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1029,"status":"B"}],"commitId":"4cd2396db31418c90005c998d9107ad40df055b2","commitMessage":"@@@KAFKA-9629 Use generated protocol for Fetch API (#9008)\n\nRefactored FetchRequest and FetchResponse to use the generated message classes for serialization and deserialization. This allows us to bypass unnecessary Struct conversion in a few places. A new \"records\" type was added to the message protocol which uses BaseRecords as the field type. When sending.  we can set a FileRecords instance on the message.  and when receiving the message class will use MemoryRecords. \n\nAlso included a few JMH benchmarks which indicate a small performance improvement for requests with high partition counts or small record sizes.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Boyang Chen <boyang@confluent.io>.  David Jacot <djacot@confluent.io>.  Lucas Bradstreet <lucas@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Colin P. McCabe <cmccabe@apache.org>","date":"2020-07-31 01:29:39","modifiedFileCount":"17","status":"M","submitter":"David Arthur"},{"authorTime":"2021-03-04 18:06:50","codes":[{"authorDate":"2021-03-04 18:06:50","commitOrder":6,"curCode":"    private FetchResponse createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n        return FetchResponse.of(Errors.NONE, 25, sessionId, responseData);\n    }\n","date":"2021-03-04 18:06:50","endLine":1196,"groupId":"12848","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchResponse","params":"(intsessionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ce/bb99d17ef22cf01944d096241310e4563d03b1.src","preCode":"    private FetchResponse<MemoryRecords> createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponse.AbortedTransaction(234L, 999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n            1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n        return new FetchResponse<>(Errors.NONE, responseData, 25, sessionId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1180,"status":"M"},{"authorDate":"2021-03-04 18:06:50","commitOrder":6,"curCode":"    private FetchResponse createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n\n        return FetchResponse.of(Errors.NONE, 25, INVALID_SESSION_ID, responseData);\n    }\n","date":"2021-03-04 18:06:50","endLine":1219,"groupId":"12848","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchResponse","params":"(booleanincludeAborted)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ce/bb99d17ef22cf01944d096241310e4563d03b1.src","preCode":"    private FetchResponse<MemoryRecords> createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponse.PartitionData<MemoryRecords>> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), Collections.emptyList(), records));\n\n        List<FetchResponse.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponse.AbortedTransaction(234L, 999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponse.PartitionData<>(Errors.NONE,\n                1000000, FetchResponse.INVALID_LAST_STABLE_OFFSET, 0L, Optional.empty(), abortedTransactions, MemoryRecords.EMPTY));\n\n        return new FetchResponse<>(Errors.NONE, responseData, 25, INVALID_SESSION_ID);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1198,"status":"M"}],"commitId":"8205051e90e3ea16165f8dc1f5c81af744bb1b9a","commitMessage":"@@@MINOR: remove FetchResponse.AbortedTransaction and redundant construc? (#9758)\n\n1. rename INVALID_HIGHWATERMARK to INVALID_HIGH_WATERMARK\n2. replace FetchResponse.AbortedTransaction by FetchResponseData.AbortedTransaction\n3. remove redundant constructors from FetchResponse.PartitionData\n4. rename recordSet to records\n5. add helpers \"recordsOrFail\" and \"recordsSize\" to FetchResponse to process record casting\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-03-04 18:06:50","modifiedFileCount":"15","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":7,"curCode":"    private FetchResponse createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        Map<String, Uuid> topicIds = new HashMap<>();\n        topicIds.put(\"test\", Uuid.randomUuid());\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n        return FetchResponse.parse(FetchResponse.of(Errors.NONE, 25, sessionId,\n            responseData, topicIds).serialize(FETCH.latestVersion()), FETCH.latestVersion());\n    }\n","date":"2021-07-08 07:02:37","endLine":1348,"groupId":"113167","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchResponse","params":"(intsessionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/3745ab72622fd5c26c9e9a5fec2a9db8c58fba.src","preCode":"    private FetchResponse createFetchResponse(int sessionId) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.singletonList(\n            new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n        return FetchResponse.of(Errors.NONE, 25, sessionId, responseData);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1329,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":7,"curCode":"    private FetchResponse createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n        return FetchResponse.parse(FetchResponse.of(Errors.NONE, 25, INVALID_SESSION_ID,\n            responseData, Collections.singletonMap(\"test\", Uuid.randomUuid())).serialize(FETCH.latestVersion()), FETCH.latestVersion());\n    }\n","date":"2021-07-08 07:02:37","endLine":1371,"groupId":"113167","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchResponse","params":"(booleanincludeAborted)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/3745ab72622fd5c26c9e9a5fec2a9db8c58fba.src","preCode":"    private FetchResponse createFetchResponse(boolean includeAborted) {\n        LinkedHashMap<TopicPartition, FetchResponseData.PartitionData> responseData = new LinkedHashMap<>();\n        MemoryRecords records = MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(\"blah\".getBytes()));\n        responseData.put(new TopicPartition(\"test\", 0), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(0)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setRecords(records));\n\n        List<FetchResponseData.AbortedTransaction> abortedTransactions = Collections.emptyList();\n        if (includeAborted) {\n            abortedTransactions = Collections.singletonList(\n                    new FetchResponseData.AbortedTransaction().setProducerId(234L).setFirstOffset(999L));\n        }\n        responseData.put(new TopicPartition(\"test\", 1), new FetchResponseData.PartitionData()\n                        .setPartitionIndex(1)\n                        .setHighWatermark(1000000)\n                        .setLogStartOffset(0)\n                        .setAbortedTransactions(abortedTransactions));\n\n        return FetchResponse.of(Errors.NONE, 25, INVALID_SESSION_ID, responseData);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1350,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
