[{"authorTime":"2017-02-07 03:37:48","codes":[{"authorDate":"2017-03-06 14:42:16","commitOrder":2,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2017-03-06 14:42:16","endLine":247,"groupId":"11588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/65/b3e2f67aea86cdd9598e9be32255fe3948b50a.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"},{"authorDate":"2017-02-07 03:37:48","commitOrder":2,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2017-02-07 03:37:48","endLine":247,"groupId":"11588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/b2b8e2b48f0c15d7ecb040cf92fc2a157c4fc0.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"NB"}],"commitId":"5b013d9cd28d86b50109e8e08f813c3b5af0054b","commitMessage":"@@@KAFKA-4828: ProcessorTopologyTestDriver does not work when using through\n\nThis resolves the following issues in the ProcessorTopologyTestDriver:\n\n- It should not create an internal changelog topic when using `through()` and `table()`\n- It should forward the produced record back into the topology if it is to a source topic\n\nJira ticket: https://issues.apache.org/jira/browse/KAFKA-4828\n\nThe contribution is my original work and I license the work to the project under the project's open source license.\n\nAuthor: Hamidreza Afzali <hrafzali@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #2629 from hrafzali/KAFKA-4828_ProcessorTopologyTestDriver_through\n","date":"2017-03-06 14:42:16","modifiedFileCount":"3","status":"M","submitter":"Hamidreza Afzali"},{"authorTime":"2017-07-25 02:03:27","codes":[{"authorDate":"2017-07-25 02:03:27","commitOrder":3,"curCode":"    public void testDrivingForwardToSourceTopology() throws Exception {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2017-07-25 02:03:27","endLine":247,"groupId":"11588","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/3afa82d25ffb805d62672387111d7c7f42c184.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2017-07-25 02:03:27","commitOrder":3,"curCode":"    public void testDrivingInternalRepartitioningTopology() throws Exception {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2017-07-25 02:03:27","endLine":258,"groupId":"11588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/3afa82d25ffb805d62672387111d7c7f42c184.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology());\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"5d798511b12c5ef7555e4234fdd99a360176e435","commitMessage":"@@@KAFKA-3856 (KIP-120) step two: extract internal functions from public facing TopologyBuilder class\n\n - extract InternalTopologyBuilder from TopologyBuilder\n - deprecate all \"leaking\" methods from public TopologyBuilder API\n - changed TopologyDescription and all nested classed into interfaces\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Bill Bejeck <bbejeck@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3536 from mjsax/kafka-3856-extract-internal-topology-builder\n","date":"2017-07-25 02:03:27","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-03-17 07:02:11","codes":[{"authorDate":"2018-03-17 07:02:11","commitOrder":4,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2018-03-17 07:02:11","endLine":248,"groupId":"11588","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/7274a32a92e7d7b739d618f52b0fe20a3050df.src","preCode":"    public void testDrivingForwardToSourceTopology() throws Exception {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2018-03-17 07:02:11","commitOrder":4,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2018-03-17 07:02:11","endLine":259,"groupId":"11588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/7274a32a92e7d7b739d618f52b0fe20a3050df.src","preCode":"    public void testDrivingInternalRepartitioningTopology() throws Exception {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"394aa7426117d0d04666c1c2a63d5f98229b7894","commitMessage":"@@@KAFKA-6454: Allow timestamp manipulation in Processor API (#4519)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Damian Guy <damian@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-03-17 07:02:11","modifiedFileCount":"22","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":5,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriverWrapper(createForwardToSourceTopology().internalTopologyBuilder, props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2018-04-27 02:30:42","endLine":249,"groupId":"155","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/0b25d0271516a45ce3315f314d5280f282353b.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createForwardToSourceTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":5,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriverWrapper(createInternalRepartitioningTopology().internalTopologyBuilder, props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2018-04-27 02:30:42","endLine":260,"groupId":"155","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/0b25d0271516a45ce3315f314d5280f282353b.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new ProcessorTopologyTestDriver(config, createInternalRepartitioningTopology().internalTopologyBuilder);\n        driver.process(INPUT_TOPIC_1, \"key1\", \"value1\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key2\", \"value2\", STRING_SERIALIZER, STRING_SERIALIZER);\n        driver.process(INPUT_TOPIC_1, \"key3\", \"value3\", STRING_SERIALIZER, STRING_SERIALIZER);\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-10 08:13:05","codes":[{"authorDate":"2018-05-10 08:13:05","commitOrder":6,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriverWrapper(createForwardToSourceTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2018-05-10 08:13:05","endLine":245,"groupId":"155","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/2b2422ba25d3df42c1e37637873a9f0ec5482c.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriverWrapper(createForwardToSourceTopology().internalTopologyBuilder, props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2018-05-10 08:13:05","commitOrder":6,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriverWrapper(createInternalRepartitioningTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2018-05-10 08:13:05","endLine":256,"groupId":"155","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/2b2422ba25d3df42c1e37637873a9f0ec5482c.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriverWrapper(createInternalRepartitioningTopology().internalTopologyBuilder, props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"0b1a118f45418aba6af03e71e7169e38cb3ec9af","commitMessage":"@@@KAFKA-6813: Remove deprecated APIs in KIP-182.  Part II (#4976)\n\n1. Remove the deprecated StateStoreSuppliers.  and the corresponding Stores.create() functions and factories: only the base StateStoreSupplier and MockStoreSupplier were still preserved as they are needed by the deprecated TopologyBuilder and KStreamBuilder. Will remove them in a follow-up PR.\n\n2. Add TopologyWrapper.java as the original InternalTopologyBuilderAccessor was removed.  but I realized it is still needed as of now.\n\n3. Minor: removed StateStoreTestUtils.java and inline its logic in its callers since now with StoreBuilder it is just a one-liner.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-10 08:13:05","modifiedFileCount":"20","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-12 02:38:02","codes":[{"authorDate":"2018-05-12 02:38:02","commitOrder":7,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriver(createForwardToSourceTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","date":"2018-05-12 02:38:02","endLine":246,"groupId":"155","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e2/476479ceef14cb681f38038e95fa2509b36e25.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriverWrapper(createForwardToSourceTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2018-05-12 02:38:02","commitOrder":7,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriver(createInternalRepartitioningTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","date":"2018-05-12 02:38:02","endLine":257,"groupId":"155","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e2/476479ceef14cb681f38038e95fa2509b36e25.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriverWrapper(createInternalRepartitioningTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"caca1fdc90b6ef877385b044b2a3230f8e6e9874","commitMessage":"@@@KAFKA-6813: Remove deprecated APIs in KIP-182.  Part III (#4991)\n\n1. Remove TopologyBuilder.  TopologyBuilderException.  KStreamBuilder. \n\n2. Completed the leftover work of https://issues.apache.org/jira/browse/KAFKA-5660.  when we remove TopologyBuilderException.\n\n3. Added MockStoreBuilder to replace MockStateStoreSupplier.  remove all XXStoreSupplier except StateStoreSupplier as it is still referenced in the logical streams graph.\n\n4. Minor: rename KStreamsFineGrainedAutoResetIntegrationTest.java to FineGrainedAutoResetIntegrationTest.java.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2018-05-12 02:38:02","modifiedFileCount":"17","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":8,"curCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriver(createForwardToSourceTopology(), props);\n        final TestInputTopic<String, String> inputTopic = driver.createInputTopic(INPUT_TOPIC_1, STRING_SERIALIZER, STRING_SERIALIZER, Instant.ofEpochMilli(0L), Duration.ZERO);\n        inputTopic.pipeInput(\"key1\", \"value1\");\n        inputTopic.pipeInput(\"key2\", \"value2\");\n        inputTopic.pipeInput(\"key3\", \"value3\");\n        final TestOutputTopic<String, String> outputTopic2 =\n                driver.createOutputTopic(OUTPUT_TOPIC_2, Serdes.String().deserializer(), Serdes.String().deserializer());\n        assertNextOutputRecord(outputTopic2.readRecord(), \"key1\", \"value1\");\n        assertNextOutputRecord(outputTopic2.readRecord(), \"key2\", \"value2\");\n        assertNextOutputRecord(outputTopic2.readRecord(), \"key3\", \"value3\");\n    }\n","date":"2019-10-07 16:01:58","endLine":286,"groupId":"102517","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDrivingForwardToSourceTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/3f9b527d56e4d1b077fccd734e335046e9ed18.src","preCode":"    public void testDrivingForwardToSourceTopology() {\n        driver = new TopologyTestDriver(createForwardToSourceTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_2, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":8,"curCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriver(createInternalRepartitioningTopology(), props);\n        final TestInputTopic<String, String> inputTopic = driver.createInputTopic(INPUT_TOPIC_1, STRING_SERIALIZER, STRING_SERIALIZER, Instant.ofEpochMilli(0L), Duration.ZERO);\n        inputTopic.pipeInput(\"key1\", \"value1\");\n        inputTopic.pipeInput(\"key2\", \"value2\");\n        inputTopic.pipeInput(\"key3\", \"value3\");\n        final TestOutputTopic<String, String> outputTopic1 = driver.createOutputTopic(OUTPUT_TOPIC_1, STRING_DESERIALIZER, STRING_DESERIALIZER);\n        assertNextOutputRecord(outputTopic1.readRecord(), \"key1\", \"value1\");\n        assertNextOutputRecord(outputTopic1.readRecord(), \"key2\", \"value2\");\n        assertNextOutputRecord(outputTopic1.readRecord(), \"key3\", \"value3\");\n    }\n","date":"2019-10-07 16:01:58","endLine":299,"groupId":"102517","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrivingInternalRepartitioningTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/3f9b527d56e4d1b077fccd734e335046e9ed18.src","preCode":"    public void testDrivingInternalRepartitioningTopology() {\n        driver = new TopologyTestDriver(createInternalRepartitioningTopology(), props);\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key1\", \"value1\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key2\", \"value2\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC_1, \"key3\", \"value3\"));\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key1\", \"value1\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key2\", \"value2\");\n        assertNextOutputRecord(OUTPUT_TOPIC_1, \"key3\", \"value3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorTopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"}]
