[{"authorTime":"2017-08-17 05:43:29","codes":[{"authorDate":"2017-01-13 08:14:53","commitOrder":3,"curCode":"    public void testRequestCommit() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":423,"groupId":"11133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/3e3859d016807d8f5bc353dddbcf1613f0b340.src","preCode":"    public void testRequestCommit() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"NB"},{"authorDate":"2017-08-17 05:43:29","commitOrder":3,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-08-17 05:43:29","endLine":877,"groupId":"11133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/806884004c92f9445755621a65bcf2407cd3f8.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"B"}],"commitId":"72eacbea5b831096a6cc9a4fa42401bc74a88a80","commitMessage":"@@@KAFKA-5567: Connect sink worker should commit offsets of original topic partitions\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3499 from kkonstantine/KAFKA-5567-With-transformations-that-mutate-the-topic-partition-committing-offsets-should-to-refer-to-the-original-topic-partition\n","date":"2017-08-17 05:43:29","modifiedFileCount":"2","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2017-09-27 13:23:37","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":4,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":456,"groupId":"11133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testRequestCommit() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2017-09-27 13:23:37","commitOrder":4,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, workerTask.taskMetricsGroup().currentMetricValue(\"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":908,"groupId":"11133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-09-29 00:52:08","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":5,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":456,"groupId":"11133","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"},{"authorDate":"2017-09-29 00:52:08","commitOrder":5,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-29 00:53:19","endLine":908,"groupId":"11133","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/3f8887573fcfeb65af01e2ce39ef397183d3bf.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, workerTask.taskMetricsGroup().currentMetricValue(\"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"}],"commitId":"89ba0c1525b8f8a4e36d1e1b486ca660d5c24a7b","commitMessage":"@@@KAFKA-5901: Added Connect metrics specific to source tasks (KIP-196)\n\nAdded Connect metrics specific to source tasks.  and builds upon #3864 and #3911 that have already been merged into `trunk`.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: tedyu <yuzhihong@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3959 from rhauch/kafka-5901\n","date":"2017-09-29 00:53:19","modifiedFileCount":"8","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-09-29 00:52:08","codes":[{"authorDate":"2017-10-04 02:52:14","commitOrder":6,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-04 02:52:14","endLine":603,"groupId":"11133","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/0cdd0626ac9ab371b7d8770cbdca0c9442858f.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2017-09-29 00:52:08","commitOrder":6,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-29 00:53:19","endLine":908,"groupId":"11133","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/3f8887573fcfeb65af01e2ce39ef397183d3bf.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"N"}],"commitId":"05357b7030c784a6548453f533d3c00e19548ba2","commitMessage":"@@@KAFKA-5902: Added sink task metrics (KIP-196)\n\nAdded Connect metrics specific to source tasks.  and builds upon #3864 and #3911 that have already been merged into `trunk`.  and #3959 that has yet to be merged.\n\nI'll rebase this PR when the latter is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3975 from rhauch/kafka-5902\n","date":"2017-10-04 02:52:14","modifiedFileCount":"6","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-09-29 00:52:08","codes":[{"authorDate":"2017-10-05 02:05:50","commitOrder":7,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-05 02:05:50","endLine":603,"groupId":"11133","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/2d66b2ec4d24d2f27c7ea8af06d699587ef667.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2017-09-29 00:52:08","commitOrder":7,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-29 00:53:19","endLine":908,"groupId":"11133","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/3f8887573fcfeb65af01e2ce39ef397183d3bf.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"N"}],"commitId":"11afff09908035166febf9b75c410112693ff98c","commitMessage":"@@@KAFKA-5990: Enable generation of metrics docs for Connect (KIP-196)\n\nA new mechanism was added recently to the Metrics framework to make it easier to generate the documentation. It uses a registry with a MetricsNameTemplate for each metric.  and then those templates are used when creating the actual metrics. The metrics framework provides utilities that can generate the HTML documentation from the registry of templates.\n\nThis change moves the recently-added Connect metrics over to use these templates and to then generate the metric documentation for Connect.\n\nThis PR is based upon #3975 and can be rebased once that has been merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3987 from rhauch/kafka-5990\n","date":"2017-10-05 02:05:50","modifiedFileCount":"9","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":595,"groupId":"11133","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/b091de6930621deb04d96d39f3b6f5ba124959.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":1085,"groupId":"11133","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/b091de6930621deb04d96d39f3b6f5ba124959.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValue(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1034,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2019-05-23 14:50:48","commitOrder":9,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-23 14:50:48","endLine":621,"groupId":"3038","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/629709efe8b2989653b9b4f23903787d5e8999.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":9,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":1085,"groupId":"11133","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/b091de6930621deb04d96d39f3b6f5ba124959.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1034,"status":"N"}],"commitId":"89f331eac3aaeab53a3b36bc437eba5f6213ca91","commitMessage":"@@@KAFKA-8229; Reset WorkerSinkTask offset commit interval after task commit (#6579)\n\nPrior to this change.  the next commit time advances\n_each_ time a commit happens -- including when a commit happens\nbecause it was requested by the `Task`. When a `Task` requests a\ncommit several times.  the clock advances far into the future\nwhich prevents expected periodic commits from happening.\n\nThis commit changes the behavior.  we reset `nextCommit` relative\nto the time of the commit.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-23 14:50:48","modifiedFileCount":"2","status":"M","submitter":"sdreynolds"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":10,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":641,"groupId":"3038","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":10,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":1136,"groupId":"11133","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1084,"status":"M"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":11,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":734,"groupId":"3038","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":11,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":1289,"groupId":"11133","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(offsets, null);\n                return null;\n            }\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1240,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":12,"curCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":734,"groupId":"104884","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    public void testRequestCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        \r\n        time.sleep(30000L);\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n\n        \r\n        workerTask.iteration();\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.333333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 0.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 0.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.5);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 0.0);\n\n        \r\n        \r\n        \r\n        final long previousCommitValue = workerTask.getNextCommit();\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        time.sleep(10000L);\n        workerTask.iteration(); \r\n        time.sleep(10000L);\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        \r\n        \r\n        \r\n        \r\n        assertEquals(\"Should have only advanced by 40 seconds\",\n                     previousCommitValue  +\n                     (WorkerConfig.OFFSET_COMMIT_INTERVAL_MS_DEFAULT - 10000L * 2),\n                     workerTask.getNextCommit());\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.2);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 0.33333);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":12,"curCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":1289,"groupId":"104884","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeliveryWithMutatingTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    public void testDeliveryWithMutatingTransform() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1, \"newtopic_\");\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(offsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(offsets, null);\n            return null;\n        });\n\n        expectConsumerPoll(0);\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n\n        workerTask.iteration(); \r\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        assertTrue(sinkTaskContext.getValue().isCommitRequested());\n        assertNotEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        workerTask.iteration(); \r\n        assertFalse(sinkTaskContext.getValue().isCommitRequested()); \r\n        assertEquals(offsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        assertEquals(0, workerTask.commitFailures());\n        assertEquals(1.0, metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(), \"batch-size-max\"), 0.0001);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1240,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
