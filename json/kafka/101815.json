[{"authorTime":"2020-12-17 06:19:33","codes":[{"authorDate":"2020-12-17 06:19:33","commitOrder":1,"curCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","date":"2020-12-17 06:19:33","endLine":184,"groupId":"12944","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDisableLoggingOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/340d7aea5fda44615fbc9b6cb0b9ae34c67d51.src","preCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2020-12-17 06:19:33","commitOrder":1,"curCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","date":"2020-12-17 06:19:33","endLine":220,"groupId":"8264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEnableLoggingWithCustomConfigOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/340d7aea5fda44615fbc9b6cb0b9ae34c67d51.src","preCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"f4272fd5d38fdc3145f9b0a78f4ab7f0692aecd5","commitMessage":"@@@KAFKA-9126: KIP-689: StreamJoined changelog configuration (#9708)\n\nAdd withLoggingEnabled and withLoggingDisabled for StreamJoined\nto give StreamJoined the same flexibility as Materialized\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-12-17 06:19:33","modifiedFileCount":"4","status":"B","submitter":"leah"},{"authorTime":"2021-05-14 02:25:18","codes":[{"authorDate":"2020-12-17 06:19:33","commitOrder":2,"curCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","date":"2020-12-17 06:19:33","endLine":184,"groupId":"12944","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDisableLoggingOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/340d7aea5fda44615fbc9b6cb0b9ae34c67d51.src","preCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2021-05-14 02:25:18","commitOrder":2,"curCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","date":"2021-05-14 02:25:18","endLine":222,"groupId":"8264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEnableLoggingWithCustomConfigOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/e32447b7f6135188386bebf07599d345213331.src","preCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"4b2736570c9d5f4b6e501ab8cd5efe696a5142b7","commitMessage":"@@@KAFKA-12648: MINOR - Add TopologyMetadata.Subtopology class for subtopology metadata (#10676)\n\nIntroduce a Subtopology class to wrap the topicGroupId and namedTopology metadata.\n\nReviewers: Walker Carlson <wcarlson@confluent.io>","date":"2021-05-14 02:25:18","modifiedFileCount":"17","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-06-17 00:25:16","commitOrder":3,"curCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            Integer::sum,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","date":"2021-06-17 00:25:16","endLine":164,"groupId":"101815","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDisableLoggingOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/501add2512c45574539e0d0910e8c183a40b81.src","preCode":"    public void shouldDisableLoggingOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingDisabled();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(false));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-06-17 00:25:16","commitOrder":3,"curCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            Integer::sum,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","date":"2021-06-17 00:25:16","endLine":200,"groupId":"101815","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldEnableLoggingWithCustomConfigOnStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/501add2512c45574539e0d0910e8c183a40b81.src","preCode":"    public void shouldEnableLoggingWithCustomConfigOnStreamJoined() {\n\n        final JoinWindows joinWindows = JoinWindows.of(ofMillis(100)).grace(Duration.ofMillis(50));\n        final StreamJoined<String, Integer, Integer> streamJoined = StreamJoined\n            .with(Serdes.String(), Serdes.Integer(), Serdes.Integer())\n            .withStoreName(\"store\")\n            .withLoggingEnabled(Collections.singletonMap(\"test\", \"property\"));\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined\n        );\n\n        final Topology topology = builder.build();\n        final InternalTopologyBuilder internalTopologyBuilder = TopologyWrapper.getInternalTopologyBuilder(topology);\n\n        internalTopologyBuilder.buildSubtopology(0);\n\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-this-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.stateStores().get(\"store-other-join-store\").loggingEnabled(), equalTo(true));\n        assertThat(internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.size(), equalTo(2));\n        for (final InternalTopicConfig config : internalTopologyBuilder.topicGroups().get(SUBTOPOLOGY_0).stateChangelogTopics.values()) {\n            assertThat(\n                config.getProperties(Collections.emptyMap(), 0).get(\"test\"),\n                equalTo(\"property\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
