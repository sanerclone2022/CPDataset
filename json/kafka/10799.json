[{"authorTime":"2017-01-07 02:12:30","codes":[{"authorDate":"2017-01-07 02:12:30","commitOrder":1,"curCode":"    public void shouldIterateOverAllSegments() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-01-07 02:12:30","endLine":98,"groupId":"11440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateOverAllSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/694808d5fa4ce609567d489930f3fd7f096443.src","preCode":"    public void shouldIterateOverAllSegments() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2017-01-07 02:12:30","commitOrder":1,"curCode":"    public void shouldOnlyIterateOverSegmentsInRange() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-01-07 02:12:30","endLine":118,"groupId":"11440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyIterateOverSegmentsInRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/694808d5fa4ce609567d489930f3fd7f096443.src","preCode":"    public void shouldOnlyIterateOverSegmentsInRange() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"e0de3a4211a3701c98230b115fadfb67b655e3cf","commitMessage":"@@@KAFKA-3452: Support session windows\n\nAdd support for SessionWindows based on design detailed in https://cwiki.apache.org/confluence/display/KAFKA/KIP-94+Session+Windows.\nThis includes refactoring of the RocksDBWindowStore such that functionality common with the RocksDBSessionStore isn't duplicated.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2166 from dguy/kafka-3452-session-merge\n","date":"2017-01-07 02:12:30","modifiedFileCount":"45","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-01-18 12:29:55","codes":[{"authorDate":"2017-01-18 12:29:55","commitOrder":2,"curCode":"    public void shouldIterateOverAllSegments() throws Exception {\n        iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-01-18 12:31:31","endLine":106,"groupId":"11440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateOverAllSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/6fb5a7b6581c4723d5d63712de6e881d731d65.src","preCode":"    public void shouldIterateOverAllSegments() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2017-01-18 12:29:55","commitOrder":2,"curCode":"    public void shouldOnlyIterateOverSegmentsInRange() throws Exception {\n        iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-01-18 12:31:31","endLine":126,"groupId":"11440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyIterateOverSegmentsInRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/6fb5a7b6581c4723d5d63712de6e881d731d65.src","preCode":"    public void shouldOnlyIterateOverSegmentsInRange() throws Exception {\n        final SegmentIterator iterator = new SegmentIterator(\n                Arrays.asList(segmentOne,\n                              segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"1974e1b0e54abe5fdebd8ff3338df864b7ab60f3","commitMessage":"@@@KAFKA-3502; move RocksDB options construction to init()\n\nIn RocksDBStore.  options / wOptions / fOptions are constructed in the constructor.  which needs to be dismissed in the close() call; however in some tests.  the generated topology is not initialized at all.  and hence the corresponding state stores are supposed to not be able to be closed as well since their `init` function is not called. This could cause the above option objects to be not released.\n\nThis is fixed in this patch to move the logic out of constructor and inside `init` functions.  so that no RocksDB objects will be created in the constructor only. Also some minor cleanups:\n\n1. In KStreamTestDriver.close().  we lost the logic to close the state stores but only call `flush`; it is now changed back to call both.\n2. Moved the forwarding logic from KStreamTestDriver to MockProcessorContext to remove the mutual dependency: these functions should really be in ProcessorContext.  not the test driver.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2381 from guozhangwang/K3502-pure-virtual-function-unit-tests\n","date":"2017-01-18 12:31:31","modifiedFileCount":"22","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldIterateOverAllSegments() {\n        iterator = new SegmentIterator(Arrays.asList(segmentOne, segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-09-11 16:42:10","endLine":105,"groupId":"11440","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateOverAllSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/91e453e4a97719841306462c7b935b3771fb65.src","preCode":"    public void shouldIterateOverAllSegments() throws Exception {\n        iterator = new SegmentIterator(Arrays.asList(segmentOne, segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldOnlyIterateOverSegmentsInRange() {\n        iterator = new SegmentIterator(Arrays.asList(segmentOne, segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2017-09-11 16:42:10","endLine":123,"groupId":"11440","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyIterateOverSegmentsInRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/91e453e4a97719841306462c7b935b3771fb65.src","preCode":"    public void shouldOnlyIterateOverSegmentsInRange() throws Exception {\n        iterator = new SegmentIterator(Arrays.asList(segmentOne, segmentTwo).iterator(),\n                hasNextCondition,\n                Bytes.wrap(\"a\".getBytes()),\n                Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2019-03-27 05:23:01","codes":[{"authorDate":"2019-03-27 05:23:01","commitOrder":4,"curCode":"    public void shouldIterateOverAllSegments() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2019-03-27 05:23:01","endLine":103,"groupId":"11440","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateOverAllSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/64badc409e2b6380e0d96ca04d599f29b41b0d.src","preCode":"    public void shouldIterateOverAllSegments() {\n        iterator = new SegmentIterator(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2019-03-27 05:23:01","commitOrder":4,"curCode":"    public void shouldOnlyIterateOverSegmentsInRange() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2019-03-27 05:23:01","endLine":135,"groupId":"11440","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyIterateOverSegmentsInRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/64badc409e2b6380e0d96ca04d599f29b41b0d.src","preCode":"    public void shouldOnlyIterateOverSegmentsInRange() {\n        iterator = new SegmentIterator(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"dc0601a1c604bea3f426ed25b6c20176ff444079","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedSegmentedBytesStore (#6186)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-03-27 05:23:01","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-09-03 06:17:07","codes":[{"authorDate":"2020-09-03 06:17:07","commitOrder":5,"curCode":"    public void shouldIterateOverAllSegments() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"z\".getBytes()),\n            true);\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2020-09-03 06:17:07","endLine":110,"groupId":"10799","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateOverAllSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/f14040fa76859e19945fe48f0cd5a362d77c1d.src","preCode":"    public void shouldIterateOverAllSegments() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"z\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"c\", \"3\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"d\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"d\", \"4\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-09-03 06:17:07","commitOrder":5,"curCode":"    public void shouldOnlyIterateOverSegmentsInRange() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"b\".getBytes()),\n            true);\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","date":"2020-09-03 06:17:07","endLine":192,"groupId":"10799","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyIterateOverSegmentsInRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/f14040fa76859e19945fe48f0cd5a362d77c1d.src","preCode":"    public void shouldOnlyIterateOverSegmentsInRange() {\n        iterator = new SegmentIterator<>(\n            Arrays.asList(segmentOne, segmentTwo).iterator(),\n            hasNextCondition,\n            Bytes.wrap(\"a\".getBytes()),\n            Bytes.wrap(\"b\".getBytes()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"a\", \"1\"), toStringKeyValue(iterator.next()));\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", new String(iterator.peekNextKey().get()));\n        assertEquals(KeyValue.pair(\"b\", \"2\"), toStringKeyValue(iterator.next()));\n\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SegmentIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"4f06d9e7d083c30912c810f9deadea809fd74edf","commitMessage":"@@@KAFKA-9929: Support backward iterator on WindowStore (#9138)\n\nImplements KIP-617 on WindowStore that depends on #9137.\n\nTesting strategy: extend existing tests to validate reverse operations are supported.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-09-03 06:17:07","modifiedFileCount":"47","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
