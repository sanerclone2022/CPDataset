[{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":1,"curCode":"    public void shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(RecordingLevel.DEBUG, RocksDBConfigSetterWithUserProvidedStatistics.class);\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), notNull(), isNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","date":"2020-08-14 03:40:40","endLine":214,"groupId":"770","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/e278f03071a951a08098a2a430c1d38b41076c.src","preCode":"    public void shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(RecordingLevel.DEBUG, RocksDBConfigSetterWithUserProvidedStatistics.class);\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), notNull(), isNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"},{"authorDate":"2020-08-14 03:40:40","commitOrder":1,"curCode":"    public void shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(\n            RecordingLevel.DEBUG,\n            RocksDBConfigSetterWithUserProvidedNewPlainTableFormatConfig.class\n        );\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), isNull(), notNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","date":"2020-08-14 03:40:40","endLine":270,"groupId":"770","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/e278f03071a951a08098a2a430c1d38b41076c.src","preCode":"    public void shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(\n            RecordingLevel.DEBUG,\n            RocksDBConfigSetterWithUserProvidedNewPlainTableFormatConfig.class\n        );\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), isNull(), notNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"B"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"B","submitter":"Bruno Cadonna"},{"authorTime":"2020-10-08 12:06:53","codes":[{"authorDate":"2020-10-08 12:06:53","commitOrder":2,"curCode":"    public void shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(RecordingLevel.DEBUG, RocksDBConfigSetterWithUserProvidedStatistics.class);\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), notNull(), isNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context.appConfigs(), context.stateDir());\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","date":"2020-10-08 12:06:53","endLine":219,"groupId":"101289","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/87ee4de9997a0bcb6665465a62377ef3944c1b.src","preCode":"    public void shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(RecordingLevel.DEBUG, RocksDBConfigSetterWithUserProvidedStatistics.class);\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), notNull(), isNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-10-08 12:06:53","commitOrder":2,"curCode":"    public void shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(\n            RecordingLevel.DEBUG,\n            RocksDBConfigSetterWithUserProvidedNewPlainTableFormatConfig.class\n        );\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), isNull(), notNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context.appConfigs(), context.stateDir());\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","date":"2020-10-08 12:06:53","endLine":275,"groupId":"101289","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/87ee4de9997a0bcb6665465a62377ef3944c1b.src","preCode":"    public void shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig() {\n        rocksDBStore = getRocksDBStoreWithRocksDBMetricsRecorder();\n        context = getProcessorContext(\n            RecordingLevel.DEBUG,\n            RocksDBConfigSetterWithUserProvidedNewPlainTableFormatConfig.class\n        );\n        metricsRecorder.addValueProviders(eq(DB_NAME), notNull(), isNull(), notNull());\n        replay(metricsRecorder);\n\n        rocksDBStore.openDB(context);\n        verify(metricsRecorder);\n        reset(metricsRecorder);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"2804257fe221f37e5098bd3f633a5d76ca890634","commitMessage":"@@@KAFKA-10562: Properly invoke new StateStoreContext init (#9388)\n\n* all wrapping stores should pass StateStoreContext init through to the same\n  method on the wrapped store and not translate it to ProcessorContext init\n* base-level stores should handle StateStoreContext init so that callers passing\n  a non-InternalProcessorContext implementation will be able to initialize the store\n* extra tests are added to verify the desired behavior\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2020-10-08 12:06:53","modifiedFileCount":"71","status":"M","submitter":"John Roesler"}]
