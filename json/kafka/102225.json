[{"authorTime":"2020-07-27 02:58:40","codes":[{"authorDate":"2020-07-27 02:58:40","commitOrder":1,"curCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-07-27 02:58:40","endLine":243,"groupId":"19538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionDuringStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/bae376b704aaa30d95fc9d5dc986be53991ce6.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"},{"authorDate":"2020-07-27 02:58:40","commitOrder":1,"curCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-07-27 02:58:40","endLine":277,"groupId":"19541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/bae376b704aaa30d95fc9d5dc986be53991ce6.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"0d47c69a9351ae258ad6165841840a65f0301d86","commitMessage":"@@@KAFKA-10306: GlobalThread should fail on InvalidOffsetException (#9075)\n\n* KAFKA-10306: GlobalThread should fail on InvalidOffsetException\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateUpdateTask.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateUpdateTask.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStreamThread.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStreamThread.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>","date":"2020-07-27 02:58:40","modifiedFileCount":"10","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-07-30 12:04:21","codes":[{"authorDate":"2020-07-30 12:04:21","commitOrder":2,"curCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-07-30 12:04:21","endLine":243,"groupId":"19538","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionDuringStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/3135777013e1c4a67b49ab16482e3c26aba42b.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-07-30 12:04:21","commitOrder":2,"curCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-07-30 12:04:21","endLine":277,"groupId":"19541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/3135777013e1c4a67b49ab16482e3c26aba42b.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        globalStreamThread.start();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"2f64f6deb906cdfe4d006e530edeff2e79c05f76","commitMessage":"@@@KAFKA-10321: fix infinite blocking for global stream thread startup (#9095)\n\nThe start() function for global stream thread only checks whether the thread is not running.  as it needs to block until it finishes the initialization. This PR fixes this behavior by adding a check whether the thread is already in error state as well.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>","date":"2020-07-30 12:04:21","modifiedFileCount":"2","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-07-30 12:04:21","commitOrder":3,"curCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-07-30 12:04:21","endLine":243,"groupId":"19538","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionDuringStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/3135777013e1c4a67b49ab16482e3c26aba42b.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"},{"authorDate":"2020-10-03 07:49:12","commitOrder":3,"curCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(record(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2020-10-03 07:49:12","endLine":277,"groupId":"19541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/9bd1256d6f7392c5b4eaee07a243973aba7243.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(new ConsumerRecord<>(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2021-05-07 06:29:26","codes":[{"authorDate":"2021-05-07 06:29:26","commitOrder":4,"curCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        final StateStore globalStore = builder.globalStateStores().get(GLOBAL_STORE_NAME);\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n        globalStreamThread.join();\n\n        assertThat(globalStore.isOpen(), is(false));\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2021-05-07 06:29:26","endLine":248,"groupId":"102225","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionDuringStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/c980ecfe287c25d1e7fc936cf832efef568207.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionDuringStartup() throws Exception {\n        initializeConsumer();\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2021-05-07 06:29:26","commitOrder":4,"curCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        final StateStore globalStore = builder.globalStateStores().get(GLOBAL_STORE_NAME);\n        initializeConsumer();\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(record(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n        globalStreamThread.join();\n\n        assertThat(globalStore.isOpen(), is(false));\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","date":"2021-05-07 06:29:26","endLine":285,"groupId":"102225","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDieOnInvalidOffsetExceptionWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/c980ecfe287c25d1e7fc936cf832efef568207.src","preCode":"    public void shouldDieOnInvalidOffsetExceptionWhileRunning() throws Exception {\n        initializeConsumer();\n        startAndSwallowError();\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == RUNNING,\n            10 * 1000,\n            \"Thread never started.\");\n\n        mockConsumer.updateEndOffsets(Collections.singletonMap(topicPartition, 1L));\n        mockConsumer.addRecord(record(GLOBAL_STORE_TOPIC_NAME, 0, 0L, \"K1\".getBytes(), \"V1\".getBytes()));\n\n        TestUtils.waitForCondition(\n            () -> mockConsumer.position(topicPartition) == 1L,\n            10 * 1000,\n            \"Input record never consumed\");\n\n        mockConsumer.setPollException(new InvalidOffsetException(\"Try Again!\") {\n            @Override\n            public Set<TopicPartition> partitions() {\n                return Collections.singleton(topicPartition);\n            }\n        });\n\n        TestUtils.waitForCondition(\n            () -> globalStreamThread.state() == DEAD,\n            10 * 1000,\n            \"GlobalStreamThread should have died.\"\n        );\n\n        assertFalse(new File(baseDirectoryName + File.separator + \"testAppId\" + File.separator + \"global\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"90fc875e24121fd0a39143983ce9eb8a93849d7e","commitMessage":"@@@KAFKA-8897: Upgrade RocksDB to 6.19.3 (#10568)\n\nThis PR upgrades RocksDB to 6.19.3. After the upgrade the Gradle build exited with code 134 due to SIGABRT signals (\"Pure virtual function called!\") coming from the C++ part of RocksDB. This error was caused by RocksDB state stores not properly closed in Streams' code. This PR adds the missing closings and updates the RocksDB option adapter.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-07 06:29:26","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"}]
