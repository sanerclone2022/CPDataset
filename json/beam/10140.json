[{"authorTime":"2018-01-28 03:45:32","codes":[{"authorDate":"2019-11-20 22:28:02","commitOrder":6,"curCode":"  private <T> Map<BoundedWindow, T> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues, PCollectionView<T> view) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value :\n        (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, T> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements :\n        partitionedElements.entrySet()) {\n\n      ViewFn<Materializations.MultimapView, T> viewFn =\n          (ViewFn<Materializations.MultimapView, T>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (T)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements.getValue().stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","date":"2019-11-20 22:28:02","endLine":145,"groupId":"9011","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeBroadcastVariable","params":"(Iterable<WindowedValue<?>>inputValues@PCollectionView<T>view)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/5d/49767fc591f942b58288b3ac29fb77f5238ca8.src","preCode":"  private <T> Map<BoundedWindow, T> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues, PCollectionView<T> view) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value :\n        (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, T> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements :\n        partitionedElements.entrySet()) {\n\n      ViewFn<Materializations.MultimapView, T> viewFn =\n          (ViewFn<Materializations.MultimapView, T>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (T)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements.getValue().stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/SparkSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"},{"authorDate":"2018-01-28 03:45:32","commitOrder":6,"curCode":"  public Map<BoundedWindow, ViewT> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value\n        : (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window: value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, ViewT> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements:\n        partitionedElements.entrySet()) {\n\n      ViewFn<MultimapView, ViewT> viewFn = (ViewFn<MultimapView, ViewT>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (ViewT)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements\n                              .getValue()\n                              .stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","date":"2018-01-28 03:45:32","endLine":97,"groupId":"18383","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeBroadcastVariable","params":"(Iterable<WindowedValue<?>>inputValues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f4/4b49c5bfdbebe8c0a2f9ab5a4cf67acd9b361f.src","preCode":"  public Map<BoundedWindow, ViewT> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value\n        : (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window: value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, ViewT> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements:\n        partitionedElements.entrySet()) {\n\n      ViewFn<MultimapView, ViewT> viewFn = (ViewFn<MultimapView, ViewT>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (ViewT)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements\n                              .getValue()\n                              .stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","realPath":"runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/SideInputInitializer.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"NB"}],"commitId":"18059eecad850b6e30bc7e376e70937915dd11fb","commitMessage":"@@@Merge pull request #9866: [BEAM-8470] Create a new Spark runner based on Spark Structured streaming framework\n\n","date":"2019-11-20 22:28:02","modifiedFileCount":"3","status":"M","submitter":"Alexey Romanenko"},{"authorTime":"2020-06-18 04:27:46","codes":[{"authorDate":"2020-06-18 04:27:46","commitOrder":7,"curCode":"  private <T> Map<BoundedWindow, T> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues, PCollectionView<T> view) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<?>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<?> value : inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<?>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, T> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<?>>> elements :\n        partitionedElements.entrySet()) {\n\n      switch (view.getViewFn().getMaterialization().getUrn()) {\n        case Materializations.ITERABLE_MATERIALIZATION_URN:\n          {\n            ViewFn<IterableView, T> viewFn = (ViewFn<IterableView, T>) view.getViewFn();\n            resultMap.put(\n                elements.getKey(),\n                viewFn.apply(\n                    () ->\n                        elements.getValue().stream()\n                            .map(WindowedValue::getValue)\n                            .collect(Collectors.toList())));\n          }\n          break;\n        case Materializations.MULTIMAP_MATERIALIZATION_URN:\n          {\n            ViewFn<MultimapView, T> viewFn = (ViewFn<MultimapView, T>) view.getViewFn();\n            Coder<?> keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n            resultMap.put(\n                elements.getKey(),\n                viewFn.apply(\n                    InMemoryMultimapSideInputView.fromIterable(\n                        keyCoder,\n                        (Iterable)\n                            elements.getValue().stream()\n                                .map(WindowedValue::getValue)\n                                .collect(Collectors.toList()))));\n          }\n          break;\n        default:\n          throw new IllegalStateException(\n              String.format(\n                  \"Unknown side input materialization format requested '%s'\",\n                  view.getViewFn().getMaterialization().getUrn()));\n      }\n    }\n\n    return resultMap;\n  }\n","date":"2020-06-18 04:27:46","endLine":182,"groupId":"10140","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeBroadcastVariable","params":"(Iterable<WindowedValue<?>>inputValues@PCollectionView<T>view)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/56/e3ee81e757a2d730d7e5e2550de2a6a4444cd0.src","preCode":"  private <T> Map<BoundedWindow, T> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues, PCollectionView<T> view) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value :\n        (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, T> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements :\n        partitionedElements.entrySet()) {\n\n      ViewFn<Materializations.MultimapView, T> viewFn =\n          (ViewFn<Materializations.MultimapView, T>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (T)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements.getValue().stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/SparkSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-06-18 04:27:46","commitOrder":7,"curCode":"  public Map<BoundedWindow, ViewT> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<?>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<?> value : inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<?>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, ViewT> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<?>>> elements :\n        partitionedElements.entrySet()) {\n      switch (view.getViewFn().getMaterialization().getUrn()) {\n        case Materializations.ITERABLE_MATERIALIZATION_URN:\n          {\n            ViewFn<IterableView, ViewT> viewFn = (ViewFn<IterableView, ViewT>) view.getViewFn();\n            resultMap.put(\n                elements.getKey(),\n                viewFn.apply(\n                    () ->\n                        elements.getValue().stream()\n                            .map(WindowedValue::getValue)\n                            .collect(Collectors.toList())));\n          }\n          break;\n        case Materializations.MULTIMAP_MATERIALIZATION_URN:\n          {\n            ViewFn<MultimapView, ViewT> viewFn = (ViewFn<MultimapView, ViewT>) view.getViewFn();\n            Coder<?> keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n            resultMap.put(\n                elements.getKey(),\n                viewFn.apply(\n                    InMemoryMultimapSideInputView.fromIterable(\n                        keyCoder,\n                        (Iterable)\n                            elements.getValue().stream()\n                                .map(WindowedValue::getValue)\n                                .collect(Collectors.toList()))));\n          }\n          break;\n        default:\n          throw new IllegalStateException(\n              String.format(\n                  \"Unknown side input materialization format requested '%s'\",\n                  view.getViewFn().getMaterialization().getUrn()));\n      }\n    }\n\n    return resultMap;\n  }\n","date":"2020-06-18 04:27:46","endLine":120,"groupId":"10140","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initializeBroadcastVariable","params":"(Iterable<WindowedValue<?>>inputValues)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/0e/ab276dcf9595cc1755dba1102dc29043c9eeeb.src","preCode":"  public Map<BoundedWindow, ViewT> initializeBroadcastVariable(\n      Iterable<WindowedValue<?>> inputValues) {\n\n    \r\n    Map<BoundedWindow, List<WindowedValue<KV<?, ?>>>> partitionedElements = new HashMap<>();\n    for (WindowedValue<KV<?, ?>> value :\n        (Iterable<WindowedValue<KV<?, ?>>>) (Iterable) inputValues) {\n      for (BoundedWindow window : value.getWindows()) {\n        List<WindowedValue<KV<?, ?>>> windowedValues =\n            partitionedElements.computeIfAbsent(window, k -> new ArrayList<>());\n        windowedValues.add(value);\n      }\n    }\n\n    Map<BoundedWindow, ViewT> resultMap = new HashMap<>();\n\n    for (Map.Entry<BoundedWindow, List<WindowedValue<KV<?, ?>>>> elements :\n        partitionedElements.entrySet()) {\n\n      ViewFn<MultimapView, ViewT> viewFn = (ViewFn<MultimapView, ViewT>) view.getViewFn();\n      Coder keyCoder = ((KvCoder<?, ?>) view.getCoderInternal()).getKeyCoder();\n      resultMap.put(\n          elements.getKey(),\n          (ViewT)\n              viewFn.apply(\n                  InMemoryMultimapSideInputView.fromIterable(\n                      keyCoder,\n                      (Iterable)\n                          elements.getValue().stream()\n                              .map(WindowedValue::getValue)\n                              .collect(Collectors.toList()))));\n    }\n\n    return resultMap;\n  }\n","realPath":"runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/SideInputInitializer.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"d1c6ef6c9803536dddc67e064e6da53c04ce0f60","commitMessage":"@@@[BEAM-10097.  BEAM-5982.  BEAM-3080] Use primitive views directly instead of transforming KV<Void.  Iterable<T>> to the view type via a naive mapping. (#11821)\n\n* [BEAM-10097.  BEAM-5982.  BEAM-3080] Use primitive views directly instead of transforming KV<Void.  Iterable<T>> to the view type via a naive mapping.\n\nThis does not impact non-portable runners since the new expansion is guarded by the experiment \"beam_fn_api\".\nThis currently has little benefit for portable runners since they still treat all views as in memory iterables of values but opens the door for them to meaningfully provide optimized versions.\nThe singleton and iterable views can't be translated except if using the Dataflow runner v2 experiment since runner v1 doesn't support the iterable access pattern.\n\n* fixup! Fix test after rebase on master","date":"2020-06-18 04:27:46","modifiedFileCount":"29","status":"M","submitter":"Lukasz Cwik"}]
