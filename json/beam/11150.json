[{"authorTime":"2019-11-20 22:28:02","codes":[{"authorDate":"2019-11-20 22:28:02","commitOrder":1,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"byte[] \");\n      parts.add(\n          \";try { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); if (\");\n      parts.add(\") \");\n      parts.add(\" = null; else{\");\n      parts.add(\".encode(\");\n      parts.add(\", baos); \");\n      parts.add(\n          \" = baos.toByteArray();}} catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(ev.value());\n      args.add(accessCode);\n      args.add(input.value());\n      args.add(ev.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2019-11-20 22:28:02","endLine":146,"groupId":"8611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/33/105462fc157b8f2497c40344858fa16d2f10b3.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"byte[] \");\n      parts.add(\n          \";try { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); if (\");\n      parts.add(\") \");\n      parts.add(\" = null; else{\");\n      parts.add(\".encode(\");\n      parts.add(\", baos); \");\n      parts.add(\n          \" = baos.toByteArray();}} catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(ev.value());\n      args.add(accessCode);\n      args.add(input.value());\n      args.add(ev.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2019-11-20 22:28:02","commitOrder":1,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"final \");\n      parts.add(\" \");\n      parts.add(\";try { \");\n      parts.add(\" = \");\n      parts.add(\"? \");\n      parts.add(\": (\");\n      parts.add(\") \");\n      parts.add(\".decode(new java.io.ByteArrayInputStream(\");\n      parts.add(\n          \"));  } catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n      args.add(javaType);\n      args.add(ev.value());\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(CodeGenerator.defaultValue(dataType(), false));\n      args.add(javaType);\n      args.add(accessCode);\n      args.add(input.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2019-11-20 22:28:02","endLine":265,"groupId":"8611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/33/105462fc157b8f2497c40344858fa16d2f10b3.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"final \");\n      parts.add(\" \");\n      parts.add(\";try { \");\n      parts.add(\" = \");\n      parts.add(\"? \");\n      parts.add(\": (\");\n      parts.add(\") \");\n      parts.add(\".decode(new java.io.ByteArrayInputStream(\");\n      parts.add(\n          \"));  } catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n      args.add(javaType);\n      args.add(ev.value());\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(CodeGenerator.defaultValue(dataType(), false));\n      args.add(javaType);\n      args.add(accessCode);\n      args.add(input.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"18059eecad850b6e30bc7e376e70937915dd11fb","commitMessage":"@@@Merge pull request #9866: [BEAM-8470] Create a new Spark runner based on Spark Structured streaming framework\n\n","date":"2019-11-20 22:28:02","modifiedFileCount":"3","status":"B","submitter":"Alexey Romanenko"},{"authorTime":"2019-12-24 20:02:54","codes":[{"authorDate":"2019-12-24 20:02:54","commitOrder":2,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode =\n          ctx.addReferenceObj(\n              \"beamCoderWrapper\", beamCoderWrapper, BeamCoderWrapper.class.getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\" = \");\n      args.add(accessCode);\n      parts.add(\".encode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\");\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2019-12-24 20:02:54","endLine":164,"groupId":"16716","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ec/a87bd5b8eb3a2ec35745fac0be02235422adc3.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"byte[] \");\n      parts.add(\n          \";try { java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); if (\");\n      parts.add(\") \");\n      parts.add(\" = null; else{\");\n      parts.add(\".encode(\");\n      parts.add(\", baos); \");\n      parts.add(\n          \" = baos.toByteArray();}} catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(ev.value());\n      args.add(accessCode);\n      args.add(input.value());\n      args.add(ev.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2019-12-24 20:02:54","commitOrder":2,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode =\n          ctx.addReferenceObj(\n              \"beamCoderWrapper\", beamCoderWrapper, BeamCoderWrapper.class.getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\" = (\");\n      args.add(javaType);\n      parts.add(\") \");\n      args.add(accessCode);\n      parts.add(\".decode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\");\");\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2019-12-24 20:02:54","endLine":266,"groupId":"16716","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ec/a87bd5b8eb3a2ec35745fac0be02235422adc3.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      \r\n      String accessCode =\n          ctx.addReferenceObj(\"beamCoder\", beamCoder, beamCoder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n      List<String> parts = new ArrayList<>();\n      parts.add(\"final \");\n      parts.add(\" \");\n      parts.add(\";try { \");\n      parts.add(\" = \");\n      parts.add(\"? \");\n      parts.add(\": (\");\n      parts.add(\") \");\n      parts.add(\".decode(new java.io.ByteArrayInputStream(\");\n      parts.add(\n          \"));  } catch (Exception e) {throw org.apache.beam.sdk.util.UserCodeException.wrap(e);}\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n\n      List<Object> args = new ArrayList<>();\n      args.add(javaType);\n      args.add(ev.value());\n      args.add(ev.value());\n      args.add(input.isNull());\n      args.add(CodeGenerator.defaultValue(dataType(), false));\n      args.add(javaType);\n      args.add(accessCode);\n      args.add(input.value());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"025f849963ee6329589ac7bd8a3c01eb7a781b98","commitMessage":"@@@Merge pull request #10450: [BEAM-9019] Improve Encoders: replace as much as possible of catalyst generated code with java compiled code\n\n","date":"2019-12-24 20:02:54","modifiedFileCount":"1","status":"M","submitter":"Isma?l Mej?a"},{"authorTime":"2020-01-10 22:02:28","codes":[{"authorDate":"2020-01-10 22:02:28","commitOrder":3,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode = ctx.addReferenceObj(\"coder\", coder, coder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\n          \" = org.apache.beam.runners.spark.structuredstreaming.translation.helpers.EncoderHelpers.EncodeUsingBeamCoder.encode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\", \");\n      args.add(accessCode);\n      parts.add(\");\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2020-01-10 22:02:28","endLine":124,"groupId":"11150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/b7/7f94cfc882ed1bc6602230f6a5f540d947b3ef.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode =\n          ctx.addReferenceObj(\n              \"beamCoderWrapper\", beamCoderWrapper, BeamCoderWrapper.class.getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\" = \");\n      args.add(accessCode);\n      parts.add(\".encode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\");\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-01-10 22:02:28","commitOrder":3,"curCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode = ctx.addReferenceObj(\"coder\", coder, coder.getClass().getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\" = (\");\n      args.add(javaType);\n      parts.add(\n          \") org.apache.beam.runners.spark.structuredstreaming.translation.helpers.EncoderHelpers.DecodeUsingBeamCoder.decode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\", \");\n      args.add(accessCode);\n      parts.add(\");\");\n\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","date":"2020-01-10 22:02:28","endLine":234,"groupId":"11150","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doGenCode","params":"(CodegenContextctx@ExprCodeev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/b7/7f94cfc882ed1bc6602230f6a5f540d947b3ef.src","preCode":"    public ExprCode doGenCode(CodegenContext ctx, ExprCode ev) {\n      String accessCode =\n          ctx.addReferenceObj(\n              \"beamCoderWrapper\", beamCoderWrapper, BeamCoderWrapper.class.getName());\n      ExprCode input = child.genCode(ctx);\n      String javaType = CodeGenerator.javaType(dataType());\n      List<String> parts = new ArrayList<>();\n      List<Object> args = new ArrayList<>();\n      \r\n\r\n\r\n\n      parts.add(\"final \");\n      args.add(javaType);\n      parts.add(\" \");\n      args.add(ev.value());\n      parts.add(\" = (\");\n      args.add(javaType);\n      parts.add(\") \");\n      args.add(accessCode);\n      parts.add(\".decode(\");\n      args.add(input.isNull());\n      parts.add(\", \");\n      args.add(input.value());\n      parts.add(\");\");\n      StringContext sc =\n          new StringContext(JavaConversions.collectionAsScalaIterable(parts).toSeq());\n      Block code =\n          (new Block.BlockHelper(sc)).code(JavaConversions.collectionAsScalaIterable(args).toSeq());\n      return ev.copy(input.code().$plus(code), input.isNull(), ev.value());\n    }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/helpers/EncoderHelpers.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"331e104cc423b9c53608247cdc8e9defa1cba4df","commitMessage":"@@@Merge pull request #10461: [BEAM-9019] Remove BeamCoderWrapper to avoid extra object allocation\n","date":"2020-01-10 22:02:28","modifiedFileCount":"2","status":"M","submitter":"Etienne Chauchot"}]
