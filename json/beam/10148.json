[{"authorTime":"2019-02-08 22:05:21","codes":[{"authorDate":"2019-11-20 22:28:02","commitOrder":2,"curCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","date":"2019-11-20 22:28:02","endLine":80,"groupId":"22058","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(PCollectionView<T>view@BoundedWindowwindow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ca/5889e934bfbeab90969e95c689b4dfdce1000d.src","preCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/utils/CachedSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2019-02-08 22:05:21","commitOrder":2,"curCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","date":"2019-02-08 22:05:21","endLine":80,"groupId":"22058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"(PCollectionView<T>view@BoundedWindowwindow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/5d/2e52141dece905f478d090911f8676450a4666.src","preCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/util/CachedSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"NB"}],"commitId":"18059eecad850b6e30bc7e376e70937915dd11fb","commitMessage":"@@@Merge pull request #9866: [BEAM-8470] Create a new Spark runner based on Spark Structured streaming framework\n\n","date":"2019-11-20 22:28:02","modifiedFileCount":"3","status":"M","submitter":"Alexey Romanenko"},{"authorTime":"2020-10-25 06:13:33","codes":[{"authorDate":"2020-10-25 06:13:33","commitOrder":3,"curCode":"  public <T> @Nullable T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","date":"2020-10-25 06:13:33","endLine":80,"groupId":"10148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(PCollectionView<T>view@BoundedWindowwindow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/a2/3ae7acf6faa2774dc40073a0ce0ea28b687a5c.src","preCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/utils/CachedSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-10-25 06:13:33","commitOrder":3,"curCode":"  public <T> @Nullable T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","date":"2020-10-25 06:13:33","endLine":80,"groupId":"10148","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"get","params":"(PCollectionView<T>view@BoundedWindowwindow)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/03/5b0f2b19711f446e8f06136d303f0b15b86817.src","preCode":"  public <T> T get(PCollectionView<T> view, BoundedWindow window) {\n    @SuppressWarnings(\"unchecked\")\n    final Cache<Key<T>, Value<T>> materializedCasted =\n        (Cache) SideInputStorage.getMaterializedSideInputs();\n\n    Key<T> sideInputKey = new Key<>(view, window);\n\n    try {\n      Value<T> cachedResult =\n          materializedCasted.get(\n              sideInputKey,\n              () -> {\n                final T result = delegate.get(view, window);\n                LOG.debug(\n                    \"Caching de-serialized side input for {} of size [{}B] in memory.\",\n                    sideInputKey,\n                    SizeEstimator.estimate(result));\n\n                return new Value<>(result);\n              });\n      return cachedResult.getValue();\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e.getCause());\n    }\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/util/CachedSideInputReader.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"aca9099acca969dc217ab183782e5270347cd354","commitMessage":"@@@Merge pull request #13192: [BEAM-10402] Move @Nullable annotations adjacent to the type they annotate\n\n","date":"2020-10-25 06:13:33","modifiedFileCount":"76","status":"M","submitter":"Kenn Knowles"}]
