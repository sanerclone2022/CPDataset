[{"authorTime":"2018-11-20 00:04:19","codes":[{"authorDate":"2019-04-03 22:15:35","commitOrder":9,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2019-04-03 22:15:35","endLine":189,"groupId":"11077","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/8f/1bdca23a64802817d003396b89d24dfe9da8a8.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2018-11-20 00:04:19","commitOrder":9,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2018-11-20 00:04:19","endLine":237,"groupId":"3131","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/e5/0dde4ea9c91b5a6cdaef12a2ee0295cbe5a5db.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"NB"}],"commitId":"67425bf56dcd2972d2b4ab565bedfd6b4306833e","commitMessage":"@@@Merge pull request #8115: [BEAM-2590] Implement basic Spark portable runner\n","date":"2019-04-03 22:15:35","modifiedFileCount":"1","status":"M","submitter":"Isma?l Mej?a"},{"authorTime":"2018-11-20 00:04:19","codes":[{"authorDate":"2019-04-11 23:28:18","commitOrder":10,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2019-04-11 23:28:18","endLine":189,"groupId":"11077","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/bb/a1ea4584f0bc7708cbded7dc907368d6ccd29b.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2018-11-20 00:04:19","commitOrder":10,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2018-11-20 00:04:19","endLine":237,"groupId":"3131","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/e5/0dde4ea9c91b5a6cdaef12a2ee0295cbe5a5db.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"16b58ad03da929d29e0710ce79df7a562d83bbc5","commitMessage":"@@@Merge pull request #8220: [BEAM-6935] Spark portable runner: implement side inputs\n\n","date":"2019-04-11 23:28:18","modifiedFileCount":"6","status":"M","submitter":"Isma?l Mej?a"},{"authorTime":"2018-11-20 00:04:19","codes":[{"authorDate":"2019-09-10 08:21:55","commitOrder":11,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2019-09-10 08:21:55","endLine":196,"groupId":"11077","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/73/5f33454caa0ec0ce9dd9110a640b92d94d2a51.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(jobBundleFactory.forStage(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2018-11-20 00:04:19","commitOrder":11,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2018-11-20 00:04:19","endLine":237,"groupId":"3131","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/e5/0dde4ea9c91b5a6cdaef12a2ee0295cbe5a5db.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"932bd80a17171bd2d8157820ffe09e8389a52b9b","commitMessage":"@@@Merge pull request #9095 from ibzib/spark-multiworker\n\n[BEAM-7600] borrow SDK harness management code into Spark runner","date":"2019-09-10 08:21:55","modifiedFileCount":"9","status":"M","submitter":"Kyle Weaver"},{"authorTime":"2019-09-12 02:17:08","codes":[{"authorDate":"2019-09-12 02:17:08","commitOrder":12,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2019-09-12 02:17:08","endLine":196,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/5a/59fdd8c65767fa6295d4b2bc958c679f2477be.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-09-12 02:17:08","commitOrder":12,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2019-09-12 02:17:08","endLine":238,"groupId":"21995","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/19/2f17eb40f914bd08c750d6a9e503090582babc.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver<WindowedValue<?>>> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"6b3f7d62d3a66b750a7bd541a94646fdf735bbd7","commitMessage":"@@@[BEAM-7947] Improves the interfaces of classes such as FnDataService. ?\n\n","date":"2019-09-12 02:17:08","modifiedFileCount":"21","status":"M","submitter":"Lukasz Cwik"},{"authorTime":"2020-01-03 06:10:06","codes":[{"authorDate":"2020-01-03 06:10:06","commitOrder":13,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-01-03 06:10:06","endLine":201,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f8/9f115e36688562ba87842267aa0ede6ae203a2.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-01-03 06:10:06","commitOrder":13,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-01-03 06:10:06","endLine":245,"groupId":"7392","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/61/d89062aa1700db839a3b3d6aefcd2371a5fcf0.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"5b4ea812e4c56e3fdb12bd4f546b0c118cb77f25","commitMessage":"@@@[BEAM-5600] Add unimplemented split API to Runner side SDF libraries. (#10482)\n\n* [BEAM-5600] Add unimplemented split API to Runner side SDF libraries.\n\nThis creates an unsupported API to the RemoteBundle and a default split handler that throws.\n","date":"2020-01-03 06:10:06","modifiedFileCount":"8","status":"M","submitter":"Lukasz Cwik"},{"authorTime":"2020-04-10 08:18:57","codes":[{"authorDate":"2020-04-10 08:18:57","commitOrder":14,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-04-10 08:18:57","endLine":210,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/93/19e83c431ce1d351e2de6cbd12d97ea458cd94.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-04-10 08:18:57","commitOrder":14,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-04-10 08:18:57","endLine":254,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/72/d44ddd03c1602b637d4f160cb58c613568aaf2.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"1de50c348706ed25af2bab9c9477d7d4f36ef8bf","commitMessage":"@@@Merge pull request #11314 from boyuanzz/data\n\n[BEAM-9562] Send Timers over Data Channel as Elements","date":"2020-04-10 08:18:57","modifiedFileCount":"67","status":"M","submitter":"Lukasz Cwik"},{"authorTime":"2020-04-22 22:39:37","codes":[{"authorDate":"2020-04-22 22:39:37","commitOrder":15,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-04-22 22:39:37","endLine":215,"groupId":"20991","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/06/1f5c0b0f21be78fa3d0505a63fa9b867694d42.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-04-22 22:39:37","commitOrder":15,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-04-22 22:39:37","endLine":259,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/8f58231db4eefb7df5014be6ec447920f374df.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"084ac147a4765b468a48fefb7f3a91729e26024c","commitMessage":"@@@[BEAM-6597.  BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness. (#11487)\n\n* [BEAM-6597.  BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness.\n\n* fixup! Fix spotbugs failures","date":"2020-04-22 22:39:37","modifiedFileCount":"9","status":"M","submitter":"Lukasz Cwik"},{"authorTime":"2020-04-22 22:39:37","codes":[{"authorDate":"2020-08-23 00:59:05","commitOrder":16,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    List<WindowedValue<Integer>> inputs = new ArrayList<>();\n    inputs.add(WindowedValue.valueInGlobalWindow(0));\n    Iterator<RawUnionValue> iterator = function.call(inputs.iterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-08-23 00:59:05","endLine":222,"groupId":"20991","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/39/e28be08cde76bf8a4c4e344a608392ae793a18.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    Iterator<RawUnionValue> iterator = function.call(Collections.emptyIterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-04-22 22:39:37","commitOrder":16,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-04-22 22:39:37","endLine":259,"groupId":"0","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/8f58231db4eefb7df5014be6ec447920f374df.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"}],"commitId":"10361a3e138532cffd086c98016235c4cd2abcf8","commitMessage":"@@@[BEAM-7587] Spark portable streaming (#12157)\n\n[BEAM-7587] Implement Spark portable streaming.","date":"2020-08-23 00:59:05","modifiedFileCount":"11","status":"M","submitter":"annaqin418"},{"authorTime":"2020-10-09 05:11:38","codes":[{"authorDate":"2020-10-09 05:11:38","commitOrder":17,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    List<WindowedValue<Integer>> inputs = new ArrayList<>();\n    inputs.add(WindowedValue.valueInGlobalWindow(0));\n    Iterator<RawUnionValue> iterator = function.call(inputs.iterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-10-09 05:11:38","endLine":230,"groupId":"15418","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/63/04616a9b8462ba9ad1e2643464d8f93342d1b1.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    List<WindowedValue<Integer>> inputs = new ArrayList<>();\n    inputs.add(WindowedValue.valueInGlobalWindow(0));\n    Iterator<RawUnionValue> iterator = function.call(inputs.iterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-10-09 05:11:38","commitOrder":17,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-10-09 05:11:38","endLine":267,"groupId":"13114","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/31/42e1ce83e5bb3f271766585abb2e0c43f96685.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"7f69e2b7ae27cba36592c8316910088222d8eafd","commitMessage":"@@@Merge pull request #12952 from [BEAM-11022] Support bundle finalization for portable Flink in streaming.\n\n[BEAM-11022] Support bundle finalization for portable Flink in streaming.","date":"2020-10-09 05:11:38","modifiedFileCount":"10","status":"M","submitter":"Boyuan Zhang"},{"authorTime":"2020-11-12 06:43:16","codes":[{"authorDate":"2020-11-12 06:43:16","commitOrder":18,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler,\n              BundleCheckpointHandler checkpointHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    List<WindowedValue<Integer>> inputs = new ArrayList<>();\n    inputs.add(WindowedValue.valueInGlobalWindow(0));\n    Iterator<RawUnionValue> iterator = function.call(inputs.iterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","date":"2020-11-12 06:43:16","endLine":238,"groupId":"10115","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/97/e05cf6732faf716dbe7a23ee7c2810986d7804.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return Mockito.mock(ProcessBundleDescriptors.ExecutableProcessBundleDescriptor.class);\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() {}\n        };\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    SparkExecutableStageFunction<Integer, ?> function = getFunction(outputTagMap);\n    List<WindowedValue<Integer>> inputs = new ArrayList<>();\n    inputs.add(WindowedValue.valueInGlobalWindow(0));\n    Iterator<RawUnionValue> iterator = function.call(inputs.iterator());\n    Iterable<RawUnionValue> iterable = () -> iterator;\n\n    assertThat(\n        iterable,\n        contains(\n            new RawUnionValue(1, three), new RawUnionValue(2, four), new RawUnionValue(3, five)));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/SparkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-11-12 06:43:16","commitOrder":18,"curCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler,\n              BundleCheckpointHandler checkpointHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","date":"2020-11-12 06:43:16","endLine":297,"groupId":"10115","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"outputsAreTaggedCorrectly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/67/b772d66018ab3f0efb949b36b4d03e1d6df9dc.src","preCode":"  public void outputsAreTaggedCorrectly() throws Exception {\n    WindowedValue<Integer> three = WindowedValue.valueInGlobalWindow(3);\n    WindowedValue<Integer> four = WindowedValue.valueInGlobalWindow(4);\n    WindowedValue<Integer> five = WindowedValue.valueInGlobalWindow(5);\n    Map<String, Integer> outputTagMap =\n        ImmutableMap.of(\n            \"one\", 1,\n            \"two\", 2,\n            \"three\", 3);\n\n    \r\n    StageBundleFactory stageBundleFactory =\n        new StageBundleFactory() {\n\n          private boolean once;\n\n          @Override\n          public RemoteBundle getBundle(\n              OutputReceiverFactory receiverFactory,\n              TimerReceiverFactory timerReceiverFactory,\n              StateRequestHandler stateRequestHandler,\n              BundleProgressHandler progressHandler,\n              BundleFinalizationHandler finalizationHandler) {\n            return new RemoteBundle() {\n              @Override\n              public String getId() {\n                return \"bundle-id\";\n              }\n\n              @Override\n              public Map<String, FnDataReceiver> getInputReceivers() {\n                return ImmutableMap.of(\n                    \"input\",\n                    input -> {\n                      \n                    });\n              }\n\n              @Override\n              public Map<KV<String, String>, FnDataReceiver<Timer>> getTimerReceivers() {\n                return Collections.emptyMap();\n              }\n\n              @Override\n              public void requestProgress() {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void split(double fractionOfRemainder) {\n                throw new UnsupportedOperationException();\n              }\n\n              @Override\n              public void close() throws Exception {\n                if (once) {\n                  return;\n                }\n                \r\n                receiverFactory.create(\"one\").accept(three);\n                receiverFactory.create(\"two\").accept(four);\n                receiverFactory.create(\"three\").accept(five);\n                once = true;\n              }\n            };\n          }\n\n          @Override\n          public ProcessBundleDescriptors.ExecutableProcessBundleDescriptor\n              getProcessBundleDescriptor() {\n            return processBundleDescriptor;\n          }\n\n          @Override\n          public InstructionRequestHandler getInstructionRequestHandler() {\n            return null;\n          }\n\n          @Override\n          public void close() throws Exception {}\n        };\n    \r\n    when(stageContext.getStageBundleFactory(any())).thenReturn(stageBundleFactory);\n\n    FlinkExecutableStageFunction<Integer> function = getFunction(outputTagMap);\n    function.open(new Configuration());\n\n    if (isStateful) {\n      function.reduce(Collections.emptyList(), collector);\n    } else {\n      function.mapPartition(Collections.emptyList(), collector);\n    }\n    \r\n    \r\n    verify(collector).collect(new RawUnionValue(1, three));\n    verify(collector).collect(new RawUnionValue(2, four));\n    verify(collector).collect(new RawUnionValue(3, five));\n    verifyNoMoreInteractions(collector);\n  }\n","realPath":"runners/flink/src/test/java/org/apache/beam/runners/flink/translation/functions/FlinkExecutableStageFunctionTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"cf6fd1ced9d2170ae1bab483aeceba10cd57b016","commitMessage":"@@@Merge pull request #13105 from [BEAM-10940] Add sdf initiated checkpoint support to portable Flink.\n\n[BEAM-10940] Add sdf initiated checkpoint support to portable Flink.","date":"2020-11-12 06:43:16","modifiedFileCount":"13","status":"M","submitter":"Boyuan Zhang"}]
