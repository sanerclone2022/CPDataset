[{"authorTime":"2019-05-29 17:37:34","codes":[{"authorDate":"2019-11-20 22:28:02","commitOrder":8,"curCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","date":"2019-11-20 22:28:02","endLine":112,"groupId":"16766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"call","params":"(KV<K@Iterable<WindowedValue<InputT>>>kv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/e6/c2eee1673cd7423ecdc2cfca4699550a1a177a.src","preCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2019-05-29 17:37:34","commitOrder":8,"curCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","date":"2019-05-29 17:37:34","endLine":113,"groupId":"16766","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"call","params":"(KV<K@Iterable<WindowedValue<InputT>>>kv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/5b/6704b76183b8c03011235614ae0c4284e9f503.src","preCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/translation/SparkGroupAlsoByWindowViaOutputBufferFn.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"}],"commitId":"18059eecad850b6e30bc7e376e70937915dd11fb","commitMessage":"@@@Merge pull request #9866: [BEAM-8470] Create a new Spark runner based on Spark Structured streaming framework\n\n","date":"2019-11-20 22:28:02","modifiedFileCount":"3","status":"M","submitter":"Alexey Romanenko"},{"authorTime":"2019-05-29 17:37:34","codes":[{"authorDate":"2020-04-07 16:15:13","commitOrder":9,"curCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      K key, Iterator<WindowedValue<KV<K, InputT>>> iterator) throws Exception {\n\n    \r\n    \r\n    \r\n    \r\n    ArrayList<WindowedValue<InputT>> values = new ArrayList<>();\n    while (iterator.hasNext()) {\n      WindowedValue<KV<K, InputT>> wv = iterator.next();\n      values.add(wv.withValue(wv.getValue().getValue()));\n    }\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","date":"2020-04-07 16:15:13","endLine":120,"groupId":"10137","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"call","params":"(Kkey@Iterator<WindowedValue<KV<K@InputT>>>iterator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/ec5c1269a362b0979429841bfe465212f805a7.src","preCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-05-29 17:37:34","commitOrder":9,"curCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","date":"2019-05-29 17:37:34","endLine":113,"groupId":"10137","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"call","params":"(KV<K@Iterable<WindowedValue<InputT>>>kv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/5b/6704b76183b8c03011235614ae0c4284e9f503.src","preCode":"  public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n    K key = kv.getKey();\n    Iterable<WindowedValue<InputT>> values = kv.getValue();\n\n    \r\n\n    \r\n    \r\n    \r\n    InMemoryTimerInternals timerInternals = new InMemoryTimerInternals();\n    timerInternals.advanceProcessingTime(Instant.now());\n    timerInternals.advanceSynchronizedProcessingTime(Instant.now());\n    StateInternals stateInternals = stateInternalsFactory.stateInternalsForKey(key);\n    GABWOutputWindowedValue<K, InputT> outputter = new GABWOutputWindowedValue<>();\n\n    ReduceFnRunner<K, InputT, Iterable<InputT>, W> reduceFnRunner =\n        new ReduceFnRunner<>(\n            key,\n            windowingStrategy,\n            ExecutableTriggerStateMachine.create(\n                TriggerStateMachines.stateMachineForTrigger(\n                    TriggerTranslation.toProto(windowingStrategy.getTrigger()))),\n            stateInternals,\n            timerInternals,\n            outputter,\n            new UnsupportedSideInputReader(\"GroupAlsoByWindow\"),\n            reduceFn,\n            options.get());\n\n    \r\n    reduceFnRunner.processElements(values);\n\n    \r\n    timerInternals.advanceInputWatermark(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    \r\n    timerInternals.advanceProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n    timerInternals.advanceSynchronizedProcessingTime(BoundedWindow.TIMESTAMP_MAX_VALUE);\n\n    fireEligibleTimers(timerInternals, reduceFnRunner);\n\n    reduceFnRunner.persist();\n\n    return outputter.getOutputs().iterator();\n  }\n","realPath":"runners/spark/src/main/java/org/apache/beam/runners/spark/translation/SparkGroupAlsoByWindowViaOutputBufferFn.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"5989def2512c1f73ed8ce54b67166998da398321","commitMessage":"@@@Merge pull request #11055 from echauchot/BEAM-9436-avoid-materialization-in-GBK\n\nMerge pull request #11055: [BEAM-9436] Improve GBK in spark structured streaming runner","date":"2020-04-07 16:15:13","modifiedFileCount":"2","status":"M","submitter":"Etienne Chauchot"}]
