[{"authorTime":"2016-12-21 01:55:57","codes":[{"authorDate":"2017-03-01 06:18:45","commitOrder":3,"curCode":"  public void testDiscardingMode() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .advanceWatermarkForNextBatch(new Instant(1001L))\n            .nextBatch(\n                TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceNextBatchWatermarkToInfinity()\n            .nextBatch(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2017-03-01 06:18:45","endLine":200,"groupId":"4203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ff/775351d080ec75e3ae35944481c6c4adf7e22e.src","preCode":"  public void testDiscardingMode() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .advanceWatermarkForNextBatch(new Instant(1001L))\n            .nextBatch(\n                TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceNextBatchWatermarkToInfinity()\n            .nextBatch(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2016-12-21 01:55:57","commitOrder":3,"curCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2016-12-21 01:55:57","endLine":208,"groupId":"13186","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/64/aeca3cfe2135ee86ef5c80c5e5e8194c9d9134.src","preCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"NB"}],"commitId":"61e31e622ec5b1f3c4cd1417c859810689f2683c","commitMessage":"@@@This closes #2050\n","date":"2017-03-01 06:18:45","modifiedFileCount":"27","status":"M","submitter":"Sela"},{"authorTime":"2016-12-21 01:55:57","codes":[{"authorDate":"2017-05-05 02:10:14","commitOrder":4,"curCode":"  public void testDiscardingMode() throws IOException {\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .advanceWatermarkForNextBatch(new Instant(1001L))\n            .nextBatch(\n                TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceNextBatchWatermarkToInfinity()\n            .nextBatch(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2017-05-05 02:10:14","endLine":208,"groupId":"4203","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/0e0c054a920a70c8b05c2ce1326bd707354e58.src","preCode":"  public void testDiscardingMode() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .advanceWatermarkForNextBatch(new Instant(1001L))\n            .nextBatch(\n                TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceNextBatchWatermarkToInfinity()\n            .nextBatch(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2016-12-21 01:55:57","commitOrder":4,"curCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2016-12-21 01:55:57","endLine":208,"groupId":"13186","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/64/aeca3cfe2135ee86ef5c80c5e5e8194c9d9134.src","preCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"N"}],"commitId":"b73918b55ab06e5a47ef9dc33ae3dbaebaed330a","commitMessage":"@@@This closes #2729\n","date":"2017-05-05 02:10:14","modifiedFileCount":"22","status":"M","submitter":"Aviem Zur"},{"authorTime":"2018-01-25 04:56:23","codes":[{"authorDate":"2018-01-25 04:56:23","commitOrder":5,"curCode":"  public void testDiscardingMode() throws IOException {\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n                    .nextBatch(\n                        TimestampedValue.of(\"firstPane\", new Instant(100)),\n                        TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n                    .advanceWatermarkForNextBatch(new Instant(1001L))\n                    .nextBatch(\n                        TimestampedValue.of(\"onTimePane\", new Instant(500)))\n                    .advanceNextBatchWatermarkToInfinity()\n                    .nextBatch(\n                        TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                        TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":204,"groupId":"20855","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f9/c98b1138ae3df304a8eaa4b7b4e0e1c40617d0.src","preCode":"  public void testDiscardingMode() throws IOException {\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n                    .nextBatch(\n                        TimestampedValue.of(\"firstPane\", new Instant(100)),\n                        TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n                    .advanceWatermarkForNextBatch(new Instant(1001L))\n                    .nextBatch(\n                        TimestampedValue.of(\"onTimePane\", new Instant(500)))\n                    .advanceNextBatchWatermarkToInfinity()\n                    .nextBatch(\n                        TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                        TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2018-01-25 04:56:23","commitOrder":5,"curCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":204,"groupId":"13186","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ad/b19408935597bd1ba02ba53a34bebe678bf751.src","preCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"0cbcf4ad1db7d820c5476d636f3a3d69062021a5","commitMessage":"@@@Merge pull request #4470 from jkff/java8\n\nLarge set of mechanical changes after switch to Java8","date":"2018-01-25 04:56:23","modifiedFileCount":"653","status":"M","submitter":"Eugene Kirpichov"},{"authorTime":"2020-01-16 06:01:56","codes":[{"authorDate":"2018-01-25 04:56:23","commitOrder":6,"curCode":"  public void testDiscardingMode() throws IOException {\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n                    .nextBatch(\n                        TimestampedValue.of(\"firstPane\", new Instant(100)),\n                        TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n                    .advanceWatermarkForNextBatch(new Instant(1001L))\n                    .nextBatch(\n                        TimestampedValue.of(\"onTimePane\", new Instant(500)))\n                    .advanceNextBatchWatermarkToInfinity()\n                    .nextBatch(\n                        TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                        TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":204,"groupId":"10117","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f9/c98b1138ae3df304a8eaa4b7b4e0e1c40617d0.src","preCode":"  public void testDiscardingMode() throws IOException {\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n                    .nextBatch(\n                        TimestampedValue.of(\"firstPane\", new Instant(100)),\n                        TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n                    .advanceWatermarkForNextBatch(new Instant(1001L))\n                    .nextBatch(\n                        TimestampedValue.of(\"onTimePane\", new Instant(500)))\n                    .advanceNextBatchWatermarkToInfinity()\n                    .nextBatch(\n                        TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                        TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)));\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(source)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"},{"authorDate":"2020-01-16 06:01:56","commitOrder":6,"curCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1000L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","date":"2020-01-16 06:01:56","endLine":231,"groupId":"10117","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiscardingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/84/1a75ce1c4a0e78fbf9f9f34f5b1b8d712986cb.src","preCode":"  public void testDiscardingMode() {\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .advanceWatermarkTo(new Instant(0))\n            .addElements(\n                TimestampedValue.of(\"firstPane\", new Instant(100)),\n                TimestampedValue.of(\"alsoFirstPane\", new Instant(200)))\n            .addElements(TimestampedValue.of(\"onTimePane\", new Instant(500)))\n            .advanceWatermarkTo(new Instant(1001L))\n            .addElements(\n                TimestampedValue.of(\"finalLatePane\", new Instant(750)),\n                TimestampedValue.of(\"alsoFinalLatePane\", new Instant(250)))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windowFn = FixedWindows.of(Duration.millis(1000L));\n    Duration allowedLateness = Duration.millis(5000L);\n    PCollection<String> values =\n        p.apply(stream)\n            .apply(\n                Window.<String>into(windowFn)\n                    .triggering(\n                        AfterWatermark.pastEndOfWindow()\n                            .withEarlyFirings(AfterPane.elementCountAtLeast(2))\n                            .withLateFirings(Never.ever()))\n                    .discardingFiredPanes()\n                    .withAllowedLateness(allowedLateness))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    IntervalWindow window = windowFn.assignWindow(new Instant(100));\n    PAssert.that(values)\n        .inWindow(window)\n        .containsInAnyOrder(\n            \"firstPane\", \"alsoFirstPane\", \"onTimePane\", \"finalLatePane\", \"alsoFinalLatePane\");\n    PAssert.that(values)\n        .inCombinedNonLatePanes(window)\n        .containsInAnyOrder(\"firstPane\", \"alsoFirstPane\", \"onTimePane\");\n    PAssert.that(values).inOnTimePane(window).containsInAnyOrder(\"onTimePane\");\n    PAssert.that(values)\n        .inFinalPane(window)\n        .containsInAnyOrder(\"finalLatePane\", \"alsoFinalLatePane\");\n\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"931108c7a104985b6c182385ddbc6bd767ba0127","commitMessage":"@@@Merge pull request #10601 from acrites/window-resolution\n\n[BEAM-9126] Changes watermark advance from 1001 to 1000","date":"2020-01-16 06:01:56","modifiedFileCount":"1","status":"M","submitter":"Lukasz Cwik"}]
