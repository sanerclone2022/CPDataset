[{"authorTime":"2017-03-01 06:18:45","codes":[{"authorDate":"2017-03-01 06:18:45","commitOrder":1,"curCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)));\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","date":"2017-03-01 06:18:45","endLine":350,"groupId":"18859","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementAtPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ff/775351d080ec75e3ae35944481c6c4adf7e22e.src","preCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)));\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"B"},{"authorDate":"2017-03-01 06:18:45","commitOrder":1,"curCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","date":"2017-03-01 06:18:45","endLine":368,"groupId":"18859","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdvanceWatermarkEqualToPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ff/775351d080ec75e3ae35944481c6c4adf7e22e.src","preCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"}],"commitId":"61e31e622ec5b1f3c4cd1417c859810689f2683c","commitMessage":"@@@This closes #2050\n","date":"2017-03-01 06:18:45","modifiedFileCount":"27","status":"B","submitter":"Sela"},{"authorTime":"2017-03-01 06:18:45","codes":[{"authorDate":"2017-03-10 00:03:40","commitOrder":2,"curCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)))\n            .advanceNextBatchWatermarkToInfinity();\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","date":"2017-03-10 00:03:40","endLine":355,"groupId":"18859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementAtPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/75/abc8bd6e77a0c687ed23b69556994549b42771.src","preCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)));\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2017-03-01 06:18:45","commitOrder":2,"curCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","date":"2017-03-01 06:18:45","endLine":368,"groupId":"18859","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdvanceWatermarkEqualToPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ff/775351d080ec75e3ae35944481c6c4adf7e22e.src","preCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"}],"commitId":"efc701ed614f137129bb33544ad83d61ee9d0278","commitMessage":"@@@This closes #2168\n","date":"2017-03-10 00:03:40","modifiedFileCount":"8","status":"M","submitter":"Amit Sela"},{"authorTime":"2017-05-05 02:10:14","codes":[{"authorDate":"2017-05-05 02:10:14","commitOrder":3,"curCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)))\n            .advanceNextBatchWatermarkToInfinity();\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","date":"2017-05-05 02:10:14","endLine":401,"groupId":"10120","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementAtPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/0e0c054a920a70c8b05c2ce1326bd707354e58.src","preCode":"  public void testElementAtPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .nextBatch(TimestampedValue.of(-1, BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L)))\n            .advanceNextBatchWatermarkToInfinity();\n    thrown.expect(IllegalArgumentException.class);\n    source.nextBatch(TimestampedValue.of(1, BoundedWindow.TIMESTAMP_MAX_VALUE));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2017-05-05 02:10:14","commitOrder":3,"curCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","date":"2017-05-05 02:10:14","endLine":421,"groupId":"10120","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAdvanceWatermarkEqualToPositiveInfinityThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/0e0c054a920a70c8b05c2ce1326bd707354e58.src","preCode":"  public void testAdvanceWatermarkEqualToPositiveInfinityThrows() {\n    CreateStream<Integer> source =\n        CreateStream.of(VarIntCoder.of(), pipelineRule.batchDuration())\n            .advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE.minus(1L));\n    thrown.expect(IllegalArgumentException.class);\n    source.advanceWatermarkForNextBatch(BoundedWindow.TIMESTAMP_MAX_VALUE);\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"b73918b55ab06e5a47ef9dc33ae3dbaebaed330a","commitMessage":"@@@This closes #2729\n","date":"2017-05-05 02:10:14","modifiedFileCount":"22","status":"M","submitter":"Aviem Zur"}]
