[{"authorTime":"2016-12-21 01:55:57","codes":[{"authorDate":"2017-03-01 06:18:45","commitOrder":3,"curCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2017-03-01 06:18:45","endLine":259,"groupId":"20858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ff/775351d080ec75e3ae35944481c6c4adf7e22e.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"},{"authorDate":"2016-12-21 01:55:57","commitOrder":3,"curCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream = TestStream.create(StringUtf8Coder.of())\n        .addElements(TimestampedValue.of(\"foo\", endOfGlobalWindow),\n            TimestampedValue.of(\"bar\", endOfGlobalWindow))\n        .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(stream)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2016-12-21 01:55:57","endLine":261,"groupId":"16120","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/64/aeca3cfe2135ee86ef5c80c5e5e8194c9d9134.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream = TestStream.create(StringUtf8Coder.of())\n        .addElements(TimestampedValue.of(\"foo\", endOfGlobalWindow),\n            TimestampedValue.of(\"bar\", endOfGlobalWindow))\n        .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(stream)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"NB"}],"commitId":"61e31e622ec5b1f3c4cd1417c859810689f2683c","commitMessage":"@@@This closes #2050\n","date":"2017-03-01 06:18:45","modifiedFileCount":"27","status":"M","submitter":"Sela"},{"authorTime":"2016-12-21 01:55:57","codes":[{"authorDate":"2017-05-05 02:10:14","commitOrder":4,"curCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2017-05-05 02:10:14","endLine":265,"groupId":"20858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/0e0c054a920a70c8b05c2ce1326bd707354e58.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Pipeline p = pipelineRule.createPipeline();\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), pipelineRule.batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2016-12-21 01:55:57","commitOrder":4,"curCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream = TestStream.create(StringUtf8Coder.of())\n        .addElements(TimestampedValue.of(\"foo\", endOfGlobalWindow),\n            TimestampedValue.of(\"bar\", endOfGlobalWindow))\n        .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(stream)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2016-12-21 01:55:57","endLine":261,"groupId":"16120","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/64/aeca3cfe2135ee86ef5c80c5e5e8194c9d9134.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream = TestStream.create(StringUtf8Coder.of())\n        .addElements(TimestampedValue.of(\"foo\", endOfGlobalWindow),\n            TimestampedValue.of(\"bar\", endOfGlobalWindow))\n        .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(stream)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"}],"commitId":"b73918b55ab06e5a47ef9dc33ae3dbaebaed330a","commitMessage":"@@@This closes #2729\n","date":"2017-05-05 02:10:14","modifiedFileCount":"22","status":"M","submitter":"Aviem Zur"},{"authorTime":"2017-11-14 07:03:37","codes":[{"authorDate":"2017-05-05 02:10:14","commitOrder":5,"curCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2017-05-05 02:10:14","endLine":265,"groupId":"20858","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/77/0e0c054a920a70c8b05c2ce1326bd707354e58.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2017-11-14 07:03:37","commitOrder":5,"curCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .addElements(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(stream)\n            .apply(Window.<String>into(windows))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(endOfGlobalWindow))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2017-11-14 07:03:37","endLine":263,"groupId":"16120","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/2f/147dc79679ed2c032d0e82ef92e5d18e4f93c9.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream = TestStream.create(StringUtf8Coder.of())\n        .addElements(TimestampedValue.of(\"foo\", endOfGlobalWindow),\n            TimestampedValue.of(\"bar\", endOfGlobalWindow))\n        .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(stream)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"a5254e730065d8b15899b094ee54011797fffaa1","commitMessage":"@@@This closes #3988: [BEAM-3052] ReduceFnRunner: Do not manage EOW hold or timer.  set GC hold and timer always\n\n  ReduceFnRunner: Do not manage EOW hold or timer.  set GC hold and timer always\n  Truncate the very last fixed window if it goes beyond representable time\n  Tidy a troublesome TestStreamTest\n  Fix expectations in CombineTest\n","date":"2017-11-14 07:03:37","modifiedFileCount":"8","status":"M","submitter":"Kenneth Knowles"},{"authorTime":"2018-01-25 04:56:23","codes":[{"authorDate":"2018-01-25 04:56:23","commitOrder":6,"curCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(source)\n            .apply(Window.into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":266,"groupId":"20858","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f9/c98b1138ae3df304a8eaa4b7b4e0e1c40617d0.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues = p.apply(source)\n        .apply(Window.<String>into(windows))\n        .apply(WithKeys.<Integer, String>of(1))\n        .apply(GroupByKey.<Integer, String>create())\n        .apply(Values.<Iterable<String>>create())\n        .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2018-01-25 04:56:23","commitOrder":6,"curCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .addElements(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(stream)\n            .apply(Window.into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(endOfGlobalWindow))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":263,"groupId":"13559","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/ad/b19408935597bd1ba02ba53a34bebe678bf751.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .addElements(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(stream)\n            .apply(Window.<String>into(windows))\n            .apply(WithKeys.<Integer, String>of(1))\n            .apply(GroupByKey.<Integer, String>create())\n            .apply(Values.<Iterable<String>>create())\n            .apply(Flatten.<String>iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(endOfGlobalWindow))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"0cbcf4ad1db7d820c5476d636f3a3d69062021a5","commitMessage":"@@@Merge pull request #4470 from jkff/java8\n\nLarge set of mechanical changes after switch to Java8","date":"2018-01-25 04:56:23","modifiedFileCount":"653","status":"M","submitter":"Eugene Kirpichov"},{"authorTime":"2019-11-13 05:23:35","codes":[{"authorDate":"2018-01-25 04:56:23","commitOrder":7,"curCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(source)\n            .apply(Window.into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2018-01-25 04:56:23","endLine":266,"groupId":"10119","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/f9/c98b1138ae3df304a8eaa4b7b4e0e1c40617d0.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() throws IOException {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    CreateStream<String> source =\n        CreateStream.of(StringUtf8Coder.of(), batchDuration())\n            .nextBatch(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceNextBatchWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(source)\n            .apply(Window.into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(GlobalWindow.INSTANCE.maxTimestamp()))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/translation/streaming/CreateStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2019-11-13 05:23:35","commitOrder":7,"curCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .addElements(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(stream)\n            .apply(into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(endOfGlobalWindow))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","date":"2019-11-13 05:23:35","endLine":290,"groupId":"10119","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testElementsAtAlmostPositiveInfinity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/e4/8b6b2013fb9c699b9d33445ad476f90842cfcc.src","preCode":"  public void testElementsAtAlmostPositiveInfinity() {\n    Instant endOfGlobalWindow = GlobalWindow.INSTANCE.maxTimestamp();\n    TestStream<String> stream =\n        TestStream.create(StringUtf8Coder.of())\n            .addElements(\n                TimestampedValue.of(\"foo\", endOfGlobalWindow),\n                TimestampedValue.of(\"bar\", endOfGlobalWindow))\n            .advanceWatermarkToInfinity();\n\n    FixedWindows windows = FixedWindows.of(Duration.standardHours(6));\n    PCollection<String> windowedValues =\n        p.apply(stream)\n            .apply(Window.into(windows))\n            .apply(WithKeys.of(1))\n            .apply(GroupByKey.create())\n            .apply(Values.create())\n            .apply(Flatten.iterables());\n\n    PAssert.that(windowedValues)\n        .inWindow(windows.assignWindow(endOfGlobalWindow))\n        .containsInAnyOrder(\"foo\", \"bar\");\n    p.run();\n  }\n","realPath":"sdks/java/core/src/test/java/org/apache/beam/sdk/testing/TestStreamTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"0b210c906df3e4d13ced36725fd0912d0b430395","commitMessage":"@@@[BEAM-8598] Test triggering BEAM-8598 on FlinkRunner. (#10049)\n\n","date":"2019-11-13 05:23:35","modifiedFileCount":"1","status":"M","submitter":"Robert Bradshaw"}]
