[{"authorTime":"2017-03-01 06:18:45","codes":[{"authorDate":"2017-03-01 06:18:45","commitOrder":1,"curCode":"  public void testLowHighWatermarksAdvance() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(5)),\n            instant));\n    GlobalWatermarkHolder.advance(jsc);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(10)),\n            instant.plus(Duration.millis(15)),\n            instant.plus(Duration.millis(100))));\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks currentWatermarks = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(currentWatermarks.getLowWatermark(), equalTo(instant.plus(Duration.millis(10))));\n    assertThat(currentWatermarks.getHighWatermark(), equalTo(instant.plus(Duration.millis(15))));\n    assertThat(currentWatermarks.getSynchronizedProcessingTime(),\n        equalTo(instant.plus(Duration.millis(100))));\n\n    \r\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\n        RegexMatcher.matches(\n            \"Low watermark \" + INSTANT_PATTERN + \" cannot be later then high watermark \"\n            + INSTANT_PATTERN));\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(25)),\n            instant.plus(Duration.millis(20)),\n            instant.plus(Duration.millis(200))));\n    GlobalWatermarkHolder.advance(jsc);\n  }\n","date":"2017-03-01 06:18:45","endLine":97,"groupId":"2953","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowHighWatermarksAdvance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/47/a6e3fe749997bd8dddfa344bb2a485d677ef82.src","preCode":"  public void testLowHighWatermarksAdvance() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(5)),\n            instant));\n    GlobalWatermarkHolder.advance(jsc);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(10)),\n            instant.plus(Duration.millis(15)),\n            instant.plus(Duration.millis(100))));\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks currentWatermarks = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(currentWatermarks.getLowWatermark(), equalTo(instant.plus(Duration.millis(10))));\n    assertThat(currentWatermarks.getHighWatermark(), equalTo(instant.plus(Duration.millis(15))));\n    assertThat(currentWatermarks.getSynchronizedProcessingTime(),\n        equalTo(instant.plus(Duration.millis(100))));\n\n    \r\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\n        RegexMatcher.matches(\n            \"Low watermark \" + INSTANT_PATTERN + \" cannot be later then high watermark \"\n            + INSTANT_PATTERN));\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(25)),\n            instant.plus(Duration.millis(20)),\n            instant.plus(Duration.millis(200))));\n    GlobalWatermarkHolder.advance(jsc);\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/GlobalWatermarkHolderTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2017-03-01 06:18:45","commitOrder":1,"curCode":"  public void testMultiSource() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(10)),\n            instant));\n    GlobalWatermarkHolder.add(2,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(3)),\n            instant.plus(Duration.millis(6)),\n            instant));\n\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks watermarksForSource1 = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(watermarksForSource1.getLowWatermark(), equalTo(instant.plus(Duration.millis(5))));\n    assertThat(watermarksForSource1.getHighWatermark(), equalTo(instant.plus(Duration.millis(10))));\n\n    \r\n    SparkWatermarks watermarksForSource2 = GlobalWatermarkHolder.get().getValue().get(2);\n    assertThat(watermarksForSource2.getLowWatermark(), equalTo(instant.plus(Duration.millis(3))));\n    assertThat(watermarksForSource2.getHighWatermark(), equalTo(instant.plus(Duration.millis(6))));\n  }\n","date":"2017-03-01 06:18:45","endLine":150,"groupId":"8776","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/47/a6e3fe749997bd8dddfa344bb2a485d677ef82.src","preCode":"  public void testMultiSource() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(10)),\n            instant));\n    GlobalWatermarkHolder.add(2,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(3)),\n            instant.plus(Duration.millis(6)),\n            instant));\n\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks watermarksForSource1 = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(watermarksForSource1.getLowWatermark(), equalTo(instant.plus(Duration.millis(5))));\n    assertThat(watermarksForSource1.getHighWatermark(), equalTo(instant.plus(Duration.millis(10))));\n\n    \r\n    SparkWatermarks watermarksForSource2 = GlobalWatermarkHolder.get().getValue().get(2);\n    assertThat(watermarksForSource2.getLowWatermark(), equalTo(instant.plus(Duration.millis(3))));\n    assertThat(watermarksForSource2.getHighWatermark(), equalTo(instant.plus(Duration.millis(6))));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/GlobalWatermarkHolderTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"61e31e622ec5b1f3c4cd1417c859810689f2683c","commitMessage":"@@@This closes #2050\n","date":"2017-03-01 06:18:45","modifiedFileCount":"27","status":"B","submitter":"Sela"},{"authorTime":"2017-06-22 20:33:26","codes":[{"authorDate":"2017-06-22 20:33:26","commitOrder":2,"curCode":"  public void testLowHighWatermarksAdvance() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(5)),\n            instant));\n    GlobalWatermarkHolder.advance();\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(10)),\n            instant.plus(Duration.millis(15)),\n            instant.plus(Duration.millis(100))));\n    GlobalWatermarkHolder.advance();\n\n    \r\n    SparkWatermarks currentWatermarks = GlobalWatermarkHolder.get(0L).get(1);\n    assertThat(currentWatermarks.getLowWatermark(), equalTo(instant.plus(Duration.millis(10))));\n    assertThat(currentWatermarks.getHighWatermark(), equalTo(instant.plus(Duration.millis(15))));\n    assertThat(currentWatermarks.getSynchronizedProcessingTime(),\n        equalTo(instant.plus(Duration.millis(100))));\n\n    \r\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\n        RegexMatcher.matches(\n            \"Low watermark \" + INSTANT_PATTERN + \" cannot be later then high watermark \"\n            + INSTANT_PATTERN));\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(25)),\n            instant.plus(Duration.millis(20)),\n            instant.plus(Duration.millis(200))));\n    GlobalWatermarkHolder.advance();\n  }\n","date":"2017-06-22 20:33:26","endLine":97,"groupId":"1082","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLowHighWatermarksAdvance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/17/081236cf52714fd232c98cc2036ea9bdd01a4b.src","preCode":"  public void testLowHighWatermarksAdvance() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(5)),\n            instant));\n    GlobalWatermarkHolder.advance(jsc);\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(10)),\n            instant.plus(Duration.millis(15)),\n            instant.plus(Duration.millis(100))));\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks currentWatermarks = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(currentWatermarks.getLowWatermark(), equalTo(instant.plus(Duration.millis(10))));\n    assertThat(currentWatermarks.getHighWatermark(), equalTo(instant.plus(Duration.millis(15))));\n    assertThat(currentWatermarks.getSynchronizedProcessingTime(),\n        equalTo(instant.plus(Duration.millis(100))));\n\n    \r\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\n        RegexMatcher.matches(\n            \"Low watermark \" + INSTANT_PATTERN + \" cannot be later then high watermark \"\n            + INSTANT_PATTERN));\n    \r\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(25)),\n            instant.plus(Duration.millis(20)),\n            instant.plus(Duration.millis(200))));\n    GlobalWatermarkHolder.advance(jsc);\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/GlobalWatermarkHolderTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2017-06-22 20:33:26","commitOrder":2,"curCode":"  public void testMultiSource() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(10)),\n            instant));\n    GlobalWatermarkHolder.add(2,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(3)),\n            instant.plus(Duration.millis(6)),\n            instant));\n\n    GlobalWatermarkHolder.advance();\n\n    \r\n    SparkWatermarks watermarksForSource1 = GlobalWatermarkHolder.get(0L).get(1);\n    assertThat(watermarksForSource1.getLowWatermark(), equalTo(instant.plus(Duration.millis(5))));\n    assertThat(watermarksForSource1.getHighWatermark(), equalTo(instant.plus(Duration.millis(10))));\n\n    \r\n    SparkWatermarks watermarksForSource2 = GlobalWatermarkHolder.get(0L).get(2);\n    assertThat(watermarksForSource2.getLowWatermark(), equalTo(instant.plus(Duration.millis(3))));\n    assertThat(watermarksForSource2.getHighWatermark(), equalTo(instant.plus(Duration.millis(6))));\n  }\n","date":"2017-06-22 20:33:26","endLine":150,"groupId":"1082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-beam-10-0.7/blobInfo/CC_OUT/blobs/17/081236cf52714fd232c98cc2036ea9bdd01a4b.src","preCode":"  public void testMultiSource() {\n    JavaSparkContext jsc = SparkContextFactory.getSparkContext(options);\n\n    Instant instant = new Instant(0);\n    GlobalWatermarkHolder.add(1,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(5)),\n            instant.plus(Duration.millis(10)),\n            instant));\n    GlobalWatermarkHolder.add(2,\n        new SparkWatermarks(\n            instant.plus(Duration.millis(3)),\n            instant.plus(Duration.millis(6)),\n            instant));\n\n    GlobalWatermarkHolder.advance(jsc);\n\n    \r\n    SparkWatermarks watermarksForSource1 = GlobalWatermarkHolder.get().getValue().get(1);\n    assertThat(watermarksForSource1.getLowWatermark(), equalTo(instant.plus(Duration.millis(5))));\n    assertThat(watermarksForSource1.getHighWatermark(), equalTo(instant.plus(Duration.millis(10))));\n\n    \r\n    SparkWatermarks watermarksForSource2 = GlobalWatermarkHolder.get().getValue().get(2);\n    assertThat(watermarksForSource2.getLowWatermark(), equalTo(instant.plus(Duration.millis(3))));\n    assertThat(watermarksForSource2.getHighWatermark(), equalTo(instant.plus(Duration.millis(6))));\n  }\n","realPath":"runners/spark/src/test/java/org/apache/beam/runners/spark/GlobalWatermarkHolderTest.java","repoName":"beam","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"e2ee59557befd729e24e62a4991a76bab64f5755","commitMessage":"@@@This closes #3343\n","date":"2017-06-22 20:33:26","modifiedFileCount":"6","status":"M","submitter":"Aviem Zur"}]
