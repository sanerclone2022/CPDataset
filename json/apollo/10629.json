[{"authorTime":"2016-11-22 15:47:36","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":1,"curCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","date":"2016-11-22 15:47:36","endLine":247,"groupId":"1652","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"masterRelease","params":"(Namespacenamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@Stringoperator@intreleaseOperation@Map<String@Object>operationContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3f/be18713c46b789d536f8860df31dc7fc074ffe.src","preCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"},{"authorDate":"2016-11-22 15:47:36","commitOrder":1,"curCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","date":"2016-11-22 15:47:36","endLine":282,"groupId":"1181","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"branchRelease","params":"(NamespaceparentNamespace@NamespacechildNamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@longbaseReleaseId@Stringoperator@intreleaseOperation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3f/be18713c46b789d536f8860df31dc7fc074ffe.src","preCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"6d7ebbe8491f5a920f20f84867e9114c3fbd17ae","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !32","date":"2016-11-22 15:47:36","modifiedFileCount":"58","status":"B","submitter":"zl??(IT)"},{"authorTime":"2017-01-19 16:28:42","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":2,"curCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","date":"2016-11-22 15:47:36","endLine":247,"groupId":"1652","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"masterRelease","params":"(Namespacenamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@Stringoperator@intreleaseOperation@Map<String@Object>operationContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3f/be18713c46b789d536f8860df31dc7fc074ffe.src","preCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2017-01-19 16:28:42","commitOrder":2,"curCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation, boolean isEmergencyPublish) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n    releaseOperationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","date":"2017-01-19 16:28:42","endLine":291,"groupId":"702","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"branchRelease","params":"(NamespaceparentNamespace@NamespacechildNamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@longbaseReleaseId@Stringoperator@intreleaseOperation@booleanisEmergencyPublish)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2a/29d009e652717824b881d07cc198fa728e921a.src","preCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"4f3dd644a2dde5e77186ec8aac124e27b45c14b3","commitMessage":"@@@Merge pull request #520 from lepdou/emergency_publish\n\nemergency publish","date":"2017-01-19 16:28:42","modifiedFileCount":"15","status":"M","submitter":"Jason Song"},{"authorTime":"2018-11-18 15:14:04","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":3,"curCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","date":"2016-11-22 15:47:36","endLine":247,"groupId":"1652","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"masterRelease","params":"(Namespacenamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@Stringoperator@intreleaseOperation@Map<String@Object>operationContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3f/be18713c46b789d536f8860df31dc7fc074ffe.src","preCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2018-11-18 15:14:04","commitOrder":3,"curCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation, boolean isEmergencyPublish, Collection<String> branchReleaseKeys) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n    releaseOperationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);\n    releaseOperationContext.put(ReleaseOperationContext.BRANCH_RELEASE_KEYS, branchReleaseKeys);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","date":"2018-11-18 15:14:04","endLine":364,"groupId":"1652","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"branchRelease","params":"(NamespaceparentNamespace@NamespacechildNamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@longbaseReleaseId@Stringoperator@intreleaseOperation@booleanisEmergencyPublish@Collection<String>branchReleaseKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0e/a4694f0953100d579268989bc3466b600565d0.src","preCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation, boolean isEmergencyPublish) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n    releaseOperationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"0ac808d48cbca831c8f9b43cd94379cf06567027","commitMessage":"@@@Merge pull request #1678 from nobodyiam/fix-1677\n\nFixes gray release issue #1677","date":"2018-11-18 15:14:04","modifiedFileCount":"6","status":"M","submitter":"Jason Song"},{"authorTime":"2020-01-21 08:22:12","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":4,"curCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","date":"2016-11-22 15:47:36","endLine":247,"groupId":"10629","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"masterRelease","params":"(Namespacenamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@Stringoperator@intreleaseOperation@Map<String@Object>operationContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3f/be18713c46b789d536f8860df31dc7fc074ffe.src","preCode":"  private Release masterRelease(Namespace namespace, String releaseName, String releaseComment,\n                                Map<String, String> configurations, String operator,\n                                int releaseOperation, Map<String, Object> operationContext) {\n    Release lastActiveRelease = findLatestActiveRelease(namespace);\n    long previousReleaseId = lastActiveRelease == null ? 0 : lastActiveRelease.getId();\n    Release release = createRelease(namespace, releaseName, releaseComment,\n                                    configurations, operator);\n\n    releaseHistoryService.createReleaseHistory(namespace.getAppId(), namespace.getClusterName(),\n                                               namespace.getNamespaceName(), namespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, operationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2020-01-21 08:22:12","commitOrder":4,"curCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation, boolean isEmergencyPublish, Collection<String> branchReleaseKeys) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newLinkedHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n    releaseOperationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);\n    releaseOperationContext.put(ReleaseOperationContext.BRANCH_RELEASE_KEYS, branchReleaseKeys);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","date":"2020-01-21 20:16:07","endLine":364,"groupId":"10629","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"branchRelease","params":"(NamespaceparentNamespace@NamespacechildNamespace@StringreleaseName@StringreleaseComment@Map<String@String>configurations@longbaseReleaseId@Stringoperator@intreleaseOperation@booleanisEmergencyPublish@Collection<String>branchReleaseKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/551ad309846c4896f7419e7605a441179a3944.src","preCode":"  private Release branchRelease(Namespace parentNamespace, Namespace childNamespace,\n                                String releaseName, String releaseComment,\n                                Map<String, String> configurations, long baseReleaseId,\n                                String operator, int releaseOperation, boolean isEmergencyPublish, Collection<String> branchReleaseKeys) {\n    Release previousRelease = findLatestActiveRelease(childNamespace.getAppId(),\n                                                      childNamespace.getClusterName(),\n                                                      childNamespace.getNamespaceName());\n    long previousReleaseId = previousRelease == null ? 0 : previousRelease.getId();\n\n    Map<String, Object> releaseOperationContext = Maps.newHashMap();\n    releaseOperationContext.put(ReleaseOperationContext.BASE_RELEASE_ID, baseReleaseId);\n    releaseOperationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);\n    releaseOperationContext.put(ReleaseOperationContext.BRANCH_RELEASE_KEYS, branchReleaseKeys);\n\n    Release release =\n        createRelease(childNamespace, releaseName, releaseComment, configurations, operator);\n\n    \r\n    GrayReleaseRule grayReleaseRule = namespaceBranchService.updateRulesReleaseId(childNamespace.getAppId(),\n                                                                                  parentNamespace.getClusterName(),\n                                                                                  childNamespace.getNamespaceName(),\n                                                                                  childNamespace.getClusterName(),\n                                                                                  release.getId(), operator);\n\n    if (grayReleaseRule != null) {\n      releaseOperationContext.put(ReleaseOperationContext.RULES, GrayReleaseRuleItemTransformer\n          .batchTransformFromJSON(grayReleaseRule.getRules()));\n    }\n\n    releaseHistoryService.createReleaseHistory(parentNamespace.getAppId(), parentNamespace.getClusterName(),\n                                               parentNamespace.getNamespaceName(), childNamespace.getClusterName(),\n                                               release.getId(),\n                                               previousReleaseId, releaseOperation, releaseOperationContext, operator);\n\n    return release;\n  }\n","realPath":"apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"5fe54966f5f50e5f5e1c3b2e0f0d82b1d92f014d","commitMessage":"@@@use linked hash map to keep server side config order and do some refactoring to apollo-client\n","date":"2020-01-21 20:16:07","modifiedFileCount":"18","status":"M","submitter":"Jason Song"}]
