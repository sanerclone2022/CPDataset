[{"authorTime":"2018-03-12 21:57:34","codes":[{"authorDate":"2018-03-12 21:57:34","commitOrder":1,"curCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-03-12 21:57:34","endLine":88,"groupId":"1593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processField","params":"(Objectbean@StringbeanName@Fieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ef/e1076ca772e339772b27cc26f506c4b65ad964.src","preCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2018-03-12 21:57:34","commitOrder":1,"curCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-03-12 21:57:34","endLine":118,"groupId":"1593","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"processMethod","params":"(Objectbean@StringbeanName@Methodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ef/e1076ca772e339772b27cc26f506c4b65ad964.src","preCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"40abd75982481c4edf872a76cba83ea465acc9f6","commitMessage":"@@@Merge pull request #989 from zhangzheng88/json-supported\n\n1. Support injecting Json values with @ApolloJsonValue.  the supported format is the same as Spring @Value.  such as @ApolloJsonValue(\"${someJsonPropertyKey}\")\n2. Support auto updating injected values for @ApolloJsonValue\n","date":"2018-03-12 21:57:34","modifiedFileCount":"13","status":"B","submitter":"Jason Song"},{"authorTime":"2018-04-12 23:31:51","codes":[{"authorDate":"2018-03-12 21:57:34","commitOrder":2,"curCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-03-12 21:57:34","endLine":88,"groupId":"1593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processField","params":"(Objectbean@StringbeanName@Fieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ef/e1076ca772e339772b27cc26f506c4b65ad964.src","preCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2018-04-12 23:31:51","commitOrder":2,"curCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(key, springValue);\n      logger.info(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-04-12 23:31:51","endLine":119,"groupId":"1593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"processMethod","params":"(Objectbean@StringbeanName@Methodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2b/f007d06a6839cdb4f1ea2b6d786bdd02c755f4.src","preCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"f8965ca1a13bc3da387d18086331e0618586b381","commitMessage":"@@@Merge pull request #1058 from zhangzheng88/origin.master\n\n????????????????info?????????","date":"2018-04-12 23:31:51","modifiedFileCount":"2","status":"M","submitter":"Jason Song"},{"authorTime":"2018-09-03 22:44:41","codes":[{"authorDate":"2018-09-03 22:44:41","commitOrder":3,"curCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(beanFactory, key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-09-03 22:44:41","endLine":92,"groupId":"10460","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"processField","params":"(Objectbean@StringbeanName@Fieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/79/31faf64fc673f6bc04b7466635b3a395b6292d.src","preCode":"  protected void processField(Object bean, String beanName, Field field) {\n    \r\n    Value value = field.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, field, false);\n      springValueRegistry.register(key, springValue);\n      logger.debug(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-09-03 22:44:41","commitOrder":3,"curCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(beanFactory, key, springValue);\n      logger.info(\"Monitoring {}\", springValue);\n    }\n  }\n","date":"2018-09-03 22:44:41","endLine":122,"groupId":"10460","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"processMethod","params":"(Objectbean@StringbeanName@Methodmethod)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/79/31faf64fc673f6bc04b7466635b3a395b6292d.src","preCode":"  protected void processMethod(Object bean, String beanName, Method method) {\n    \r\n    Value value = method.getAnnotation(Value.class);\n    if (value == null) {\n      return;\n    }\n    \r\n    if (method.getAnnotation(Bean.class) != null) {\n      return;\n    }\n    if (method.getParameterTypes().length != 1) {\n      logger.error(\"Ignore @Value setter {}.{}, expecting 1 parameter, actual {} parameters\",\n          bean.getClass().getName(), method.getName(), method.getParameterTypes().length);\n      return;\n    }\n\n    Set<String> keys = placeholderHelper.extractPlaceholderKeys(value.value());\n\n    if (keys.isEmpty()) {\n      return;\n    }\n\n    for (String key : keys) {\n      SpringValue springValue = new SpringValue(key, value.value(), bean, beanName, method, false);\n      springValueRegistry.register(key, springValue);\n      logger.info(\"Monitoring {}\", springValue);\n    }\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"cec2af3dd74cc6b01959f4e496fcce6fceef03a3","commitMessage":"@@@Merge pull request #1436 from nobodyiam/fix-multiple-contexts\n\nsupport multiple spring contexts","date":"2018-09-03 22:44:41","modifiedFileCount":"8","status":"M","submitter":"Jason Song"}]
