[{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n  }\n","date":"2016-05-19 17:58:23","endLine":67,"groupId":"1629","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a8/8f15220b567b5d103696e95eba49e6af290e92.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    fallbackRepo = mock(ConfigRepository.class);\n    when(fallbackRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","date":"2016-05-19 17:58:23","endLine":58,"groupId":"588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a3/3094d63e9fd83205e929239b716a7378d45e31.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    fallbackRepo = mock(ConfigRepository.class);\n    when(fallbackRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"0b3ace803cac96eb293336fd429738c5b92f845d","commitMessage":"@@@Merge pull request #209 from lepdou/rename\n\nRename","date":"2016-05-19 17:58:23","modifiedFileCount":"1","status":"B","submitter":"Jason Song"},{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","date":"2016-07-20 15:44:22","endLine":72,"groupId":"1629","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2016-05-19 17:58:23","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    fallbackRepo = mock(ConfigRepository.class);\n    when(fallbackRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","date":"2016-05-19 17:58:23","endLine":58,"groupId":"588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a3/3094d63e9fd83205e929239b716a7378d45e31.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    fallbackRepo = mock(ConfigRepository.class);\n    when(fallbackRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"M","submitter":"??"},{"authorTime":"2016-07-28 16:27:56","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","date":"2016-07-20 15:44:22","endLine":72,"groupId":"1629","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2016-07-28 16:27:56","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","date":"2016-07-28 16:27:56","endLine":58,"groupId":"588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/02/f2903d8c3f19f67cbb89668818df1603ed72ce.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    fallbackRepo = mock(ConfigRepository.class);\n    when(fallbackRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"5207858e66c798ab6b7becad719d7f744f423c8b","commitMessage":"@@@Merge pull request #355 from nobodyiam/client-refactor\n\nClient refactor","date":"2016-07-28 16:27:56","modifiedFileCount":"4","status":"M","submitter":"??"},{"authorTime":"2017-01-24 17:20:46","codes":[{"authorDate":"2017-01-24 17:20:46","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    super.tearDown();\r\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","date":"2017-01-24 17:20:46","endLine":73,"groupId":"1629","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/79/7d213bec0d17a0aa586e64eec982d64d81f1e6.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2017-01-24 17:20:46","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    super.tearDown();\r\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","date":"2017-01-24 17:20:46","endLine":59,"groupId":"588","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/89/2d5380d8a2194570edef0a06fe3b330cf3e043.src","preCode":"  public void setUp() throws Exception {\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"58351732b3b51e692a1dfeab9d177fc03e3465ce","commitMessage":"@@@Merge pull request #531 from nobodyiam/optimize-client-parse\n\nOptimize client parse performance","date":"2017-01-24 17:20:46","modifiedFileCount":"18","status":"M","submitter":"??"},{"authorTime":"2017-04-26 11:32:55","codes":[{"authorDate":"2017-04-26 11:32:55","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    String someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(HttpUtil.class, new MockHttpUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","date":"2017-04-26 11:32:55","endLine":80,"groupId":"762","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/81/937a93cf21d56466315a8c1a338d2a5745bf0a.src","preCode":"  public void setUp() throws Exception {\n    super.tearDown();\r\n    super.setUp();\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n    defineComponent(ConfigServiceLocator.class, MockConfigServiceLocator.class);\n    defineComponent(HttpUtil.class, MockHttpUtil.class);\n\n    remoteConfigLongPollService = lookup(RemoteConfigLongPollService.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2017-04-26 11:32:55","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2017-04-26 11:32:55","endLine":57,"groupId":"588","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ee/f3ee2c2e9a8d9e127129b9b41f7b6f10fa7ead.src","preCode":"  public void setUp() throws Exception {\n    super.tearDown();\r\n    super.setUp();\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    defineComponent(ConfigUtil.class, MockConfigUtil.class);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"bc0e48466c4ab97a251d616fe1093f755505fb63","commitMessage":"@@@Merge pull request #599 from nobodyiam/use-guice-as-client-ioc\n\nuse guice as apollo-client ioc mechanism","date":"2017-04-26 11:32:55","modifiedFileCount":"53","status":"M","submitter":"??"},{"authorTime":"2017-04-26 11:32:55","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","date":"2017-08-27 23:57:50","endLine":90,"groupId":"588","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1c/42d8837ae2498556909f715c6eec193a43cbf2.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    String someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(HttpUtil.class, new MockHttpUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2017-04-26 11:32:55","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2017-04-26 11:32:55","endLine":57,"groupId":"588","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ee/f3ee2c2e9a8d9e127129b9b41f7b6f10fa7ead.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"M","submitter":"??"},{"authorTime":"2018-09-16 11:00:16","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","date":"2017-08-27 23:57:50","endLine":90,"groupId":"588","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1c/42d8837ae2498556909f715c6eec193a43cbf2.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2018-09-16 11:00:16","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2018-09-16 11:00:16","endLine":61,"groupId":"588","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d5/b609b10b0238f56c4790d0737f114d07ef2a23.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"9e3aec542eeed1cec46c5930657582a8669c7492","commitMessage":"@@@Merge pull request #1470 from nobodyiam/config-source\n\nadd getSourceType api","date":"2018-09-16 11:00:16","modifiedFileCount":"15","status":"M","submitter":"Jason Song"},{"authorTime":"2018-09-16 11:00:16","codes":[{"authorDate":"2019-12-30 15:20:26","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2020-01-01 20:05:48","endLine":97,"groupId":"588","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0f/a0c1e375a300e2ba3ad2408b249df6ce90ad0f.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-09-16 11:00:16","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2018-09-16 11:00:16","endLine":61,"groupId":"588","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d5/b609b10b0238f56c4790d0737f114d07ef2a23.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"32aac0bd066a0f9a38253646ad2a195ca7d2ff35","commitMessage":"@@@Add apollo-client Authentication function\n\n\n","date":"2020-01-01 20:05:48","modifiedFileCount":"16","status":"M","submitter":"nisiyong"},{"authorTime":"2020-01-21 09:08:45","codes":[{"authorDate":"2020-01-21 09:08:45","commitOrder":9,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    System.setProperty(PropertiesFactory.APOLLO_PROPERTY_ORDER_ENABLE, \"true\");\n    PropertiesFactory propertiesFactory = new DefaultPropertiesFactory();\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2020-01-21 09:08:45","endLine":107,"groupId":"588","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ee/1fb018458b6d17d24101a37f9159db68828a5b.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-01-21 09:08:45","commitOrder":9,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n    MockInjector.setInstance(PropertiesFactory.class, new DefaultPropertiesFactory());\n\n  }\n","date":"2020-01-21 09:08:45","endLine":74,"groupId":"588","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5f/6f98112456a08f5677c32e1267953bd838df86.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"82790e5f4a38ed4c2534545686b641f224f0887a","commitMessage":"@@@Add OrderedProperties to keep the property order in apollo-client\n\n","date":"2020-01-21 09:08:45","modifiedFileCount":"22","status":"M","submitter":"songdragon"},{"authorTime":"2020-01-21 08:22:12","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":10,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2020-01-21 20:16:07","endLine":111,"groupId":"588","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/94/e9e4bea9e4e2457134334077aeec47f3c5ee62.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    System.setProperty(PropertiesFactory.APOLLO_PROPERTY_ORDER_ENABLE, \"true\");\n    PropertiesFactory propertiesFactory = new DefaultPropertiesFactory();\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-01-21 08:22:12","commitOrder":10,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","date":"2020-01-21 20:16:07","endLine":72,"groupId":"588","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ef/ae37176bebd1751637ade13dc3410703d64705.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n    MockInjector.setInstance(PropertiesFactory.class, new DefaultPropertiesFactory());\n\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"5fe54966f5f50e5f5e1c3b2e0f0d82b1d92f014d","commitMessage":"@@@use linked hash map to keep server side config order and do some refactoring to apollo-client\n","date":"2020-01-21 20:16:07","modifiedFileCount":"18","status":"M","submitter":"Jason Song"},{"authorTime":"2020-06-21 12:42:33","codes":[{"authorDate":"2020-06-21 12:42:33","commitOrder":11,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2020-06-21 14:13:02","endLine":112,"groupId":"588","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/da/f0ccaca593329d0af36fe0ddd3a7618c199c97.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-06-21 12:42:33","commitOrder":11,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","date":"2020-06-21 14:13:02","endLine":71,"groupId":"588","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/c879d90efd5fb0e3ec33df668bc067b018c373.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"4c2c12b7c8c209b3f12eda7b9f3b7d659523a901","commitMessage":"@@@reset mock inject in tear down phase to make sure the context is clean\n","date":"2020-06-21 14:13:02","modifiedFileCount":"17","status":"M","submitter":"Jason Song"},{"authorTime":"2020-06-21 12:42:33","codes":[{"authorDate":"2021-03-16 08:20:13","commitOrder":12,"curCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpClient = spy(new MockHttpClient());\n    MockInjector.setInstance(HttpClient.class, httpClient);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2021-03-16 08:20:13","endLine":113,"groupId":"10217","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/46cb4c8710a040e2e38d76872b4170a6fdc4c0.src","preCode":"  public void setUp() throws Exception {\n    someNamespace = \"someName\";\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);\n\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n\n    someServerUrl = \"http://someServer\";\n\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    httpUtil = spy(new MockHttpUtil());\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    MockInjector.setInstance(RemoteConfigLongPollService.class, remoteConfigLongPollService);\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-06-21 12:42:33","commitOrder":12,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","date":"2020-06-21 14:13:02","endLine":71,"groupId":"10217","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/c879d90efd5fb0e3ec33df668bc067b018c373.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"9f3d315e7e115220f6bbb836a1a8cfb4f4619d2f","commitMessage":"@@@replace http client implementation with interface (#3594)\n\n","date":"2021-03-16 08:20:13","modifiedFileCount":"7","status":"M","submitter":"vdisk-group"}]
