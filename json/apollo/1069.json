[{"authorTime":"2019-10-02 13:56:23","codes":[{"authorDate":"2018-09-24 15:19:33","commitOrder":2,"curCode":"  public OpenAppNamespaceDTO createAppNamespace(OpenAppNamespaceDTO appNamespaceDTO) {\n    checkNotEmpty(appNamespaceDTO.getAppId(), \"App id\");\n    checkNotEmpty(appNamespaceDTO.getName(), \"Name\");\n    checkNotEmpty(appNamespaceDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    if (Strings.isNullOrEmpty(appNamespaceDTO.getFormat())) {\n      appNamespaceDTO.setFormat(ConfigFileFormat.Properties.getValue());\n    }\n\n    String path = String.format(\"apps/%s/appnamespaces\", escapePath(appNamespaceDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, appNamespaceDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenAppNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create app namespace: %s for appId: %s, format: %s failed\", appNamespaceDTO.getName(),\n              appNamespaceDTO.getAppId(), appNamespaceDTO.getFormat()), ex);\n    }\n  }\n","date":"2018-09-24 15:19:33","endLine":85,"groupId":"190","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createAppNamespace","params":"(OpenAppNamespaceDTOappNamespaceDTO)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/15/fa8f64dfd5a7aa8b6c6f45e814bcb305ab1c49.src","preCode":"  public OpenAppNamespaceDTO createAppNamespace(OpenAppNamespaceDTO appNamespaceDTO) {\n    checkNotEmpty(appNamespaceDTO.getAppId(), \"App id\");\n    checkNotEmpty(appNamespaceDTO.getName(), \"Name\");\n    checkNotEmpty(appNamespaceDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    if (Strings.isNullOrEmpty(appNamespaceDTO.getFormat())) {\n      appNamespaceDTO.setFormat(ConfigFileFormat.Properties.getValue());\n    }\n\n    String path = String.format(\"apps/%s/appnamespaces\", escapePath(appNamespaceDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, appNamespaceDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenAppNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create app namespace: %s for appId: %s, format: %s failed\", appNamespaceDTO.getName(),\n              appNamespaceDTO.getAppId(), appNamespaceDTO.getFormat()), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/NamespaceOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"},{"authorDate":"2019-10-02 13:56:23","commitOrder":2,"curCode":"  public OpenClusterDTO createCluster(String env, OpenClusterDTO openClusterDTO) {\n    checkNotEmpty(openClusterDTO.getAppId(), \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(openClusterDTO.getName(), \"Cluster name\");\n    checkNotEmpty(openClusterDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters\", escapePath(env), escapePath(openClusterDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, openClusterDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenClusterDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create cluster: %s for appId: %s in env: %s failed\", openClusterDTO.getName(),\n              openClusterDTO.getAppId(), env), ex);\n    }\n  }\n","date":"2019-10-02 13:56:23","endLine":46,"groupId":"103","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"(Stringenv@OpenClusterDTOopenClusterDTO)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/67/62bc31b4a2198afd3dda8c8214b64201a95e36.src","preCode":"  public OpenClusterDTO createCluster(String env, OpenClusterDTO openClusterDTO) {\n    checkNotEmpty(openClusterDTO.getAppId(), \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(openClusterDTO.getName(), \"Cluster name\");\n    checkNotEmpty(openClusterDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters\", escapePath(env), escapePath(openClusterDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, openClusterDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenClusterDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create cluster: %s for appId: %s in env: %s failed\", openClusterDTO.getName(),\n              openClusterDTO.getAppId(), env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ClusterOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"}],"commitId":"40c5e47878f2c2777fda94d33031d0fb9dcf4c42","commitMessage":"@@@add cluster related and rollback release open api (#2631)\n\n* add cluster open api client\n* add toString for open api dtos\n* add rollback release open api\n","date":"2019-10-02 13:56:23","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2021-09-14 20:40:08","codes":[{"authorDate":"2021-09-14 20:40:08","commitOrder":3,"curCode":"  public OpenAppNamespaceDTO createAppNamespace(OpenAppNamespaceDTO appNamespaceDTO) {\n    checkNotEmpty(appNamespaceDTO.getAppId(), \"App id\");\n    checkNotEmpty(appNamespaceDTO.getName(), \"Name\");\n    checkNotEmpty(appNamespaceDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    if (Strings.isNullOrEmpty(appNamespaceDTO.getFormat())) {\n      appNamespaceDTO.setFormat(ConfigFileFormat.Properties.getValue());\n    }\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .appsPathVal(appNamespaceDTO.getAppId())\n        .customResource(\"appnamespaces\");\n\n    try (CloseableHttpResponse response = post(pathBuilder, appNamespaceDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenAppNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create app namespace: %s for appId: %s, format: %s failed\", appNamespaceDTO.getName(),\n              appNamespaceDTO.getAppId(), appNamespaceDTO.getFormat()), ex);\n    }\n  }\n","date":"2021-09-14 20:40:08","endLine":110,"groupId":"1069","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createAppNamespace","params":"(OpenAppNamespaceDTOappNamespaceDTO)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e5/d8145d8936cc99fe3382efabed62dbde0cf240.src","preCode":"  public OpenAppNamespaceDTO createAppNamespace(OpenAppNamespaceDTO appNamespaceDTO) {\n    checkNotEmpty(appNamespaceDTO.getAppId(), \"App id\");\n    checkNotEmpty(appNamespaceDTO.getName(), \"Name\");\n    checkNotEmpty(appNamespaceDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    if (Strings.isNullOrEmpty(appNamespaceDTO.getFormat())) {\n      appNamespaceDTO.setFormat(ConfigFileFormat.Properties.getValue());\n    }\n\n    String path = String.format(\"apps/%s/appnamespaces\", escapePath(appNamespaceDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, appNamespaceDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenAppNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create app namespace: %s for appId: %s, format: %s failed\", appNamespaceDTO.getName(),\n              appNamespaceDTO.getAppId(), appNamespaceDTO.getFormat()), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/NamespaceOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-09-14 20:40:08","commitOrder":3,"curCode":"  public OpenClusterDTO createCluster(String env, OpenClusterDTO openClusterDTO) {\n    checkNotEmpty(openClusterDTO.getAppId(), \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(openClusterDTO.getName(), \"Cluster name\");\n    checkNotEmpty(openClusterDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .envsPathVal(env)\n        .appsPathVal(openClusterDTO.getAppId())\n        .customResource(\"clusters\");\n\n    try (CloseableHttpResponse response = post(pathBuilder, openClusterDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenClusterDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create cluster: %s for appId: %s in env: %s failed\", openClusterDTO.getName(),\n              openClusterDTO.getAppId(), env), ex);\n    }\n  }\n","date":"2021-09-14 20:40:08","endLine":73,"groupId":"1069","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"(Stringenv@OpenClusterDTOopenClusterDTO)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/9c/4cce585af3b5ede8c11657326b45b8b8f0c2ad.src","preCode":"  public OpenClusterDTO createCluster(String env, OpenClusterDTO openClusterDTO) {\n    checkNotEmpty(openClusterDTO.getAppId(), \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(openClusterDTO.getName(), \"Cluster name\");\n    checkNotEmpty(openClusterDTO.getDataChangeCreatedBy(), \"Created by\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters\", escapePath(env), escapePath(openClusterDTO.getAppId()));\n\n    try (CloseableHttpResponse response = post(path, openClusterDTO)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenClusterDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Create cluster: %s for appId: %s in env: %s failed\", openClusterDTO.getName(),\n              openClusterDTO.getAppId(), env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ClusterOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"d5931784dcdf1c414183bc816010a209463ec287","commitMessage":"@@@fix: replace String.format() with newly created class OpenApiPathBuilder (#3982)\n\nSigned-off-by: WillardHu <wei.hu@daocloud.io>\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-09-14 20:40:08","modifiedFileCount":"7","status":"M","submitter":"Willard"}]
