[{"authorTime":"2019-06-07 13:36:47","codes":[{"authorDate":"2019-06-07 13:36:47","commitOrder":1,"curCode":"  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n\n    processSpringValueDefinition(registry);\n  }\n","date":"2019-06-07 13:36:47","endLine":33,"groupId":"1207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postProcessBeanDefinitionRegistry","params":"(BeanDefinitionRegistryregistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5e/95c99e8806bd76456398f1ba00c98667aafbde.src","preCode":"  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n\n    processSpringValueDefinition(registry);\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/spi/DefaultConfigPropertySourcesProcessorHelper.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":18,"status":"B"},{"authorDate":"2019-06-07 13:36:47","commitOrder":1,"curCode":"  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n    AnnotationAttributes attributes = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(EnableApolloConfig.class.getName()));\n    String[] namespaces = attributes.getStringArray(\"value\");\n    int order = attributes.getNumber(\"order\");\n    PropertySourcesProcessor.addNamespaces(Lists.newArrayList(namespaces), order);\n\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesProcessor.class.getName(),\n        PropertySourcesProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueDefinitionProcessor.class.getName(),\n        SpringValueDefinitionProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n  }\n","date":"2019-06-07 13:36:47","endLine":45,"groupId":"1207","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerBeanDefinitions","params":"(AnnotationMetadataimportingClassMetadata@BeanDefinitionRegistryregistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e2/5f4a88caf61734b6e7a9c3fbda28f0b6beccf8.src","preCode":"  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n    AnnotationAttributes attributes = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(EnableApolloConfig.class.getName()));\n    String[] namespaces = attributes.getStringArray(\"value\");\n    int order = attributes.getNumber(\"order\");\n    PropertySourcesProcessor.addNamespaces(Lists.newArrayList(namespaces), order);\n\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesProcessor.class.getName(),\n        PropertySourcesProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueDefinitionProcessor.class.getName(),\n        SpringValueDefinitionProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/spi/DefaultApolloConfigRegistrarHelper.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"}],"commitId":"044613025713d2fccfe099d2e2ee9130edf23056","commitMessage":"@@@client's SPI for customizing spring processors' loading (#2313)\n\n","date":"2019-06-07 13:36:47","modifiedFileCount":"4","status":"B","submitter":"liuchunlei"},{"authorTime":"2020-11-22 19:31:51","codes":[{"authorDate":"2020-11-22 19:31:51","commitOrder":2,"curCode":"  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n\n    processSpringValueDefinition(registry);\n  }\n","date":"2020-11-22 19:31:51","endLine":30,"groupId":"10462","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postProcessBeanDefinitionRegistry","params":"(BeanDefinitionRegistryregistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d4/d0ff3ea0542de355144e533f7ba7231ec59ad2.src","preCode":"  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n\n    processSpringValueDefinition(registry);\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/spi/DefaultConfigPropertySourcesProcessorHelper.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":17,"status":"M"},{"authorDate":"2020-11-22 19:31:51","commitOrder":2,"curCode":"  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n    AnnotationAttributes attributes = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(EnableApolloConfig.class.getName()));\n    final String[] namespaces = attributes.getStringArray(\"value\");\n    final int order = attributes.getNumber(\"order\");\n    final String[] resolvedNamespaces = this.resolveNamespaces(namespaces);\n    PropertySourcesProcessor.addNamespaces(Lists.newArrayList(resolvedNamespaces), order);\n\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesProcessor.class.getName(),\n        PropertySourcesProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueDefinitionProcessor.class.getName(),\n        SpringValueDefinitionProcessor.class);\n  }\n","date":"2020-11-22 19:31:51","endLine":46,"groupId":"10462","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerBeanDefinitions","params":"(AnnotationMetadataimportingClassMetadata@BeanDefinitionRegistryregistry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/36/92b1e7ab7eb4d230092e1d1ff5ab53a4dd700a.src","preCode":"  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n    AnnotationAttributes attributes = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(EnableApolloConfig.class.getName()));\n    String[] namespaces = attributes.getStringArray(\"value\");\n    int order = attributes.getNumber(\"order\");\n    PropertySourcesProcessor.addNamespaces(Lists.newArrayList(namespaces), order);\n\n    Map<String, Object> propertySourcesPlaceholderPropertyValues = new HashMap<>();\n    \r\n    propertySourcesPlaceholderPropertyValues.put(\"order\", 0);\n\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesPlaceholderConfigurer.class.getName(),\n        PropertySourcesPlaceholderConfigurer.class, propertySourcesPlaceholderPropertyValues);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, PropertySourcesProcessor.class.getName(),\n        PropertySourcesProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloAnnotationProcessor.class.getName(),\n        ApolloAnnotationProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueProcessor.class.getName(),\n        SpringValueProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, SpringValueDefinitionProcessor.class.getName(),\n        SpringValueDefinitionProcessor.class);\n    BeanRegistrationUtil.registerBeanDefinitionIfNotExists(registry, ApolloJsonValueProcessor.class.getName(),\n        ApolloJsonValueProcessor.class);\n  }\n","realPath":"apollo-client/src/main/java/com/ctrip/framework/apollo/spring/spi/DefaultApolloConfigRegistrarHelper.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"M"}],"commitId":"6ce0932082f89fa94637917f147682254b32db82","commitMessage":"@@@support configuring namespaces as placeholders\n\n","date":"2020-11-22 19:31:51","modifiedFileCount":"12","status":"M","submitter":"wxq"}]
