[{"authorTime":"2018-02-24 19:06:36","codes":[{"authorDate":"2018-04-07 21:43:37","commitOrder":3,"curCode":"  public void testApolloConfigChangeListenerWithInheritance() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloChildConfigChangeListener bean = getBean(TestApolloChildConfigChangeListener.class, AppConfig7.class);\n\n    \r\n    assertEquals(5, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n  }\n","date":"2018-04-07 21:43:37","endLine":201,"groupId":"1738","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApolloConfigChangeListenerWithInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c2/78eb92edc4a33ab51ca57e6cbc45daa4e39ecb.src","preCode":"  public void testApolloConfigChangeListenerWithInheritance() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloChildConfigChangeListener bean = getBean(TestApolloChildConfigChangeListener.class, AppConfig7.class);\n\n    \r\n    assertEquals(5, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/spring/JavaConfigAnnotationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2018-02-24 19:06:36","commitOrder":3,"curCode":"  public void testApolloConfigChangeListener() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloConfigChangeListenerBean1 bean = getBean(\"spring/XmlConfigAnnotationTest3.xml\",\n        TestApolloConfigChangeListenerBean1.class);\n\n    \r\n    assertEquals(4, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n  }\n","date":"2018-02-24 19:06:36","endLine":108,"groupId":"1662","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApolloConfigChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a5/8c0a8de35615d9d8712c34eeb07465424bfa77.src","preCode":"  public void testApolloConfigChangeListener() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloConfigChangeListenerBean1 bean = getBean(\"spring/XmlConfigAnnotationTest3.xml\",\n        TestApolloConfigChangeListenerBean1.class);\n\n    \r\n    assertEquals(4, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/spring/XMLConfigAnnotationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"NB"}],"commitId":"aa9ed39cd42344c3d9317d8c8dcad043f5dec6c5","commitMessage":"@@@Merge pull request #1039 from nobodyiam/config-injection-inheritance\n\nadd config injection with inheritance test","date":"2018-04-07 21:43:37","modifiedFileCount":"1","status":"M","submitter":"Jason Song"},{"authorTime":"2018-02-24 19:06:36","codes":[{"authorDate":"2020-11-22 19:31:51","commitOrder":4,"curCode":"  public void testApolloConfigChangeListenerWithInheritance() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer<Object>() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer<Object>() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloChildConfigChangeListener bean = getBean(TestApolloChildConfigChangeListener.class, AppConfig7.class);\n\n    \r\n    assertEquals(5, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n  }\n","date":"2020-11-22 19:31:51","endLine":304,"groupId":"10365","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApolloConfigChangeListenerWithInheritance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d8/3e2cb12fe8e82495f964c2a24519e40894affb.src","preCode":"  public void testApolloConfigChangeListenerWithInheritance() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloChildConfigChangeListener bean = getBean(TestApolloChildConfigChangeListener.class, AppConfig7.class);\n\n    \r\n    assertEquals(5, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n    assertEquals(someEvent, bean.getSomeChangeEvent());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/spring/JavaConfigAnnotationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2018-02-24 19:06:36","commitOrder":4,"curCode":"  public void testApolloConfigChangeListener() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloConfigChangeListenerBean1 bean = getBean(\"spring/XmlConfigAnnotationTest3.xml\",\n        TestApolloConfigChangeListenerBean1.class);\n\n    \r\n    assertEquals(4, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n  }\n","date":"2018-02-24 19:06:36","endLine":108,"groupId":"10365","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApolloConfigChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a5/8c0a8de35615d9d8712c34eeb07465424bfa77.src","preCode":"  public void testApolloConfigChangeListener() throws Exception {\n    Config applicationConfig = mock(Config.class);\n    Config fxApolloConfig = mock(Config.class);\n\n    mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);\n    mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);\n\n    final List<ConfigChangeListener> applicationListeners = Lists.newArrayList();\n    final List<ConfigChangeListener> fxApolloListeners = Lists.newArrayList();\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        applicationListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(applicationConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    doAnswer(new Answer() {\n      @Override\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        fxApolloListeners.add(invocation.getArgumentAt(0, ConfigChangeListener.class));\n\n        return Void.class;\n      }\n    }).when(fxApolloConfig).addChangeListener(any(ConfigChangeListener.class));\n\n    ConfigChangeEvent someEvent = mock(ConfigChangeEvent.class);\n    ConfigChangeEvent anotherEvent = mock(ConfigChangeEvent.class);\n\n    TestApolloConfigChangeListenerBean1 bean = getBean(\"spring/XmlConfigAnnotationTest3.xml\",\n        TestApolloConfigChangeListenerBean1.class);\n\n    \r\n    assertEquals(4, applicationListeners.size());\n    assertEquals(1, fxApolloListeners.size());\n\n    for (ConfigChangeListener listener : applicationListeners) {\n      listener.onChange(someEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(someEvent, bean.getChangeEvent3());\n\n    for (ConfigChangeListener listener : fxApolloListeners) {\n      listener.onChange(anotherEvent);\n    }\n\n    assertEquals(someEvent, bean.getChangeEvent1());\n    assertEquals(someEvent, bean.getChangeEvent2());\n    assertEquals(anotherEvent, bean.getChangeEvent3());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/spring/XMLConfigAnnotationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"6ce0932082f89fa94637917f147682254b32db82","commitMessage":"@@@support configuring namespaces as placeholders\n\n","date":"2020-11-22 19:31:51","modifiedFileCount":"12","status":"M","submitter":"wxq"}]
