[{"authorTime":"2016-10-19 11:03:53","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":3,"curCode":"  public List<ReleaseDTO> findReleaseByIds(@RequestParam(\"releaseIds\") String releaseIds){\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    return BeanUtils.batchTransform(ReleaseDTO.class, releases);\n  }\n","date":"2016-11-22 15:47:36","endLine":67,"groupId":"1456","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findReleaseByIds","params":"(@RequestParam(\"releaseIds\")StringreleaseIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6e/14a768b8702b49ad338d529dff9956392727c5.src","preCode":"  public List<ReleaseDTO> findReleaseByIds(@RequestParam(\"releaseIds\") String releaseIds){\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    return BeanUtils.batchTransform(ReleaseDTO.class, releases);\n  }\n","realPath":"apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2016-10-19 11:03:53","commitOrder":3,"curCode":"  public List<InstanceDTO> getByReleasesNotIn(@RequestParam(\"appId\") String appId,\n                                              @RequestParam(\"clusterName\") String clusterName,\n                                              @RequestParam(\"namespaceName\") String namespaceName,\n                                              @RequestParam(\"releaseIds\") String releaseIds) {\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    if (CollectionUtils.isEmpty(releases)) {\n      throw new NotFoundException(String.format(\"releases not found for %s\", releaseIds));\n    }\n\n    Set<String> releaseKeys = releases.stream().map(Release::getReleaseKey).collect(Collectors\n        .toSet());\n\n    List<InstanceConfig> instanceConfigs = instanceService\n        .findInstanceConfigsByNamespaceWithReleaseKeysNotIn(appId, clusterName, namespaceName,\n            releaseKeys);\n\n    Multimap<Long, InstanceConfig> instanceConfigMap = HashMultimap.create();\n    Set<String> otherReleaseKeys = Sets.newHashSet();\n\n    for (InstanceConfig instanceConfig : instanceConfigs) {\n      instanceConfigMap.put(instanceConfig.getInstanceId(), instanceConfig);\n      otherReleaseKeys.add(instanceConfig.getReleaseKey());\n    }\n\n    List<Instance> instances = instanceService.findInstancesByIds(instanceConfigMap.keySet());\n\n    if (CollectionUtils.isEmpty(instances)) {\n      return Collections.emptyList();\n    }\n\n    List<InstanceDTO> instanceDTOs = BeanUtils.batchTransform(InstanceDTO.class, instances);\n\n    List<Release> otherReleases = releaseService.findByReleaseKeys(otherReleaseKeys);\n    Map<String, ReleaseDTO> releaseMap = Maps.newHashMap();\n\n    for (Release release : otherReleases) {\n      \r\n      release.setConfigurations(null);\n      ReleaseDTO releaseDTO = BeanUtils.transfrom(ReleaseDTO.class, release);\n      releaseMap.put(release.getReleaseKey(), releaseDTO);\n    }\n\n    for (InstanceDTO instanceDTO : instanceDTOs) {\n      Collection<InstanceConfig> configs = instanceConfigMap.get(instanceDTO.getId());\n      List<InstanceConfigDTO> configDTOs = configs.stream().map(instanceConfig -> {\n        InstanceConfigDTO instanceConfigDTO = new InstanceConfigDTO();\n        instanceConfigDTO.setRelease(releaseMap.get(instanceConfig.getReleaseKey()));\n        instanceConfigDTO.setReleaseDeliveryTime(instanceConfig.getReleaseDeliveryTime());\n        instanceConfigDTO.setDataChangeLastModifiedTime(instanceConfig\n            .getDataChangeLastModifiedTime());\n        return instanceConfigDTO;\n      }).collect(Collectors.toList());\n      instanceDTO.setConfigs(configDTOs);\n    }\n\n    return instanceDTOs;\n  }\n","date":"2016-10-19 11:03:53","endLine":159,"groupId":"564","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getByReleasesNotIn","params":"(@RequestParam(\"appId\")StringappId@@RequestParam(\"clusterName\")StringclusterName@@RequestParam(\"namespaceName\")StringnamespaceName@@RequestParam(\"releaseIds\")StringreleaseIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e2/39196a535c51fe2b23caa6bb309ee96d4f16cc.src","preCode":"  public List<InstanceDTO> getByReleasesNotIn(@RequestParam(\"appId\") String appId,\n                                              @RequestParam(\"clusterName\") String clusterName,\n                                              @RequestParam(\"namespaceName\") String namespaceName,\n                                              @RequestParam(\"releaseIds\") String releaseIds) {\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    if (CollectionUtils.isEmpty(releases)) {\n      throw new NotFoundException(String.format(\"releases not found for %s\", releaseIds));\n    }\n\n    Set<String> releaseKeys = releases.stream().map(Release::getReleaseKey).collect(Collectors\n        .toSet());\n\n    List<InstanceConfig> instanceConfigs = instanceService\n        .findInstanceConfigsByNamespaceWithReleaseKeysNotIn(appId, clusterName, namespaceName,\n            releaseKeys);\n\n    Multimap<Long, InstanceConfig> instanceConfigMap = HashMultimap.create();\n    Set<String> otherReleaseKeys = Sets.newHashSet();\n\n    for (InstanceConfig instanceConfig : instanceConfigs) {\n      instanceConfigMap.put(instanceConfig.getInstanceId(), instanceConfig);\n      otherReleaseKeys.add(instanceConfig.getReleaseKey());\n    }\n\n    List<Instance> instances = instanceService.findInstancesByIds(instanceConfigMap.keySet());\n\n    if (CollectionUtils.isEmpty(instances)) {\n      return Collections.emptyList();\n    }\n\n    List<InstanceDTO> instanceDTOs = BeanUtils.batchTransform(InstanceDTO.class, instances);\n\n    List<Release> otherReleases = releaseService.findByReleaseKeys(otherReleaseKeys);\n    Map<String, ReleaseDTO> releaseMap = Maps.newHashMap();\n\n    for (Release release : otherReleases) {\n      \r\n      release.setConfigurations(null);\n      ReleaseDTO releaseDTO = BeanUtils.transfrom(ReleaseDTO.class, release);\n      releaseMap.put(release.getReleaseKey(), releaseDTO);\n    }\n\n    for (InstanceDTO instanceDTO : instanceDTOs) {\n      Collection<InstanceConfig> configs = instanceConfigMap.get(instanceDTO.getId());\n      List<InstanceConfigDTO> configDTOs = configs.stream().map(instanceConfig -> {\n        InstanceConfigDTO instanceConfigDTO = new InstanceConfigDTO();\n        instanceConfigDTO.setRelease(releaseMap.get(instanceConfig.getReleaseKey()));\n        instanceConfigDTO.setReleaseDeliveryTime(instanceConfig.getReleaseDeliveryTime());\n        instanceConfigDTO.setDataChangeLastModifiedTime(instanceConfig\n            .getDataChangeLastModifiedTime());\n        return instanceConfigDTO;\n      }).collect(Collectors.toList());\n      instanceDTO.setConfigs(configDTOs);\n    }\n\n    return instanceDTOs;\n  }\n","realPath":"apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/InstanceConfigController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"}],"commitId":"6d7ebbe8491f5a920f20f84867e9114c3fbd17ae","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !32","date":"2016-11-22 15:47:36","modifiedFileCount":"58","status":"M","submitter":"zl??(IT)"},{"authorTime":"2018-12-31 17:45:57","codes":[{"authorDate":"2016-11-22 15:47:36","commitOrder":4,"curCode":"  public List<ReleaseDTO> findReleaseByIds(@RequestParam(\"releaseIds\") String releaseIds){\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    return BeanUtils.batchTransform(ReleaseDTO.class, releases);\n  }\n","date":"2016-11-22 15:47:36","endLine":67,"groupId":"1039","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findReleaseByIds","params":"(@RequestParam(\"releaseIds\")StringreleaseIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6e/14a768b8702b49ad338d529dff9956392727c5.src","preCode":"  public List<ReleaseDTO> findReleaseByIds(@RequestParam(\"releaseIds\") String releaseIds){\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    return BeanUtils.batchTransform(ReleaseDTO.class, releases);\n  }\n","realPath":"apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2018-12-31 17:45:57","commitOrder":4,"curCode":"  public List<InstanceDTO> getByReleasesNotIn(@RequestParam(\"appId\") String appId,\n                                              @RequestParam(\"clusterName\") String clusterName,\n                                              @RequestParam(\"namespaceName\") String namespaceName,\n                                              @RequestParam(\"releaseIds\") String releaseIds) {\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    if (CollectionUtils.isEmpty(releases)) {\n      throw new NotFoundException(String.format(\"releases not found for %s\", releaseIds));\n    }\n\n    Set<String> releaseKeys = releases.stream().map(Release::getReleaseKey).collect(Collectors\n        .toSet());\n\n    List<InstanceConfig> instanceConfigs = instanceService\n        .findInstanceConfigsByNamespaceWithReleaseKeysNotIn(appId, clusterName, namespaceName,\n            releaseKeys);\n\n    Multimap<Long, InstanceConfig> instanceConfigMap = HashMultimap.create();\n    Set<String> otherReleaseKeys = Sets.newHashSet();\n\n    for (InstanceConfig instanceConfig : instanceConfigs) {\n      instanceConfigMap.put(instanceConfig.getInstanceId(), instanceConfig);\n      otherReleaseKeys.add(instanceConfig.getReleaseKey());\n    }\n\n    List<Instance> instances = instanceService.findInstancesByIds(instanceConfigMap.keySet());\n\n    if (CollectionUtils.isEmpty(instances)) {\n      return Collections.emptyList();\n    }\n\n    List<InstanceDTO> instanceDTOs = BeanUtils.batchTransform(InstanceDTO.class, instances);\n\n    List<Release> otherReleases = releaseService.findByReleaseKeys(otherReleaseKeys);\n    Map<String, ReleaseDTO> releaseMap = Maps.newHashMap();\n\n    for (Release release : otherReleases) {\n      \r\n      release.setConfigurations(null);\n      ReleaseDTO releaseDTO = BeanUtils.transform(ReleaseDTO.class, release);\n      releaseMap.put(release.getReleaseKey(), releaseDTO);\n    }\n\n    for (InstanceDTO instanceDTO : instanceDTOs) {\n      Collection<InstanceConfig> configs = instanceConfigMap.get(instanceDTO.getId());\n      List<InstanceConfigDTO> configDTOs = configs.stream().map(instanceConfig -> {\n        InstanceConfigDTO instanceConfigDTO = new InstanceConfigDTO();\n        instanceConfigDTO.setRelease(releaseMap.get(instanceConfig.getReleaseKey()));\n        instanceConfigDTO.setReleaseDeliveryTime(instanceConfig.getReleaseDeliveryTime());\n        instanceConfigDTO.setDataChangeLastModifiedTime(instanceConfig\n            .getDataChangeLastModifiedTime());\n        return instanceConfigDTO;\n      }).collect(Collectors.toList());\n      instanceDTO.setConfigs(configDTOs);\n    }\n\n    return instanceDTOs;\n  }\n","date":"2018-12-31 20:41:48","endLine":160,"groupId":"1039","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getByReleasesNotIn","params":"(@RequestParam(\"appId\")StringappId@@RequestParam(\"clusterName\")StringclusterName@@RequestParam(\"namespaceName\")StringnamespaceName@@RequestParam(\"releaseIds\")StringreleaseIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/49/e3bcc99055a74152c249e6471759b88951139c.src","preCode":"  public List<InstanceDTO> getByReleasesNotIn(@RequestParam(\"appId\") String appId,\n                                              @RequestParam(\"clusterName\") String clusterName,\n                                              @RequestParam(\"namespaceName\") String namespaceName,\n                                              @RequestParam(\"releaseIds\") String releaseIds) {\n    Set<Long> releaseIdSet = RELEASES_SPLITTER.splitToList(releaseIds).stream().map(Long::parseLong)\n        .collect(Collectors.toSet());\n\n    List<Release> releases = releaseService.findByReleaseIds(releaseIdSet);\n\n    if (CollectionUtils.isEmpty(releases)) {\n      throw new NotFoundException(String.format(\"releases not found for %s\", releaseIds));\n    }\n\n    Set<String> releaseKeys = releases.stream().map(Release::getReleaseKey).collect(Collectors\n        .toSet());\n\n    List<InstanceConfig> instanceConfigs = instanceService\n        .findInstanceConfigsByNamespaceWithReleaseKeysNotIn(appId, clusterName, namespaceName,\n            releaseKeys);\n\n    Multimap<Long, InstanceConfig> instanceConfigMap = HashMultimap.create();\n    Set<String> otherReleaseKeys = Sets.newHashSet();\n\n    for (InstanceConfig instanceConfig : instanceConfigs) {\n      instanceConfigMap.put(instanceConfig.getInstanceId(), instanceConfig);\n      otherReleaseKeys.add(instanceConfig.getReleaseKey());\n    }\n\n    List<Instance> instances = instanceService.findInstancesByIds(instanceConfigMap.keySet());\n\n    if (CollectionUtils.isEmpty(instances)) {\n      return Collections.emptyList();\n    }\n\n    List<InstanceDTO> instanceDTOs = BeanUtils.batchTransform(InstanceDTO.class, instances);\n\n    List<Release> otherReleases = releaseService.findByReleaseKeys(otherReleaseKeys);\n    Map<String, ReleaseDTO> releaseMap = Maps.newHashMap();\n\n    for (Release release : otherReleases) {\n      \r\n      release.setConfigurations(null);\n      ReleaseDTO releaseDTO = BeanUtils.transfrom(ReleaseDTO.class, release);\n      releaseMap.put(release.getReleaseKey(), releaseDTO);\n    }\n\n    for (InstanceDTO instanceDTO : instanceDTOs) {\n      Collection<InstanceConfig> configs = instanceConfigMap.get(instanceDTO.getId());\n      List<InstanceConfigDTO> configDTOs = configs.stream().map(instanceConfig -> {\n        InstanceConfigDTO instanceConfigDTO = new InstanceConfigDTO();\n        instanceConfigDTO.setRelease(releaseMap.get(instanceConfig.getReleaseKey()));\n        instanceConfigDTO.setReleaseDeliveryTime(instanceConfig.getReleaseDeliveryTime());\n        instanceConfigDTO.setDataChangeLastModifiedTime(instanceConfig\n            .getDataChangeLastModifiedTime());\n        return instanceConfigDTO;\n      }).collect(Collectors.toList());\n      instanceDTO.setConfigs(configDTOs);\n    }\n\n    return instanceDTOs;\n  }\n","realPath":"apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/InstanceConfigController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"34b912c542e1d2e316da5073931f559447914379","commitMessage":"@@@fix typo\n","date":"2018-12-31 20:41:48","modifiedFileCount":"20","status":"M","submitter":"kezhenxu94"}]
