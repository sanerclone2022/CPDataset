[{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2016-05-19 17:58:23","endLine":74,"groupId":"403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemSetCreated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/74/27e61a0e3e33dbd5251989ab6e7ccdc9f842f1.src","preCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    RestTemplate deletedTemplate = new TestRestTemplate(\"deleted\", \"\");\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2016-05-19 17:58:23","endLine":214,"groupId":"403","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemSetDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/74/27e61a0e3e33dbd5251989ab6e7ccdc9f842f1.src","preCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    RestTemplate deletedTemplate = new TestRestTemplate(\"deleted\", \"\");\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"0b3ace803cac96eb293336fd429738c5b92f845d","commitMessage":"@@@Merge pull request #209 from lepdou/rename\n\nRename","date":"2016-05-19 17:58:23","modifiedFileCount":"1","status":"B","submitter":"Jason Song"},{"authorTime":"2016-06-07 11:48:27","codes":[{"authorDate":"2016-06-07 11:48:27","commitOrder":2,"curCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    itemSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2016-06-07 11:48:27","endLine":75,"groupId":"1360","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemSetCreated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8e/abdfb5eba328247b82627484436b08527f00f7.src","preCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2016-06-07 11:48:27","commitOrder":2,"curCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    createChangeSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n    RestTemplate deletedTemplate = new TestRestTemplate(\"deleted\", \"\");\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2016-06-07 11:48:27","endLine":220,"groupId":"1360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemSetDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8e/abdfb5eba328247b82627484436b08527f00f7.src","preCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    RestTemplate deletedTemplate = new TestRestTemplate(\"deleted\", \"\");\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"266f4d89e932a1a03f0360178995e608572faa76","commitMessage":"@@@Merge pull request #252 from lepdou/remove_user\n\ncreateBy lastUpdateBy ??dto??","date":"2016-06-07 11:48:27","modifiedFileCount":"26","status":"M","submitter":"Jason Song"},{"authorTime":"2017-10-10 10:26:08","codes":[{"authorDate":"2017-10-10 10:26:08","commitOrder":3,"curCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    itemSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2017-10-10 10:26:08","endLine":75,"groupId":"607","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemSetCreated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0b/4b5f3b95e850b46dda872fc47bb90c7f6569c9.src","preCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    itemSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2017-10-10 10:26:08","commitOrder":3,"curCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    createChangeSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n    RestTemplate deletedTemplate = new TestRestTemplate();\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2017-10-10 10:26:08","endLine":220,"groupId":"607","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemSetDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0b/4b5f3b95e850b46dda872fc47bb90c7f6569c9.src","preCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    createChangeSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate(\"created\", \"\");\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n    RestTemplate deletedTemplate = new TestRestTemplate(\"deleted\", \"\");\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"bf496b4fcb13048cde8ed431329916c92433e02d","commitMessage":"@@@Merge pull request #782 from nobodyiam/remove-useless-authentication-codes\n\nremove useless authentication codes","date":"2017-10-10 10:26:08","modifiedFileCount":"8","status":"M","submitter":"??"},{"authorTime":"2018-10-03 20:32:47","codes":[{"authorDate":"2018-10-03 20:32:47","commitOrder":4,"curCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    itemSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2018-10-03 20:32:47","endLine":75,"groupId":"1014","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemSetCreated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/cf/8f67052b92857919c955e9186b31b65df7c72f.src","preCode":"  public void testItemSetCreated() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets itemSet = new ItemChangeSets();\n    itemSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      itemSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response =\n        createdTemplate.postForEntity(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n            itemSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize, items.size());\n    Item item0 = items.get(0);\n    Assert.assertEquals(\"key_0\", item0.getKey());\n    Assert.assertEquals(\"created_value_0\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"},{"authorDate":"2018-10-03 20:32:47","commitOrder":4,"curCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    createChangeSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n    RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","date":"2018-10-03 20:32:47","endLine":220,"groupId":"1014","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemSetDeleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/cf/8f67052b92857919c955e9186b31b65df7c72f.src","preCode":"  public void testItemSetDeleted() {\n    String appId = \"someAppId\";\n    AppDTO app =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n\n    ClusterDTO cluster = restTemplate.getForObject(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n        ClusterDTO.class);\n\n    NamespaceDTO namespace =\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n\n    Assert.assertEquals(\"someAppId\", app.getAppId());\n    Assert.assertEquals(\"default\", cluster.getName());\n    Assert.assertEquals(\"application\", namespace.getNamespaceName());\n\n    ItemChangeSets createChangeSet = new ItemChangeSets();\n    createChangeSet.setDataChangeLastModifiedBy(\"created\");\n    RestTemplate createdTemplate = new TestRestTemplate();\n    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int createdSize = 3;\n    for (int i = 0; i < createdSize; i++) {\n      ItemDTO item = new ItemDTO();\n      item.setNamespaceId(namespace.getId());\n      item.setKey(\"key_\" + i);\n      item.setValue(\"created_value_\" + i);\n      createChangeSet.addCreateItem(item);\n    }\n\n    ResponseEntity<Void> response = createdTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        createChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n\n    ItemDTO[] items =\n        restTemplate.getForObject(\n            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n            ItemDTO[].class);\n\n    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n    deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n    RestTemplate deletedTemplate = new TestRestTemplate();\n    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n    \n    int deletedSize = 1;\n    for (int i = 0; i < deletedSize; i++) {\n      items[i].setValue(\"deleted_value_\" + i);\n      deleteChangeSet.addDeleteItem(items[i]);\n    }\n\n    response = deletedTemplate.postForEntity(\n        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n        deleteChangeSet, Void.class);\n    Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n    List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n    Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n    Item item0 = savedItems.get(0);\n    Assert.assertEquals(\"key_1\", item0.getKey());\n    Assert.assertEquals(\"created_value_1\", item0.getValue());\n    Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n    Assert.assertNotNull(item0.getDataChangeCreatedTime());\n  }\n","realPath":"apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"e8b82d1357057f9e1c9aff4b0558833f1bb64cc5","commitMessage":"@@@Merge pull request #1527 from nobodyiam/upgrade-spring-boot-cloud\n\nupgrade spring boot to 2.0.5 and spring cloud to Finchley.SR1","date":"2018-10-03 20:32:47","modifiedFileCount":"64","status":"M","submitter":"Jason Song"}]
