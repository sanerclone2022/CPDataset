[{"authorTime":"2019-12-30 15:20:26","codes":[{"authorDate":"2019-12-30 15:20:26","commitOrder":1,"curCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(errorAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","date":"2020-01-01 20:05:48","endLine":88,"groupId":"858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/7b1cb5671f686039fdcc99346cde37bd6438c4.src","preCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(errorAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2019-12-30 15:20:26","commitOrder":1,"curCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(correctAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","date":"2020-01-01 20:05:48","endLine":110,"groupId":"858","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAuthorizedSuccessfully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/7b1cb5671f686039fdcc99346cde37bd6438c4.src","preCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(correctAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"32aac0bd066a0f9a38253646ad2a195ca7d2ff35","commitMessage":"@@@Add apollo-client Authentication function\n\n\n","date":"2020-01-01 20:05:48","modifiedFileCount":"16","status":"B","submitter":"nisiyong"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(errorAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","date":"2020-08-16 20:59:48","endLine":105,"groupId":"943","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/e31a74af91b157771b2981e96a2218e251ac23.src","preCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(errorAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(correctAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","date":"2020-08-16 20:59:48","endLine":127,"groupId":"943","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAuthorizedSuccessfully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/e31a74af91b157771b2981e96a2218e251ac23.src","preCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(Signature.HTTP_HEADER_AUTHORIZATION)).thenReturn(correctAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2021-08-29 19:18:51","codes":[{"authorDate":"2021-08-29 19:18:51","commitOrder":3,"curCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(errorAuthorization);\n    when(bizConfig.accessKeyAuthTimeDiffTolerance()).thenReturn(60);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","date":"2021-08-29 19:18:51","endLine":125,"groupId":"10511","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testUnauthorized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/78/07845b3361726ca14c4476479ae1aa8d3183da.src","preCode":"  public void testUnauthorized() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String errorAuthorization = \"Apollo someAppId:wrongSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(errorAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, never()).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-08-29 19:18:51","commitOrder":3,"curCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(correctAuthorization);\n    when(bizConfig.accessKeyAuthTimeDiffTolerance()).thenReturn(60);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","date":"2021-08-29 19:18:51","endLine":148,"groupId":"10511","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testAuthorizedSuccessfully","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/78/07845b3361726ca14c4476479ae1aa8d3183da.src","preCode":"  public void testAuthorizedSuccessfully() throws Exception {\n    String appId = \"someAppId\";\n    String availableSignature = \"someSignature\";\n    List<String> secrets = Lists.newArrayList(\"someSecret\");\n    String oneMinAgoTimestamp = Long.toString(System.currentTimeMillis());\n    String correctAuthorization = \"Apollo someAppId:someSignature\";\n\n    when(accessKeyUtil.extractAppIdFromRequest(any())).thenReturn(appId);\n    when(accessKeyUtil.findAvailableSecret(appId)).thenReturn(secrets);\n    when(accessKeyUtil.buildSignature(any(), any(), any(), any())).thenReturn(availableSignature);\n    when(request.getHeader(Signature.HTTP_HEADER_TIMESTAMP)).thenReturn(oneMinAgoTimestamp);\n    when(request.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(correctAuthorization);\n\n    clientAuthenticationFilter.doFilter(request, response, filterChain);\n\n    verify(response, never()).sendError(HttpServletResponse.SC_BAD_REQUEST, \"InvalidAppId\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"RequestTimeTooSkewed\");\n    verify(response, never()).sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    verify(filterChain, times(1)).doFilter(request, response);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilterTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"2d9d3a70a200eba3b6584c0ddb4f0d778e8338fc","commitMessage":"@@@Make Access Key Timestamp check configurable (#3908)\n\n* feat: make client auth time difference configurable\n\n* test: fix unit test\n\n* docs: update CHANGES.md and docs\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-08-29 19:18:51","modifiedFileCount":"5","status":"M","submitter":"Stephen Ni"}]
