[{"authorTime":"2017-01-22 17:54:47","codes":[{"authorDate":"2017-01-22 17:54:47","commitOrder":1,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2017-01-22 17:54:47","endLine":120,"groupId":"1536","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d3/cf2b254984da3bb720a88e57aff8fda79702fc.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2017-01-22 17:54:47","commitOrder":1,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2017-01-22 17:54:47","endLine":165,"groupId":"153","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d3/cf2b254984da3bb720a88e57aff8fda79702fc.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"64a609afa623a722427b47d8b106ab26157917b5","commitMessage":"@@@Merge pull request #526 from lepdou/branch_operation_check_namespace\n\ncheck namespace and branch exist when update gray rules","date":"2017-01-22 17:54:47","modifiedFileCount":"48","status":"B","submitter":"Jason Song"},{"authorTime":"2017-08-21 17:30:52","codes":[{"authorDate":"2017-08-21 17:30:52","commitOrder":2,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2017-08-21 17:30:52","endLine":120,"groupId":"1536","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/22/48b49e9ac3fa5e9ef3cf8b222d370742ce7dcb.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2017-08-21 17:30:52","commitOrder":2,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2017-08-21 17:30:52","endLine":165,"groupId":"153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/22/48b49e9ac3fa5e9ef3cf8b222d370742ce7dcb.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(CatEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"89427dc501b3995d24cdbdeb88697406408d7af4","commitMessage":"@@@Merge pull request #709 from powerYao/req_master\n\nUpdate CatEventType to TracerEventType","date":"2017-08-21 17:30:52","modifiedFileCount":"9","status":"M","submitter":"Jason Song"},{"authorTime":"2020-01-05 17:23:02","codes":[{"authorDate":"2020-01-05 17:23:02","commitOrder":3,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                PortalMetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2020-01-05 17:23:02","endLine":123,"groupId":"1536","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/7e/53ecd83592c2dffa6e19d020e70da913416785.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-01-05 17:23:02","commitOrder":3,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                PortalMetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2020-01-05 17:23:02","endLine":168,"groupId":"153","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/7e/53ecd83592c2dffa6e19d020e70da913416785.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                                           MetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"42edb9da963df986538edcda4ff58d474fb3abed","commitMessage":"@@@Dynamic environment for apollo-portal (#2867)\n\n\n","date":"2020-01-05 17:23:02","modifiedFileCount":"63","status":"M","submitter":"Anilople"},{"authorTime":"2020-03-14 20:43:54","codes":[{"authorDate":"2020-03-14 20:43:54","commitOrder":4,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2020-03-14 20:43:54","endLine":127,"groupId":"1536","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/97/bcc27012b18765561b22f303bd5ad927ac3551.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                PortalMetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-03-14 20:43:54","commitOrder":4,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2020-03-14 20:43:54","endLine":172,"groupId":"153","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/97/bcc27012b18765561b22f303bd5ad927ac3551.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                PortalMetaDomainConsts.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"a81d7287014ab8bfc327040a66ac8a5d5510b7e9","commitMessage":"@@@feat(apollo-portal): read dynamic environment from key \"apollo.portal.meta.servers\" in PortalDB.ServerConfig (#2953)\n\n","date":"2020-03-14 20:43:54","modifiedFileCount":"8","status":"M","submitter":"Anilople"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2020-08-08 13:30:07","commitOrder":5,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpHeaders extraHeaders = assembleExtraHeaders(env);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, extraHeaders, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2020-08-16 20:59:48","endLine":147,"groupId":"644","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e0/7b22897e0b1dee7534bb6b289aba70c6ce5ca4.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-08-08 13:30:07","commitOrder":5,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2020-08-16 20:59:48","endLine":193,"groupId":"645","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e0/7b22897e0b1dee7534bb6b289aba70c6ce5ca4.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, null, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2020-09-11 20:01:31","codes":[{"authorDate":"2020-09-11 20:01:31","commitOrder":6,"curCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1);\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpHeaders extraHeaders = assembleExtraHeaders(env);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, extraHeaders, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","date":"2020-09-11 20:01:31","endLine":147,"groupId":"10146","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(HttpMethodmethod@Envenv@Stringpath@Objectrequest@Class<T>responseType@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/bc/cfa1e9f81bc2a973cf21e3d7f316ce819b73a6.src","preCode":"  private <T> T execute(HttpMethod method, Env env, String path, Object request, Class<T> responseType,\n                        Object... uriVariables) {\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpHeaders extraHeaders = assembleExtraHeaders(env);\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        T result = doExecute(method, extraHeaders, serviceDTO, path, request, responseType, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, method, t);\n        Tracer.logError(t);\n        if (canRetry(t, method)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-09-11 20:01:31","commitOrder":6,"curCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1);\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","date":"2020-09-11 20:01:31","endLine":193,"groupId":"10146","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"exchangeGet","params":"(Envenv@Stringpath@ParameterizedTypeReference<T>reference@Object...uriVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/bc/cfa1e9f81bc2a973cf21e3d7f316ce819b73a6.src","preCode":"  private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTypeReference<T> reference,\n                                            Object... uriVariables) {\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n\n    String uri = uriTemplateHandler.expand(path, uriVariables).getPath();\n    Transaction ct = Tracer.newTransaction(\"AdminAPI\", uri);\n    ct.addData(\"Env\", env);\n\n    List<ServiceDTO> services = getAdminServices(env, ct);\n    HttpEntity<Void> entity = new HttpEntity<>(assembleExtraHeaders(env));\n\n    for (ServiceDTO serviceDTO : services) {\n      try {\n\n        ResponseEntity<T> result =\n            restTemplate.exchange(parseHost(serviceDTO) + path, HttpMethod.GET, entity, reference, uriVariables);\n\n        ct.setStatus(Transaction.SUCCESS);\n        ct.complete();\n        return result;\n      } catch (Throwable t) {\n        logger.error(\"Http request failed, uri: {}, method: {}\", uri, HttpMethod.GET, t);\n        Tracer.logError(t);\n        if (canRetry(t, HttpMethod.GET)) {\n          Tracer.logEvent(TracerEventType.API_RETRY, uri);\n        } else {\r\n          ct.setStatus(t);\n          ct.complete();\n          throw t;\n        }\n\n      }\n    }\n\n    \r\n    ServiceException e =\n        new ServiceException(String.format(\"Admin servers are unresponsive. meta server address: %s, admin servers: %s\",\n                portalMetaDomainService.getDomain(env), services));\n    ct.setStatus(e);\n    ct.complete();\n    throw e;\n\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"e321a8e7f315b2be45d38923e9bec3e3145332fe","commitMessage":"@@@Simplify code (#3290)\n\n","date":"2020-09-11 20:01:31","modifiedFileCount":"87","status":"M","submitter":"waters"}]
