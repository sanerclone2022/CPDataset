[{"authorTime":"2018-09-24 15:19:33","codes":[{"authorDate":"2018-11-24 23:08:35","commitOrder":2,"curCode":"  public OpenItemDTO getItem(String appId, String env, String clusterName, String namespaceName, String key) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenItemDTO.class);\n    } catch (Throwable ex) {\n      \r\n      if (ex instanceof ApolloOpenApiException && ((ApolloOpenApiException)ex).getStatus() == 404) {\n        return null;\n      }\n      throw new RuntimeException(String\n          .format(\"Get item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","date":"2018-11-24 23:08:35","endLine":44,"groupId":"976","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getItem","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName@Stringkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5d/d5719fae30fb86ad53db8482e9d4dc4c065ebe.src","preCode":"  public OpenItemDTO getItem(String appId, String env, String clusterName, String namespaceName, String key) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenItemDTO.class);\n    } catch (Throwable ex) {\n      \r\n      if (ex instanceof ApolloOpenApiException && ((ApolloOpenApiException)ex).getStatus() == 404) {\n        return null;\n      }\n      throw new RuntimeException(String\n          .format(\"Get item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ItemOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":18,"status":"B"},{"authorDate":"2018-09-24 15:19:33","commitOrder":2,"curCode":"  public void removeItem(String appId, String env, String clusterName, String namespaceName, String key, String operator) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n    checkNotEmpty(operator, \"Operator\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s?operator=%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key),\n        escapeParam(operator));\n\n    try (CloseableHttpResponse ignored = delete(path)) {\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Remove item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId,\n              clusterName, namespaceName, env), ex);\n    }\n\n  }\n","date":"2018-09-24 15:19:33","endLine":123,"groupId":"978","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeItem","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName@Stringkey@Stringoperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/dd/81c5bd428bad65e66de1538aae5138d5724203.src","preCode":"  public void removeItem(String appId, String env, String clusterName, String namespaceName, String key, String operator) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n    checkNotEmpty(operator, \"Operator\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s?operator=%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key),\n        escapeParam(operator));\n\n    try (CloseableHttpResponse ignored = delete(path)) {\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Remove item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId,\n              clusterName, namespaceName, env), ex);\n    }\n\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ItemOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"}],"commitId":"0d541123a79d1786f1ac2de9a61f5dab0e005815","commitMessage":"@@@Merge pull request #1704 from nobodyiam/open-api-enhancement\n\nEnhance open api capabilities","date":"2018-11-24 23:08:35","modifiedFileCount":"7","status":"M","submitter":"Jason Song"},{"authorTime":"2021-09-14 20:40:08","codes":[{"authorDate":"2021-09-14 20:40:08","commitOrder":3,"curCode":"  public OpenItemDTO getItem(String appId, String env, String clusterName, String namespaceName, String key) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .envsPathVal(env)\n        .appsPathVal(appId)\n        .clustersPathVal(clusterName)\n        .namespacesPathVal(namespaceName)\n        .itemsPathVal(key);\n\n    try (CloseableHttpResponse response = get(pathBuilder)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenItemDTO.class);\n    } catch (Throwable ex) {\n      \r\n      if (ex instanceof ApolloOpenApiException && ((ApolloOpenApiException)ex).getStatus() == 404) {\n        return null;\n      }\n      throw new RuntimeException(String\n          .format(\"Get item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","date":"2021-09-14 20:40:08","endLine":65,"groupId":"1062","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getItem","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName@Stringkey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1d/d6c0ec7512331bd4bfab719679aff025297687.src","preCode":"  public OpenItemDTO getItem(String appId, String env, String clusterName, String namespaceName, String key) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenItemDTO.class);\n    } catch (Throwable ex) {\n      \r\n      if (ex instanceof ApolloOpenApiException && ((ApolloOpenApiException)ex).getStatus() == 404) {\n        return null;\n      }\n      throw new RuntimeException(String\n          .format(\"Get item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ItemOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-09-14 20:40:08","commitOrder":3,"curCode":"  public void removeItem(String appId, String env, String clusterName, String namespaceName, String key, String operator) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n    checkNotEmpty(operator, \"Operator\");\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .envsPathVal(env)\n        .appsPathVal(appId)\n        .clustersPathVal(clusterName)\n        .namespacesPathVal(namespaceName)\n        .itemsPathVal(key)\n        .addParam(\"operator\", operator);\n\n    try (CloseableHttpResponse ignored = delete(pathBuilder)) {\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Remove item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId,\n              clusterName, namespaceName, env), ex);\n    }\n\n  }\n","date":"2021-09-14 20:40:08","endLine":185,"groupId":"1062","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeItem","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName@Stringkey@Stringoperator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1d/d6c0ec7512331bd4bfab719679aff025297687.src","preCode":"  public void removeItem(String appId, String env, String clusterName, String namespaceName, String key, String operator) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n    checkNotEmpty(key, \"Item key\");\n    checkNotEmpty(operator, \"Operator\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s?operator=%s\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName), escapePath(key),\n        escapeParam(operator));\n\n    try (CloseableHttpResponse ignored = delete(path)) {\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Remove item: %s for appId: %s, cluster: %s, namespace: %s in env: %s failed\", key, appId,\n              clusterName, namespaceName, env), ex);\n    }\n\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ItemOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"d5931784dcdf1c414183bc816010a209463ec287","commitMessage":"@@@fix: replace String.format() with newly created class OpenApiPathBuilder (#3982)\n\nSigned-off-by: WillardHu <wei.hu@daocloud.io>\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-09-14 20:40:08","modifiedFileCount":"7","status":"M","submitter":"Willard"}]
