[{"authorTime":"2017-08-27 23:57:50","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":1,"curCode":"  public void testFindLatestActiveRelease() throws Exception {\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n    Release anotherRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    int retryTimes = 100;\n\n    for (int i = 0; i < retryTimes; i++) {\n      configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n          someNamespaceName, someNotificationMessages);\n    }\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, anotherRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","date":"2017-08-27 23:57:50","endLine":149,"groupId":"288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindLatestActiveRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8d/59d85b100dab189be254d7303a888ccf975281.src","preCode":"  public void testFindLatestActiveRelease() throws Exception {\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n    Release anotherRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    int retryTimes = 100;\n\n    for (int i = 0; i < retryTimes; i++) {\n      configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n          someNamespaceName, someNotificationMessages);\n    }\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, anotherRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/ConfigServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2017-08-27 23:57:50","commitOrder":1,"curCode":"  public void testFindLatestActiveReleaseWithIrrelevantMessages() throws Exception {\n    long someNewNotificationId = someNotificationId + 1;\n    ReleaseMessage anotherReleaseMessage = mock(ReleaseMessage.class);\n    Release anotherRelease = mock(Release.class);\n    String someIrrelevantKey = \"someIrrelevantKey\";\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (anotherReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (anotherRelease);\n    when(anotherReleaseMessage.getId()).thenReturn(someNewNotificationId);\n\n    Release stillOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    someNotificationMessages.put(someIrrelevantKey, someNewNotificationId);\n\n    Release shouldStillBeOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, stillOldRelease);\n    assertEquals(someRelease, shouldStillBeOldRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","date":"2017-08-27 23:57:50","endLine":286,"groupId":"293","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindLatestActiveReleaseWithIrrelevantMessages","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8d/59d85b100dab189be254d7303a888ccf975281.src","preCode":"  public void testFindLatestActiveReleaseWithIrrelevantMessages() throws Exception {\n    long someNewNotificationId = someNotificationId + 1;\n    ReleaseMessage anotherReleaseMessage = mock(ReleaseMessage.class);\n    Release anotherRelease = mock(Release.class);\n    String someIrrelevantKey = \"someIrrelevantKey\";\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (anotherReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (anotherRelease);\n    when(anotherReleaseMessage.getId()).thenReturn(someNewNotificationId);\n\n    Release stillOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    someNotificationMessages.put(someIrrelevantKey, someNewNotificationId);\n\n    Release shouldStillBeOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, stillOldRelease);\n    assertEquals(someRelease, shouldStillBeOldRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/ConfigServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"B","submitter":"??"},{"authorTime":"2019-01-20 16:45:04","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":2,"curCode":"  public void testFindLatestActiveRelease() throws Exception {\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n    Release anotherRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    int retryTimes = 100;\n\n    for (int i = 0; i < retryTimes; i++) {\n      configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n          someNamespaceName, someNotificationMessages);\n    }\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, anotherRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","date":"2017-08-27 23:57:50","endLine":149,"groupId":"10477","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindLatestActiveRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8d/59d85b100dab189be254d7303a888ccf975281.src","preCode":"  public void testFindLatestActiveRelease() throws Exception {\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n    Release anotherRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    int retryTimes = 100;\n\n    for (int i = 0; i < retryTimes; i++) {\n      configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n          someNamespaceName, someNotificationMessages);\n    }\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, anotherRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/ConfigServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2019-01-20 16:45:04","commitOrder":2,"curCode":"  public void testFindLatestActiveReleaseWithIrrelevantMessages() throws Exception {\n    long someNewNotificationId = someNotificationId + 1;\n    String someIrrelevantKey = \"someIrrelevantKey\";\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n\n    Release stillOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    someNotificationMessages.put(someIrrelevantKey, someNewNotificationId);\n\n    Release shouldStillBeOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, stillOldRelease);\n    assertEquals(someRelease, shouldStillBeOldRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","date":"2019-01-20 16:45:04","endLine":278,"groupId":"10477","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindLatestActiveReleaseWithIrrelevantMessages","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/30/8efddaedda8cc4accabdb466cdbe702e2ccd13.src","preCode":"  public void testFindLatestActiveReleaseWithIrrelevantMessages() throws Exception {\n    long someNewNotificationId = someNotificationId + 1;\n    ReleaseMessage anotherReleaseMessage = mock(ReleaseMessage.class);\n    Release anotherRelease = mock(Release.class);\n    String someIrrelevantKey = \"someIrrelevantKey\";\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (someReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (someRelease);\n    when(someReleaseMessage.getId()).thenReturn(someNotificationId);\n\n    Release release = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName,\n        someNotificationMessages);\n\n    when(releaseMessageService.findLatestReleaseMessageForMessages(Lists.newArrayList(someKey))).thenReturn\n        (anotherReleaseMessage);\n    when(releaseService.findLatestActiveRelease(someAppId, someClusterName, someNamespaceName)).thenReturn\n        (anotherRelease);\n    when(anotherReleaseMessage.getId()).thenReturn(someNewNotificationId);\n\n    Release stillOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    someNotificationMessages.put(someIrrelevantKey, someNewNotificationId);\n\n    Release shouldStillBeOldRelease = configServiceWithCache.findLatestActiveRelease(someAppId, someClusterName,\n        someNamespaceName, someNotificationMessages);\n\n    assertEquals(someRelease, release);\n    assertEquals(someRelease, stillOldRelease);\n    assertEquals(someRelease, shouldStillBeOldRelease);\n\n    verify(releaseMessageService, times(1)).findLatestReleaseMessageForMessages(Lists.newArrayList(someKey));\n    verify(releaseService, times(1)).findLatestActiveRelease(someAppId, someClusterName, someNamespaceName);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/ConfigServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"0776918ccf6a6f24dafa9ed21513d848ae19a40c","commitMessage":"@@@Merge pull request #1895 from nobodyiam/upgrade-mockito\n\nupgrade to mockito 2.x version","date":"2019-01-20 16:45:04","modifiedFileCount":"38","status":"M","submitter":"Jason Song"}]
