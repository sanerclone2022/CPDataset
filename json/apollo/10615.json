[{"authorTime":"2016-11-22 15:47:36","codes":[{"authorDate":"2016-08-31 16:54:07","commitOrder":2,"curCode":"  public void testFindInstancesByNamespace() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n    String anotherIp = \"anotherIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, anotherIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespace(someConfigAppId,\n        someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance, anotherInstance), result.getContent());\n  }\n","date":"2016-08-31 16:54:07","endLine":171,"groupId":"1600","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindInstancesByNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/79/647d7f16a57a3d5f4f9cdac2e91596b10438c3.src","preCode":"  public void testFindInstancesByNamespace() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n    String anotherIp = \"anotherIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, anotherIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespace(someConfigAppId,\n        someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance, anotherInstance), result.getContent());\n  }\n","realPath":"apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/InstanceServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"NB"},{"authorDate":"2016-11-22 15:47:36","commitOrder":2,"curCode":"  public void testFindInstancesByNamespaceAndInstanceAppId() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String anotherAppId = \"anotherAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(anotherAppId,\n        someClusterName, someDataCenter, someIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespaceAndInstanceAppId(someAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n    Page<Instance> anotherResult = instanceService.findInstancesByNamespaceAndInstanceAppId(anotherAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance), result.getContent());\n    assertEquals(Lists.newArrayList(anotherInstance), anotherResult.getContent());\n  }\n","date":"2016-11-22 15:47:36","endLine":206,"groupId":"1600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindInstancesByNamespaceAndInstanceAppId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f7/1d3f384bdc70f418a8c41aaa0a2a56db246ac6.src","preCode":"  public void testFindInstancesByNamespaceAndInstanceAppId() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String anotherAppId = \"anotherAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(anotherAppId,\n        someClusterName, someDataCenter, someIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespaceAndInstanceAppId(someAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n    Page<Instance> anotherResult = instanceService.findInstancesByNamespaceAndInstanceAppId(anotherAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance), result.getContent());\n    assertEquals(Lists.newArrayList(anotherInstance), anotherResult.getContent());\n  }\n","realPath":"apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/InstanceServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"6d7ebbe8491f5a920f20f84867e9114c3fbd17ae","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !32","date":"2016-11-22 15:47:36","modifiedFileCount":"58","status":"M","submitter":"zl??(IT)"},{"authorTime":"2018-10-03 20:32:47","codes":[{"authorDate":"2018-10-03 20:32:47","commitOrder":3,"curCode":"  public void testFindInstancesByNamespace() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n    String anotherIp = \"anotherIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, anotherIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespace(someConfigAppId,\n        someConfigClusterName, someConfigNamespaceName, PageRequest.of(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance, anotherInstance), result.getContent());\n  }\n","date":"2018-10-03 20:32:47","endLine":171,"groupId":"10615","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindInstancesByNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1f/e46783fb567af9798c1fd411f427e02f3fdee1.src","preCode":"  public void testFindInstancesByNamespace() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n    String anotherIp = \"anotherIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, anotherIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespace(someConfigAppId,\n        someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance, anotherInstance), result.getContent());\n  }\n","realPath":"apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/InstanceServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2018-10-03 20:32:47","commitOrder":3,"curCode":"  public void testFindInstancesByNamespaceAndInstanceAppId() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String anotherAppId = \"anotherAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(anotherAppId,\n        someClusterName, someDataCenter, someIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespaceAndInstanceAppId(someAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, PageRequest.of(0, 10));\n    Page<Instance> anotherResult = instanceService.findInstancesByNamespaceAndInstanceAppId(anotherAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, PageRequest.of(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance), result.getContent());\n    assertEquals(Lists.newArrayList(anotherInstance), anotherResult.getContent());\n  }\n","date":"2018-10-03 20:32:47","endLine":206,"groupId":"10615","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindInstancesByNamespaceAndInstanceAppId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1f/e46783fb567af9798c1fd411f427e02f3fdee1.src","preCode":"  public void testFindInstancesByNamespaceAndInstanceAppId() throws Exception {\n    String someConfigAppId = \"someConfigAppId\";\n    String someConfigClusterName = \"someConfigClusterName\";\n    String someConfigNamespaceName = \"someConfigNamespaceName\";\n    String someReleaseKey = \"someReleaseKey\";\n    Date someValidDate = new Date();\n\n    String someAppId = \"someAppId\";\n    String anotherAppId = \"anotherAppId\";\n    String someClusterName = \"someClusterName\";\n    String someDataCenter = \"someDataCenter\";\n    String someIp = \"someIp\";\n\n    Instance someInstance = instanceService.createInstance(assembleInstance(someAppId,\n        someClusterName, someDataCenter, someIp));\n    Instance anotherInstance = instanceService.createInstance(assembleInstance(anotherAppId,\n        someClusterName, someDataCenter, someIp));\n\n    prepareInstanceConfigForInstance(someInstance.getId(), someConfigAppId, someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n    prepareInstanceConfigForInstance(anotherInstance.getId(), someConfigAppId,\n        someConfigClusterName,\n        someConfigNamespaceName, someReleaseKey, someValidDate);\n\n    Page<Instance> result = instanceService.findInstancesByNamespaceAndInstanceAppId(someAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n    Page<Instance> anotherResult = instanceService.findInstancesByNamespaceAndInstanceAppId(anotherAppId,\n        someConfigAppId, someConfigClusterName, someConfigNamespaceName, new PageRequest(0, 10));\n\n    assertEquals(Lists.newArrayList(someInstance), result.getContent());\n    assertEquals(Lists.newArrayList(anotherInstance), anotherResult.getContent());\n  }\n","realPath":"apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/InstanceServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"e8b82d1357057f9e1c9aff4b0558833f1bb64cc5","commitMessage":"@@@Merge pull request #1527 from nobodyiam/upgrade-spring-boot-cloud\n\nupgrade spring boot to 2.0.5 and spring cloud to Finchley.SR1","date":"2018-10-03 20:32:47","modifiedFileCount":"64","status":"M","submitter":"Jason Song"}]
