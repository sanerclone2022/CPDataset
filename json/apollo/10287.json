[{"authorTime":"2019-12-30 15:20:26","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":3,"curCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","date":"2017-08-27 23:57:50","endLine":182,"groupId":"1777","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWith200Response","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/ad06deb371a9ceac8acf2fc83c518e00b73fa0.src","preCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"NB"},{"authorDate":"2019-12-30 15:20:26","commitOrder":3,"curCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","date":"2020-01-01 20:05:48","endLine":232,"groupId":"392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/29/cdcf114ac5aa20c17653ee557b8e1cb49e028b.src","preCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"32aac0bd066a0f9a38253646ad2a195ca7d2ff35","commitMessage":"@@@Add apollo-client Authentication function\n\n\n","date":"2020-01-01 20:05:48","modifiedFileCount":"16","status":"M","submitter":"nisiyong"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":4,"curCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","date":"2017-08-27 23:57:50","endLine":182,"groupId":"1777","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWith200Response","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/ad06deb371a9ceac8acf2fc83c518e00b73fa0.src","preCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"},{"authorDate":"2020-08-08 13:30:07","commitOrder":4,"curCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","date":"2020-08-16 20:59:48","endLine":237,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/b8/668d2d0417fea537069c182945656e083b1a84.src","preCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2021-03-16 08:20:13","codes":[{"authorDate":"2021-03-16 08:20:13","commitOrder":5,"curCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpClient).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","date":"2021-03-16 08:20:13","endLine":184,"groupId":"10287","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWith200Response","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/54/85d65d304b573a0ffda9fd835d513c92eb5f5e.src","preCode":"  public void testSubmitLongPollNamespaceWith200Response() throws Exception {\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    String anotherKey = \"anotherKey\";\n    long anotherNotificationId = 2;\n    notificationMessages.put(someKey, someNotificationId);\n    notificationMessages.put(anotherKey, anotherNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    final ArgumentCaptor<ApolloNotificationMessages> captor = ArgumentCaptor.forClass(ApolloNotificationMessages.class);\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), captor.capture());\n\n    ApolloNotificationMessages captured = captor.getValue();\n\n    assertEquals(2, captured.getDetails().size());\n    assertEquals(someNotificationId, captured.get(someKey).longValue());\n    assertEquals(anotherNotificationId, captured.get(anotherKey).longValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-03-16 08:20:13","commitOrder":5,"curCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpClient).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","date":"2021-03-16 08:20:13","endLine":237,"groupId":"10287","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSubmitLongPollNamespaceWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/54/85d65d304b573a0ffda9fd835d513c92eb5f5e.src","preCode":"  public void testSubmitLongPollNamespaceWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    RemoteConfigRepository someRepository = mock(RemoteConfigRepository.class);\n    final String someNamespace = \"someNamespace\";\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n\n    doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>() {\n      @Override\n      public HttpResponse<List<ApolloConfigNotification>> answer(InvocationOnMock invocation)\n          throws Throwable {\n        try {\n          TimeUnit.MILLISECONDS.sleep(50);\n        } catch (InterruptedException e) {\n        }\n\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return pollResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), eq(responseType));\n\n    final SettableFuture<Boolean> onNotified = SettableFuture.create();\n    doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        onNotified.set(true);\n        return null;\n      }\n    }).when(someRepository).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n\n    remoteConfigLongPollService.submit(someNamespace, someRepository);\n    onNotified.get(5000, TimeUnit.MILLISECONDS);\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someRepository, times(1)).onLongPollNotified(any(ServiceDTO.class), any(ApolloNotificationMessages.class));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"9f3d315e7e115220f6bbb836a1a8cfb4f4619d2f","commitMessage":"@@@replace http client implementation with interface (#3594)\n\n","date":"2021-03-16 08:20:13","modifiedFileCount":"7","status":"M","submitter":"vdisk-group"}]
