[{"authorTime":"2019-12-30 15:20:26","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":2,"curCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","date":"2020-01-21 20:16:07","endLine":163,"groupId":"1438","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadConfigWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/94/e9e4bea9e4e2457134334077aeec47f3c5ee62.src","preCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2019-12-30 15:20:26","commitOrder":2,"curCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2020-01-01 20:05:48","endLine":150,"groupId":"833","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadConfigWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0f/a0c1e375a300e2ba3ad2408b249df6ce90ad0f.src","preCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"NB"}],"commitId":"5fe54966f5f50e5f5e1c3b2e0f0d82b1d92f014d","commitMessage":"@@@use linked hash map to keep server side config order and do some refactoring to apollo-client\n","date":"2020-01-21 20:16:07","modifiedFileCount":"18","status":"M","submitter":"Jason Song"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":3,"curCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","date":"2020-01-21 20:16:07","endLine":163,"groupId":"1438","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadConfigWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/94/e9e4bea9e4e2457134334077aeec47f3c5ee62.src","preCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-08-08 13:30:07","commitOrder":3,"curCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2020-08-16 20:59:48","endLine":203,"groupId":"846","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadConfigWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/49/c658da9586e1beaa1c65db187b8541a829c453.src","preCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2021-03-16 08:20:13","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":4,"curCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","date":"2020-01-21 20:16:07","endLine":163,"groupId":"10242","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadConfigWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/94/e9e4bea9e4e2457134334077aeec47f3c5ee62.src","preCode":"  public void testLoadConfigWithOrderedProperties() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newLinkedHashMap();\n    configurations.put(someKey, someValue);\n    configurations.put(\"someKey2\", \"someValue2\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertTrue(config instanceof OrderedProperties);\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    String[] actualArrays = config.keySet().toArray(new String[]{});\n    String[] expectedArrays = {\"someKey\", \"someKey2\"};\n    assertArrayEquals(expectedArrays, actualArrays);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2021-03-16 08:20:13","commitOrder":4,"curCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpClient).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2021-03-16 08:20:13","endLine":203,"groupId":"10242","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadConfigWithAccessKeySecret","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/46cb4c8710a040e2e38d76872b4170a6fdc4c0.src","preCode":"  public void testLoadConfigWithAccessKeySecret() throws Exception {\n    someSecret = \"someSecret\";\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    doAnswer(new Answer<HttpResponse<ApolloConfig>>() {\n      @Override\n      public HttpResponse<ApolloConfig> answer(InvocationOnMock invocation) throws Throwable {\n        HttpRequest request = invocation.getArgumentAt(0, HttpRequest.class);\n        Map<String, String> headers = request.getHeaders();\n        assertNotNull(headers);\n        assertTrue(headers.containsKey(Signature.HTTP_HEADER_TIMESTAMP));\n        assertTrue(headers.containsKey(HttpHeaders.AUTHORIZATION));\n\n        return someResponse;\n      }\n    }).when(httpUtil).doGet(any(HttpRequest.class), any(Class.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n\n    Properties config = remoteConfigRepository.getConfig();\n\n    assertEquals(configurations, config);\n    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"9f3d315e7e115220f6bbb836a1a8cfb4f4619d2f","commitMessage":"@@@replace http client implementation with interface (#3594)\n\n","date":"2021-03-16 08:20:13","modifiedFileCount":"7","status":"M","submitter":"vdisk-group"}]
