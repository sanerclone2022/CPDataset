[{"authorTime":"2017-06-12 10:16:19","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":5,"curCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2020-01-21 20:16:07","endLine":839,"groupId":"588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNamesWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c6/293e1e4b4e7fb800258f888005fcda1f54fd13.src","preCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"B"},{"authorDate":"2017-06-12 10:16:19","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    MockInjector.reset();\n\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2017-06-12 10:16:19","endLine":80,"groupId":"4","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c8/6f79746328d5be066830092e0988112a935067.src","preCode":"  public void setUp() throws Exception {\n    MockInjector.reset();\n\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"}],"commitId":"5fe54966f5f50e5f5e1c3b2e0f0d82b1d92f014d","commitMessage":"@@@use linked hash map to keep server side config order and do some refactoring to apollo-client\n","date":"2020-01-21 20:16:07","modifiedFileCount":"18","status":"M","submitter":"Jason Song"},{"authorTime":"2020-06-21 12:42:33","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":6,"curCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2020-01-21 20:16:07","endLine":839,"groupId":"588","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNamesWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c6/293e1e4b4e7fb800258f888005fcda1f54fd13.src","preCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"N"},{"authorDate":"2020-06-21 12:42:33","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2020-06-21 14:13:02","endLine":82,"groupId":"4","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d4/af113c192d4f8de4bef3fda6c5b3e0c0ec231d.src","preCode":"  public void setUp() throws Exception {\n    MockInjector.reset();\n\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"4c2c12b7c8c209b3f12eda7b9f3b7d659523a901","commitMessage":"@@@reset mock inject in tear down phase to make sure the context is clean\n","date":"2020-06-21 14:13:02","modifiedFileCount":"17","status":"M","submitter":"Jason Song"},{"authorTime":"2021-03-16 08:20:13","codes":[{"authorDate":"2020-01-21 08:22:12","commitOrder":7,"curCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2020-01-21 20:16:07","endLine":839,"groupId":"10225","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNamesWithOrderedProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c6/293e1e4b4e7fb800258f888005fcda1f54fd13.src","preCode":"  public void testGetPropertyNamesWithOrderedProperties() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new OrderedProperties();\n      }\n    });\n    \r\n    someProperties = new OrderedProperties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig = new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"N"},{"authorDate":"2021-03-16 08:20:13","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    MockInjector.setInstance(HttpClient.class, httpClient);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","date":"2021-03-16 08:20:13","endLine":83,"groupId":"10225","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/54/85d65d304b573a0ffda9fd835d513c92eb5f5e.src","preCode":"  public void setUp() throws Exception {\n    MockInjector.setInstance(HttpUtil.class, httpUtil);\n\n    someServerUrl = \"http://someServer\";\n    ServiceDTO serviceDTO = mock(ServiceDTO.class);\n    when(serviceDTO.getHomepageUrl()).thenReturn(someServerUrl);\n    when(configServiceLocator.getConfigServices()).thenReturn(Lists.newArrayList(serviceDTO));\n    MockInjector.setInstance(ConfigServiceLocator.class, configServiceLocator);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n\n    remoteConfigLongPollService = new RemoteConfigLongPollService();\n\n    responseType =\n        (Type) ReflectionTestUtils.getField(remoteConfigLongPollService, \"m_responseType\");\n\n    someAppId = \"someAppId\";\n    someCluster = \"someCluster\";\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"9f3d315e7e115220f6bbb836a1a8cfb4f4619d2f","commitMessage":"@@@replace http client implementation with interface (#3594)\n\n","date":"2021-03-16 08:20:13","modifiedFileCount":"7","status":"M","submitter":"vdisk-group"}]
