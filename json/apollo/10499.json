[{"authorTime":"2016-07-07 18:11:03","codes":[{"authorDate":"2016-06-01 16:37:47","commitOrder":5,"curCode":"  public void testPollNotificationWithDefaultNamespace() throws Exception {\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, defaultNamespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","date":"2016-06-01 16:37:47","endLine":96,"groupId":"1192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ec/f1729ab8ea10d2761e649c3ae174612a7c5816.src","preCode":"  public void testPollNotificationWithDefaultNamespace() throws Exception {\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, defaultNamespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"NB"},{"authorDate":"2016-07-07 18:11:03","commitOrder":5,"curCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, namespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","date":"2016-07-07 18:11:03","endLine":127,"groupId":"1192","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespaceAsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f5/09f8b86f7d7785ce4b1534d19d282f1d56c4fe.src","preCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, namespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"5f13408211cf91a8cca334a98e4b7151622bc5c1","commitMessage":"@@@Merge pull request #310 from lepdou/namespace-as-file-format-2\n\nnamespace as file","date":"2016-07-07 18:11:03","modifiedFileCount":"65","status":"M","submitter":"Jason Song"},{"authorTime":"2016-07-20 15:44:22","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":6,"curCode":"  public void testPollNotificationWithDefaultNamespace() throws Exception {\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey, anotherWatchKey);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, defaultNamespace,\n            someDataCenter)).thenReturn(\n        watchKeys);\n\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, defaultNamespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    assertEquals(watchKeys.size(), deferredResults.size());\n\n    for (String watchKey : watchKeys) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n  }\n","date":"2016-07-20 15:44:22","endLine":108,"groupId":"10499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/58/9e7cbf239e6d9337fe9abcfddbce925b4cbdc3.src","preCode":"  public void testPollNotificationWithDefaultNamespace() throws Exception {\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, defaultNamespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2016-07-20 15:44:22","commitOrder":6,"curCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey, anotherWatchKey);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, defaultNamespace,\n            someDataCenter)).thenReturn(\n        watchKeys);\n\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, namespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    assertEquals(watchKeys.size(), deferredResults.size());\n\n    for (String watchKey : watchKeys) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n  }\n","date":"2016-07-20 15:44:22","endLine":135,"groupId":"10499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespaceAsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/58/9e7cbf239e6d9337fe9abcfddbce925b4cbdc3.src","preCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    DeferredResult<ResponseEntity<ApolloConfigNotification>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, namespace, someDataCenter,\n            someNotificationId, someClientIp);\n\n    List<String> clusters =\n        Lists.newArrayList(someCluster, someDataCenter, ConfigConsts.CLUSTER_NAME_DEFAULT);\n\n    assertEquals(clusters.size(), deferredResults.size());\n\n    for (String cluster : clusters) {\n      String key =\n          Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR)\n              .join(someAppId, cluster, defaultNamespace);\n      assertTrue(deferredResults.get(key).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"M","submitter":"??"}]
