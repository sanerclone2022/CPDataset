[{"authorTime":"2016-07-20 15:44:22","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":1,"curCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(namespace, someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, Sets.newHashSet(defaultNamespace),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n  }\n","date":"2016-07-20 15:44:22","endLine":149,"groupId":"1825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespaceAsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f5/9e56f45c99710379d6d7afb09d4b61b0c6c951.src","preCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(namespace, someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, Sets.newHashSet(defaultNamespace),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2016-07-20 15:44:22","commitOrder":1,"curCode":"  public void testPollNotificationWithMultipleNamespaces() throws Exception {\n    String defaultNamespaceAsFile = defaultNamespace + \".properties\";\n    String somePublicNamespaceAsFile = somePublicNamespace + \".xml\";\n\n    when(namespaceUtil.filterNamespaceName(defaultNamespaceAsFile)).thenReturn(defaultNamespace);\n    when(namespaceUtil.filterNamespaceName(somePublicNamespaceAsFile))\n        .thenReturn(somePublicNamespaceAsFile);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n    String somePublicWatchKey = \"somePublicWatchKey\";\n    String somePublicFileWatchKey = \"somePublicFileWatchKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespace, Lists.newArrayList(somePublicWatchKey)));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespaceAsFile,\n            Lists.newArrayList(somePublicFileWatchKey)));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(defaultNamespaceAsFile, someNotificationId,\n            somePublicNamespace, someNotificationId, somePublicNamespaceAsFile,\n            someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster,\n            Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n\n    verify(watchKeysUtil, times(1)).assembleAllWatchKeys(someAppId, someCluster,\n        Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n        someDataCenter);\n  }\n","date":"2016-07-20 15:44:22","endLine":199,"groupId":"56","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPollNotificationWithMultipleNamespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f5/9e56f45c99710379d6d7afb09d4b61b0c6c951.src","preCode":"  public void testPollNotificationWithMultipleNamespaces() throws Exception {\n    String defaultNamespaceAsFile = defaultNamespace + \".properties\";\n    String somePublicNamespaceAsFile = somePublicNamespace + \".xml\";\n\n    when(namespaceUtil.filterNamespaceName(defaultNamespaceAsFile)).thenReturn(defaultNamespace);\n    when(namespaceUtil.filterNamespaceName(somePublicNamespaceAsFile))\n        .thenReturn(somePublicNamespaceAsFile);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n    String somePublicWatchKey = \"somePublicWatchKey\";\n    String somePublicFileWatchKey = \"somePublicFileWatchKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespace, Lists.newArrayList(somePublicWatchKey)));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespaceAsFile,\n            Lists.newArrayList(somePublicFileWatchKey)));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(defaultNamespaceAsFile, someNotificationId,\n            somePublicNamespace, someNotificationId, somePublicNamespaceAsFile,\n            someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster,\n            Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n\n    verify(watchKeysUtil, times(1)).assembleAllWatchKeys(someAppId, someCluster,\n        Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n        someDataCenter);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"B","submitter":"??"},{"authorTime":"2017-08-27 23:57:50","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":2,"curCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(namespace, someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, Sets.newHashSet(defaultNamespace),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    assertWatchKeys(watchKeysMap, deferredResult);\n  }\n","date":"2017-08-27 23:57:50","endLine":159,"groupId":"10507","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPollNotificationWithDefaultNamespaceAsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/60/2c667099928723db2812dadc4592356ac8caaf.src","preCode":"  public void testPollNotificationWithDefaultNamespaceAsFile() throws Exception {\n    String namespace = String.format(\"%s.%s\", defaultNamespace, \"properties\");\n    when(namespaceUtil.filterNamespaceName(namespace)).thenReturn(defaultNamespace);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(namespace, someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster, Sets.newHashSet(defaultNamespace),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2017-08-27 23:57:50","commitOrder":2,"curCode":"  public void testPollNotificationWithMultipleNamespaces() throws Exception {\n    String defaultNamespaceAsFile = defaultNamespace + \".properties\";\n    String somePublicNamespaceAsFile = somePublicNamespace + \".xml\";\n\n    when(namespaceUtil.filterNamespaceName(defaultNamespaceAsFile)).thenReturn(defaultNamespace);\n    when(namespaceUtil.filterNamespaceName(somePublicNamespaceAsFile)).thenReturn(somePublicNamespaceAsFile);\n    when(namespaceUtil.normalizeNamespace(someAppId, somePublicNamespaceAsFile)).thenReturn(somePublicNamespaceAsFile);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n    String somePublicWatchKey = \"somePublicWatchKey\";\n    String somePublicFileWatchKey = \"somePublicFileWatchKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespace, Lists.newArrayList(somePublicWatchKey)));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespaceAsFile,\n            Lists.newArrayList(somePublicFileWatchKey)));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(defaultNamespaceAsFile, someNotificationId,\n            somePublicNamespace, someNotificationId, somePublicNamespaceAsFile,\n            someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster,\n            Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    assertWatchKeys(watchKeysMap, deferredResult);\n\n    verify(watchKeysUtil, times(1)).assembleAllWatchKeys(someAppId, someCluster,\n        Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n        someDataCenter);\n  }\n","date":"2017-08-27 23:57:50","endLine":207,"groupId":"10507","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPollNotificationWithMultipleNamespaces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/60/2c667099928723db2812dadc4592356ac8caaf.src","preCode":"  public void testPollNotificationWithMultipleNamespaces() throws Exception {\n    String defaultNamespaceAsFile = defaultNamespace + \".properties\";\n    String somePublicNamespaceAsFile = somePublicNamespace + \".xml\";\n\n    when(namespaceUtil.filterNamespaceName(defaultNamespaceAsFile)).thenReturn(defaultNamespace);\n    when(namespaceUtil.filterNamespaceName(somePublicNamespaceAsFile))\n        .thenReturn(somePublicNamespaceAsFile);\n\n    String someWatchKey = \"someKey\";\n    String anotherWatchKey = \"anotherKey\";\n    String somePublicWatchKey = \"somePublicWatchKey\";\n    String somePublicFileWatchKey = \"somePublicFileWatchKey\";\n\n    Multimap<String, String> watchKeysMap =\n        assembleMultiMap(defaultNamespace, Lists.newArrayList(someWatchKey, anotherWatchKey));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespace, Lists.newArrayList(somePublicWatchKey)));\n    watchKeysMap\n        .putAll(assembleMultiMap(somePublicNamespaceAsFile,\n            Lists.newArrayList(somePublicFileWatchKey)));\n\n    String notificationAsString =\n        transformApolloConfigNotificationsToString(defaultNamespaceAsFile, someNotificationId,\n            somePublicNamespace, someNotificationId, somePublicNamespaceAsFile,\n            someNotificationId);\n\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someCluster,\n            Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n            someDataCenter)).thenReturn(\n        watchKeysMap);\n\n    DeferredResult<ResponseEntity<List<ApolloConfigNotification>>>\n        deferredResult = controller\n        .pollNotification(someAppId, someCluster, notificationAsString, someDataCenter,\n            someClientIp);\n\n    assertEquals(watchKeysMap.size(), deferredResults.size());\n\n    for (String watchKey : watchKeysMap.values()) {\n      assertTrue(deferredResults.get(watchKey).contains(deferredResult));\n    }\n\n    verify(watchKeysUtil, times(1)).assembleAllWatchKeys(someAppId, someCluster,\n        Sets.newHashSet(defaultNamespace, somePublicNamespace, somePublicNamespaceAsFile),\n        someDataCenter);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"M","submitter":"??"}]
