[{"authorTime":"2016-07-21 12:04:08","codes":[{"authorDate":"2016-07-21 12:04:08","commitOrder":1,"curCode":"  public void testOneServerDown() {\n\n    Object result = new Object();\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate.getForObject(serviceOne + \"/\" + path, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.getForObject(serviceTwo + \"/\" + path, Object.class)).thenReturn(result);\n    when(restTemplate.getForObject(serviceThree + \"/\" + path, Object.class)).thenThrow(connectTimeoutException);\n\n    Object o = retryableRestTemplate.get(Env.DEV, path, Object.class);\n\n    verify(restTemplate).getForObject(serviceOne + \"/\" + path, Object.class);\n    verify(restTemplate).getForObject(serviceTwo + \"/\" + path, Object.class);\n    verify(restTemplate, times(0)).getForObject(serviceThree + \"/\" + path, Object.class);\n    Assert.assertEquals(result, o);\n  }\n","date":"2016-07-21 12:04:08","endLine":102,"groupId":"1705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneServerDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/13/378584a6e72ef01b6479989529fe9983d1977d.src","preCode":"  public void testOneServerDown() {\n\n    Object result = new Object();\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate.getForObject(serviceOne + \"/\" + path, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.getForObject(serviceTwo + \"/\" + path, Object.class)).thenReturn(result);\n    when(restTemplate.getForObject(serviceThree + \"/\" + path, Object.class)).thenThrow(connectTimeoutException);\n\n    Object o = retryableRestTemplate.get(Env.DEV, path, Object.class);\n\n    verify(restTemplate).getForObject(serviceOne + \"/\" + path, Object.class);\n    verify(restTemplate).getForObject(serviceTwo + \"/\" + path, Object.class);\n    verify(restTemplate, times(0)).getForObject(serviceThree + \"/\" + path, Object.class);\n    Assert.assertEquals(result, o);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2016-07-21 12:04:08","commitOrder":1,"curCode":"  public void testPostSocketTimeoutNotRetry(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    when(restTemplate.postForEntity(serviceOne + \"/\" + path, request, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.postForEntity(serviceTwo + \"/\" + path, request, Object.class)).thenReturn(entity);\n\n    retryableRestTemplate.post(Env.DEV, path, request, Object.class);\n\n    verify(restTemplate).postForEntity(serviceOne + \"/\" + path, request, Object.class);\n    verify(restTemplate, times(0)).postForEntity(serviceTwo + \"/\" + path, request, Object.class);\n  }\n","date":"2016-07-21 12:04:08","endLine":116,"groupId":"1706","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostSocketTimeoutNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/13/378584a6e72ef01b6479989529fe9983d1977d.src","preCode":"  public void testPostSocketTimeoutNotRetry(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    when(restTemplate.postForEntity(serviceOne + \"/\" + path, request, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.postForEntity(serviceTwo + \"/\" + path, request, Object.class)).thenReturn(entity);\n\n    retryableRestTemplate.post(Env.DEV, path, request, Object.class);\n\n    verify(restTemplate).postForEntity(serviceOne + \"/\" + path, request, Object.class);\n    verify(restTemplate, times(0)).postForEntity(serviceTwo + \"/\" + path, request, Object.class);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"}],"commitId":"0447fca3e6c0ed65f09ffcf557522754418a1470","commitMessage":"@@@Merge pull request #335 from lepdou/cat_log\n\ncat log & ??????? & call admin server retry","date":"2016-07-21 12:04:08","modifiedFileCount":"15","status":"B","submitter":"Jason Song"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testOneServerDown() {\n    ResponseEntity someEntity = mock(ResponseEntity.class);\n    when(someEntity.getBody()).thenReturn(result);\n\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays\n            .asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class))).thenThrow(socketTimeoutException);\n    when(restTemplate\n        .exchange(eq(serviceTwo + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class))).thenReturn(someEntity);\n    when(restTemplate\n        .exchange(eq(serviceThree + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class))).thenThrow(connectTimeoutException);\n\n    Object actualResult = retryableRestTemplate.get(Env.DEV, path, Object.class);\n\n    verify(restTemplate, times(1))\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class));\n    verify(restTemplate, times(1))\n        .exchange(eq(serviceTwo + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class));\n    verify(restTemplate, never())\n        .exchange(eq(serviceThree + \"/\" + path), eq(HttpMethod.GET), any(HttpEntity.class),\n            eq(Object.class));\n    assertEquals(result, actualResult);\n  }\n","date":"2020-08-16 20:59:48","endLine":149,"groupId":"10103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneServerDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ed/a4fd92f3416422e292ea527339c4f758cca640.src","preCode":"  public void testOneServerDown() {\n\n    Object result = new Object();\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate.getForObject(serviceOne + \"/\" + path, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.getForObject(serviceTwo + \"/\" + path, Object.class)).thenReturn(result);\n    when(restTemplate.getForObject(serviceThree + \"/\" + path, Object.class)).thenThrow(connectTimeoutException);\n\n    Object o = retryableRestTemplate.get(Env.DEV, path, Object.class);\n\n    verify(restTemplate).getForObject(serviceOne + \"/\" + path, Object.class);\n    verify(restTemplate).getForObject(serviceTwo + \"/\" + path, Object.class);\n    verify(restTemplate, times(0)).getForObject(serviceThree + \"/\" + path, Object.class);\n    Assert.assertEquals(result, o);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testPostSocketTimeoutNotRetry() {\n    ResponseEntity someEntity = mock(ResponseEntity.class);\n    when(someEntity.getBody()).thenReturn(result);\n\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays\n            .asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.POST), any(HttpEntity.class),\n            eq(Object.class))).thenThrow(socketTimeoutException);\n    when(restTemplate\n        .exchange(eq(serviceTwo + \"/\" + path), eq(HttpMethod.POST), any(HttpEntity.class),\n            eq(Object.class))).thenReturn(someEntity);\n\n    Throwable exception = null;\n    Object actualResult = null;\n    try {\n      actualResult = retryableRestTemplate.post(Env.DEV, path, request, Object.class);\n    } catch (Throwable ex) {\n      exception = ex;\n    }\n\n    assertNull(actualResult);\n    assertSame(socketTimeoutException, exception);\n    verify(restTemplate, times(1))\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.POST), any(HttpEntity.class),\n            eq(Object.class));\n    verify(restTemplate, never())\n        .exchange(eq(serviceTwo + \"/\" + path), eq(HttpMethod.POST), any(HttpEntity.class),\n            eq(Object.class));\n  }\n","date":"2020-08-16 20:59:48","endLine":182,"groupId":"10103","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPostSocketTimeoutNotRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ed/a4fd92f3416422e292ea527339c4f758cca640.src","preCode":"  public void testPostSocketTimeoutNotRetry(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    when(restTemplate.postForEntity(serviceOne + \"/\" + path, request, Object.class)).thenThrow(socketTimeoutException);\n    when(restTemplate.postForEntity(serviceTwo + \"/\" + path, request, Object.class)).thenReturn(entity);\n\n    retryableRestTemplate.post(Env.DEV, path, request, Object.class);\n\n    verify(restTemplate).postForEntity(serviceOne + \"/\" + path, request, Object.class);\n    verify(restTemplate, times(0)).postForEntity(serviceTwo + \"/\" + path, request, Object.class);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"}]
