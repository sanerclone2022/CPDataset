[{"authorTime":"2017-08-27 23:57:50","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":1,"curCode":"  public void testLoadConfig() throws Exception {\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(someRelease, release);\n  }\n","date":"2017-08-27 23:57:50","endLine":76,"groupId":"1131","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0a/7ff49ce90a6770be9f655ede8683be9e0fb28f.src","preCode":"  public void testLoadConfig() throws Exception {\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(someRelease, release);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/DefaultConfigServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-08-27 23:57:50","commitOrder":1,"curCode":"  public void testLoadConfigWithGrayRelease() throws Exception {\n    Release grayRelease = mock(Release.class);\n    long grayReleaseId = 999;\n\n    when(grayReleaseRulesHolder.findReleaseIdFromGrayReleaseRule(someClientAppId, someClientIp,\n        someConfigAppId, someClusterName, defaultNamespaceName)).thenReturn(grayReleaseId);\n    when(releaseService.findActiveOne(grayReleaseId)).thenReturn(grayRelease);\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findActiveOne(grayReleaseId);\n    verify(releaseService, never()).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(grayRelease, release);\n  }\n","date":"2017-08-27 23:57:50","endLine":97,"groupId":"1130","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadConfigWithGrayRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0a/7ff49ce90a6770be9f655ede8683be9e0fb28f.src","preCode":"  public void testLoadConfigWithGrayRelease() throws Exception {\n    Release grayRelease = mock(Release.class);\n    long grayReleaseId = 999;\n\n    when(grayReleaseRulesHolder.findReleaseIdFromGrayReleaseRule(someClientAppId, someClientIp,\n        someConfigAppId, someClusterName, defaultNamespaceName)).thenReturn(grayReleaseId);\n    when(releaseService.findActiveOne(grayReleaseId)).thenReturn(grayRelease);\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findActiveOne(grayReleaseId);\n    verify(releaseService, never()).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(grayRelease, release);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/DefaultConfigServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"B","submitter":"??"},{"authorTime":"2019-01-20 16:45:04","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":2,"curCode":"  public void testLoadConfig() throws Exception {\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(someRelease, release);\n  }\n","date":"2017-08-27 23:57:50","endLine":76,"groupId":"10484","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0a/7ff49ce90a6770be9f655ede8683be9e0fb28f.src","preCode":"  public void testLoadConfig() throws Exception {\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(someRelease, release);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/DefaultConfigServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2019-01-20 16:45:04","commitOrder":2,"curCode":"  public void testLoadConfigWithGrayRelease() throws Exception {\n    Release grayRelease = mock(Release.class);\n    long grayReleaseId = 999;\n\n    when(grayReleaseRulesHolder.findReleaseIdFromGrayReleaseRule(someClientAppId, someClientIp,\n        someConfigAppId, someClusterName, defaultNamespaceName)).thenReturn(grayReleaseId);\n    when(releaseService.findActiveOne(grayReleaseId)).thenReturn(grayRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findActiveOne(grayReleaseId);\n    verify(releaseService, never()).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(grayRelease, release);\n  }\n","date":"2019-01-20 16:45:04","endLine":95,"groupId":"10484","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadConfigWithGrayRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/09/c3e0c809fa868a15bf716765a5eb9012d8d8b2.src","preCode":"  public void testLoadConfigWithGrayRelease() throws Exception {\n    Release grayRelease = mock(Release.class);\n    long grayReleaseId = 999;\n\n    when(grayReleaseRulesHolder.findReleaseIdFromGrayReleaseRule(someClientAppId, someClientIp,\n        someConfigAppId, someClusterName, defaultNamespaceName)).thenReturn(grayReleaseId);\n    when(releaseService.findActiveOne(grayReleaseId)).thenReturn(grayRelease);\n    when(releaseService.findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName))\n        .thenReturn(someRelease);\n\n    Release release = configService\n        .loadConfig(someClientAppId, someClientIp, someConfigAppId, someClusterName, defaultNamespaceName, someDataCenter,\n            someNotificationMessages);\n\n    verify(releaseService, times(1)).findActiveOne(grayReleaseId);\n    verify(releaseService, never()).findLatestActiveRelease(someConfigAppId, someClusterName, defaultNamespaceName);\n\n    assertEquals(grayRelease, release);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/config/DefaultConfigServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"0776918ccf6a6f24dafa9ed21513d848ae19a40c","commitMessage":"@@@Merge pull request #1895 from nobodyiam/upgrade-mockito\n\nupgrade to mockito 2.x version","date":"2019-01-20 16:45:04","modifiedFileCount":"38","status":"M","submitter":"Jason Song"}]
