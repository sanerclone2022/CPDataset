[{"authorTime":"2018-09-24 15:19:33","codes":[{"authorDate":"2018-09-24 15:19:33","commitOrder":1,"curCode":"  public OpenReleaseDTO getLatestActiveRelease(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/releases/latest\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenReleaseDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get latest active release for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId,\n              clusterName, namespaceName, env), ex);\n    }\n  }\n","date":"2018-09-24 15:19:33","endLine":65,"groupId":"1866","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getLatestActiveRelease","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f0/6023ac4d06c7ebea95741ac006a237cf2227dd.src","preCode":"  public OpenReleaseDTO getLatestActiveRelease(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/releases/latest\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenReleaseDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get latest active release for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId,\n              clusterName, namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ReleaseOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2018-09-24 15:19:33","commitOrder":1,"curCode":"  public OpenNamespaceDTO getNamespace(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s\", escapePath(env), escapePath(appId),\n        escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get namespace for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","date":"2018-09-24 15:19:33","endLine":46,"groupId":"1866","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamespace","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/15/fa8f64dfd5a7aa8b6c6f45e814bcb305ab1c49.src","preCode":"  public OpenNamespaceDTO getNamespace(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s\", escapePath(env), escapePath(appId),\n        escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get namespace for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/NamespaceOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"B"}],"commitId":"0d32276855a0121324e6ab6219311ddcf6b0526a","commitMessage":"@@@Merge pull request #1508 from nobodyiam/apollo-open-api\n\nadd apollo-openapi client","date":"2018-09-24 15:19:33","modifiedFileCount":"5","status":"B","submitter":"Jason Song"},{"authorTime":"2021-09-14 20:40:08","codes":[{"authorDate":"2021-09-14 20:40:08","commitOrder":2,"curCode":"  public OpenReleaseDTO getLatestActiveRelease(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .envsPathVal(env)\n        .appsPathVal(appId)\n        .clustersPathVal(clusterName)\n        .namespacesPathVal(namespaceName)\n        .releasesPathVal(\"latest\");\n\n    try (CloseableHttpResponse response = get(pathBuilder)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenReleaseDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get latest active release for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId,\n              clusterName, namespaceName, env), ex);\n    }\n  }\n","date":"2021-09-14 20:40:08","endLine":90,"groupId":"1066","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getLatestActiveRelease","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/75/c63b92efb3ef03e02da7995c1e208fbe661fe2.src","preCode":"  public OpenReleaseDTO getLatestActiveRelease(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s/releases/latest\",\n        escapePath(env), escapePath(appId), escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenReleaseDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get latest active release for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId,\n              clusterName, namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ReleaseOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-09-14 20:40:08","commitOrder":2,"curCode":"  public OpenNamespaceDTO getNamespace(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    OpenApiPathBuilder pathBuilder = OpenApiPathBuilder.newBuilder()\n        .envsPathVal(env)\n        .appsPathVal(appId)\n        .clustersPathVal(clusterName)\n        .namespacesPathVal(namespaceName);\n\n    try (CloseableHttpResponse response = get(pathBuilder)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get namespace for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","date":"2021-09-14 20:40:08","endLine":66,"groupId":"1066","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamespace","params":"(StringappId@Stringenv@StringclusterName@StringnamespaceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e5/d8145d8936cc99fe3382efabed62dbde0cf240.src","preCode":"  public OpenNamespaceDTO getNamespace(String appId, String env, String clusterName, String namespaceName) {\n    if (Strings.isNullOrEmpty(clusterName)) {\n      clusterName = ConfigConsts.CLUSTER_NAME_DEFAULT;\n    }\n    if (Strings.isNullOrEmpty(namespaceName)) {\n      namespaceName = ConfigConsts.NAMESPACE_APPLICATION;\n    }\n\n    checkNotEmpty(appId, \"App id\");\n    checkNotEmpty(env, \"Env\");\n\n    String path = String.format(\"envs/%s/apps/%s/clusters/%s/namespaces/%s\", escapePath(env), escapePath(appId),\n        escapePath(clusterName), escapePath(namespaceName));\n\n    try (CloseableHttpResponse response = get(path)) {\n      return gson.fromJson(EntityUtils.toString(response.getEntity()), OpenNamespaceDTO.class);\n    } catch (Throwable ex) {\n      throw new RuntimeException(String\n          .format(\"Get namespace for appId: %s, cluster: %s, namespace: %s in env: %s failed\", appId, clusterName,\n              namespaceName, env), ex);\n    }\n  }\n","realPath":"apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/NamespaceOpenApiService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"d5931784dcdf1c414183bc816010a209463ec287","commitMessage":"@@@fix: replace String.format() with newly created class OpenApiPathBuilder (#3982)\n\nSigned-off-by: WillardHu <wei.hu@daocloud.io>\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-09-14 20:40:08","modifiedFileCount":"7","status":"M","submitter":"Willard"}]
