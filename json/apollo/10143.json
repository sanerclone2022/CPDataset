[{"authorTime":"2017-05-03 15:43:46","codes":[{"authorDate":"2017-05-03 15:43:46","commitOrder":2,"curCode":"  public List<ConsumerRole> assignNamespaceRoleToConsumer(String token, String appId, String namespaceName) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role namespaceModifyRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildModifyNamespaceRoleName(appId, namespaceName));\n    Role namespaceReleaseRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildReleaseNamespaceRoleName(appId, namespaceName));\n\n    if (namespaceModifyRole == null || namespaceReleaseRole == null) {\n      throw new BadRequestException(\"Namespace's role does not exist. Please check whether namespace has created.\");\n    }\n\n    long namespaceModifyRoleId = namespaceModifyRole.getId();\n    long namespaceReleaseRoleId = namespaceReleaseRole.getId();\n\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceModifyRoleId);\n    ConsumerRole managedReleaseRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceReleaseRoleId);\n    if (managedModifyRole != null && managedReleaseRole != null) {\n      return Arrays.asList(managedModifyRole, managedReleaseRole);\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n\n    ConsumerRole namespaceModifyConsumerRole = createConsumerRole(consumerId, namespaceModifyRoleId, operator);\n    ConsumerRole namespaceReleaseConsumerRole = createConsumerRole(consumerId, namespaceReleaseRoleId, operator);\n\n    ConsumerRole createdModifyConsumerRole = consumerRoleRepository.save(namespaceModifyConsumerRole);\n    ConsumerRole createdReleaseConsumerRole = consumerRoleRepository.save(namespaceReleaseConsumerRole);\n\n    return Arrays.asList(createdModifyConsumerRole, createdReleaseConsumerRole);\n  }\n","date":"2017-05-03 15:43:46","endLine":149,"groupId":"1341","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assignNamespaceRoleToConsumer","params":"(Stringtoken@StringappId@StringnamespaceName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a0/7d2c85d6829c742480fb94fe37714f46fe50a7.src","preCode":"  public List<ConsumerRole> assignNamespaceRoleToConsumer(String token, String appId, String namespaceName) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role namespaceModifyRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildModifyNamespaceRoleName(appId, namespaceName));\n    Role namespaceReleaseRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildReleaseNamespaceRoleName(appId, namespaceName));\n\n    if (namespaceModifyRole == null || namespaceReleaseRole == null) {\n      throw new BadRequestException(\"Namespace's role does not exist. Please check whether namespace has created.\");\n    }\n\n    long namespaceModifyRoleId = namespaceModifyRole.getId();\n    long namespaceReleaseRoleId = namespaceReleaseRole.getId();\n\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceModifyRoleId);\n    ConsumerRole managedReleaseRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceReleaseRoleId);\n    if (managedModifyRole != null && managedReleaseRole != null) {\n      return Arrays.asList(managedModifyRole, managedReleaseRole);\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n\n    ConsumerRole namespaceModifyConsumerRole = createConsumerRole(consumerId, namespaceModifyRoleId, operator);\n    ConsumerRole namespaceReleaseConsumerRole = createConsumerRole(consumerId, namespaceReleaseRoleId, operator);\n\n    ConsumerRole createdModifyConsumerRole = consumerRoleRepository.save(namespaceModifyConsumerRole);\n    ConsumerRole createdReleaseConsumerRole = consumerRoleRepository.save(namespaceReleaseConsumerRole);\n\n    return Arrays.asList(createdModifyConsumerRole, createdReleaseConsumerRole);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"MB"},{"authorDate":"2017-05-03 15:43:46","commitOrder":2,"curCode":"  public ConsumerRole assignAppRoleToConsumer(String token, String appId) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role masterRole = rolePermissionService.findRoleByRoleName(RoleUtils.buildAppMasterRoleName(appId));\n    if (masterRole == null) {\n      throw new BadRequestException(\"App's role does not exist. Please check whether app has created.\");\n    }\n\n    long roleId = masterRole.getId();\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, roleId);\n    if (managedModifyRole != null) {\n      return managedModifyRole;\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n    ConsumerRole consumerRole = createConsumerRole(consumerId, roleId, operator);\n    return consumerRoleRepository.save(consumerRole);\n  }\n","date":"2017-05-03 15:43:46","endLine":172,"groupId":"895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assignAppRoleToConsumer","params":"(Stringtoken@StringappId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a0/7d2c85d6829c742480fb94fe37714f46fe50a7.src","preCode":"  public ConsumerRole assignAppRoleToConsumer(String token, String appId) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role masterRole = rolePermissionService.findRoleByRoleName(RoleUtils.buildAppMasterRoleName(appId));\n    if (masterRole == null) {\n      throw new BadRequestException(\"App's role does not exist. Please check whether app has created.\");\n    }\n\n    long roleId = masterRole.getId();\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, roleId);\n    if (managedModifyRole != null) {\n      return managedModifyRole;\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n    ConsumerRole consumerRole = createConsumerRole(consumerId, roleId, operator);\n    return consumerRoleRepository.save(consumerRole);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"c511583393e0fc5ccba8ccfdf9ae27d63d16b1e5","commitMessage":"@@@Merge pull request #612 from lepdou/openapi-createnamespace\n\nadd create namespace open api","date":"2017-05-03 15:43:46","modifiedFileCount":"14","status":"M","submitter":"??"},{"authorTime":"2017-05-03 15:43:46","codes":[{"authorDate":"2018-07-24 02:11:59","commitOrder":3,"curCode":"  public List<ConsumerRole> assignNamespaceRoleToConsumer(String token, String appId, String namespaceName, String env) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role namespaceModifyRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildModifyNamespaceRoleName(appId, namespaceName, env));\n    Role namespaceReleaseRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildReleaseNamespaceRoleName(appId, namespaceName, env));\n\n    if (namespaceModifyRole == null || namespaceReleaseRole == null) {\n      throw new BadRequestException(\"Namespace's role does not exist. Please check whether namespace has created.\");\n    }\n\n    long namespaceModifyRoleId = namespaceModifyRole.getId();\n    long namespaceReleaseRoleId = namespaceReleaseRole.getId();\n\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceModifyRoleId);\n    ConsumerRole managedReleaseRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceReleaseRoleId);\n    if (managedModifyRole != null && managedReleaseRole != null) {\n      return Arrays.asList(managedModifyRole, managedReleaseRole);\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n\n    ConsumerRole namespaceModifyConsumerRole = createConsumerRole(consumerId, namespaceModifyRoleId, operator);\n    ConsumerRole namespaceReleaseConsumerRole = createConsumerRole(consumerId, namespaceReleaseRoleId, operator);\n\n    ConsumerRole createdModifyConsumerRole = consumerRoleRepository.save(namespaceModifyConsumerRole);\n    ConsumerRole createdReleaseConsumerRole = consumerRoleRepository.save(namespaceReleaseConsumerRole);\n\n    return Arrays.asList(createdModifyConsumerRole, createdReleaseConsumerRole);\n  }\n","date":"2018-07-24 02:11:59","endLine":153,"groupId":"10143","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assignNamespaceRoleToConsumer","params":"(Stringtoken@StringappId@StringnamespaceName@Stringenv)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c5/2f5f453e49f670fb3692b37bf8ca3719f5b88c.src","preCode":"  public List<ConsumerRole> assignNamespaceRoleToConsumer(String token, String appId, String namespaceName) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role namespaceModifyRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildModifyNamespaceRoleName(appId, namespaceName));\n    Role namespaceReleaseRole =\n        rolePermissionService.findRoleByRoleName(RoleUtils.buildReleaseNamespaceRoleName(appId, namespaceName));\n\n    if (namespaceModifyRole == null || namespaceReleaseRole == null) {\n      throw new BadRequestException(\"Namespace's role does not exist. Please check whether namespace has created.\");\n    }\n\n    long namespaceModifyRoleId = namespaceModifyRole.getId();\n    long namespaceReleaseRoleId = namespaceReleaseRole.getId();\n\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceModifyRoleId);\n    ConsumerRole managedReleaseRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, namespaceReleaseRoleId);\n    if (managedModifyRole != null && managedReleaseRole != null) {\n      return Arrays.asList(managedModifyRole, managedReleaseRole);\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n\n    ConsumerRole namespaceModifyConsumerRole = createConsumerRole(consumerId, namespaceModifyRoleId, operator);\n    ConsumerRole namespaceReleaseConsumerRole = createConsumerRole(consumerId, namespaceReleaseRoleId, operator);\n\n    ConsumerRole createdModifyConsumerRole = consumerRoleRepository.save(namespaceModifyConsumerRole);\n    ConsumerRole createdReleaseConsumerRole = consumerRoleRepository.save(namespaceReleaseConsumerRole);\n\n    return Arrays.asList(createdModifyConsumerRole, createdReleaseConsumerRole);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2017-05-03 15:43:46","commitOrder":3,"curCode":"  public ConsumerRole assignAppRoleToConsumer(String token, String appId) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role masterRole = rolePermissionService.findRoleByRoleName(RoleUtils.buildAppMasterRoleName(appId));\n    if (masterRole == null) {\n      throw new BadRequestException(\"App's role does not exist. Please check whether app has created.\");\n    }\n\n    long roleId = masterRole.getId();\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, roleId);\n    if (managedModifyRole != null) {\n      return managedModifyRole;\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n    ConsumerRole consumerRole = createConsumerRole(consumerId, roleId, operator);\n    return consumerRoleRepository.save(consumerRole);\n  }\n","date":"2017-05-03 15:43:46","endLine":172,"groupId":"10143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assignAppRoleToConsumer","params":"(Stringtoken@StringappId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a0/7d2c85d6829c742480fb94fe37714f46fe50a7.src","preCode":"  public ConsumerRole assignAppRoleToConsumer(String token, String appId) {\n    Long consumerId = getConsumerIdByToken(token);\n    if (consumerId == null) {\n      throw new BadRequestException(\"Token is Illegal\");\n    }\n\n    Role masterRole = rolePermissionService.findRoleByRoleName(RoleUtils.buildAppMasterRoleName(appId));\n    if (masterRole == null) {\n      throw new BadRequestException(\"App's role does not exist. Please check whether app has created.\");\n    }\n\n    long roleId = masterRole.getId();\n    ConsumerRole managedModifyRole = consumerRoleRepository.findByConsumerIdAndRoleId(consumerId, roleId);\n    if (managedModifyRole != null) {\n      return managedModifyRole;\n    }\n\n    String operator = userInfoHolder.getUser().getUserId();\n    ConsumerRole consumerRole = createConsumerRole(consumerId, roleId, operator);\n    return consumerRoleRepository.save(consumerRole);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"N"}],"commitId":"0bc91cc11464b1a27ef5dd227615995cb8db00a1","commitMessage":"@@@Merge pull request #1282 from nobodyiam/branch_env_permission\n\nSupport role permissions per environment","date":"2018-07-24 02:11:59","modifiedFileCount":"19","status":"M","submitter":"Jason Song"}]
