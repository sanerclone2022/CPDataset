[{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigRepository.stopLongPollingRefresh();\n  }\n","date":"2016-05-19 17:58:23","endLine":126,"groupId":"371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a8/8f15220b567b5d103696e95eba49e6af290e92.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigRepository.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    \n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>(){\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n      \n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n    \n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n    \n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigRepository.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n  }\n","date":"2016-05-19 17:58:23","endLine":165,"groupId":"382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a8/8f15220b567b5d103696e95eba49e6af290e92.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    \n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>(){\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n      \n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n    \n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n    \n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigRepository.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"0b3ace803cac96eb293336fd429738c5b92f845d","commitMessage":"@@@Merge pull request #209 from lepdou/rename\n\nRename","date":"2016-05-19 17:58:23","modifiedFileCount":"1","status":"B","submitter":"Jason Song"},{"authorTime":"2016-07-20 15:44:22","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":2,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2016-07-20 15:44:22","endLine":131,"groupId":"371","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigRepository.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-07-20 15:44:22","commitOrder":2,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n  }\n","date":"2016-07-20 15:44:22","endLine":172,"groupId":"1607","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n    \n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>(){\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n      \n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n    \n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n    \n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigRepository.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"M","submitter":"??"},{"authorTime":"2017-08-27 23:57:50","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":3,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2016-07-20 15:44:22","endLine":131,"groupId":"371","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2017-08-27 23:57:50","commitOrder":3,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor.forClass(HttpRequest.class);\n    verify(httpUtil, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","date":"2017-08-27 23:57:50","endLine":204,"groupId":"1811","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1c/42d8837ae2498556909f715c6eec193a43cbf2.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"M","submitter":"??"},{"authorTime":"2019-01-13 20:25:24","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":4,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2016-07-20 15:44:22","endLine":131,"groupId":"371","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2019-01-13 20:25:24","commitOrder":4,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor.forClass(HttpRequest.class);\n    verify(httpUtil, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","date":"2019-01-13 20:25:24","endLine":206,"groupId":"1811","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c8/301b0122d87a633a24e4a14c3fe736f8f43d4e.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(500, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor.forClass(HttpRequest.class);\n    verify(httpUtil, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"4dc4035ac247091d76b3ec54bf449f10d99fa75f","commitMessage":"@@@Enhancement: validates http parameters using javax.validation api (#1858)\n\n* enhancement: validates http parameters using javax.validation api\n\n* improve code quality according Codacity\n\n* update as requested\n\n* update according to Codacy\n","date":"2019-01-13 20:25:24","modifiedFileCount":"20","status":"M","submitter":"kezhenxu94"},{"authorTime":"2021-03-16 08:20:13","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":5,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2016-07-20 15:44:22","endLine":131,"groupId":"371","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2021-03-16 08:20:13","commitOrder":5,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor\n        .forClass(HttpRequest.class);\n    verify(httpClient, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","date":"2021-03-16 08:20:13","endLine":312,"groupId":"1811","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/46cb4c8710a040e2e38d76872b4170a6fdc4c0.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor\n        .forClass(HttpRequest.class);\n    verify(httpUtil, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"9f3d315e7e115220f6bbb836a1a8cfb4f4619d2f","commitMessage":"@@@replace http client implementation with interface (#3594)\n\n","date":"2021-03-16 08:20:13","modifiedFileCount":"7","status":"M","submitter":"vdisk-group"},{"authorTime":"2021-05-09 10:11:08","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":6,"curCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","date":"2016-07-20 15:44:22","endLine":131,"groupId":"10243","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRepositoryChangeListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/d046706a7c540f9d5f5309c245af004829825a.src","preCode":"  public void testRepositoryChangeListener() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    remoteConfigRepository.sync();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n\n    assertEquals(newConfigurations, captor.getValue());\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2021-05-09 10:11:08","commitOrder":6,"curCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(30_000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor\n        .forClass(HttpRequest.class);\n    verify(httpClient, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","date":"2021-05-09 10:11:08","endLine":312,"groupId":"10243","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollingRefresh","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/81/6aae4035ce7cdee7ec24c0d7ce75bc403253df.src","preCode":"  public void testLongPollingRefresh() throws Exception {\n    Map<String, String> configurations = ImmutableMap.of(\"someKey\", \"someValue\");\n    ApolloConfig someApolloConfig = assembleApolloConfig(configurations);\n\n    when(someResponse.getStatusCode()).thenReturn(200);\n    when(someResponse.getBody()).thenReturn(someApolloConfig);\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    RepositoryChangeListener someListener = mock(RepositoryChangeListener.class);\n    doAnswer(new Answer<Void>() {\n\n      @Override\n      public Void answer(InvocationOnMock invocation) throws Throwable {\n        longPollFinished.set(true);\n        return null;\n      }\n\n    }).when(someListener).onRepositoryChange(any(String.class), any(Properties.class));\n\n    RemoteConfigRepository remoteConfigRepository = new RemoteConfigRepository(someNamespace);\n    remoteConfigRepository.addChangeListener(someListener);\n    final ArgumentCaptor<Properties> captor = ArgumentCaptor.forClass(Properties.class);\n\n    Map<String, String> newConfigurations = ImmutableMap.of(\"someKey\", \"anotherValue\");\n    ApolloConfig newApolloConfig = assembleApolloConfig(newConfigurations);\n\n    ApolloNotificationMessages notificationMessages = new ApolloNotificationMessages();\n    String someKey = \"someKey\";\n    long someNotificationId = 1;\n    notificationMessages.put(someKey, someNotificationId);\n\n    ApolloConfigNotification someNotification = mock(ApolloConfigNotification.class);\n    when(someNotification.getNamespaceName()).thenReturn(someNamespace);\n    when(someNotification.getMessages()).thenReturn(notificationMessages);\n\n    when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);\n    when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));\n    when(someResponse.getBody()).thenReturn(newApolloConfig);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    remoteConfigLongPollService.stopLongPollingRefresh();\n\n    verify(someListener, times(1)).onRepositoryChange(eq(someNamespace), captor.capture());\n    assertEquals(newConfigurations, captor.getValue());\n\n    final ArgumentCaptor<HttpRequest> httpRequestArgumentCaptor = ArgumentCaptor\n        .forClass(HttpRequest.class);\n    verify(httpClient, atLeast(2)).doGet(httpRequestArgumentCaptor.capture(), eq(ApolloConfig.class));\n\n    HttpRequest request = httpRequestArgumentCaptor.getValue();\n\n    assertTrue(request.getUrl().contains(\"messages=%7B%22details%22%3A%7B%22someKey%22%3A1%7D%7D\"));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"20b8ddb8b913a7a694b151b88cb7c2c9f5a90028","commitMessage":"@@@test(apollo-client): make timeout more longer when long poll (#3668)\n\n","date":"2021-05-09 10:11:08","modifiedFileCount":"1","status":"M","submitter":"wxq"}]
