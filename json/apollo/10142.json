[{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2016-08-15 14:43:02","commitOrder":1,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key,value,dataChangeCreatedBy ������������������������������������������������������\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"���������������������������������������������.\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2016-08-15 14:43:02","endLine":59,"groupId":"271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8e/8698018230802e80209a30eee8db4196c2ed40.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key,value,dataChangeCreatedBy ������������������������������������������������������\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"���������������������������������������������.\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2016-08-15 14:43:02","commitOrder":1,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key,value,dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    ItemDTO toUpdateItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n    if (toUpdateItem == null) {\n      throw new BadRequestException(\"item not exists\");\n    }\n    \r\n    toUpdateItem.setComment(item.getComment());\n    toUpdateItem.setValue(item.getValue());\n    toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n    itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n  }\n","date":"2016-08-15 14:43:02","endLine":89,"groupId":"86","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8e/8698018230802e80209a30eee8db4196c2ed40.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key,value,dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    ItemDTO toUpdateItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n    if (toUpdateItem == null) {\n      throw new BadRequestException(\"item not exists\");\n    }\n    \r\n    toUpdateItem.setComment(item.getComment());\n    toUpdateItem.setValue(item.getValue());\n    toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n    itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"b87ed8ef334932b136f8ba1fe81eeb1d1bc0afc4","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !15","date":"2016-08-15 14:43:02","modifiedFileCount":"65","status":"B","submitter":"vss??"},{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2016-11-23 14:57:29","commitOrder":2,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key,value,dataChangeCreatedBy ������������������������������������������������������\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"���������������������������������������������.\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2016-11-23 14:57:29","endLine":61,"groupId":"271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/03/84478371ac536a7b2b2b7e145ca8d9914703b3.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key,value,dataChangeCreatedBy ������������������������������������������������������\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"���������������������������������������������.\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2016-08-15 14:43:02","commitOrder":2,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key,value,dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    ItemDTO toUpdateItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n    if (toUpdateItem == null) {\n      throw new BadRequestException(\"item not exists\");\n    }\n    \r\n    toUpdateItem.setComment(item.getComment());\n    toUpdateItem.setValue(item.getValue());\n    toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n    itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n  }\n","date":"2016-08-15 14:43:02","endLine":89,"groupId":"86","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/8e/8698018230802e80209a30eee8db4196c2ed40.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key,value,dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    ItemDTO toUpdateItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n    if (toUpdateItem == null) {\n      throw new BadRequestException(\"item not exists\");\n    }\n    \r\n    toUpdateItem.setComment(item.getComment());\n    toUpdateItem.setValue(item.getValue());\n    toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n    itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"5331b6378bb507d8c424f0e6aff091757cb3b0b4","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !35","date":"2016-11-23 14:57:29","modifiedFileCount":"3","status":"M","submitter":"zl??(IT)"},{"authorTime":"2018-09-24 15:19:33","codes":[{"authorDate":"2018-09-24 15:19:33","commitOrder":3,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key, value and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2018-09-24 15:19:33","endLine":63,"groupId":"271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5c/93f344246c5d99bff73d54481f82ccdb8996a0.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key,value,dataChangeCreatedBy ������������������������������������������������������\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"���������������������������������������������.\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2018-09-24 15:19:33","commitOrder":3,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key, value and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","date":"2018-09-24 15:19:33","endLine":103,"groupId":"273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5c/93f344246c5d99bff73d54481f82ccdb8996a0.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key,value,dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    ItemDTO toUpdateItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n    if (toUpdateItem == null) {\n      throw new BadRequestException(\"item not exists\");\n    }\n    \r\n    toUpdateItem.setComment(item.getComment());\n    toUpdateItem.setValue(item.getValue());\n    toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n    itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"0d32276855a0121324e6ab6219311ddcf6b0526a","commitMessage":"@@@Merge pull request #1508 from nobodyiam/apollo-open-api\n\nadd apollo-openapi client","date":"2018-09-24 15:19:33","modifiedFileCount":"5","status":"M","submitter":"Jason Song"},{"authorTime":"2019-01-13 16:42:46","codes":[{"authorDate":"2019-01-13 16:42:46","commitOrder":4,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2019-01-13 16:42:46","endLine":75,"groupId":"271","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/56/c875184bdd17b4224b0d307eabf961d6cfb12a.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeCreatedBy()),\n        \"key, value and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-01-13 16:42:46","commitOrder":4,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","date":"2019-01-13 16:42:46","endLine":115,"groupId":"273","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/56/c875184bdd17b4224b0d307eabf961d6cfb12a.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getValue(), item.getDataChangeLastModifiedBy()),\n        \"key, value and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"b76adf9cb454902b7d20d262ff918947cac6fdae","commitMessage":"@@@fixes #1841 (#1852)\n\n","date":"2019-01-13 16:42:46","modifiedFileCount":"2","status":"M","submitter":"kezhenxu94"},{"authorTime":"2019-12-22 15:29:32","codes":[{"authorDate":"2019-12-22 15:29:32","commitOrder":5,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2019-12-22 15:29:32","endLine":79,"groupId":"271","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/0c62f420c7133b6f5bee37ab04b1e94fea0994.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-12-22 15:29:32","commitOrder":5,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","date":"2019-12-22 15:29:32","endLine":123,"groupId":"1420","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6f/0c62f420c7133b6f5bee37ab04b1e94fea0994.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"f417ef3ec2b433fc30b566394295ae32da5f0f7d","commitMessage":"@@@Fixed an issue with openapi item comment being too long (#2849)\n\n","date":"2019-12-22 15:29:32","modifiedFileCount":"1","status":"M","submitter":"Zhuohao Li"},{"authorTime":"2020-09-11 20:01:31","codes":[{"authorDate":"2020-09-11 20:01:31","commitOrder":6,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.valueOf(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2020-09-11 20:01:31","endLine":79,"groupId":"271","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/4e/02b6cacbd76f48577caeec8598409821a57d4e.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-09-11 20:01:31","commitOrder":6,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.valueOf(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","date":"2020-09-11 20:01:31","endLine":123,"groupId":"32","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/4e/02b6cacbd76f48577caeec8598409821a57d4e.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.fromString(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.fromString(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"e321a8e7f315b2be45d38923e9bec3e3145332fe","commitMessage":"@@@Simplify code (#3290)\n\n","date":"2020-09-11 20:01:31","modifiedFileCount":"87","status":"M","submitter":"waters"},{"authorTime":"2021-07-03 20:04:07","codes":[{"authorDate":"2021-07-03 20:04:07","commitOrder":7,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.valueOf(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","date":"2021-07-03 20:04:07","endLine":95,"groupId":"271","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/b2/ead890db4761b7e1c3fcbe04c716810f055913.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.valueOf(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-07-03 20:04:07","commitOrder":7,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.valueOf(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","date":"2021-07-03 20:04:07","endLine":139,"groupId":"32","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/b2/ead890db4761b7e1c3fcbe04c716810f055913.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 64){\n      throw new BadRequestException(\"Comment length should not exceed 64 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.valueOf(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"1afa5ade9bbe14ce3ead107c473532be6d693f64","commitMessage":"@@@feature: modify item and release comment size limit to 256(#3803)\n\n","date":"2021-07-03 20:04:07","modifiedFileCount":"1","status":"M","submitter":"chengasd"},{"authorTime":"2021-09-15 21:14:36","codes":[{"authorDate":"2021-09-15 21:14:36","commitOrder":8,"curCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    return this.itemOpenApiService.createItem(appId, env, clusterName, namespaceName, item);\n  }\n","date":"2021-09-15 21:14:36","endLine":82,"groupId":"10142","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"createItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyOpenItemDTOitem@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2c/aa29d45c2c7a6f14c23558951011b338dfda45.src","preCode":"  public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,\n                                @PathVariable String clusterName, @PathVariable String namespaceName,\n                                @RequestBody OpenItemDTO item, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeCreatedBy()),\n        \"key and dataChangeCreatedBy should not be null or empty\");\n\n    if (userService.findByUserId(item.getDataChangeCreatedBy()) == null) {\n      throw new BadRequestException(\"User \" + item.getDataChangeCreatedBy() + \" doesn't exist!\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    ItemDTO toCreate = OpenApiBeanUtils.transformToItemDTO(item);\n\n    \r\n    toCreate.setLineNum(0);\n    toCreate.setId(0);\n    toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());\n    toCreate.setDataChangeLastModifiedTime(null);\n    toCreate.setDataChangeCreatedTime(null);\n\n    ItemDTO createdItem = itemService.createItem(appId, Env.valueOf(env),\n        clusterName, namespaceName, toCreate);\n    return OpenApiBeanUtils.transformFromItemDTO(createdItem);\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-09-15 21:14:36","commitOrder":8,"curCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    if (createIfNotExists) {\n      this.itemOpenApiService.createOrUpdateItem(appId, env, clusterName, namespaceName, item);\n    } else {\n      this.itemOpenApiService.updateItem(appId, env, clusterName, namespaceName, item);\n    }\n  }\n","date":"2021-09-15 21:14:36","endLine":112,"groupId":"10142","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"updateItem","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringkey@@RequestBodyOpenItemDTOitem@@RequestParam(defaultValue=\"false\")booleancreateIfNotExists@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2c/aa29d45c2c7a6f14c23558951011b338dfda45.src","preCode":"  public void updateItem(@PathVariable String appId, @PathVariable String env,\n                         @PathVariable String clusterName, @PathVariable String namespaceName,\n                         @PathVariable String key, @RequestBody OpenItemDTO item,\n                         @RequestParam(defaultValue = \"false\") boolean createIfNotExists, HttpServletRequest request) {\n\n    RequestPrecondition.checkArguments(item != null, \"item payload can not be empty\");\n\n    RequestPrecondition.checkArguments(\n        !StringUtils.isContainEmpty(item.getKey(), item.getDataChangeLastModifiedBy()),\n        \"key and dataChangeLastModifiedBy can not be empty\");\n\n    RequestPrecondition.checkArguments(item.getKey().equals(key), \"Key in path and payload is not consistent\");\n\n    if (userService.findByUserId(item.getDataChangeLastModifiedBy()) == null) {\n      throw new BadRequestException(\"user(dataChangeLastModifiedBy) not exists\");\n    }\n\n    if(!StringUtils.isEmpty(item.getComment()) && item.getComment().length() > 256){\n      throw new BadRequestException(\"Comment length should not exceed 256 characters\");\n    }\n\n    try {\n      ItemDTO toUpdateItem = itemService\n          .loadItem(Env.valueOf(env), appId, clusterName, namespaceName, item.getKey());\n      \r\n      toUpdateItem.setComment(item.getComment());\n      toUpdateItem.setValue(item.getValue());\n      toUpdateItem.setDataChangeLastModifiedBy(item.getDataChangeLastModifiedBy());\n\n      itemService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, toUpdateItem);\n    } catch (Throwable ex) {\n      if (ex instanceof HttpStatusCodeException) {\n        \r\n        if (((HttpStatusCodeException) ex).getStatusCode().equals(HttpStatus.NOT_FOUND) && createIfNotExists) {\n          createItem(appId, env, clusterName, namespaceName, item, request);\n          return;\n        }\n      }\n      throw ex;\n    }\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"2455c0f25b07fb42d628df194a1a35dbc0a95ea6","commitMessage":"@@@refactor: let open api more easier to use and development (#3943)\n\n* refactor: add open api interface\n\n* fix: GetMapping conflict\n\n* Update apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/ApolloOpenApiClient.java\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>\n\n* fix: HttpServletRequest lack. Use an UnsupportedOperationException method instead\n\n* fix: GetMapping conflict\n\n* delete method parameter request\n\nUse 'T(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getRequest()' instead of '#request'\n\n* rollback controller in portal\n\n* rollback ApolloOpenApiClient\n\n* delete xxxOpenApi\n\n* refactor: use xxxOpenApiService as api\n\n* Update NamespaceBranchController.java\n\n* Update CHANGES.md\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-09-15 21:14:36","modifiedFileCount":"13","status":"M","submitter":"wxq"}]
