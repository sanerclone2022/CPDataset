[{"authorTime":"2018-09-29 22:44:06","codes":[{"authorDate":"2018-09-24 15:19:33","commitOrder":5,"curCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n\n    checkModel(model != null);\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","date":"2018-09-24 15:19:33","endLine":62,"groupId":"1773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/55/643d0e1eccdb884bbf1806033b84320c9b81c4.src","preCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n\n    checkModel(model != null);\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"NB"},{"authorDate":"2018-09-29 22:44:06","commitOrder":5,"curCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        checkModel(model != null);\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","date":"2018-09-29 22:44:06","endLine":130,"groupId":"1773","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createGrayRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringbranchName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ea/321e91c54b94bf667a0407b0c8567e1258ed4a.src","preCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        checkModel(model != null);\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"7c435bd5e0308d05097a9e69614e73ee33f099ca","commitMessage":"@@@Merge pull request #1518 from jieqian/gray_release_4_openapi\n\nfeature: add gray operation on Open API","date":"2018-09-29 22:44:06","modifiedFileCount":"7","status":"M","submitter":"Jason Song"},{"authorTime":"2018-12-31 17:45:57","codes":[{"authorDate":"2018-12-31 17:45:57","commitOrder":6,"curCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n\n    checkModel(model != null);\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","date":"2018-12-31 20:41:48","endLine":68,"groupId":"1410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e1/e119b70392ca74694efd969f37fce6757f5abd.src","preCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n\n    checkModel(model != null);\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-12-31 17:45:57","commitOrder":6,"curCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        checkModel(model != null);\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","date":"2018-12-31 20:41:48","endLine":130,"groupId":"1410","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createGrayRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringbranchName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/e1/e119b70392ca74694efd969f37fce6757f5abd.src","preCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        checkModel(model != null);\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"34b912c542e1d2e316da5073931f559447914379","commitMessage":"@@@fix typo\n","date":"2018-12-31 20:41:48","modifiedFileCount":"20","status":"M","submitter":"kezhenxu94"},{"authorTime":"2019-01-19 22:45:44","codes":[{"authorDate":"2019-01-19 22:45:44","commitOrder":7,"curCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","date":"2019-01-19 22:45:44","endLine":71,"groupId":"1410","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3e/ca05e6cc63b110e07cd15709f797d00952eed4.src","preCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n\n    checkModel(model != null);\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-01-19 22:45:44","commitOrder":7,"curCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","date":"2019-01-19 22:45:44","endLine":130,"groupId":"1410","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createGrayRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringbranchName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3e/ca05e6cc63b110e07cd15709f797d00952eed4.src","preCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        checkModel(model != null);\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"f7553534d336866cc0ce192d1fec43a0de78589e","commitMessage":"@@@Enhancement: validation (#1869)\n\n* Enhancement: validates http parameters using javax.validation api\n\n* remove unnecessary validation\n","date":"2019-01-19 22:45:44","modifiedFileCount":"12","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-09-11 20:01:31","codes":[{"authorDate":"2020-09-11 20:01:31","commitOrder":8,"curCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.valueOf(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","date":"2020-09-11 20:01:31","endLine":74,"groupId":"781","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/d5560c8bb17e0f3b04365210e0e7809d225e34.src","preCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.fromString(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-09-11 20:01:31","commitOrder":8,"curCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.valueOf(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","date":"2020-09-11 20:01:31","endLine":133,"groupId":"781","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createGrayRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringbranchName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/d5560c8bb17e0f3b04365210e0e7809d225e34.src","preCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.fromString(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"e321a8e7f315b2be45d38923e9bec3e3145332fe","commitMessage":"@@@Simplify code (#3290)\n\n","date":"2020-09-11 20:01:31","modifiedFileCount":"87","status":"M","submitter":"waters"},{"authorTime":"2020-09-11 20:01:31","codes":[{"authorDate":"2021-09-15 21:14:36","commitOrder":9,"curCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    return this.releaseOpenApiService.publishNamespace(appId, env, clusterName, namespaceName, model);\n  }\n","date":"2021-09-15 21:14:36","endLine":87,"groupId":"10139","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/02/1a538e3f148b7a505d47fc22a5fc313dd423eb.src","preCode":"  public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,\n                                      @PathVariable String clusterName,\n                                      @PathVariable String namespaceName,\n                                      @RequestBody NamespaceReleaseDTO model,\n                                      HttpServletRequest request) {\n    RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n            .getReleaseTitle()),\n        \"Params(releaseTitle and releasedBy) can not be empty\");\n\n    if (userService.findByUserId(model.getReleasedBy()) == null) {\n      throw new BadRequestException(\"user(releaseBy) not exists\");\n    }\n\n    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n    releaseModel.setAppId(appId);\n    releaseModel.setEnv(Env.valueOf(env).toString());\n    releaseModel.setClusterName(clusterName);\n    releaseModel.setNamespaceName(namespaceName);\n\n    return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-09-11 20:01:31","commitOrder":9,"curCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.valueOf(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","date":"2020-09-11 20:01:31","endLine":133,"groupId":"10139","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createGrayRelease","params":"(@PathVariableStringappId@@PathVariableStringenv@@PathVariableStringclusterName@@PathVariableStringnamespaceName@@PathVariableStringbranchName@@RequestBodyNamespaceReleaseDTOmodel@HttpServletRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/d5560c8bb17e0f3b04365210e0e7809d225e34.src","preCode":"    public OpenReleaseDTO createGrayRelease(@PathVariable String appId,\n                                        @PathVariable String env, @PathVariable String clusterName,\n                                        @PathVariable String namespaceName, @PathVariable String branchName,\n                                        @RequestBody NamespaceReleaseDTO model,\n                                        HttpServletRequest request) {\n        RequestPrecondition.checkArguments(!StringUtils.isContainEmpty(model.getReleasedBy(), model\n                        .getReleaseTitle()),\n                \"Params(releaseTitle and releasedBy) can not be empty\");\n\n        if (userService.findByUserId(model.getReleasedBy()) == null) {\n            throw new BadRequestException(\"user(releaseBy) not exists\");\n        }\n\n        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);\n\n        releaseModel.setAppId(appId);\n        releaseModel.setEnv(Env.valueOf(env).toString());\n        releaseModel.setClusterName(branchName);\n        releaseModel.setNamespaceName(namespaceName);\n\n        return OpenApiBeanUtils.transformFromReleaseDTO(releaseService.publish(releaseModel));\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"2455c0f25b07fb42d628df194a1a35dbc0a95ea6","commitMessage":"@@@refactor: let open api more easier to use and development (#3943)\n\n* refactor: add open api interface\n\n* fix: GetMapping conflict\n\n* Update apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/ApolloOpenApiClient.java\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>\n\n* fix: HttpServletRequest lack. Use an UnsupportedOperationException method instead\n\n* fix: GetMapping conflict\n\n* delete method parameter request\n\nUse 'T(org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getRequest()' instead of '#request'\n\n* rollback controller in portal\n\n* rollback ApolloOpenApiClient\n\n* delete xxxOpenApi\n\n* refactor: use xxxOpenApiService as api\n\n* Update NamespaceBranchController.java\n\n* Update CHANGES.md\n\nCo-authored-by: Jason Song <nobodyiam@gmail.com>","date":"2021-09-15 21:14:36","modifiedFileCount":"13","status":"M","submitter":"wxq"}]
