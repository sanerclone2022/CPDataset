[{"authorTime":"2017-04-26 11:32:55","codes":[{"authorDate":"2018-05-03 22:26:43","commitOrder":5,"curCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2018-05-03 22:26:43","endLine":670,"groupId":"588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/b7ab75ca3da1e3860407b6a958e343b2343619.src","preCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"B"},{"authorDate":"2017-04-26 11:32:55","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2017-04-26 11:32:55","endLine":57,"groupId":"588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ee/f3ee2c2e9a8d9e127129b9b41f7b6f10fa7ead.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"}],"commitId":"f1f7245930382361d167151b3aae412cad5a0d02","commitMessage":"@@@Merge pull request #1072 from wuwen5/properties#preform\n\n??Properties#stringPropertyNames???jdk9???????cpu??????.","date":"2018-05-03 22:26:43","modifiedFileCount":"2","status":"M","submitter":"Jason Song"},{"authorTime":"2018-09-16 11:00:16","codes":[{"authorDate":"2018-05-03 22:26:43","commitOrder":6,"curCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2018-05-03 22:26:43","endLine":670,"groupId":"588","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/b7ab75ca3da1e3860407b6a958e343b2343619.src","preCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"N"},{"authorDate":"2018-09-16 11:00:16","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","date":"2018-09-16 11:00:16","endLine":61,"groupId":"588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/d5/b609b10b0238f56c4790d0737f114d07ef2a23.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"9e3aec542eeed1cec46c5930657582a8669c7492","commitMessage":"@@@Merge pull request #1470 from nobodyiam/config-source\n\nadd getSourceType api","date":"2018-09-16 11:00:16","modifiedFileCount":"15","status":"M","submitter":"Jason Song"},{"authorTime":"2020-01-21 09:08:45","codes":[{"authorDate":"2018-05-03 22:26:43","commitOrder":7,"curCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2018-05-03 22:26:43","endLine":670,"groupId":"588","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/b7ab75ca3da1e3860407b6a958e343b2343619.src","preCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"N"},{"authorDate":"2020-01-21 09:08:45","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n    MockInjector.setInstance(PropertiesFactory.class, new DefaultPropertiesFactory());\n\n  }\n","date":"2020-01-21 09:08:45","endLine":74,"groupId":"588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5f/6f98112456a08f5677c32e1267953bd838df86.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"82790e5f4a38ed4c2534545686b641f224f0887a","commitMessage":"@@@Add OrderedProperties to keep the property order in apollo-client\n\n","date":"2020-01-21 09:08:45","modifiedFileCount":"22","status":"M","submitter":"songdragon"},{"authorTime":"2020-01-21 08:22:12","codes":[{"authorDate":"2018-05-03 22:26:43","commitOrder":8,"curCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2018-05-03 22:26:43","endLine":670,"groupId":"588","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/b7ab75ca3da1e3860407b6a958e343b2343619.src","preCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"N"},{"authorDate":"2020-01-21 08:22:12","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","date":"2020-01-21 20:16:07","endLine":72,"groupId":"588","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ef/ae37176bebd1751637ade13dc3410703d64705.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    configUtil = new MockConfigUtil();\n    MockInjector.setInstance(ConfigUtil.class, configUtil);\n    MockInjector.setInstance(PropertiesFactory.class, new DefaultPropertiesFactory());\n\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"5fe54966f5f50e5f5e1c3b2e0f0d82b1d92f014d","commitMessage":"@@@use linked hash map to keep server side config order and do some refactoring to apollo-client\n","date":"2020-01-21 20:16:07","modifiedFileCount":"18","status":"M","submitter":"Jason Song"},{"authorTime":"2020-06-21 12:42:33","codes":[{"authorDate":"2018-05-03 22:26:43","commitOrder":9,"curCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","date":"2018-05-03 22:26:43","endLine":670,"groupId":"10223","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPropertyNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/19/b7ab75ca3da1e3860407b6a958e343b2343619.src","preCode":"  public void testGetPropertyNames() {\n    String someKeyPrefix = \"someKey\";\n    String someValuePrefix = \"someValue\";\n\n    \r\n    someProperties = new Properties();\n    for (int i = 0; i < 10; i++) {\n      someProperties.setProperty(someKeyPrefix + i, someValuePrefix + i);\n    }\n\n    when(configRepository.getConfig()).thenReturn(someProperties);\n\n    DefaultConfig defaultConfig =\n            new DefaultConfig(someNamespace, configRepository);\n\n    Set<String> propertyNames = defaultConfig.getPropertyNames();\n\n    assertEquals(10, propertyNames.size());\n    assertEquals(someProperties.stringPropertyNames(), propertyNames);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/DefaultConfigTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"N"},{"authorDate":"2020-06-21 12:42:33","commitOrder":9,"curCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","date":"2020-06-21 14:13:02","endLine":71,"groupId":"10223","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ff/c879d90efd5fb0e3ec33df668bc067b018c373.src","preCode":"  public void setUp() throws Exception {\n    someBaseDir = new File(\"src/test/resources/config-cache\");\n    someBaseDir.mkdir();\n\n    someNamespace = \"someName\";\n    someProperties = new Properties();\n    defaultKey = \"defaultKey\";\n    defaultValue = \"defaultValue\";\n    someProperties.setProperty(defaultKey, defaultValue);\n    someSourceType = ConfigSourceType.REMOTE;\n    upstreamRepo = mock(ConfigRepository.class);\n    when(upstreamRepo.getConfig()).thenReturn(someProperties);\n    when(upstreamRepo.getSourceType()).thenReturn(someSourceType);\n\n    MockInjector.reset();\n    MockInjector.setInstance(ConfigUtil.class, new MockConfigUtil());\n    PropertiesFactory propertiesFactory = mock(PropertiesFactory.class);\n    when(propertiesFactory.getPropertiesInstance()).thenAnswer(new Answer<Properties>() {\n      @Override\n      public Properties answer(InvocationOnMock invocation) {\n        return new Properties();\n      }\n    });\n    MockInjector.setInstance(PropertiesFactory.class, propertiesFactory);\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepositoryTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"4c2c12b7c8c209b3f12eda7b9f3b7d659523a901","commitMessage":"@@@reset mock inject in tear down phase to make sure the context is clean\n","date":"2020-06-21 14:13:02","modifiedFileCount":"17","status":"M","submitter":"Jason Song"}]
