[{"authorTime":"2016-07-21 12:04:08","codes":[{"authorDate":"2016-07-21 12:04:08","commitOrder":1,"curCode":"  public void testDelete(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.delete(Env.DEV, path);\n\n    verify(restTemplate).delete(serviceOne + \"/\" + path);\n\n  }\n","date":"2016-07-21 12:04:08","endLine":128,"groupId":"636","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/13/378584a6e72ef01b6479989529fe9983d1977d.src","preCode":"  public void testDelete(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.delete(Env.DEV, path);\n\n    verify(restTemplate).delete(serviceOne + \"/\" + path);\n\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2016-07-21 12:04:08","commitOrder":1,"curCode":"  public void testPut(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.put(Env.DEV, path, request);\n\n    verify(restTemplate).put(serviceOne + \"/\" + path, request);\n  }\n","date":"2016-07-21 12:04:08","endLine":138,"groupId":"1707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/13/378584a6e72ef01b6479989529fe9983d1977d.src","preCode":"  public void testPut(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.put(Env.DEV, path, request);\n\n    verify(restTemplate).put(serviceOne + \"/\" + path, request);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"0447fca3e6c0ed65f09ffcf557522754418a1470","commitMessage":"@@@Merge pull request #335 from lepdou/cat_log\n\ncat log & ??????? & call admin server retry","date":"2016-07-21 12:04:08","modifiedFileCount":"15","status":"B","submitter":"Jason Song"},{"authorTime":"2020-08-08 13:30:07","codes":[{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testDelete() {\n    ResponseEntity someEntity = mock(ResponseEntity.class);\n\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays\n            .asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.DELETE), any(HttpEntity.class),\n            (Class<Object>) isNull())).thenReturn(someEntity);\n\n    retryableRestTemplate.delete(Env.DEV, path);\n\n    verify(restTemplate)\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.DELETE), any(HttpEntity.class),\n            (Class<Object>) isNull());\n  }\n","date":"2020-08-16 20:59:48","endLine":200,"groupId":"10104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ed/a4fd92f3416422e292ea527339c4f758cca640.src","preCode":"  public void testDelete(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.delete(Env.DEV, path);\n\n    verify(restTemplate).delete(serviceOne + \"/\" + path);\n\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-08-08 13:30:07","commitOrder":2,"curCode":"  public void testPut() {\n    ResponseEntity someEntity = mock(ResponseEntity.class);\n\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays\n            .asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n    when(restTemplate\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.PUT), any(HttpEntity.class),\n            (Class<Object>) isNull())).thenReturn(someEntity);\n\n    retryableRestTemplate.put(Env.DEV, path, request);\n\n    ArgumentCaptor<HttpEntity> argumentCaptor = ArgumentCaptor.forClass(HttpEntity.class);\n    verify(restTemplate)\n        .exchange(eq(serviceOne + \"/\" + path), eq(HttpMethod.PUT), argumentCaptor.capture(),\n            (Class<Object>) isNull());\n\n    assertEquals(request, argumentCaptor.getValue().getBody());\n  }\n","date":"2020-08-16 20:59:48","endLine":221,"groupId":"10104","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ed/a4fd92f3416422e292ea527339c4f758cca640.src","preCode":"  public void testPut(){\n    when(serviceAddressLocator.getServiceList(any()))\n        .thenReturn(Arrays.asList(mockService(serviceOne), mockService(serviceTwo), mockService(serviceThree)));\n\n    retryableRestTemplate.put(Env.DEV, path, request);\n\n    verify(restTemplate).put(serviceOne + \"/\" + path, request);\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"6ff6ddd47f9be87ad77a6a169cc46996cc5d89dd","commitMessage":"@@@add access control support for admin service\n","date":"2020-08-16 20:59:48","modifiedFileCount":"13","status":"M","submitter":"Jason Song"}]
