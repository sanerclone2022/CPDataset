[{"authorTime":"2016-11-22 15:47:36","codes":[{"authorDate":"2016-08-23 10:27:07","commitOrder":3,"curCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n  }\n","date":"2016-08-23 10:27:07","endLine":170,"groupId":"209","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryConfigAsJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/1a/e1b13b0ddd725d7e0015d5d804358d1ab7ca0c.src","preCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"NB"},{"authorDate":"2016-11-22 15:47:36","commitOrder":3,"curCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","date":"2016-11-22 15:47:36","endLine":216,"groupId":"1339","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryConfigWithGrayRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/97/31b1971dbad6b4278d34db8a7de50a04f7544e.src","preCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"6d7ebbe8491f5a920f20f84867e9114c3fbd17ae","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !32","date":"2016-11-22 15:47:36","modifiedFileCount":"58","status":"M","submitter":"zl??(IT)"},{"authorTime":"2017-08-27 23:57:50","codes":[{"authorDate":"2017-08-27 23:57:50","commitOrder":4,"curCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n  }\n","date":"2017-08-27 23:57:50","endLine":177,"groupId":"209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryConfigAsJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ab/3e1049c4d5559907cf50b6aef8fcb3d980a713.src","preCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2017-08-27 23:57:50","commitOrder":4,"curCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","date":"2017-08-27 23:57:50","endLine":216,"groupId":"1339","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryConfigWithGrayRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/ab/3e1049c4d5559907cf50b6aef8fcb3d980a713.src","preCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"2a8348286501413e5768f984cbfe45f2b9dbd5f1","commitMessage":"@@@Merge pull request #719 from nobodyiam/configservice-cache-merge\n\nConfig service cache and namespace name normalization","date":"2017-08-27 23:57:50","modifiedFileCount":"32","status":"M","submitter":"??"},{"authorTime":"2020-08-22 16:05:14","codes":[{"authorDate":"2020-08-22 16:05:14","commitOrder":5,"curCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, GSON.fromJson(response.getBody(), responseType));\n  }\n","date":"2020-08-22 16:05:14","endLine":173,"groupId":"10500","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryConfigAsJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/91/815c5246aa307d8958017ad0872263694108cf.src","preCode":"  public void testQueryConfigAsJson() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    String someWatchKey = \"someWatchKey\";\n    Set<String> watchKeys = Sets.newHashSet(someWatchKey);\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(watchKeysUtil\n        .assembleAllWatchKeys(someAppId, someClusterName, someNamespace, someDataCenter))\n        .thenReturn(watchKeys);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2020-08-22 16:05:14","commitOrder":5,"curCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, GSON.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","date":"2020-08-22 16:05:14","endLine":211,"groupId":"10500","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryConfigWithGrayRelease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/91/815c5246aa307d8958017ad0872263694108cf.src","preCode":"  public void testQueryConfigWithGrayRelease() throws Exception {\n    String someKey = \"someKey\";\n    String someValue = \"someValue\";\n    Gson gson = new Gson();\n    Type responseType = new TypeToken<Map<String, String>>(){}.getType();\n\n    Map<String, String> configurations =\n        ImmutableMap.of(someKey, someValue);\n\n    when(grayReleaseRulesHolder.hasGrayReleaseRule(someAppId, someClientIp, someNamespace))\n        .thenReturn(true);\n\n    ApolloConfig someApolloConfig = mock(ApolloConfig.class);\n    when(someApolloConfig.getConfigurations()).thenReturn(configurations);\n    when(configController\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse)).thenReturn(someApolloConfig);\n\n    ResponseEntity<String> response =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    ResponseEntity<String> anotherResponse =\n        configFileController\n            .queryConfigAsJson(someAppId, someClusterName, someNamespace, someDataCenter,\n                someClientIp, someRequest, someResponse);\n\n    verify(configController, times(2))\n        .queryConfig(someAppId, someClusterName, someNamespace, someDataCenter, \"-1\", someClientIp, null,\n            someRequest, someResponse);\n\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(configurations, gson.fromJson(response.getBody(), responseType));\n    assertTrue(watchedKeys2CacheKey.isEmpty());\n    assertTrue(cacheKey2WatchedKeys.isEmpty());\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileControllerTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"077b1762845af5842d1af6d18cf117c273f483bf","commitMessage":"@@@polish some code (#3249)\n\n","date":"2020-08-22 16:05:14","modifiedFileCount":"34","status":"M","submitter":"Jared Tan"}]
