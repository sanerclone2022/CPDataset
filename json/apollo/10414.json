[{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  private ContextHandler mockPollNotificationHandler(final long pollResultTimeOutInMS,\n                                                     final int statusCode,\n                                                     final ApolloConfigNotification result,\n                                                     final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/notifications\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        try {\n          TimeUnit.MILLISECONDS.sleep(pollResultTimeOutInMS);\n        } catch (InterruptedException e) {\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n\n    return context;\n  }\n","date":"2016-05-19 17:58:23","endLine":299,"groupId":"962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockPollNotificationHandler","params":"(finallongpollResultTimeOutInMS@finalintstatusCode@finalApolloConfigNotificationresult@finalbooleanfailedAtFirstTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5e/70bb50dc1a7d695854a8095aaafcf556b2121d.src","preCode":"  private ContextHandler mockPollNotificationHandler(final long pollResultTimeOutInMS,\n                                                     final int statusCode,\n                                                     final ApolloConfigNotification result,\n                                                     final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/notifications\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        try {\n          TimeUnit.MILLISECONDS.sleep(pollResultTimeOutInMS);\n        } catch (InterruptedException e) {\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n\n    return context;\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2016-05-19 17:58:23","commitOrder":1,"curCode":"  private ContextHandler mockConfigServerHandler(final int statusCode, final ApolloConfig result,\n                                                 final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/configs/*\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n    return context;\n  }\n","date":"2016-05-19 17:58:23","endLine":323,"groupId":"817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mockConfigServerHandler","params":"(finalintstatusCode@finalApolloConfigresult@finalbooleanfailedAtFirstTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5e/70bb50dc1a7d695854a8095aaafcf556b2121d.src","preCode":"  private ContextHandler mockConfigServerHandler(final int statusCode, final ApolloConfig result,\n                                                 final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/configs/*\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n    return context;\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"0b3ace803cac96eb293336fd429738c5b92f845d","commitMessage":"@@@Merge pull request #209 from lepdou/rename\n\nRename","date":"2016-05-19 17:58:23","modifiedFileCount":"1","status":"B","submitter":"Jason Song"},{"authorTime":"2016-05-19 17:58:23","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":2,"curCode":"  private ContextHandler mockPollNotificationHandler(final long pollResultTimeOutInMS,\n                                                     final int statusCode,\n                                                     final List<ApolloConfigNotification> result,\n                                                     final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/notifications/v2\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        try {\n          TimeUnit.MILLISECONDS.sleep(pollResultTimeOutInMS);\n        } catch (InterruptedException e) {\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n\n    return context;\n  }\n","date":"2016-07-20 15:44:22","endLine":402,"groupId":"10414","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mockPollNotificationHandler","params":"(finallongpollResultTimeOutInMS@finalintstatusCode@finalList<ApolloConfigNotification>result@finalbooleanfailedAtFirstTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c5/8b4c794441be3cdb4241de5424b2ca1f1eb6da.src","preCode":"  private ContextHandler mockPollNotificationHandler(final long pollResultTimeOutInMS,\n                                                     final int statusCode,\n                                                     final ApolloConfigNotification result,\n                                                     final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/notifications\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        try {\n          TimeUnit.MILLISECONDS.sleep(pollResultTimeOutInMS);\n        } catch (InterruptedException e) {\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n\n    return context;\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"M"},{"authorDate":"2016-05-19 17:58:23","commitOrder":2,"curCode":"  private ContextHandler mockConfigServerHandler(final int statusCode, final ApolloConfig result,\n                                                 final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/configs/*\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n    return context;\n  }\n","date":"2016-05-19 17:58:23","endLine":323,"groupId":"10414","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mockConfigServerHandler","params":"(finalintstatusCode@finalApolloConfigresult@finalbooleanfailedAtFirstTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/5e/70bb50dc1a7d695854a8095aaafcf556b2121d.src","preCode":"  private ContextHandler mockConfigServerHandler(final int statusCode, final ApolloConfig result,\n                                                 final boolean failedAtFirstTime) {\n    ContextHandler context = new ContextHandler(\"/configs/*\");\n    context.setHandler(new AbstractHandler() {\n      AtomicInteger counter = new AtomicInteger(0);\n\n      @Override\n      public void handle(String target, Request baseRequest, HttpServletRequest request,\n                         HttpServletResponse response) throws IOException, ServletException {\n        if (failedAtFirstTime && counter.incrementAndGet() == 1) {\n          response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n          baseRequest.setHandled(true);\n          return;\n        }\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(statusCode);\n        response.getWriter().println(gson.toJson(result));\n        baseRequest.setHandled(true);\n      }\n    });\n    return context;\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"M","submitter":"??"}]
