[{"authorTime":"2017-04-28 14:45:48","codes":[{"authorDate":"2017-04-28 14:45:48","commitOrder":1,"curCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds =\n        FluentIterable.from(created).transform(BaseEntity::getId)\n            .toSet();\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAll(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","date":"2017-04-28 14:45:48","endLine":120,"groupId":"524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreatePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/21/8be89b9a711a8ca5b1829eebf4e239b4f0552c.src","preCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds =\n        FluentIterable.from(created).transform(BaseEntity::getId)\n            .toSet();\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAll(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"},{"authorDate":"2017-04-28 14:45:48","commitOrder":1,"curCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","date":"2017-04-28 14:45:48","endLine":135,"groupId":"1106","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePermissionsWithPermissionsExisted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/21/8be89b9a711a8ca5b1829eebf4e239b4f0552c.src","preCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"}],"commitId":"14ccb66eff042788db008b6134275aa3b990bb1e","commitMessage":"@@@Merge pull request #604 from timothynode/master\n\nchange Role Service to interface impl","date":"2017-04-28 14:45:48","modifiedFileCount":"4","status":"B","submitter":"??"},{"authorTime":"2017-04-28 14:45:48","codes":[{"authorDate":"2018-10-03 20:32:47","commitOrder":2,"curCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds =\n        FluentIterable.from(created).transform(BaseEntity::getId)\n            .toSet();\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAllById(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","date":"2018-10-03 20:32:47","endLine":120,"groupId":"524","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreatePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/46/0839680565feb2abd47457fc4ab88b158e33ee.src","preCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds =\n        FluentIterable.from(created).transform(BaseEntity::getId)\n            .toSet();\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAll(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2017-04-28 14:45:48","commitOrder":2,"curCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","date":"2017-04-28 14:45:48","endLine":135,"groupId":"1106","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePermissionsWithPermissionsExisted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/21/8be89b9a711a8ca5b1829eebf4e239b4f0552c.src","preCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"e8b82d1357057f9e1c9aff4b0558833f1bb64cc5","commitMessage":"@@@Merge pull request #1527 from nobodyiam/upgrade-spring-boot-cloud\n\nupgrade spring boot to 2.0.5 and spring cloud to Finchley.SR1","date":"2018-10-03 20:32:47","modifiedFileCount":"64","status":"M","submitter":"Jason Song"},{"authorTime":"2017-04-28 14:45:48","codes":[{"authorDate":"2019-02-16 16:46:32","commitOrder":3,"curCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds = created.stream().map(BaseEntity::getId).collect(Collectors.toSet());\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAllById(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","date":"2019-02-16 16:46:32","endLine":116,"groupId":"10135","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreatePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c5/c4f58949ca58fafde03e544bbf052a86a58013.src","preCode":"  public void testCreatePermissions() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    Set<Permission> created =\n        rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n\n    Set<Long> permissionIds =\n        FluentIterable.from(created).transform(BaseEntity::getId)\n            .toSet();\n\n    Iterable<Permission> permissionsFromDB = permissionRepository.findAllById(permissionIds);\n\n    Set<String> targetIds = Sets.newHashSet();\n    Set<String> permissionTypes = Sets.newHashSet();\n    for (Permission permission : permissionsFromDB) {\n      targetIds.add(permission.getTargetId());\n      permissionTypes.add(permission.getPermissionType());\n    }\n\n    assertEquals(2, targetIds.size());\n    assertEquals(2, permissionTypes.size());\n    assertTrue(targetIds.containsAll(Sets.newHashSet(someTargetId, anotherTargetId)));\n    assertTrue(\n        permissionTypes.containsAll(Sets.newHashSet(somePermissionType, anotherPermissionType)));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2017-04-28 14:45:48","commitOrder":3,"curCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","date":"2017-04-28 14:45:48","endLine":135,"groupId":"10135","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePermissionsWithPermissionsExisted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/21/8be89b9a711a8ca5b1829eebf4e239b4f0552c.src","preCode":"  public void testCreatePermissionsWithPermissionsExisted() throws Exception {\n    String someTargetId = \"someTargetId\";\n    String anotherTargetId = \"anotherTargetId\";\n    String somePermissionType = \"somePermissionType\";\n    String anotherPermissionType = \"anotherPermissionType\";\n\n    Permission somePermission = assemblePermission(somePermissionType, someTargetId);\n    Permission anotherPermission = assemblePermission(anotherPermissionType, anotherTargetId);\n\n    rolePermissionService.createPermissions(Sets.newHashSet(somePermission, anotherPermission));\n  }\n","realPath":"apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/spi/defaultImpl/RolePermissionServiceTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"118dd0ebe2a6b1b3e07b06a0f2c7884049821037","commitMessage":"@@@Cleanup for 1.3.0 (#1969)\n\n* replace some guava API with new Java 1.7 native API\n* replace Collections.sort with List.sort(Java 1.7)\n* replace annonymous inner types with lambdas\n* use try-with-resources where possible\n* replace explicit types with diamond operators","date":"2019-02-16 16:46:32","modifiedFileCount":"19","status":"M","submitter":"kezhenxu94"}]
