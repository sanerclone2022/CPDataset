[{"authorTime":"2016-06-16 14:58:03","codes":[{"authorDate":"2016-06-16 14:58:03","commitOrder":1,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-16 14:58:03","endLine":134,"groupId":"1803","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f8/4eb48da8834095b01004211435f13121f75597.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2016-06-16 14:58:03","commitOrder":1,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-16 14:58:03","endLine":148,"groupId":"1803","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f8/4eb48da8834095b01004211435f13121f75597.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"0db065844f53e861b6e3bdb9e1e7fc9083b6ce7c","commitMessage":"@@@Merge pull request #269 from lepdou/0613_17\n\n???? & bugfix & ????","date":"2016-06-16 14:58:03","modifiedFileCount":"29","status":"B","submitter":"Jason Song"},{"authorTime":"2016-06-16 14:58:03","codes":[{"authorDate":"2016-06-23 17:04:14","commitOrder":2,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n    checkUserExists(user);\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-23 17:04:14","endLine":137,"groupId":"1803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/0a/0be8c8e075b654448dff428679634870497475.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2016-06-16 14:58:03","commitOrder":2,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-16 14:58:03","endLine":148,"groupId":"1803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f8/4eb48da8834095b01004211435f13121f75597.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"568db2b017efa32d9f985ec9f35641250bf59bb7","commitMessage":"@@@Merge pull request #287 from nobodyiam/user-service-merge\n\nAdd user service and user validation when assigning roles","date":"2016-06-23 17:04:14","modifiedFileCount":"5","status":"M","submitter":"??"},{"authorTime":"2016-06-16 14:58:03","codes":[{"authorDate":"2016-06-28 11:00:12","commitOrder":3,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n    checkUserExists(user);\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)){\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-28 11:00:12","endLine":144,"groupId":"1057","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f9/d7e84561357d562958d955895dfebb0b9557e5.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n    checkUserExists(user);\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2016-06-16 14:58:03","commitOrder":3,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-06-16 14:58:03","endLine":148,"groupId":"1803","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f8/4eb48da8834095b01004211435f13121f75597.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"bec6a785f9c5fc1a2d6013025d7bbc8d8ac2dc50","commitMessage":"@@@Merge pull request #301 from lepdou/0627_0701\n\n ????? & ??app ??????","date":"2016-06-28 11:00:12","modifiedFileCount":"3","status":"M","submitter":"Jason Song"},{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2016-08-15 14:43:02","commitOrder":4,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-08-15 14:43:02","endLine":152,"groupId":"1057","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/47/cadb4e3ac382abe5c96f87e508b966fecdc11b.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user){\n    checkUserExists(user);\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                            Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)){\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2016-08-15 14:43:02","commitOrder":4,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-08-15 14:43:02","endLine":166,"groupId":"1803","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/47/cadb4e3ac382abe5c96f87e508b966fecdc11b.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                 @RequestParam String user){\n    checkArgument(user);\n\n    if (!RoleType.isValidRoleType(roleType)){\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n                                              Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"b87ed8ef334932b136f8ba1fe81eeb1d1bc0afc4","commitMessage":"@@@Merge branch 'master' into 'release'\n\nMaster2Release\n\n\n\nSee merge request !15","date":"2016-08-15 14:43:02","modifiedFileCount":"65","status":"M","submitter":"vss??"},{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2019-10-08 17:42:09","commitOrder":5,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \" already authorized\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2019-10-08 17:42:09","endLine":260,"groupId":"1057","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/7e2366a1af29bb03f6181c9552b4e52594274e.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-08-15 14:43:02","commitOrder":5,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-08-15 14:43:02","endLine":166,"groupId":"1803","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/47/cadb4e3ac382abe5c96f87e508b966fecdc11b.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"437026f38f62baa569895f0c4c88a0b25c121dd4","commitMessage":"@@@add i18n support and English translations (#2641)\n\n* init i18n support\n\n* polish translations and fix some bugs introduced\n","date":"2019-10-08 17:42:09","modifiedFileCount":"13","status":"M","submitter":"Jason Song"},{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2019-10-09 08:39:02","commitOrder":6,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2019-10-09 09:02:26","endLine":260,"groupId":"1057","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/3b/601fc4f395b7d7104c79bae707dd1f62859acc.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \" already authorized\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-08-15 14:43:02","commitOrder":6,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-08-15 14:43:02","endLine":166,"groupId":"1803","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/47/cadb4e3ac382abe5c96f87e508b966fecdc11b.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"5cfdd0d14abb60af9df63bb3b8442d6bd0155854","commitMessage":"@@@Revert \"add i18n support and English translations (#2641)\"\n\nThis reverts commit 437026f38f62baa569895f0c4c88a0b25c121dd4.\n","date":"2019-10-09 09:02:26","modifiedFileCount":"13","status":"M","submitter":"nobodyiam"},{"authorTime":"2016-08-15 14:43:02","codes":[{"authorDate":"2019-10-04 21:57:26","commitOrder":7,"curCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \" already authorized\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","date":"2019-10-09 09:02:26","endLine":260,"groupId":"10182","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"assignAppRoleToUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestBodyStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/2e/7e2366a1af29bb03f6181c9552b4e52594274e.src","preCode":"  public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @PathVariable String roleType,\n                                                  @RequestBody String user) {\n    checkUserExists(user);\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    if (CollectionUtils.isEmpty(assignedUsers)) {\n      throw new BadRequestException(user + \"���������������������������\");\n    }\n\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-08-15 14:43:02","commitOrder":7,"curCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","date":"2016-08-15 14:43:02","endLine":166,"groupId":"10182","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"removeAppRoleFromUser","params":"(@PathVariableStringappId@@PathVariableStringroleType@@RequestParamStringuser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/47/cadb4e3ac382abe5c96f87e508b966fecdc11b.src","preCode":"  public ResponseEntity<Void> removeAppRoleFromUser(@PathVariable String appId, @PathVariable String roleType,\n                                                    @RequestParam String user) {\n    RequestPrecondition.checkArgumentsNotEmpty(user);\n\n    if (!RoleType.isValidRoleType(roleType)) {\n      throw new BadRequestException(\"role type is illegal\");\n    }\n    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, roleType),\n        Sets.newHashSet(user), userInfoHolder.getUser().getUserId());\n    return ResponseEntity.ok().build();\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"59d92f6b620abe2288735905ad23e091dd373236","commitMessage":"@@@polish translations and fix some bugs introduced\n","date":"2019-10-09 09:02:26","modifiedFileCount":"12","status":"M","submitter":"Jason Song"}]
