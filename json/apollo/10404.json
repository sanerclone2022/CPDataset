[{"authorTime":"2016-07-20 15:44:22","codes":[{"authorDate":"2016-07-20 15:44:22","commitOrder":1,"curCode":"  public void testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    Config config = ConfigService.getAppConfig();\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 50, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n\n    TimeUnit.MILLISECONDS.sleep(pollTimeoutInMS * 10);\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n  }\n","date":"2016-07-20 15:44:22","endLine":318,"groupId":"344","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c5/8b4c794441be3cdb4241de5424b2ca1f1eb6da.src","preCode":"  public void testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    Config config = ConfigService.getAppConfig();\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 50, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n\n    TimeUnit.MILLISECONDS.sleep(pollTimeoutInMS * 10);\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"},{"authorDate":"2016-07-20 15:44:22","commitOrder":1,"curCode":"  public void testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId),\n                new ApolloConfigNotification(someOtherNamespace, someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config config = ConfigService.getAppConfig();\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    final SettableFuture<Boolean> someOtherNamespacelongPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n    someOtherConfig.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        someOtherNamespacelongPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n    someOtherNamespacelongPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n    assertEquals(anotherValue, someOtherConfig.getProperty(someKey, null));\n\n  }\n","date":"2016-07-20 15:44:22","endLine":370,"groupId":"961","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c5/8b4c794441be3cdb4241de5424b2ca1f1eb6da.src","preCode":"  public void testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId),\n                new ApolloConfigNotification(someOtherNamespace, someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config config = ConfigService.getAppConfig();\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    final SettableFuture<Boolean> someOtherNamespacelongPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n    someOtherConfig.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        someOtherNamespacelongPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n    someOtherNamespacelongPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n    assertEquals(anotherValue, someOtherConfig.getProperty(someKey, null));\n\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"B"}],"commitId":"562bc9598147c3aede6fb64f509ab5a248ce03a5","commitMessage":"@@@Merge pull request #332 from nobodyiam/client-long-poll-refactor-merge\n\nmultiple namespaces reuse the same long poll connection","date":"2016-07-20 15:44:22","modifiedFileCount":"18","status":"B","submitter":"??"},{"authorTime":"2016-07-28 10:22:14","codes":[{"authorDate":"2016-07-28 10:22:14","commitOrder":2,"curCode":"  public void testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    Config config = ConfigService.getAppConfig();\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n\n    TimeUnit.MILLISECONDS.sleep(pollTimeoutInMS * 10);\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n  }\n","date":"2016-07-28 10:22:14","endLine":323,"groupId":"10404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/45/861ca75163d19bc5f89604704e4b698d5feb91.src","preCode":"  public void testLongPollRefreshWithMultipleNamespacesAndOnlyOneNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    Config config = ConfigService.getAppConfig();\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 50, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n\n    TimeUnit.MILLISECONDS.sleep(pollTimeoutInMS * 10);\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2016-07-28 10:22:14","commitOrder":2,"curCode":"  public void testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId),\n                new ApolloConfigNotification(someOtherNamespace, someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config config = ConfigService.getAppConfig();\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    final SettableFuture<Boolean> someOtherNamespacelongPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n    someOtherConfig.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        someOtherNamespacelongPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(5000, TimeUnit.MILLISECONDS);\n    someOtherNamespacelongPollFinished.get(5000, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n    assertEquals(anotherValue, someOtherConfig.getProperty(someKey, null));\n\n  }\n","date":"2016-07-28 10:22:14","endLine":375,"groupId":"10404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/45/861ca75163d19bc5f89604704e4b698d5feb91.src","preCode":"  public void testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified() throws Exception {\n    final String someKey = \"someKey\";\n    final String someValue = \"someValue\";\n    final String anotherValue = \"anotherValue\";\n    long someNotificationId = 1;\n\n    long pollTimeoutInMS = 50;\n    Map<String, String> configurations = Maps.newHashMap();\n    configurations.put(someKey, someValue);\n    ApolloConfig apolloConfig = assembleApolloConfig(configurations);\n    ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);\n    ContextHandler pollHandler =\n        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,\n            Lists.newArrayList(\n                new ApolloConfigNotification(apolloConfig.getNamespaceName(), someNotificationId),\n                new ApolloConfigNotification(someOtherNamespace, someNotificationId)),\n            false);\n\n    startServerWithHandlers(configHandler, pollHandler);\n\n    Config config = ConfigService.getAppConfig();\n    Config someOtherConfig = ConfigService.getConfig(someOtherNamespace);\n    assertEquals(someValue, config.getProperty(someKey, null));\n    assertEquals(someValue, someOtherConfig.getProperty(someKey, null));\n\n    final SettableFuture<Boolean> longPollFinished = SettableFuture.create();\n    final SettableFuture<Boolean> someOtherNamespacelongPollFinished = SettableFuture.create();\n\n    config.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        longPollFinished.set(true);\n      }\n    });\n    someOtherConfig.addChangeListener(new ConfigChangeListener() {\n      @Override\n      public void onChange(ConfigChangeEvent changeEvent) {\n        someOtherNamespacelongPollFinished.set(true);\n      }\n    });\n\n    apolloConfig.getConfigurations().put(someKey, anotherValue);\n\n    longPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n    someOtherNamespacelongPollFinished.get(pollTimeoutInMS * 20, TimeUnit.MILLISECONDS);\n\n    assertEquals(anotherValue, config.getProperty(someKey, null));\n    assertEquals(anotherValue, someOtherConfig.getProperty(someKey, null));\n\n  }\n","realPath":"apollo-client/src/test/java/com/ctrip/framework/apollo/integration/ConfigIntegrationTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"4d79b4f785498deb00fba4fae495a9bb3ce232ce","commitMessage":"@@@Merge pull request #352 from nobodyiam/support-client-local-mode-merge\n\nAdd local dev mode","date":"2016-07-28 10:22:14","modifiedFileCount":"8","status":"M","submitter":"??"}]
