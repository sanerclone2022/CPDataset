[{"authorTime":"2019-12-30 15:20:26","codes":[{"authorDate":"2019-01-13 16:11:21","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2019-01-13 16:11:21","endLine":54,"groupId":"1137","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f4/59ba7088f43f2c90ddaf17d994a5b2808ca1d2.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2019-12-30 15:20:26","commitOrder":3,"curCode":"  public void setUp() {\n    accessKeyServiceWithCache = new AccessKeyServiceWithCache(accessKeyRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.accessKeyCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.accessKeyCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2020-01-01 20:05:48","endLine":43,"groupId":"1137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/98/9264a4485cb8197159acc2ebb092826deb4705.src","preCode":"  public void setUp() {\n    accessKeyServiceWithCache = new AccessKeyServiceWithCache(accessKeyRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.accessKeyCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.accessKeyCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AccessKeyServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"32aac0bd066a0f9a38253646ad2a195ca7d2ff35","commitMessage":"@@@Add apollo-client Authentication function\n\n\n","date":"2020-01-01 20:05:48","modifiedFileCount":"16","status":"M","submitter":"nisiyong"},{"authorTime":"2020-05-31 16:22:30","codes":[{"authorDate":"2019-01-13 16:11:21","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2019-01-13 16:11:21","endLine":54,"groupId":"10464","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f4/59ba7088f43f2c90ddaf17d994a5b2808ca1d2.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2020-05-31 16:22:30","commitOrder":4,"curCode":"  public void setUp() {\n    accessKeyServiceWithCache = new AccessKeyServiceWithCache(accessKeyRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.accessKeyCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.accessKeyCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n\n    Awaitility.reset();\n    Awaitility.setDefaultTimeout(scanInterval * 100, scanIntervalTimeUnit);\n    Awaitility.setDefaultPollInterval(scanInterval, scanIntervalTimeUnit);\n  }\n","date":"2020-05-31 16:22:30","endLine":49,"groupId":"10464","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/53/644221cfcdd4fdfb3f0b5042dab3da7e19b936.src","preCode":"  public void setUp() {\n    accessKeyServiceWithCache = new AccessKeyServiceWithCache(accessKeyRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.accessKeyCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.accessKeyCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.accessKeyCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AccessKeyServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"38e63c6a646d47749787ae86df5d53d76917bd3a","commitMessage":"@@@Use awaitility to stabilize the async tests (#3099)\n\n","date":"2020-05-31 16:22:30","modifiedFileCount":"5","status":"M","submitter":"Jason Song"}]
