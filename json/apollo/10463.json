[{"authorTime":"2017-01-16 18:22:30","codes":[{"authorDate":"2017-01-16 18:22:30","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache();\n\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"releaseMessageRepository\",\n        releaseMessageRepository);\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2017-01-16 18:22:30","endLine":61,"groupId":"1137","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/bf/f9dbc94b118e1d76582d021de15904d3e3c170.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache();\n\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"releaseMessageRepository\",\n        releaseMessageRepository);\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2017-01-16 18:22:30","commitOrder":1,"curCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache();\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"appNamespaceRepository\",\n        appNamespaceRepository);\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2017-01-16 18:22:30","endLine":59,"groupId":"1137","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/c6/cdb4298dc35fc623ab2a633fabfe1c71e2d0ed.src","preCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache();\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"appNamespaceRepository\",\n        appNamespaceRepository);\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"4949eb5584905f0d77dad00669d9b7fc645999ce","commitMessage":"@@@Merge pull request #518 from nobodyiam/optimize-notification-controller-merge\n\nUse cache for notification controller","date":"2017-01-16 18:22:30","modifiedFileCount":"14","status":"B","submitter":"??"},{"authorTime":"2017-06-12 10:16:19","codes":[{"authorDate":"2017-01-16 18:22:30","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache();\n\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"releaseMessageRepository\",\n        releaseMessageRepository);\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2017-01-16 18:22:30","endLine":61,"groupId":"1137","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/bf/f9dbc94b118e1d76582d021de15904d3e3c170.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache();\n\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"releaseMessageRepository\",\n        releaseMessageRepository);\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2017-06-12 10:16:19","commitOrder":2,"curCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache();\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"appNamespaceRepository\",\n        appNamespaceRepository);\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2017-06-12 10:16:19","endLine":59,"groupId":"1137","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/25/2cc71766f10d485c736483796df757a3101d41.src","preCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache();\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"appNamespaceRepository\",\n        appNamespaceRepository);\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"32f5fc8ba8890e403ef94566eca711733982e717","commitMessage":"@@@Merge pull request #638 from nobodyiam/misc-change-merge\n\nmisc changes","date":"2017-06-12 10:16:19","modifiedFileCount":"7","status":"M","submitter":"??"},{"authorTime":"2019-01-13 16:11:21","codes":[{"authorDate":"2019-01-13 16:11:21","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2019-01-13 16:11:21","endLine":54,"groupId":"1137","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f4/59ba7088f43f2c90ddaf17d994a5b2808ca1d2.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache();\n\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"releaseMessageRepository\",\n        releaseMessageRepository);\n    ReflectionTestUtils.setField(releaseMessageServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-01-13 16:11:21","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache(appNamespaceRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2019-01-13 16:11:21","endLine":52,"groupId":"1137","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/89/2d2c98bfdcb7fa316cef19651c26852e9df8a2.src","preCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache();\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"appNamespaceRepository\",\n        appNamespaceRepository);\n    ReflectionTestUtils.setField(appNamespaceServiceWithCache, \"bizConfig\", bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"d9275527670ec22ae1aae2b8d1e298b6ebd65462","commitMessage":"@@@enhancement: use constructor injection instead of field injection (#1839)\n\n* enhancement: use constructor injection instead of field injection\n\n* remove unused field\n","date":"2019-01-13 16:11:21","modifiedFileCount":"124","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-05-31 16:22:30","codes":[{"authorDate":"2019-01-13 16:11:21","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","date":"2019-01-13 16:11:21","endLine":54,"groupId":"10463","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f4/59ba7088f43f2c90ddaf17d994a5b2808ca1d2.src","preCode":"  public void setUp() throws Exception {\n    releaseMessageServiceWithCache = new ReleaseMessageServiceWithCache(\n        releaseMessageRepository, bizConfig\n    );\n\n    scanInterval = 10;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.releaseMessageCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.releaseMessageCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2020-05-31 16:22:30","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache(appNamespaceRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n\n    Awaitility.reset();\n    Awaitility.setDefaultTimeout(scanInterval * 100, scanIntervalTimeUnit);\n    Awaitility.setDefaultPollInterval(scanInterval, scanIntervalTimeUnit);\n\n  }\n","date":"2020-05-31 16:22:30","endLine":59,"groupId":"10463","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/6e/f4b0c35b48f1efecd473a6ac781750d55a95a6.src","preCode":"  public void setUp() throws Exception {\n    appNamespaceServiceWithCache = new AppNamespaceServiceWithCache(appNamespaceRepository, bizConfig);\n\n    scanInterval = 50;\n    scanIntervalTimeUnit = TimeUnit.MILLISECONDS;\n    when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n    when(bizConfig.appNamespaceCacheScanInterval()).thenReturn(scanInterval);\n    when(bizConfig.appNamespaceCacheScanIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);\n  }\n","realPath":"apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"38e63c6a646d47749787ae86df5d53d76917bd3a","commitMessage":"@@@Use awaitility to stabilize the async tests (#3099)\n\n","date":"2020-05-31 16:22:30","modifiedFileCount":"5","status":"M","submitter":"Jason Song"}]
