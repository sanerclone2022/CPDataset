[{"authorTime":"2017-04-28 14:45:48","codes":[{"authorDate":"2016-08-15 14:43:02","commitOrder":2,"curCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        FluentIterable.from(consumerRoles).transform(consumerRole -> consumerRole.getRoleId())\n            .toSet();\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2016-08-15 14:43:02","endLine":61,"groupId":"168","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerHasPermission","params":"(longconsumerId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/80/5a6d8722875cc048a26d5c0bd110cf9e1f2178.src","preCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        FluentIterable.from(consumerRoles).transform(consumerRole -> consumerRole.getRoleId())\n            .toSet();\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"NB"},{"authorDate":"2017-04-28 14:45:48","commitOrder":2,"curCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n                FluentIterable.from(userRoles).transform(userRole -> userRole.getRoleId()).toSet();\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","date":"2017-04-28 14:45:48","endLine":179,"groupId":"168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"userHasPermission","params":"(StringuserId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f4/dd42a84b23b293d8d3fc9b25f370718684b2f3.src","preCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n                FluentIterable.from(userRoles).transform(userRole -> userRole.getRoleId()).toSet();\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"14ccb66eff042788db008b6134275aa3b990bb1e","commitMessage":"@@@Merge pull request #604 from timothynode/master\n\nchange Role Service to interface impl","date":"2017-04-28 14:45:48","modifiedFileCount":"4","status":"M","submitter":"??"},{"authorTime":"2019-01-31 20:45:34","codes":[{"authorDate":"2019-01-31 20:45:34","commitOrder":3,"curCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        FluentIterable.from(consumerRoles).transform(ConsumerRole::getRoleId).toSet();\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-01-31 20:45:34","endLine":63,"groupId":"168","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerHasPermission","params":"(longconsumerId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/a7/c272af8e9a4fc3f017c6d1fd4da7444e1f81f9.src","preCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        FluentIterable.from(consumerRoles).transform(consumerRole -> consumerRole.getRoleId())\n            .toSet();\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-01-31 20:45:34","commitOrder":3,"curCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n            userRoles.stream().map(UserRole::getRoleId).collect(Collectors.toSet());\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","date":"2019-01-31 20:45:34","endLine":187,"groupId":"168","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"userHasPermission","params":"(StringuserId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/67/144aa04047920a39dc8d016cb217397846b3af.src","preCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n                FluentIterable.from(userRoles).transform(userRole -> userRole.getRoleId()).toSet();\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"5ca5a63f7dccbd4e3f9c787fc6247d914a3e31cd","commitMessage":"@@@polishing code with lambdas or method reference (#1929)\n\n","date":"2019-01-31 20:45:34","modifiedFileCount":"7","status":"M","submitter":"kezhenxu94"},{"authorTime":"2019-01-31 20:45:34","codes":[{"authorDate":"2019-02-16 16:46:32","commitOrder":4,"curCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        consumerRoles.stream().map(ConsumerRole::getRoleId).collect(Collectors.toSet());\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-02-16 16:46:32","endLine":63,"groupId":"10144","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerHasPermission","params":"(longconsumerId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/64/be2372df6432eccabb0e1246b70079f269d562.src","preCode":"  public boolean consumerHasPermission(long consumerId, String permissionType, String targetId) {\n    Permission permission =\n        permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n    if (permission == null) {\n      return false;\n    }\n\n    List<ConsumerRole> consumerRoles = consumerRoleRepository.findByConsumerId(consumerId);\n    if (CollectionUtils.isEmpty(consumerRoles)) {\n      return false;\n    }\n\n    Set<Long> roleIds =\n        FluentIterable.from(consumerRoles).transform(ConsumerRole::getRoleId).toSet();\n    List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n    if (CollectionUtils.isEmpty(rolePermissions)) {\n      return false;\n    }\n\n    for (RolePermission rolePermission : rolePermissions) {\n      if (rolePermission.getPermissionId() == permission.getId()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-01-31 20:45:34","commitOrder":4,"curCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n            userRoles.stream().map(UserRole::getRoleId).collect(Collectors.toSet());\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","date":"2019-01-31 20:45:34","endLine":187,"groupId":"10144","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"userHasPermission","params":"(StringuserId@StringpermissionType@StringtargetId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/67/144aa04047920a39dc8d016cb217397846b3af.src","preCode":"    public boolean userHasPermission(String userId, String permissionType, String targetId) {\n        Permission permission =\n                permissionRepository.findTopByPermissionTypeAndTargetId(permissionType, targetId);\n        if (permission == null) {\n            return false;\n        }\n\n        if (isSuperAdmin(userId)) {\n            return true;\n        }\n\n        List<UserRole> userRoles = userRoleRepository.findByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return false;\n        }\n\n        Set<Long> roleIds =\n            userRoles.stream().map(UserRole::getRoleId).collect(Collectors.toSet());\n        List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);\n        if (CollectionUtils.isEmpty(rolePermissions)) {\n            return false;\n        }\n\n        for (RolePermission rolePermission : rolePermissions) {\n            if (rolePermission.getPermissionId() == permission.getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRolePermissionService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"118dd0ebe2a6b1b3e07b06a0f2c7884049821037","commitMessage":"@@@Cleanup for 1.3.0 (#1969)\n\n* replace some guava API with new Java 1.7 native API\n* replace Collections.sort with List.sort(Java 1.7)\n* replace annonymous inner types with lambdas\n* use try-with-resources where possible\n* replace explicit types with diamond operators","date":"2019-02-16 16:46:32","modifiedFileCount":"19","status":"M","submitter":"kezhenxu94"}]
