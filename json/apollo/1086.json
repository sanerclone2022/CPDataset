[{"authorTime":"2020-03-14 20:43:54","codes":[{"authorDate":"2018-08-28 22:32:20","commitOrder":5,"curCode":"  private static void updateMetaServerAddresses(String metaServerAddresses) {\n    logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n    Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n    transaction.addData(\"Url\", metaServerAddresses);\n\n    try {\n      List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n      \r\n      Collections.shuffle(metaServers);\n\n      boolean serverAvailable = false;\n\n      for (String address : metaServers) {\n        address = address.trim();\n        \r\n        if (NetUtil.pingUrl(address + \"/services/config\")) {\n          \r\n          selectedMetaServerAddressCache.put(metaServerAddresses, address);\n          serverAvailable = true;\n          logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n          break;\n        }\n      }\n\n      \r\n      if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n        selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n      }\n\n      if (!serverAvailable) {\n        logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n            metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n      }\n\n      transaction.setStatus(Transaction.SUCCESS);\n    } catch (Throwable ex) {\n      transaction.setStatus(ex);\n      throw ex;\n    } finally {\n      transaction.complete();\n    }\n  }\n","date":"2018-08-28 22:32:20","endLine":191,"groupId":"1094","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetaServerAddresses","params":"(StringmetaServerAddresses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f3/bce73bc1d4ef2d59fd0bfe55ab8ba55d7e8941.src","preCode":"  private static void updateMetaServerAddresses(String metaServerAddresses) {\n    logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n    Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n    transaction.addData(\"Url\", metaServerAddresses);\n\n    try {\n      List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n      \r\n      Collections.shuffle(metaServers);\n\n      boolean serverAvailable = false;\n\n      for (String address : metaServers) {\n        address = address.trim();\n        \r\n        if (NetUtil.pingUrl(address + \"/services/config\")) {\n          \r\n          selectedMetaServerAddressCache.put(metaServerAddresses, address);\n          serverAvailable = true;\n          logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n          break;\n        }\n      }\n\n      \r\n      if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n        selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n      }\n\n      if (!serverAvailable) {\n        logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n            metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n      }\n\n      transaction.setStatus(Transaction.SUCCESS);\n    } catch (Throwable ex) {\n      transaction.setStatus(ex);\n      throw ex;\n    } finally {\n      transaction.complete();\n    }\n  }\n","realPath":"apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"NB"},{"authorDate":"2020-03-14 20:43:54","commitOrder":5,"curCode":"    private static void updateMetaServerAddresses(String metaServerAddresses) {\n        logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n        Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n        transaction.addData(\"Url\", metaServerAddresses);\n\n        try {\n            List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n            \r\n            Collections.shuffle(metaServers);\n\n            boolean serverAvailable = false;\n\n            for (String address : metaServers) {\n                address = address.trim();\n                \r\n                if (NetUtil.pingUrl(address + \"/services/config\")) {\n                    \r\n                    selectedMetaServerAddressCache.put(metaServerAddresses, address);\n                    serverAvailable = true;\n                    logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n                    break;\n                }\n            }\n\n            \r\n            if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n                selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n            }\n\n            if (!serverAvailable) {\n                logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n                        metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n            }\n\n            transaction.setStatus(Transaction.SUCCESS);\n        } catch (Throwable ex) {\n            transaction.setStatus(ex);\n            throw ex;\n        } finally {\n            transaction.complete();\n        }\n    }\n","date":"2020-03-14 20:43:54","endLine":198,"groupId":"1094","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetaServerAddresses","params":"(StringmetaServerAddresses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/4f/3987ab0cc9033b8cb9ab21729dbe59b79416df.src","preCode":"    private static void updateMetaServerAddresses(String metaServerAddresses) {\n        logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n        Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n        transaction.addData(\"Url\", metaServerAddresses);\n\n        try {\n            List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n            \r\n            Collections.shuffle(metaServers);\n\n            boolean serverAvailable = false;\n\n            for (String address : metaServers) {\n                address = address.trim();\n                \r\n                if (NetUtil.pingUrl(address + \"/services/config\")) {\n                    \r\n                    selectedMetaServerAddressCache.put(metaServerAddresses, address);\n                    serverAvailable = true;\n                    logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n                    break;\n                }\n            }\n\n            \r\n            if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n                selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n            }\n\n            if (!serverAvailable) {\n                logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n                        metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n            }\n\n            transaction.setStatus(Transaction.SUCCESS);\n        } catch (Throwable ex) {\n            transaction.setStatus(ex);\n            throw ex;\n        } finally {\n            transaction.complete();\n        }\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/PortalMetaDomainService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"a81d7287014ab8bfc327040a66ac8a5d5510b7e9","commitMessage":"@@@feat(apollo-portal): read dynamic environment from key \"apollo.portal.meta.servers\" in PortalDB.ServerConfig (#2953)\n\n","date":"2020-03-14 20:43:54","modifiedFileCount":"8","status":"M","submitter":"Anilople"},{"authorTime":"2020-03-14 21:50:23","codes":[{"authorDate":"2018-08-28 22:32:20","commitOrder":6,"curCode":"  private static void updateMetaServerAddresses(String metaServerAddresses) {\n    logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n    Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n    transaction.addData(\"Url\", metaServerAddresses);\n\n    try {\n      List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n      \r\n      Collections.shuffle(metaServers);\n\n      boolean serverAvailable = false;\n\n      for (String address : metaServers) {\n        address = address.trim();\n        \r\n        if (NetUtil.pingUrl(address + \"/services/config\")) {\n          \r\n          selectedMetaServerAddressCache.put(metaServerAddresses, address);\n          serverAvailable = true;\n          logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n          break;\n        }\n      }\n\n      \r\n      if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n        selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n      }\n\n      if (!serverAvailable) {\n        logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n            metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n      }\n\n      transaction.setStatus(Transaction.SUCCESS);\n    } catch (Throwable ex) {\n      transaction.setStatus(ex);\n      throw ex;\n    } finally {\n      transaction.complete();\n    }\n  }\n","date":"2018-08-28 22:32:20","endLine":191,"groupId":"1086","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetaServerAddresses","params":"(StringmetaServerAddresses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/f3/bce73bc1d4ef2d59fd0bfe55ab8ba55d7e8941.src","preCode":"  private static void updateMetaServerAddresses(String metaServerAddresses) {\n    logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n    Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n    transaction.addData(\"Url\", metaServerAddresses);\n\n    try {\n      List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n      \r\n      Collections.shuffle(metaServers);\n\n      boolean serverAvailable = false;\n\n      for (String address : metaServers) {\n        address = address.trim();\n        \r\n        if (NetUtil.pingUrl(address + \"/services/config\")) {\n          \r\n          selectedMetaServerAddressCache.put(metaServerAddresses, address);\n          serverAvailable = true;\n          logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n          break;\n        }\n      }\n\n      \r\n      if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n        selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n      }\n\n      if (!serverAvailable) {\n        logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n            metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n      }\n\n      transaction.setStatus(Transaction.SUCCESS);\n    } catch (Throwable ex) {\n      transaction.setStatus(ex);\n      throw ex;\n    } finally {\n      transaction.complete();\n    }\n  }\n","realPath":"apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2020-03-14 21:50:23","commitOrder":6,"curCode":"    private void updateMetaServerAddresses(String metaServerAddresses) {\n        logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n        Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n        transaction.addData(\"Url\", metaServerAddresses);\n\n        try {\n            List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n            \r\n            Collections.shuffle(metaServers);\n\n            boolean serverAvailable = false;\n\n            for (String address : metaServers) {\n                address = address.trim();\n                \r\n                if (NetUtil.pingUrl(address + \"/services/config\")) {\n                    \r\n                    selectedMetaServerAddressCache.put(metaServerAddresses, address);\n                    serverAvailable = true;\n                    logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n                    break;\n                }\n            }\n\n            \r\n            if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n                selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n            }\n\n            if (!serverAvailable) {\n                logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n                        metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n            }\n\n            transaction.setStatus(Transaction.SUCCESS);\n        } catch (Throwable ex) {\n            transaction.setStatus(ex);\n            throw ex;\n        } finally {\n            transaction.complete();\n        }\n    }\n","date":"2020-03-14 22:11:32","endLine":196,"groupId":"1086","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetaServerAddresses","params":"(StringmetaServerAddresses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-apollo-10-0.7/blobInfo/CC_OUT/blobs/df/a8cd83c4ec1110cd2ea8f92d9a0c152fb23426.src","preCode":"    private static void updateMetaServerAddresses(String metaServerAddresses) {\n        logger.debug(\"Selecting meta server address for: {}\", metaServerAddresses);\n\n        Transaction transaction = Tracer.newTransaction(\"Apollo.MetaService\", \"refreshMetaServerAddress\");\n        transaction.addData(\"Url\", metaServerAddresses);\n\n        try {\n            List<String> metaServers = Lists.newArrayList(metaServerAddresses.split(\",\"));\n            \r\n            Collections.shuffle(metaServers);\n\n            boolean serverAvailable = false;\n\n            for (String address : metaServers) {\n                address = address.trim();\n                \r\n                if (NetUtil.pingUrl(address + \"/services/config\")) {\n                    \r\n                    selectedMetaServerAddressCache.put(metaServerAddresses, address);\n                    serverAvailable = true;\n                    logger.debug(\"Selected meta server address {} for {}\", address, metaServerAddresses);\n                    break;\n                }\n            }\n\n            \r\n            if (!selectedMetaServerAddressCache.containsKey(metaServerAddresses)) {\n                selectedMetaServerAddressCache.put(metaServerAddresses, metaServers.get(0).trim());\n            }\n\n            if (!serverAvailable) {\n                logger.warn(\"Could not find available meta server for configured meta server addresses: {}, fallback to: {}\",\n                        metaServerAddresses, selectedMetaServerAddressCache.get(metaServerAddresses));\n            }\n\n            transaction.setStatus(Transaction.SUCCESS);\n        } catch (Throwable ex) {\n            transaction.setStatus(ex);\n            throw ex;\n        } finally {\n            transaction.complete();\n        }\n    }\n","realPath":"apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/PortalMetaDomainService.java","repoName":"apollo","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"}],"commitId":"7ca4247fa95b5f502683a15953cd7f51c2b13e0f","commitMessage":"@@@refactor portal meta server address logic a little bit\n","date":"2020-03-14 22:11:32","modifiedFileCount":"8","status":"M","submitter":"Jason Song"}]
