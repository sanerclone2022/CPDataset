[{"authorTime":"2021-04-24 17:42:27","codes":[{"authorDate":"2021-04-24 17:42:27","commitOrder":3,"curCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        RangePartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        RangePartitionInfo rangePartitionInfo = new RangePartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            rangePartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return rangePartitionInfo;\n    }\n","date":"2021-04-24 17:42:27","endLine":122,"groupId":"7178","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toPartitionInfo","params":"(List<Column>schema@Map<String@Long>partitionNameToId@booleanisTemp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/eb/08ad2780edc5bf5f0d55e1e35386966d6d63dd.src","preCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        RangePartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        RangePartitionInfo rangePartitionInfo = new RangePartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            rangePartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return rangePartitionInfo;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/RangePartitionDesc.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"MB"},{"authorDate":"2021-04-24 17:42:27","commitOrder":3,"curCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        ListPartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        ListPartitionInfo listPartitionInfo = new ListPartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            listPartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return listPartitionInfo;\n    }\n","date":"2021-04-24 17:42:27","endLine":109,"groupId":"7178","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"toPartitionInfo","params":"(List<Column>schema@Map<String@Long>partitionNameToId@booleanisTemp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/31/aec5fb21d5d96031a9cb4e897f592d7040bb7c.src","preCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        ListPartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        ListPartitionInfo listPartitionInfo = new ListPartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            listPartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return listPartitionInfo;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/ListPartitionDesc.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"de87f4ae840c1a527379c046d7f01afb2e2d7dcc","commitMessage":"@@@[Feature] Add list partition support (#5529)\n\nAdd list partition support","date":"2021-04-24 17:42:27","modifiedFileCount":"48","status":"M","submitter":"qiye"},{"authorTime":"2021-04-24 17:42:27","codes":[{"authorDate":"2021-07-13 14:02:39","commitOrder":4,"curCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        RangePartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n                }\n                if (column.getType().isComplexType()) {\n                    throw new DdlException(\"Complex type column can't be partition column: \"\n                            + column.getType().toString());\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        RangePartitionInfo rangePartitionInfo = new RangePartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            rangePartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return rangePartitionInfo;\n    }\n","date":"2021-07-13 14:02:39","endLine":125,"groupId":"10854","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"toPartitionInfo","params":"(List<Column>schema@Map<String@Long>partitionNameToId@booleanisTemp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d5/b48543033dcac3e10ca900d6d3e9c0debee672.src","preCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        RangePartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        RangePartitionInfo rangePartitionInfo = new RangePartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            rangePartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return rangePartitionInfo;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/RangePartitionDesc.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-04-24 17:42:27","commitOrder":4,"curCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        ListPartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        ListPartitionInfo listPartitionInfo = new ListPartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            listPartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return listPartitionInfo;\n    }\n","date":"2021-04-24 17:42:27","endLine":109,"groupId":"10854","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"toPartitionInfo","params":"(List<Column>schema@Map<String@Long>partitionNameToId@booleanisTemp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/31/aec5fb21d5d96031a9cb4e897f592d7040bb7c.src","preCode":"    public PartitionInfo toPartitionInfo(List<Column> schema, Map<String, Long> partitionNameToId, boolean isTemp)\n            throws DdlException {\n        List<Column> partitionColumns = new ArrayList<>();\n\n        \r\n        for (String colName : partitionColNames) {\n            boolean find = false;\n            for (Column column : schema) {\n                if (column.getName().equalsIgnoreCase(colName)) {\n                    try {\n                        ListPartitionInfo.checkPartitionColumn(column);\n                    } catch (AnalysisException e) {\n                        throw new DdlException(e.getMessage());\n                    }\n\n                    partitionColumns.add(column);\n                    find = true;\n                    break;\n                }\n            }\n            if (!find) {\n                throw new DdlException(\"Partition column[\" + colName + \"] does not found\");\n            }\n        }\n\n        ListPartitionInfo listPartitionInfo = new ListPartitionInfo(partitionColumns);\n        for (SinglePartitionDesc desc : singlePartitionDescs) {\n            long partitionId = partitionNameToId.get(desc.getPartitionName());\n            listPartitionInfo.handleNewSinglePartitionDesc(desc, partitionId, isTemp);\n        }\n        return listPartitionInfo;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/ListPartitionDesc.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"}],"commitId":"ed3ff470ce3edc5015f20ea1cb9ee412cdc6869b","commitMessage":"@@@[ARRAY] Support array type load and select not include access by index (#5980)\n\nThis is part of the array type support and has not been fully completed. \nThe following functions are implemented\n1. fe array type support and implementation of array function.  support array syntax analysis and planning\n2. Support import array type data through insert into\n3. Support select array type data\n4. Only the array type is supported on the value lie of the duplicate table\n\nthis pr merge some code from #4655 #4650 #4644 #4643 #4623 #2979","date":"2021-07-13 14:02:39","modifiedFileCount":"22","status":"M","submitter":"Zhengguo Yang"}]
