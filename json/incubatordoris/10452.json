[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","date":"2020-07-21 12:42:42","endLine":357,"groupId":"4265","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitFail","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ae/babf62e23d427c62548ec059ae4ed9a3f6b96c.src","preCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":464,"groupId":"4266","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormal","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ae/babf62e23d427c62548ec059ae4ed9a3f6b96c.src","preCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":2,"curCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, (List<Table>) any, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","date":"2021-01-13 10:27:58","endLine":375,"groupId":"4265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitFail","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6b/1d5e41e93b8d5713c91308688a336e677a8493.src","preCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":464,"groupId":"4266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormal","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ae/babf62e23d427c62548ec059ae4ed9a3f6b96c.src","preCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"N"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-01-30 20:33:34","codes":[{"authorDate":"2021-01-30 20:33:34","commitOrder":3,"curCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(PARTITION_ID, TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, (List<Table>) any, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","date":"2021-01-30 20:33:34","endLine":378,"groupId":"10452","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitFail","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8e/e75c3092058a32eebcae025dfb58c528b662c8.src","preCode":"    public void testCommitFail(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        new Expectations(globalTransactionMgr) {\n            {\n                try {\n                    globalTransactionMgr.commitTransaction(anyLong, (List<Table>) any, anyLong, (List<TabletCommitInfo>) any, (TxnCommitAttachment) any);\n                } catch (UserException e) {\n                }\n                result = new UserException(\"commit fail\");\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (DdlException e) {\n            Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n            Collection<DeleteJob> jobs = idToDeleteJob.values();\n            Assert.assertEquals(1, jobs.size());\n            for (DeleteJob job : jobs) {\n                Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n            }\n            throw e;\n        } catch (QueryStateException e) {\n        }\n        Assert.fail();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2021-01-30 20:33:34","commitOrder":3,"curCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(PARTITION_ID, TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","date":"2021-01-30 20:33:34","endLine":485,"groupId":"10452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormal","params":"(@MockedMarkedCountDownLatchcountDownLatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8e/e75c3092058a32eebcae025dfb58c528b662c8.src","preCode":"    public void testNormal(@Mocked MarkedCountDownLatch countDownLatch) throws DdlException, QueryStateException {\n        BinaryPredicate binaryPredicate = new BinaryPredicate(BinaryPredicate.Operator.GT, new SlotRef(null, \"k1\"),\n                new IntLiteral(3));\n\n        DeleteStmt deleteStmt = new DeleteStmt(new TableName(\"test_db\", \"test_tbl\"),\n                new PartitionNames(false, Lists.newArrayList(\"test_tbl\")), binaryPredicate);\n\n        Set<Replica> finishedReplica = Sets.newHashSet();\n        finishedReplica.add(new Replica(REPLICA_ID_1, BACKEND_ID_1, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_2, BACKEND_ID_2, 0, Replica.ReplicaState.NORMAL));\n        finishedReplica.add(new Replica(REPLICA_ID_3, BACKEND_ID_3, 0, Replica.ReplicaState.NORMAL));\n        TabletDeleteInfo tabletDeleteInfo = new TabletDeleteInfo(TABLET_ID);\n        tabletDeleteInfo.getFinishedReplicas().addAll(finishedReplica);\n\n        new MockUp<DeleteJob>() {\n            @Mock\n            public Collection<TabletDeleteInfo> getTabletDeleteInfo() {\n                return Lists.newArrayList(tabletDeleteInfo);\n            }\n        };\n\n        new Expectations() {\n            {\n                try {\n                    countDownLatch.await(anyLong, (TimeUnit) any);\n                } catch (InterruptedException e) {\n                }\n                result = false;\n            }\n        };\n\n        try {\n            deleteStmt.analyze(analyzer);\n        } catch (UserException e) {\n            Assert.fail();\n        }\n        try {\n            deleteHandler.process(deleteStmt);\n        } catch (QueryStateException e) {\n        }\n\n        Map<Long, DeleteJob> idToDeleteJob = Deencapsulation.getField(deleteHandler, \"idToDeleteJob\");\n        Collection<DeleteJob> jobs = idToDeleteJob.values();\n        Assert.assertEquals(1, jobs.size());\n        for (DeleteJob job : jobs) {\n            Assert.assertEquals(job.getState(), DeleteState.FINISHED);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/DeleteHandlerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"}],"commitId":"de57667d6dc7ddc32fabd0f5c3299623ab9895d1","commitMessage":"@@@[Delete] Support delete with multi partitions (#5252)\n\nSupport delete statement like:\n1. delete from table partitions(p1.  p2) where xxx;  // apply to p1.  p2\n2. delete from table where xxx;     // apply to all partitions\n\nAlso remove code about the deprecated sync/async delete job.\n\nThis CL changes FE meta version to 94","date":"2021-01-30 20:33:34","modifiedFileCount":"27","status":"M","submitter":"Mingyu Chen"}]
