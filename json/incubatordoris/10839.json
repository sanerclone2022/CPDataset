[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new DateLiteral(value.getStringValue(), type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","date":"2020-07-21 12:42:42","endLine":296,"groupId":"444","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"castTo","params":"(LiteralExprvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/89/b5138619a79002a7896e3b2e08a88773e6f6f4.src","preCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new DateLiteral(value.getStringValue(), type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CastExpr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","date":"2020-07-21 12:42:42","endLine":235,"groupId":"2411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"uncheckedCastTo","params":"(TypetargetType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/79/6e31ed0f8c5eb08235b336f436fc72cd1d7319.src","preCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-09-13 19:15:53","commitOrder":2,"curCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","date":"2020-09-13 19:15:53","endLine":297,"groupId":"444","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"castTo","params":"(LiteralExprvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/83/480a9599cbcb03cf86f20137ebaabe9a8146d0.src","preCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new DateLiteral(value.getStringValue(), type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CastExpr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","date":"2020-07-21 12:42:42","endLine":235,"groupId":"2411","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"uncheckedCastTo","params":"(TypetargetType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/79/6e31ed0f8c5eb08235b336f436fc72cd1d7319.src","preCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"4f4c22b45960f583b9317e80e933ec434369f83f","commitMessage":"@@@[SQL][Planner] Support int datekey format implicit cast to date (#4591)\n\n","date":"2020-09-13 19:15:53","modifiedFileCount":"5","status":"M","submitter":"xueyan.li"},{"authorTime":"2020-10-04 10:24:36","codes":[{"authorDate":"2020-09-13 19:15:53","commitOrder":3,"curCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","date":"2020-09-13 19:15:53","endLine":297,"groupId":"444","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"castTo","params":"(LiteralExprvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/83/480a9599cbcb03cf86f20137ebaabe9a8146d0.src","preCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CastExpr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"},{"authorDate":"2020-10-04 10:24:36","commitOrder":3,"curCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isDecimal() || targetType.isDecimalV2()) {\n            return this;\n        } else if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","date":"2020-10-04 10:24:36","endLine":237,"groupId":"2411","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"uncheckedCastTo","params":"(TypetargetType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/66/d4b0531aa611034b7cf313e8ffbdc2727cd827.src","preCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"}],"commitId":"f0bb012dd25e373a25d3ed948cfd260a1bbc8795","commitMessage":"@@@[Bug] Fix Windows function lag()/lead() function throw AnalysisException. (#4666)\n\nAdd lag() and lead() char and varchar check in `isCastMatchAllowed`.","date":"2020-10-04 10:24:36","modifiedFileCount":"3","status":"M","submitter":"HappenLee"},{"authorTime":"2020-10-04 10:24:36","codes":[{"authorDate":"2021-07-01 09:17:57","commitOrder":4,"curCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal() || type.isDecimalV2()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","date":"2021-07-01 09:17:57","endLine":299,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"castTo","params":"(LiteralExprvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e2/98a0cfca970c6049108d5445dd5bed07cd912d.src","preCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CastExpr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2020-10-04 10:24:36","commitOrder":4,"curCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isDecimal() || targetType.isDecimalV2()) {\n            return this;\n        } else if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","date":"2020-10-04 10:24:36","endLine":237,"groupId":"2411","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"uncheckedCastTo","params":"(TypetargetType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/66/d4b0531aa611034b7cf313e8ffbdc2727cd827.src","preCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isDecimal() || targetType.isDecimalV2()) {\n            return this;\n        } else if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"2a1b2394a2602664149d7cf5545a729b53f89401","commitMessage":"@@@[Feature] Extract wide common factors (#6083)\n\nThis PR mainly adds a rewrite rule 'ExtractCommonFactorsRule'\n  used to extract wide common factors in the planning stage for 'Expr'.\nThe main purpose of this rule is to extract (Range or In) expressions\n  that can be combined from each or clause.\nE.g:\n  Origin expr: (1<a<3 and b in ('a') ) or (2<a<4 and b in ('b'))\n  Rewritten expr: (1<a<4 ) and (b in ('a'.  'b')) and ((1<a<3 and b in ('a') ) or (2<a<4 and b in ('b')))\nAlthough the range of the wide common factors is larger than the real range. \n  the wide common factors only involve a single column.  so it can be pushed down to the scan node. \n  thereby reducing the amount of scanned data in advance and improving the query speed.\n\nIt should be noted that this optimization strategy is not for all scenarios.\nWhen filter rate of the wide common factor is too low. \n  the query will consume an extra time to calculate the wide common factors.\n\nSo this strategy can be switched by configuring session vairables 'extract_wide_range_expr'.\nThe default policy is enabled which means this strategy takes effect.\nIf you encounter unsatisfactory filtering rate.  you can set the variable to false.\nIt will turn off the strategy.\n\nFixed #6082","date":"2021-07-01 09:17:57","modifiedFileCount":"12","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2021-07-07 10:26:32","codes":[{"authorDate":"2021-07-07 10:26:32","commitOrder":5,"curCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimalV2()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","date":"2021-07-07 10:26:32","endLine":298,"groupId":"10839","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"castTo","params":"(LiteralExprvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/df/dc4b01782b1b08a3d49bc947a2e6a8f41f09bd.src","preCode":"    private Expr castTo(LiteralExpr value) throws AnalysisException {\n        if (value instanceof NullLiteral) {\n            return value;\n        } else if (type.isIntegerType()) {\n            return new IntLiteral(value.getLongValue(), type);\n        } else if (type.isLargeIntType()) {\n            return new LargeIntLiteral(value.getStringValue());\n        } else if (type.isDecimal() || type.isDecimalV2()) {\n            return new DecimalLiteral(value.getStringValue());\n        } else if (type.isFloatingPointType()) {\n            return new FloatLiteral(value.getDoubleValue(), type);\n        } else if (type.isStringType()) {\n            return new StringLiteral(value.getStringValue());\n        } else if (type.isDateType()) {\n            return new StringLiteral(value.getStringValue()).convertToDate(type);\n        } else if (type.isBoolean()) {\n            return new BoolLiteral(value.getStringValue());\n        }\n        return this;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CastExpr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2021-07-07 10:26:32","commitOrder":5,"curCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isDecimalV2()) {\n            return this;\n        } else if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","date":"2021-07-07 10:26:32","endLine":246,"groupId":"10839","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"uncheckedCastTo","params":"(TypetargetType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d6/4ea00ed2aba522353bc32cc2bd684e85b7541a.src","preCode":"    protected Expr uncheckedCastTo(Type targetType) throws AnalysisException {\n        if (targetType.isDecimal() || targetType.isDecimalV2()) {\n            return this;\n        } else if (targetType.isFloatingPointType()) {\n            return new FloatLiteral(value.doubleValue(), targetType);\n        } else if (targetType.isIntegerType()) {\n            return new IntLiteral(value.longValue(), targetType);\n        } else if (targetType.isStringType()) {\n            return new StringLiteral(value.toString());\n        }\n        return super.uncheckedCastTo(targetType);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/DecimalLiteral.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"739c0268ff94fe1c697fd8cc8642d3bb5162a714","commitMessage":"@@@[refactor] Remove decimal v1 related code from code base (#6079)\n\nremove ALL DECIMAL V1 type code ? this is a part of #6073","date":"2021-07-07 10:26:32","modifiedFileCount":"35","status":"M","submitter":"Zhengguo Yang"}]
