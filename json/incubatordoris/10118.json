[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public static OlapTable mockTable(String name) {\n        Column column1 = new Column(\"col1\", PrimitiveType.BIGINT);\n        Column column2 = new Column(\"col2\", PrimitiveType.DOUBLE);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n            }\n        };\n        return table;\n    }\n","date":"2020-07-21 12:42:42","endLine":229,"groupId":"5626","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockTable","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d2/22a6abf0c3060ddf5b787449bdf7386050bcaf.src","preCode":"    public static OlapTable mockTable(String name) {\n        Column column1 = new Column(\"col1\", PrimitiveType.BIGINT);\n        Column column2 = new Column(\"col2\", PrimitiveType.DOUBLE);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n            }\n        };\n        return table;\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/AccessTestUtil.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public static Analyzer fetchTableAnalyzer() {\n        Column column1 = new Column(\"k1\", PrimitiveType.VARCHAR);\n        Column column2 = new Column(\"k2\", PrimitiveType.VARCHAR);\n        Column column3 = new Column(\"k3\", PrimitiveType.VARCHAR);\n        Column column4 = new Column(\"k4\", PrimitiveType.BIGINT);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2, column3, column4);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n\n                table.getColumn(\"k1\");\n                minTimes = 0;\n                result = column1;\n\n                table.getColumn(\"k2\");\n                minTimes = 0;\n                result = column2;\n\n                table.getColumn(\"k3\");\n                minTimes = 0;\n                result = column3;\n\n                table.getColumn(\"k4\");\n                minTimes = 0;\n                result = column4;\n            }\n        };\n\n        Database db = new Database();\n\n        new Expectations(db) {\n            {\n                db.getTable(\"t\");\n                minTimes = 0;\n                result = table;\n\n                db.getTable(\"emptyTable\");\n                minTimes = 0;\n                result = null;\n\n                db.getTableNamesWithLock();\n                minTimes = 0;\n                result = Sets.newHashSet(\"t\");\n\n                db.getTables();\n                minTimes = 0;\n                result = Lists.newArrayList(table);\n\n                db.readLock();\n                minTimes = 0;\n\n                db.readUnlock();\n                minTimes = 0;\n\n                db.getFullName();\n                minTimes = 0;\n                result = \"testDb\";\n            }\n        };\n        Catalog catalog = fetchBlockCatalog();\n        Analyzer analyzer = new Analyzer(catalog, new ConnectContext(null));\n        new Expectations(analyzer) {\n            {\n                analyzer.getDefaultDb();\n                minTimes = 0;\n                result = \"testDb\";\n\n                analyzer.getTable((TableName) any);\n                minTimes = 0;\n                result = table;\n\n                analyzer.getQualifiedUser();\n                minTimes = 0;\n                result = \"testUser\";\n\n                analyzer.getCatalog();\n                minTimes = 0;\n                result = catalog;\n\n                analyzer.getClusterName();\n                minTimes = 0;\n                result = \"testCluster\";\n\n                analyzer.incrementCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.decrementCallDepth();\n                minTimes = 0;\n                result = 0;\n\n                analyzer.getCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.getContext();\n                minTimes = 0;\n                result = new ConnectContext(null);\n\n            }\n        };\n        return analyzer;\n    }\n","date":"2020-07-21 12:42:42","endLine":522,"groupId":"5626","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchTableAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d2/22a6abf0c3060ddf5b787449bdf7386050bcaf.src","preCode":"    public static Analyzer fetchTableAnalyzer() {\n        Column column1 = new Column(\"k1\", PrimitiveType.VARCHAR);\n        Column column2 = new Column(\"k2\", PrimitiveType.VARCHAR);\n        Column column3 = new Column(\"k3\", PrimitiveType.VARCHAR);\n        Column column4 = new Column(\"k4\", PrimitiveType.BIGINT);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2, column3, column4);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n\n                table.getColumn(\"k1\");\n                minTimes = 0;\n                result = column1;\n\n                table.getColumn(\"k2\");\n                minTimes = 0;\n                result = column2;\n\n                table.getColumn(\"k3\");\n                minTimes = 0;\n                result = column3;\n\n                table.getColumn(\"k4\");\n                minTimes = 0;\n                result = column4;\n            }\n        };\n\n        Database db = new Database();\n\n        new Expectations(db) {\n            {\n                db.getTable(\"t\");\n                minTimes = 0;\n                result = table;\n\n                db.getTable(\"emptyTable\");\n                minTimes = 0;\n                result = null;\n\n                db.getTableNamesWithLock();\n                minTimes = 0;\n                result = Sets.newHashSet(\"t\");\n\n                db.getTables();\n                minTimes = 0;\n                result = Lists.newArrayList(table);\n\n                db.readLock();\n                minTimes = 0;\n\n                db.readUnlock();\n                minTimes = 0;\n\n                db.getFullName();\n                minTimes = 0;\n                result = \"testDb\";\n            }\n        };\n        Catalog catalog = fetchBlockCatalog();\n        Analyzer analyzer = new Analyzer(catalog, new ConnectContext(null));\n        new Expectations(analyzer) {\n            {\n                analyzer.getDefaultDb();\n                minTimes = 0;\n                result = \"testDb\";\n\n                analyzer.getTable((TableName) any);\n                minTimes = 0;\n                result = table;\n\n                analyzer.getQualifiedUser();\n                minTimes = 0;\n                result = \"testUser\";\n\n                analyzer.getCatalog();\n                minTimes = 0;\n                result = catalog;\n\n                analyzer.getClusterName();\n                minTimes = 0;\n                result = \"testCluster\";\n\n                analyzer.incrementCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.decrementCallDepth();\n                minTimes = 0;\n                result = 0;\n\n                analyzer.getCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.getContext();\n                minTimes = 0;\n                result = new ConnectContext(null);\n\n            }\n        };\n        return analyzer;\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/AccessTestUtil.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public static OlapTable mockTable(String name) {\n        Column column1 = new Column(\"col1\", PrimitiveType.BIGINT);\n        Column column2 = new Column(\"col2\", PrimitiveType.DOUBLE);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n            }\n        };\n        return table;\n    }\n","date":"2020-07-21 12:42:42","endLine":229,"groupId":"10118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mockTable","params":"(Stringname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d2/22a6abf0c3060ddf5b787449bdf7386050bcaf.src","preCode":"    public static OlapTable mockTable(String name) {\n        Column column1 = new Column(\"col1\", PrimitiveType.BIGINT);\n        Column column2 = new Column(\"col2\", PrimitiveType.DOUBLE);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n            }\n        };\n        return table;\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/AccessTestUtil.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"},{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public static Analyzer fetchTableAnalyzer() throws AnalysisException {\n        Column column1 = new Column(\"k1\", PrimitiveType.VARCHAR);\n        Column column2 = new Column(\"k2\", PrimitiveType.VARCHAR);\n        Column column3 = new Column(\"k3\", PrimitiveType.VARCHAR);\n        Column column4 = new Column(\"k4\", PrimitiveType.BIGINT);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2, column3, column4);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n\n                table.getColumn(\"k1\");\n                minTimes = 0;\n                result = column1;\n\n                table.getColumn(\"k2\");\n                minTimes = 0;\n                result = column2;\n\n                table.getColumn(\"k3\");\n                minTimes = 0;\n                result = column3;\n\n                table.getColumn(\"k4\");\n                minTimes = 0;\n                result = column4;\n            }\n        };\n\n        Database db = new Database();\n\n        new Expectations(db) {\n            {\n                db.getTableNullable(\"t\");\n                minTimes = 0;\n                result = table;\n\n                db.getTableNullable(\"emptyTable\");\n                minTimes = 0;\n                result = null;\n\n                db.getTableNamesWithLock();\n                minTimes = 0;\n                result = Sets.newHashSet(\"t\");\n\n                db.getTables();\n                minTimes = 0;\n                result = Lists.newArrayList(table);\n\n                db.readLock();\n                minTimes = 0;\n\n                db.readUnlock();\n                minTimes = 0;\n\n                db.getFullName();\n                minTimes = 0;\n                result = \"testDb\";\n            }\n        };\n        Catalog catalog = fetchBlockCatalog();\n        Analyzer analyzer = new Analyzer(catalog, new ConnectContext(null));\n        new Expectations(analyzer) {\n            {\n                analyzer.getDefaultDb();\n                minTimes = 0;\n                result = \"testDb\";\n\n                analyzer.getTableOrAnalysisException((TableName) any);\n                minTimes = 0;\n                result = table;\n\n                analyzer.getQualifiedUser();\n                minTimes = 0;\n                result = \"testUser\";\n\n                analyzer.getCatalog();\n                minTimes = 0;\n                result = catalog;\n\n                analyzer.getClusterName();\n                minTimes = 0;\n                result = \"testCluster\";\n\n                analyzer.incrementCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.decrementCallDepth();\n                minTimes = 0;\n                result = 0;\n\n                analyzer.getCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.getContext();\n                minTimes = 0;\n                result = new ConnectContext(null);\n\n            }\n        };\n        return analyzer;\n    }\n","date":"2021-09-03 13:34:49","endLine":522,"groupId":"10118","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchTableAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/61/587052dfc19befa3e4580f6538868a3bcd7c70.src","preCode":"    public static Analyzer fetchTableAnalyzer() {\n        Column column1 = new Column(\"k1\", PrimitiveType.VARCHAR);\n        Column column2 = new Column(\"k2\", PrimitiveType.VARCHAR);\n        Column column3 = new Column(\"k3\", PrimitiveType.VARCHAR);\n        Column column4 = new Column(\"k4\", PrimitiveType.BIGINT);\n\n        MaterializedIndex index = new MaterializedIndex();\n        new Expectations(index) {\n            {\n                index.getId();\n                minTimes = 0;\n                result = 30000L;\n            }\n        };\n\n        Partition partition = Deencapsulation.newInstance(Partition.class);\n        new Expectations(partition) {\n            {\n                partition.getBaseIndex();\n                minTimes = 0;\n                result = index;\n\n                partition.getIndex(30000L);\n                minTimes = 0;\n                result = index;\n            }\n        };\n\n        OlapTable table = new OlapTable();\n        new Expectations(table) {\n            {\n                table.getBaseSchema();\n                minTimes = 0;\n                result = Lists.newArrayList(column1, column2, column3, column4);\n\n                table.getPartition(40000L);\n                minTimes = 0;\n                result = partition;\n\n                table.getColumn(\"k1\");\n                minTimes = 0;\n                result = column1;\n\n                table.getColumn(\"k2\");\n                minTimes = 0;\n                result = column2;\n\n                table.getColumn(\"k3\");\n                minTimes = 0;\n                result = column3;\n\n                table.getColumn(\"k4\");\n                minTimes = 0;\n                result = column4;\n            }\n        };\n\n        Database db = new Database();\n\n        new Expectations(db) {\n            {\n                db.getTable(\"t\");\n                minTimes = 0;\n                result = table;\n\n                db.getTable(\"emptyTable\");\n                minTimes = 0;\n                result = null;\n\n                db.getTableNamesWithLock();\n                minTimes = 0;\n                result = Sets.newHashSet(\"t\");\n\n                db.getTables();\n                minTimes = 0;\n                result = Lists.newArrayList(table);\n\n                db.readLock();\n                minTimes = 0;\n\n                db.readUnlock();\n                minTimes = 0;\n\n                db.getFullName();\n                minTimes = 0;\n                result = \"testDb\";\n            }\n        };\n        Catalog catalog = fetchBlockCatalog();\n        Analyzer analyzer = new Analyzer(catalog, new ConnectContext(null));\n        new Expectations(analyzer) {\n            {\n                analyzer.getDefaultDb();\n                minTimes = 0;\n                result = \"testDb\";\n\n                analyzer.getTable((TableName) any);\n                minTimes = 0;\n                result = table;\n\n                analyzer.getQualifiedUser();\n                minTimes = 0;\n                result = \"testUser\";\n\n                analyzer.getCatalog();\n                minTimes = 0;\n                result = catalog;\n\n                analyzer.getClusterName();\n                minTimes = 0;\n                result = \"testCluster\";\n\n                analyzer.incrementCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.decrementCallDepth();\n                minTimes = 0;\n                result = 0;\n\n                analyzer.getCallDepth();\n                minTimes = 0;\n                result = 1;\n\n                analyzer.getContext();\n                minTimes = 0;\n                result = new ConnectContext(null);\n\n            }\n        };\n        return analyzer;\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/AccessTestUtil.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
