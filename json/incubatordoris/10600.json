[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testSaveLoadHeader() throws Exception {\n        String dir = \"testLoadHeader\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        long checksum1 = catalog.saveHeader(dos, new Random().nextLong(), 0);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadHeader(dis, 0);\n        Assert.assertEquals(checksum1, checksum2);\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","date":"2020-07-21 12:42:42","endLine":155,"groupId":"4311","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSaveLoadHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c9/7be54498f40273f0ce8518592ad7e4faf4b568.src","preCode":"    public void testSaveLoadHeader() throws Exception {\n        String dir = \"testLoadHeader\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        long checksum1 = catalog.saveHeader(dos, new Random().nextLong(), 0);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadHeader(dis, 0);\n        Assert.assertEquals(checksum1, checksum2);\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/CatalogTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testSaveLoadSchemaChangeJob() throws Exception {\n        String dir = \"testLoadSchemaChangeJob\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        Database db1 = new Database(10000L, \"testCluster.db1\");\n        db1.setClusterName(\"testCluster\");\n        final Cluster cluster = new Cluster(\"testCluster\", 10001L);\n        MaterializedIndex baseIndex = new MaterializedIndex(20000L, IndexState.NORMAL);\n        Partition partition = new Partition(2000L, \"single\", baseIndex, new RandomDistributionInfo(10));\n        List<Column> baseSchema = new LinkedList<Column>();\n        OlapTable table = new OlapTable(2L, \"base\", baseSchema, KeysType.AGG_KEYS,\n                                        new SinglePartitionInfo(), new RandomDistributionInfo(10));\n        table.addPartition(partition);\n        db1.createTable(table);\n\n        catalog.addCluster(cluster);\n        catalog.unprotectCreateDb(db1);\n        SchemaChangeJob job1 = new SchemaChangeJob(db1.getId(), table.getId(), null, table.getName(), -1);\n        \n        catalog.getSchemaChangeHandler().replayInitJob(job1, catalog);\n        long checksum1 = catalog.saveAlterJob(dos, 0, JobType.SCHEMA_CHANGE);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadAlterJob(dis, 0, JobType.SCHEMA_CHANGE);\n        Assert.assertEquals(checksum1, checksum2);\n        Map<Long, AlterJob> map = catalog.getSchemaChangeHandler().unprotectedGetAlterJobs();\n        Assert.assertEquals(1, map.size());\n        SchemaChangeJob job2 = (SchemaChangeJob) map.get(table.getId());\n        Assert.assertTrue(job1.equals(job2));\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","date":"2020-07-21 12:42:42","endLine":238,"groupId":"5404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSaveLoadSchemaChangeJob","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c9/7be54498f40273f0ce8518592ad7e4faf4b568.src","preCode":"    public void testSaveLoadSchemaChangeJob() throws Exception {\n        String dir = \"testLoadSchemaChangeJob\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        Database db1 = new Database(10000L, \"testCluster.db1\");\n        db1.setClusterName(\"testCluster\");\n        final Cluster cluster = new Cluster(\"testCluster\", 10001L);\n        MaterializedIndex baseIndex = new MaterializedIndex(20000L, IndexState.NORMAL);\n        Partition partition = new Partition(2000L, \"single\", baseIndex, new RandomDistributionInfo(10));\n        List<Column> baseSchema = new LinkedList<Column>();\n        OlapTable table = new OlapTable(2L, \"base\", baseSchema, KeysType.AGG_KEYS,\n                                        new SinglePartitionInfo(), new RandomDistributionInfo(10));\n        table.addPartition(partition);\n        db1.createTable(table);\n\n        catalog.addCluster(cluster);\n        catalog.unprotectCreateDb(db1);\n        SchemaChangeJob job1 = new SchemaChangeJob(db1.getId(), table.getId(), null, table.getName(), -1);\n        \n        catalog.getSchemaChangeHandler().replayInitJob(job1, catalog);\n        long checksum1 = catalog.saveAlterJob(dos, 0, JobType.SCHEMA_CHANGE);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadAlterJob(dis, 0, JobType.SCHEMA_CHANGE);\n        Assert.assertEquals(checksum1, checksum2);\n        Map<Long, AlterJob> map = catalog.getSchemaChangeHandler().unprotectedGetAlterJobs();\n        Assert.assertEquals(1, map.size());\n        SchemaChangeJob job2 = (SchemaChangeJob) map.get(table.getId());\n        Assert.assertTrue(job1.equals(job2));\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/CatalogTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-07-27 13:36:53","codes":[{"authorDate":"2021-07-27 13:36:53","commitOrder":2,"curCode":"    public void testSaveLoadHeader() throws Exception {\n        String dir = \"testLoadHeader\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        CountingDataOutputStream dos = new CountingDataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        long checksum1 = catalog.saveHeader(dos, new Random().nextLong(), 0);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadHeader(dis, MetaHeader.EMPTY_HEADER ,0);\n        Assert.assertEquals(checksum1, checksum2);\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","date":"2021-07-27 13:36:53","endLine":156,"groupId":"10600","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSaveLoadHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a6/724a06e2082e1a0a91b88e0a2800edac175639.src","preCode":"    public void testSaveLoadHeader() throws Exception {\n        String dir = \"testLoadHeader\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        long checksum1 = catalog.saveHeader(dos, new Random().nextLong(), 0);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadHeader(dis, 0);\n        Assert.assertEquals(checksum1, checksum2);\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/CatalogTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-07-27 13:36:53","commitOrder":2,"curCode":"    public void testSaveLoadSchemaChangeJob() throws Exception {\n        String dir = \"testLoadSchemaChangeJob\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        CountingDataOutputStream dos = new CountingDataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        Database db1 = new Database(10000L, \"testCluster.db1\");\n        db1.setClusterName(\"testCluster\");\n        final Cluster cluster = new Cluster(\"testCluster\", 10001L);\n        MaterializedIndex baseIndex = new MaterializedIndex(20000L, IndexState.NORMAL);\n        Partition partition = new Partition(2000L, \"single\", baseIndex, new RandomDistributionInfo(10));\n        List<Column> baseSchema = new LinkedList<Column>();\n        OlapTable table = new OlapTable(2L, \"base\", baseSchema, KeysType.AGG_KEYS,\n                                        new SinglePartitionInfo(), new RandomDistributionInfo(10));\n        table.addPartition(partition);\n        db1.createTable(table);\n\n        catalog.addCluster(cluster);\n        catalog.unprotectCreateDb(db1);\n        SchemaChangeJob job1 = new SchemaChangeJob(db1.getId(), table.getId(), null, table.getName(), -1);\n        \n        catalog.getSchemaChangeHandler().replayInitJob(job1, catalog);\n        long checksum1 = catalog.saveAlterJob(dos, 0, JobType.SCHEMA_CHANGE);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadAlterJob(dis, 0, JobType.SCHEMA_CHANGE);\n        Assert.assertEquals(checksum1, checksum2);\n        Map<Long, AlterJob> map = catalog.getSchemaChangeHandler().unprotectedGetAlterJobs();\n        Assert.assertEquals(1, map.size());\n        SchemaChangeJob job2 = (SchemaChangeJob) map.get(table.getId());\n        Assert.assertTrue(job1.equals(job2));\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","date":"2021-07-27 13:36:53","endLine":239,"groupId":"10600","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSaveLoadSchemaChangeJob","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a6/724a06e2082e1a0a91b88e0a2800edac175639.src","preCode":"    public void testSaveLoadSchemaChangeJob() throws Exception {\n        String dir = \"testLoadSchemaChangeJob\";\n        mkdir(dir);\n        File file = new File(dir, \"image\");\n        file.createNewFile();\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));\n        Catalog catalog = Catalog.getCurrentCatalog();\n        MetaContext.get().setMetaVersion(FeConstants.meta_version);\n        Field field = catalog.getClass().getDeclaredField(\"load\");\n        field.setAccessible(true);\n        field.set(catalog, new Load());\n\n        Database db1 = new Database(10000L, \"testCluster.db1\");\n        db1.setClusterName(\"testCluster\");\n        final Cluster cluster = new Cluster(\"testCluster\", 10001L);\n        MaterializedIndex baseIndex = new MaterializedIndex(20000L, IndexState.NORMAL);\n        Partition partition = new Partition(2000L, \"single\", baseIndex, new RandomDistributionInfo(10));\n        List<Column> baseSchema = new LinkedList<Column>();\n        OlapTable table = new OlapTable(2L, \"base\", baseSchema, KeysType.AGG_KEYS,\n                                        new SinglePartitionInfo(), new RandomDistributionInfo(10));\n        table.addPartition(partition);\n        db1.createTable(table);\n\n        catalog.addCluster(cluster);\n        catalog.unprotectCreateDb(db1);\n        SchemaChangeJob job1 = new SchemaChangeJob(db1.getId(), table.getId(), null, table.getName(), -1);\n        \n        catalog.getSchemaChangeHandler().replayInitJob(job1, catalog);\n        long checksum1 = catalog.saveAlterJob(dos, 0, JobType.SCHEMA_CHANGE);\n        catalog.clear();\n        catalog = null;\n        dos.close();\n        \n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n        catalog = Catalog.getCurrentCatalog();\n        long checksum2 = catalog.loadAlterJob(dis, 0, JobType.SCHEMA_CHANGE);\n        Assert.assertEquals(checksum1, checksum2);\n        Map<Long, AlterJob> map = catalog.getSchemaChangeHandler().unprotectedGetAlterJobs();\n        Assert.assertEquals(1, map.size());\n        SchemaChangeJob job2 = (SchemaChangeJob) map.get(table.getId());\n        Assert.assertTrue(job1.equals(job2));\n        dis.close();\n        \n        deleteDir(dir);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/CatalogTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"b1f597910338af09cf762f95d98d734b25c2685c","commitMessage":"@@@[New Feature][Meta][Image] Add file header and footer for image (#6207)\n\n#6206 \n\nAt present.  our image file does not have file header/footer. When we need to change the image format (such as adding different journal versions to the image).  there is no way to distinguish different image formats.\n\nTherefore.  we suggest adding file header and footer to the image. By the new image format.  we can freely distinguish and define different image reading ways.\n\nThe format of the image is as follows:\n\n```\n/**\n * Image Format:\n * |- Image --------------------------------------|\n * | - Magic String (4 bytes)                     |\n * | - Header Length (4 bytes)                    |\n * | |- Header -----------------------------|     |\n * | | |- Json Header ---------------|      |     |\n * | | | - version                   |      |     |\n * | | | - other key/value(undecided)|      |     |\n * | | |-----------------------------|      |     |\n * | |--------------------------------------|     |\n * |                                              |\n * | |- Image Body -------------------------|     |\n * | | Object a                             |     |\n * | | Object b                             |     |\n * | | ...                                  |     |\n * | |--------------------------------------|     |\n * |                                              |\n * | |- Footer -----------------------------|     |\n * | | | - Checksum (8 bytes)               |     |\n * | | |- object index --------------|      |     |\n * | | | - index a                   |      |     |\n * | | | - index b                   |      |     |\n * | | | ...                         |      |     |\n * | | |-----------------------------|      |     |\n * | | - other value(undecided)             |     |\n * | |--------------------------------------|     |\n * | - Footer Length (8 bytes)                    |\n * | - Magic String (4 bytes)                     |\n * |----------------------------------------------|\n */\n```\n1. Magic Number\nOne image format is identified by one magic string and one version field. The magic string is save in the first 4 bytes and last 4 bytes in the images.\n\n2. Image Header:\nThe version is save in the header with json format now.\n\n3. Image Body:\nEqual to the original image.\n\n4.Image Footer:\nImage footer stores the file offset(index) of many image objects. If necessary.  we can read some objects in the image by the footer.\n","date":"2021-07-27 13:36:53","modifiedFileCount":"5","status":"M","submitter":"xy720"}]
