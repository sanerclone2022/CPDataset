[{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2020-08-12 12:11:47","commitOrder":3,"curCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode,\n            FragmentScanRangeAssignment assignment) throws Exception {\n\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","date":"2020-08-12 12:11:47","endLine":1158,"groupId":"5289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByColocate","params":"(finalOlapScanNodescanNode@FragmentScanRangeAssignmentassignment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/09/e38734752857f7b7b972c40b5319a894b84908.src","preCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode,\n            FragmentScanRangeAssignment assignment) throws Exception {\n\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1129,"status":"NB"},{"authorDate":"2020-10-11 15:37:32","commitOrder":3,"curCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","date":"2020-10-11 15:37:32","endLine":1549,"groupId":"5289","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByBucket","params":"(finalOlapScanNodescanNode@ImmutableMap<Long@Backend>idToBackend@Map<TNetworkAddress@Long>addressToBackendID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1518,"status":"B"}],"commitId":"04f26e4b7f9b929c9c713fb01e513f5c80b494c0","commitMessage":"@@@[SQL] Support Bucket Shuffle Join (#4677)\n\nSupport Bucket Shuffle Join\nissue:#4394","date":"2020-10-11 15:37:32","modifiedFileCount":"7","status":"M","submitter":"HappenLee"},{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2020-12-26 14:38:39","commitOrder":4,"curCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","date":"2020-12-26 14:38:39","endLine":1275,"groupId":"5289","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByColocate","params":"(finalOlapScanNodescanNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/75ffd0c7529f14dca02326dd6a82ce5efdaf72.src","preCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode,\n            FragmentScanRangeAssignment assignment) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"M"},{"authorDate":"2020-10-11 15:37:32","commitOrder":4,"curCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","date":"2020-10-11 15:37:32","endLine":1549,"groupId":"5289","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByBucket","params":"(finalOlapScanNodescanNode@ImmutableMap<Long@Backend>idToBackend@Map<TNetworkAddress@Long>addressToBackendID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1518,"status":"N"}],"commitId":"f7a325a08f8757b6596c490d924f1d40e9f1ee5a","commitMessage":"@@@[Refactor]Refactor function computeScanRangeAssignmentByColocate (#5097)\n\n","date":"2020-12-26 14:38:39","modifiedFileCount":"1","status":"M","submitter":"xinghuayu007"},{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2020-12-31 09:47:06","commitOrder":5,"curCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n        HashMap<TNetworkAddress, Long> assignedBytesPerHost = Maps.newHashMap();\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, assignedBytesPerHost);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","date":"2020-12-31 09:47:06","endLine":1275,"groupId":"1916","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByColocate","params":"(finalOlapScanNodescanNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ff/05413d56243d0902d85aaaf0a72a00e2bb18cc.src","preCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n\n        for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq);\n            }\n\n            for(TScanRangeLocations location: locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1248,"status":"M"},{"authorDate":"2020-10-11 15:37:32","commitOrder":5,"curCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","date":"2020-10-11 15:37:32","endLine":1549,"groupId":"5289","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByBucket","params":"(finalOlapScanNodescanNode@ImmutableMap<Long@Backend>idToBackend@Map<TNetworkAddress@Long>addressToBackendID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1518,"status":"N"}],"commitId":"2e95b1c38935f53ed5a16720771d9d45efd91d9e","commitMessage":"@@@[Enhancement]Make Cholocate table join more load balance (#5104)\n\nWhen two colocate tables make join operation.  to make join operation locally. \nthe tablet belongs to the same bucket sequence will be distributed to the same host.\nWhen choosing which host for a bucket sequence.  it takes random strategy.\nRandom strategy can not make query task load balance logically for one query.\n\nTherefore.  this patch takes round-robin strategy.  make buckets distributed evenly.\nFor example.  if there are 6 bucket sequences and 3 hosts. \nit is better to distributed 2 buckets sequence for every host.","date":"2020-12-31 09:47:06","modifiedFileCount":"3","status":"M","submitter":"xinghuayu007"},{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2021-06-04 10:19:58","commitOrder":6,"curCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n            fragmentIdTobucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n        BucketSeqToScanRange bucketSeqToScanRange = fragmentIdTobucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n        HashMap<TNetworkAddress, Long> assignedBytesPerHost = Maps.newHashMap();\n        for (Integer bucketSeq : scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, assignedBytesPerHost);\n            }\n\n            for (TScanRangeLocations location : locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","date":"2021-06-04 10:19:58","endLine":1311,"groupId":"101094","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByColocate","params":"(finalOlapScanNodescanNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cb/93a094b20e928c14e7faecac92777c27858cd2.src","preCode":"    private void computeScanRangeAssignmentByColocate(\n            final OlapScanNode scanNode) throws Exception {\n        if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n            fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n        }\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n        HashMap<TNetworkAddress, Long> assignedBytesPerHost = Maps.newHashMap();\n        for (Integer bucketSeq : scanNode.bucketSeq2locations.keySet()) {\n            \r\n            List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n            if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, assignedBytesPerHost);\n            }\n\n            for (TScanRangeLocations location : locations) {\n                Map<Integer, List<TScanRangeParams>> scanRanges =\n                        findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                List<TScanRangeParams> scanRangeParamsList =\n                        findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                \r\n                TScanRangeParams scanRangeParams = new TScanRangeParams();\n                scanRangeParams.scan_range = location.scan_range;\n                scanRangeParamsList.add(scanRangeParams);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1281,"status":"M"},{"authorDate":"2020-10-11 15:37:32","commitOrder":6,"curCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","date":"2020-10-11 15:37:32","endLine":1549,"groupId":"101094","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"computeScanRangeAssignmentByBucket","params":"(finalOlapScanNodescanNode@ImmutableMap<Long@Backend>idToBackend@Map<TNetworkAddress@Long>addressToBackendID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private void computeScanRangeAssignmentByBucket(\n                final OlapScanNode scanNode, ImmutableMap<Long, Backend> idToBackend, Map<TNetworkAddress, Long> addressToBackendID) throws Exception {\n            if (!fragmentIdToSeqToAddressMap.containsKey(scanNode.getFragmentId())) {\n                fragmentIdToBucketNumMap.put(scanNode.getFragmentId(), scanNode.getOlapTable().getDefaultDistributionInfo().getBucketNum());\n                fragmentIdToSeqToAddressMap.put(scanNode.getFragmentId(), new HashedMap());\n                fragmentIdBucketSeqToScanRangeMap.put(scanNode.getFragmentId(), new BucketSeqToScanRange());\n                fragmentIdToBuckendIdBucketCountMap.put(scanNode.getFragmentId(), new HashMap<>());\n            }\n            Map<Integer, TNetworkAddress> bucketSeqToAddress = fragmentIdToSeqToAddressMap.get(scanNode.getFragmentId());\n            BucketSeqToScanRange bucketSeqToScanRange = fragmentIdBucketSeqToScanRangeMap.get(scanNode.getFragmentId());\n\n            for(Integer bucketSeq: scanNode.bucketSeq2locations.keySet()) {\n                \r\n                List<TScanRangeLocations> locations = scanNode.bucketSeq2locations.get(bucketSeq);\n                if (!bucketSeqToAddress.containsKey(bucketSeq)) {\n                    getExecHostPortForFragmentIDAndBucketSeq(locations.get(0), scanNode.getFragmentId(), bucketSeq, idToBackend, addressToBackendID);\n                }\n\n                for(TScanRangeLocations location: locations) {\n                    Map<Integer, List<TScanRangeParams>> scanRanges =\n                            findOrInsert(bucketSeqToScanRange, bucketSeq, new HashMap<Integer, List<TScanRangeParams>>());\n\n                    List<TScanRangeParams> scanRangeParamsList =\n                            findOrInsert(scanRanges, scanNode.getId().asInt(), new ArrayList<TScanRangeParams>());\n\n                    \r\n                    TScanRangeParams scanRangeParams = new TScanRangeParams();\n                    scanRangeParams.scan_range = location.scan_range;\n                    scanRangeParamsList.add(scanRangeParams);\n                }\n            }\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1518,"status":"N"}],"commitId":"a5c35eb20f3a10834f2920bf45515b2f4e411edf","commitMessage":"@@@[Bug] Fix the bug of null pointer exception of colocate join (#5961)\n\n","date":"2021-06-04 10:19:58","modifiedFileCount":"2","status":"M","submitter":"HappenLee"}]
