[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-07-21 12:42:42","endLine":81,"groupId":"6716","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4f/55a9b85d1ca3f3e14ded88f251a59ad62cb4cd.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-07-21 12:42:42","endLine":83,"groupId":"6716","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e9/6abb4b218bc4f71e733dc53e4819abfba94523.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/NDVToHll.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-08-06 23:16:15","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-07-21 12:42:42","endLine":81,"groupId":"6716","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4f/55a9b85d1ca3f3e14ded88f251a59ad62cb4cd.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2020-08-06 23:16:15","commitOrder":2,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")\n                && !fnExpr.getFnName().getFunction().equalsIgnoreCase(\"approx_count_distinct\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-08-06 23:16:15","endLine":85,"groupId":"6716","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a6/ce08cd50731223c07a599c8ba036d62c414cfb.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/NDVToHll.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"4c05eddc10b42712ed4614eaae0498c50019d49b","commitMessage":"@@@[SQL] Support approx_count_distinct rewrite to hll union in mv rewriter (#4239)\n\nThe new function approx_count_distinct is the alias of function ndv.\nSo Doris also need to rewrite approx_count_distinct to hll function when it is possible to match the hll materialized view.","date":"2020-08-06 23:16:15","modifiedFileCount":"2","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2020-08-06 23:16:15","codes":[{"authorDate":"2020-08-20 09:30:35","commitOrder":3,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        if (fnExpr.getParams().isDistinct()) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-08-20 09:30:35","endLine":84,"groupId":"101563","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b1/3b5deec05128f984c7a666c7b754c481b3d30b.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(FunctionSet.COUNT)) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt.mvColumnBuilder(FunctionSet.COUNT, queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/CountFieldToSum.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-08-06 23:16:15","commitOrder":3,"curCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")\n                && !fnExpr.getFnName().getFunction().equalsIgnoreCase(\"approx_count_distinct\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","date":"2020-08-06 23:16:15","endLine":85,"groupId":"101563","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"apply","params":"(Exprexpr@Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a6/ce08cd50731223c07a599c8ba036d62c414cfb.src","preCode":"    public Expr apply(Expr expr, Analyzer analyzer) throws AnalysisException {\n        \r\n        if (!(expr instanceof FunctionCallExpr)) {\n            return expr;\n        }\n        FunctionCallExpr fnExpr = (FunctionCallExpr) expr;\n        if (!fnExpr.getFnName().getFunction().equalsIgnoreCase(\"ndv\")\n                && !fnExpr.getFnName().getFunction().equalsIgnoreCase(\"approx_count_distinct\")) {\n            return expr;\n        }\n        if (fnExpr.getChildren().size() != 1 || !(fnExpr.getChild(0) instanceof SlotRef)) {\n            return expr;\n        }\n        SlotRef fnChild0 = (SlotRef) fnExpr.getChild(0);\n        Column column = fnChild0.getColumn();\n        Table table = fnChild0.getTable();\n        if (column == null || table == null || !(table instanceof OlapTable)) {\n            return expr;\n        }\n        OlapTable olapTable = (OlapTable) table;\n\n        \r\n        String queryColumnName = column.getName();\n        String mvColumnName = CreateMaterializedViewStmt\n                .mvColumnBuilder(AggregateType.HLL_UNION.name().toLowerCase(), queryColumnName);\n        Column mvColumn = olapTable.getVisibleColumn(mvColumnName);\n        if (mvColumn == null) {\n            return expr;\n        }\n\n        \r\n        return rewriteExpr(fnChild0, mvColumn, analyzer);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/rewrite/mvrewrite/NDVToHll.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"6bb111b42c754d35da3414abc940f363d4bf31d6","commitMessage":"@@@Modify mv rewrite rule on 'Count distinct' (#4382)\n\nThe rewrite rule named `CountToSum` does not distinguish between `Count` and `Count distinct` which causes `Count distinct` is rewritten as `Sum` incorrectly.\nSo this commit modified matching rule.\nWhen the function is `Count distinct`.  the rewrite rule will not take effect.\n\nFixed #4381","date":"2020-08-20 09:30:35","modifiedFileCount":"1","status":"M","submitter":"EmmyMiao87"}]
