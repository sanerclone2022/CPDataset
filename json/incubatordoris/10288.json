[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","date":"2020-07-21 12:42:42","endLine":62,"groupId":"972","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBfColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2f/88ecdf17fa5827ad2eb1d594170bfefea51bee.src","preCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":116,"groupId":"972","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBfColumnsError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2f/88ecdf17fa5827ad2eb1d594170bfefea51bee.src","preCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-22 22:38:55","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","date":"2020-07-21 12:42:42","endLine":62,"groupId":"972","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBfColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2f/88ecdf17fa5827ad2eb1d594170bfefea51bee.src","preCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2020-07-22 22:38:55","commitOrder":2,"curCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"k3\", PrimitiveType.BOOLEAN));\n        columns.add(new Column(\"v1\",\n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k4\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"BOOLEAN is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","date":"2020-07-22 22:38:55","endLine":125,"groupId":"7633","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBfColumnsError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/dd/bf6c1dbc567637f1e3140c2488eb11564eb4be.src","preCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\", \n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"31a6c43a69bb312cf96e2c467468b08507c0db5c","commitMessage":"@@@[Bug][Alter] Fix boolean support (#4123)\n\nFixes #4122\n *  add type check when add bloom filter index on boolean column.\n *  support add boolean column.","date":"2020-07-22 22:38:55","modifiedFileCount":"4","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-02-03 13:22:00","codes":[{"authorDate":"2021-02-03 13:22:00","commitOrder":3,"curCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\",\n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","date":"2021-02-03 13:22:00","endLine":69,"groupId":"10288","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBfColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/91/3499a726664c43b1b0fe3152608ce0bdb24ca5.src","preCode":"    public void testBfColumns() throws AnalysisException {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"v1\",\n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", \n                        ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1\");\n\n        Set<String> bfColumns = PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        Assert.assertEquals(Sets.newHashSet(\"k1\"), bfColumns);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-02-03 13:22:00","commitOrder":3,"curCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"k3\", PrimitiveType.BOOLEAN));\n        columns.add(new Column(\"v1\",\n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns,\n                KeysType.AGG_KEYS));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k4\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"BOOLEAN is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns, KeysType.AGG_KEYS);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","date":"2021-02-03 13:22:00","endLine":133,"groupId":"10288","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBfColumnsError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/91/3499a726664c43b1b0fe3152608ce0bdb24ca5.src","preCode":"    public void testBfColumnsError() {\n        List<Column> columns = Lists.newArrayList();\n        columns.add(new Column(\"k1\", PrimitiveType.INT));\n        columns.add(new Column(\"k2\", PrimitiveType.TINYINT));\n        columns.add(new Column(\"k3\", PrimitiveType.BOOLEAN));\n        columns.add(new Column(\"v1\",\n                        ScalarType.createType(PrimitiveType.VARCHAR), false, AggregateType.REPLACE, \"\", \"\"));\n        columns.add(new Column(\"v2\", ScalarType.createType(PrimitiveType.BIGINT), false, AggregateType.SUM, \"0\", \"\"));\n        columns.get(0).setIsKey(true);\n        columns.get(1).setIsKey(true);\n\n        Map<String, String> properties = Maps.newHashMap();\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"\");\n        try {\n            Assert.assertEquals(Sets.newHashSet(), PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns));\n        } catch (AnalysisException e) {\n            Assert.fail();\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k4\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"column does not exist in table\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"TINYINT is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k3\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"BOOLEAN is not supported\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"v2\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Bloom filter index only used in\"));\n        }\n\n        \r\n        properties.put(PropertyAnalyzer.PROPERTIES_BF_COLUMNS, \"k1,K1\");\n        try {\n            PropertyAnalyzer.analyzeBloomFilterColumns(properties, columns);\n        } catch (AnalysisException e) {\n            Assert.assertTrue(e.getMessage().contains(\"Reduplicated bloom filter column\"));\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/PropertyAnalyzerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"47e33c79873f4277fd39da05a8532dcaa211a4d3","commitMessage":"@@@Support create index on unique value column (#5305)\n\n* support create index on unique table value columns","date":"2021-02-03 13:22:00","modifiedFileCount":"5","status":"M","submitter":"Zhengguo Yang"}]
