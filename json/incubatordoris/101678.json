[{"authorTime":"2018-10-31 17:07:16","codes":[{"authorDate":"2018-10-31 17:07:16","commitOrder":1,"curCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.debug(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","date":"2018-10-31 17:07:16","endLine":79,"groupId":"897","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listPath","params":"(TBrokerListPathRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/7b/979356967c36c3f9a83ed12c0d94d66b8f61e1.src","preCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.debug(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-10-31 17:07:16","commitOrder":1,"curCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.debug(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","date":"2018-10-31 17:07:16","endLine":137,"groupId":"878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"openReader","params":"(TBrokerOpenReaderRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/7b/979356967c36c3f9a83ed12c0d94d66b8f61e1.src","preCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.debug(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"2be79915612a9387ccb9686076a5f0c8f042c10d","commitMessage":"@@@Change com.baidu.palo to org.apache.doris\n\n    Change some package names in fe/fs_brokers/gensrc dir.\n","date":"2018-10-31 17:07:16","modifiedFileCount":"0","status":"B","submitter":"morningman"},{"authorTime":"2018-10-31 17:07:16","codes":[{"authorDate":"2018-12-05 20:49:31","commitOrder":2,"curCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.debug(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","date":"2018-12-05 20:49:31","endLine":86,"groupId":"3873","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listPath","params":"(TBrokerListPathRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8e/f1c505ff929f00dd4691c5b02c03d117c35f26.src","preCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.debug(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-10-31 17:07:16","commitOrder":2,"curCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.debug(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","date":"2018-10-31 17:07:16","endLine":137,"groupId":"878","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"openReader","params":"(TBrokerOpenReaderRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/7b/979356967c36c3f9a83ed12c0d94d66b8f61e1.src","preCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.debug(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"}],"commitId":"2622da1c5e658f16eda7e6d924d3de3027ec003d","commitMessage":"@@@Add 'fileNameOnly' param to broker's listPath method (#394)\n\n","date":"2018-12-05 20:49:31","modifiedFileCount":"2","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2019-01-03 19:07:27","codes":[{"authorDate":"2019-01-03 19:07:27","commitOrder":3,"curCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.info(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            logger.warn(\"failed to list path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","date":"2019-01-03 19:07:27","endLine":87,"groupId":"3873","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"listPath","params":"(TBrokerListPathRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e9/00fef3d751b398cb01a1ca3db0f0262dd5530f.src","preCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.debug(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-01-03 19:07:27","commitOrder":3,"curCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.info(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            logger.warn(\"failed to open reader for path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","date":"2019-01-03 19:07:27","endLine":150,"groupId":"878","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"openReader","params":"(TBrokerOpenReaderRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e9/00fef3d751b398cb01a1ca3db0f0262dd5530f.src","preCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.debug(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"a51ce0359563e33621fa0fa9be63f1e2f6d3616d","commitMessage":"@@@Enhance the usability of Load operation (#490)\n\n1. Add broker load error hub\nA broker load error hub will collect error messages in load process and saves them as a file to the specified remote storage via broker. In case that in broker/min/streaming load process.  user may not be able to access the error log file in Backend directly.\nWe also add a new header option: 'enable_hub' in streaming load request.  and default is false. Because if we enable the broker load error hub.  it will significantly slow down the processing speed of streaming load.  due to the visit of remote storage via broker. So use can disable the error load hub using this header option.  to avoid slowing down the load speed.\n\n2. Show load error logs by using SHOW LOAD WARNINGS stmt\nWe also provide a more easy way to get load error logs. We implement 'SHOW LOAD WARNINGS ON 'url'' stmt to show load error logs directly. The 'url' in stmt is provided in 'SHOW  LOAD' stmt.\neg:\nshow load warnings on \"http://192.168.1.1:8040/api/_load_error_log?file=__shard_2/error_log_xxx\";\n\n3. Support now() function in broker load\nUser can mapping a column to now() in broker load stmt.  which means this column will be filled with time when the ETL started.\n\n4. Support more types of wildcard in broker load\nCurrently.  we only support wildcard '*' to match the file names. wildcard like '/path/to/20190[1-4]*' is not support.","date":"2019-01-03 19:07:27","modifiedFileCount":"29","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2019-07-01 18:39:27","codes":[{"authorDate":"2019-01-03 19:07:27","commitOrder":4,"curCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.info(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            logger.warn(\"failed to list path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","date":"2019-01-03 19:07:27","endLine":87,"groupId":"3873","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"listPath","params":"(TBrokerListPathRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e9/00fef3d751b398cb01a1ca3db0f0262dd5530f.src","preCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.info(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            logger.warn(\"failed to list path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2019-07-01 18:39:27","commitOrder":4,"curCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.info(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path,\n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            \r\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path,\n                    false, request.properties);\n            response.setSize(fileStatuses.get(0).size);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            logger.warn(\"failed to open reader for path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            response.setSize(0);\n        }\n        return response;\n    }\n","date":"2019-07-01 18:39:27","endLine":153,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"openReader","params":"(TBrokerOpenReaderRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/3b/ec40e3326c0e511b4344b955f856b7a84365de.src","preCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.info(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path, \n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            logger.warn(\"failed to open reader for path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"7eab12a40e5a20959c13eba99697c171d1461e0b","commitMessage":"@@@Support  reading Parquet file when loading data (#1173)\n\n","date":"2019-07-01 18:39:27","modifiedFileCount":"9","status":"M","submitter":"worker24h"},{"authorTime":"2019-07-29 23:05:01","codes":[{"authorDate":"2019-01-03 19:07:27","commitOrder":5,"curCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.info(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            logger.warn(\"failed to list path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","date":"2019-01-03 19:07:27","endLine":87,"groupId":"101678","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"listPath","params":"(TBrokerListPathRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e9/00fef3d751b398cb01a1ca3db0f0262dd5530f.src","preCode":"    public TBrokerListResponse listPath(TBrokerListPathRequest request)\n            throws TException {\n        logger.info(\"received a list path request, request detail: \" + request);\n        TBrokerListResponse response = new TBrokerListResponse();\n        try {\n            boolean fileNameOnly = false;\n            if (request.isSetFileNameOnly()) {\n                fileNameOnly = request.isFileNameOnly();\n            }\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path, fileNameOnly,\n                    request.properties);\n            response.setOpStatus(generateOKStatus());\n            response.setFiles(fileStatuses);\n            return response;\n        } catch (BrokerException e) {\n            logger.warn(\"failed to list path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            return response;\n        }\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2019-07-29 23:05:01","commitOrder":5,"curCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.info(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path,\n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            logger.warn(\"failed to open reader for path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n        }\n        return response;\n    }\n","date":"2019-07-29 23:05:01","endLine":148,"groupId":"101678","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"openReader","params":"(TBrokerOpenReaderRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0d/7524f0de58a8d1ff5a8e692a6fe068bc5371a3.src","preCode":"    public TBrokerOpenReaderResponse openReader(TBrokerOpenReaderRequest request)\n            throws TException {\n        logger.info(\"receive a open reader request, request detail: \" + request);\n        TBrokerOpenReaderResponse response = new TBrokerOpenReaderResponse();\n        try {\n            TBrokerFD fd = fileSystemManager.openReader(request.clientId, request.path,\n                    request.startOffset, request.properties);\n            response.setFd(fd);\n            \r\n            List<TBrokerFileStatus> fileStatuses = fileSystemManager.listPath(request.path,\n                    false, request.properties);\n            response.setSize(fileStatuses.get(0).size);\n            response.setOpStatus(generateOKStatus());\n        } catch (BrokerException e) {\n            logger.warn(\"failed to open reader for path: \" + request.path, e);\n            TBrokerOperationStatus errorStatus = e.generateFailedOperationStatus();\n            response.setOpStatus(errorStatus);\n            response.setSize(0);\n        }\n        return response;\n    }\n","realPath":"fs_brokers/apache_hdfs_broker/src/main/java/org/apache/doris/broker/hdfs/HDFSBrokerServiceImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"97718a35a201825af3c588420caad6cef7cf25cc","commitMessage":"@@@ Do not get file size in Broker openReader() method (#1560)\n\nThe file is already got when listing files.\nGet file size in openReader() again is unnecessary and inefficient.\n","date":"2019-07-29 23:05:01","modifiedFileCount":"3","status":"M","submitter":"Mingyu Chen"}]
