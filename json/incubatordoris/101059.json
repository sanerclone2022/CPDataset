[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        }  else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":226,"groupId":"1187","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/82/4e9f6a7a39b240c57464aae4c1728a28b5a541.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        }  else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-08-06 23:11:02","commitOrder":2,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2020-08-06 23:11:02","endLine":228,"groupId":"5705","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/df/a0b715c03bb02154ddadd7c8af241604ef6730.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        }  else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"237c0807a4644ab7382abd2afc69e783bfc3c4b2","commitMessage":"@@@[RoutineLoad] Support modify routine load job (#4158)\n\nSupport ALTER ROUTINE LOAD JOB stmt.  for example:\n\n```\nalter routine load db1.label1\nproperties\n(\n\"desired_concurrent_number\"=\"3\". \n\"max_batch_interval\" = \"5\". \n\"max_batch_rows\" = \"300000\". \n\"max_batch_size\" = \"209715200\". \n\"strict_mode\" = \"false\". \n\"timezone\" = \"+08:00\"\n)\n```\n\nDetails can be found in `alter-routine-load.md`","date":"2020-08-06 23:11:02","modifiedFileCount":"11","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-10-10 21:16:53","commitOrder":3,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2020-10-10 21:16:53","endLine":231,"groupId":"5705","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/60/b9aae4addc810aa25c3cb3029e4f1d247947f5.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"28f4e922a75c37904f267c075ff82f048cb5a853","commitMessage":"@@@[CREATE TABLE]Support new syntax CREATE TABLE LIKE to clone an existe? (#4705)\n\nSupport new synatx CREATE TABLE [IF NOT EXISTS] [db_name].table_name AS [db_name2].table_name2;\nto create a new table from existed table with same table schema.\nISSUE: #4355","date":"2020-10-10 21:16:53","modifiedFileCount":"7","status":"M","submitter":"WangCong"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-10-15 22:49:39","commitOrder":4,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2020-10-15 22:49:39","endLine":237,"groupId":"5705","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/1f/1a2ec35ffff8c9dae50015ce10aca3cbdb234a.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            if (catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(), ((CancelLoadStmt) ddlStmt).getLabel())) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            } else {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":4,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"21e7428999c1ec5cd201eebba8a38ebb50a3b662","commitMessage":"@@@[Feature] Support cancel load jobs in batch (#4515)\n\nSupport statement like:\n`cancel load where label like 'xxx';`","date":"2020-10-15 22:49:39","modifiedFileCount":"4","status":"M","submitter":"xy720"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-24 10:09:53","commitOrder":5,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-01-24 10:09:53","endLine":236,"groupId":"5705","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/70/5299a2d7616463c53d1b1e3f6c3b21647743ff.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (loadStmt.getVersion().equals(Load.VERSION) || jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":5,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"7e61400e3c82ed0e4aad6824873d0fb113ec1a9e","commitMessage":"@@@[Load Parallel][1/3] Broker Load supports setting the load parallelism (#5277)\n\n* [Load] Broker Load supports setting the load parallelism\n\nSimilar to the parallel_fragment_exec_instance_num parameter. \nit allows the user to set the parallelism of the load execution plan\non a single node when the broker load is submitted.\n\neg:\n```\n...\nproperties (\n\"load_parallelism\" = \"4\";\n...\n)\n```\n\nThis parameter is currently only used to support the load parallelism setting. \nbut it cannot significantly improve the load speed for the time being.\nThe speed increase will be completed in subsequent code submissions.\nDocuments will also be added in subsequent submissions.\n\nThis PR also update the FE meta version.","date":"2021-01-24 10:09:53","modifiedFileCount":"21","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-07-19 09:27:08","commitOrder":6,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-07-19 09:27:08","endLine":243,"groupId":"5705","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e3/b082a855625954f3aaf70cea3751cbcadea7ce.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":6,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"5de79ec3f0c6d9835e07381565b83b4f2d89deb3","commitMessage":"@@@[Feature] Support data encrypt/decrypt (#6115)\n\nAdd support for data encryption/decryption.","date":"2021-07-19 09:27:08","modifiedFileCount":"9","status":"M","submitter":"qiye"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-07-27 13:38:15","commitOrder":7,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-07-27 13:38:15","endLine":246,"groupId":"929","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/10/45caf5ad67abfea4a74de15d1bbd0eee475c39.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":7,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"7435","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/6ab38e3ec5bef769aa38efc175b357617bdfe2.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"b3a52a05d535bbf1f6d644fe46e71901d55d4482","commitMessage":"@@@[Update] Support update syntax (#6230)\n\n [Update] Support update syntax\n\n    The current update syntax only supports updating the filtered data of a single table.\n\n    Syntax:\n\n     * UPDATE table_reference\n     *     SET assignment_list\n     *     [WHERE where_condition]\n     *\n     * value:\n     *     {expr}\n     *\n     * assignment:\n     *     col_name = value\n     *\n     * assignment_list:\n     *     assignment [.  assignment] ...\n\n    Example\n    Update unique_table\n         set v1=1\n         where k1=1\n\n    New Frontend Config: enable_concurrent_update\n    This configuration is used to control whether multi update stmt can be executed concurrently in one table.\n    Default value is false which means A table can only have one update task being executed at the same time.\n    If users want to update the same table concurrently. \n      they need to modify the configuration value to true and restart the master frontend.\n    Concurrent updates may cause write conflicts.  the result is uncertain.  please be careful.\n\n    The main realization principle:\n    1. Read the rows that meet the conditions according to the conditions set by where clause.\n    2. Modify the result of the row according to the set clause.\n    3. Write the modified row back to the table.\n\n    Some restrictions on the use of update syntax.\n    1. Only the unique table can be updated\n    2. Only the value column of the unique table can be updated\n    3. The where clause currently only supports single tables\n\n    Possible risks:\n    1. Since the current implementation method is a row update. \n         when the same table is updated concurrently.  there may be concurrency conflicts which may cause the incorrect result.\n    2. Once the conditions of the where clause are unsatisfactory.  it is likely to cause a full table scan and affect query performance.\n       Please pay attention to whether the column in the where clause can match the index when using it.\n\n    [Docs][Update] Add update document and sql-reference\n\n    Fixed #6229","date":"2021-07-27 13:38:15","modifiedFileCount":"30","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-07-27 13:38:15","commitOrder":8,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-07-27 13:38:15","endLine":246,"groupId":"929","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/10/45caf5ad67abfea4a74de15d1bbd0eee475c39.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2021-07-30 09:24:50","commitOrder":8,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"9ca369aa58ef6215e2c79b14fc1b4edfc2e2d720","commitMessage":"@@@[Feature][LDAP] Add LDAP authentication login and LDAP group authorization support. (#6333)\n\n* [Feature][LDAP] Add LDAP authentication login and LDAP group authorization support.\n\n* Update docs/.vuepress/sidebar/en.js\n\nCo-authored-by: Mingyu Chen <morningman.cmy@gmail.com>\n\nCo-authored-by: Mingyu Chen <morningman.cmy@gmail.com>","date":"2021-07-30 09:24:50","modifiedFileCount":"14","status":"M","submitter":"luozenglin"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-08-08 21:39:34","commitOrder":9,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-08-08 21:39:34","endLine":266,"groupId":"929","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/e76ec16919166cbd1898befb45bd4cb56de8d2.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":9,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"c8c571af37193ee10b5437fd9b47b30c4b917d60","commitMessage":"@@@[New Feature] Support synchronizing MySQL binlog in real time [stage 1] (#6289)\n\nThis commit is the first stage of #6287 \n\nIn this commit.  we support:\n1?Sync Job\n1)? Creating sync job and data channel in Fe.\n2)?Pause sync job.\n3)?Resume sync job.\n4)?Stop sync job.\n5)?Show sync jobs.\n\n2?Canal\n1)?Subscribing and getting the binlog data of canal with creating syncjob.","date":"2021-08-08 21:39:34","modifiedFileCount":"11","status":"M","submitter":"xy720"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-08-12 10:07:51","commitOrder":10,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-08-12 10:07:51","endLine":269,"groupId":"929","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/1d/2a5f5902080025b7e0cdba639b8c7608e4175c.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":10,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"8a267f1ac55a4215633e489f8283f11c8e585715","commitMessage":"@@@[Feature] Support for cleaning the trash actively (#6323)\n\n","date":"2021-08-12 10:07:51","modifiedFileCount":"4","status":"M","submitter":"Pxl"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-08-13 21:56:34","commitOrder":11,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-08-13 21:56:34","endLine":278,"groupId":"929","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cb/e1fb50e4c3c0a272b2b49f2cab91c061f2f8fd.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":11,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"5e6f1b89da8abe27327833243242ed94555a5349","commitMessage":"@@@[Feature] Support sql block rule (#6192)\n\nSupport grammar:\n- SHOW SQL_BLOCK_RULE [FOR NAME]\n- CREATE SQL_BLOCK_RULE test_rule PROPERTIES (\"user\"=\"default\".  \"sql\"=\"select .* from .* join .*\".  \"enable\": \"true\");\n- ALTER SQL_BLOCK_RULE test_rule PROPERTIES (\"user\"=\"test_user\".  \"enable\": \"false\");\n- DROP SQL_BLOCK_RULE test_rule1. test_rule2;","date":"2021-08-13 21:56:34","modifiedFileCount":"19","status":"M","submitter":"Stalary"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-08-16 17:20:05","commitOrder":12,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStatsStmt) {\n            catalog.getStatisticsManager().alterTableStatistics((AlterTableStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterColumnStatsStmt) {\n            catalog.getStatisticsManager().alterColumnStatistics((AlterColumnStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-08-16 17:20:05","endLine":284,"groupId":"929","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c4/b165c8a2914b5bc791c7b3fd26956a11497398.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":12,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":24,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"63a0d9d23a3ce4e5c6413648bfcf9e67b57fd200","commitMessage":"@@@Add statistics struct and Support manually inject statistics (#6420)\n\n* Add statistics struct and Support manually inject statistics\n\nThis PR mainly developed the data structure used by statistical information\nand the function of manually modifying the statistical information.\nWe use a statistics package alone to store statistical information. \nand use the 'statistics manager' as a unified entry for statistical information.\nFor detailed data structure and explanation.  please refer to the comments on the class.\n\nManually modify statistics include: Manually modify table statistics and column statistics.\nThe syntax is explained in the issue #6370.\n\n* Show table and column statistics\n\n'SHOW TABLE STATS' used to show the statistics of table.\n'SHOW COLUMN STATS' used to show the statistics of columns.\n\nCurrently.  only the tables and columns for setting statistics\nwill be displayed in the results.","date":"2021-08-16 17:20:05","modifiedFileCount":"4","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-09-04 10:59:35","commitOrder":13,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStatsStmt) {\n            catalog.getStatisticsManager().alterTableStatistics((AlterTableStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterColumnStatsStmt) {\n            catalog.getStatisticsManager().alterColumnStatistics((AlterColumnStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabasePropertyStmt) {\n            throw new DdlException(\"Not implemented yet\");\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-09-04 10:59:35","endLine":287,"groupId":"929","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/89/536ee5fdbc7cee9b6602fc0a369c9c30d53099.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStatsStmt) {\n            catalog.getStatisticsManager().alterTableStatistics((AlterTableStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterColumnStatsStmt) {\n            catalog.getStatisticsManager().alterColumnStatistics((AlterColumnStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":13,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"7435","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"7db8841ae264012f37bb929b0f7ba6ffefe703c8","commitMessage":"@@@[Feature][ResourceTag] Support Resource Tag (#6203)\n\n#5902 \nThis CL mainly changes:\n\n1. Support setting tags for BE nodes:\n\n    ```\n    alter system add backend \"1272:9050.  1212:9050\" properties(\"tag.location\": \"zoneA\");\n    alter system modify backend \"1272:9050.  1212:9050\" set (\"tag.location\": \"zoneB\");\n    ```\n    And for compatibility.  all BE nodes will be set a \"default\" tag when upgrading: `\"tag.location\": \"default\"`.\n\n2. Create a new class `ReplicaAllocation` to replace the previous `replication_num`.\n\n    `ReplicaAllocation` represents the allocation of the replicas of a tablet. It contains a map from \n    Tag to number of replicas.\n    For example.  if user set a table's replication num to 3.  it will be converted to a ReplicaAllocation\n    like: `\"tag.location.default\" : \"3\"`.  which means the tablet will have 3 replicas and all of them will be\n    allocated in BE nodes with tag \"default\";\n\n3. Support create table with replication allocation:\n\n    ```\n    CREATE TABLE example_db.table_hash\n    (\n    k1 TINYINT\n    )\n    DISTRIBUTED BY HASH(k1) BUCKETS 32\n    PROPERTIES (\n        \"replication_allocation\"=\"tag.location.zone1:1.  tag.location.zone2:2\"\n    );\n    ```\n    \n    Also support set replica allocation for dynamic tables.  and modify replica allocation at runtime.\n\n    For compatibility.  user can still set \"replication_num\" = \"3\".  and it will be automatically converted to:\n    ` \"replication_allocation\"=\"tag.location.default:3\"`\n\n4. Support tablet repair and balance based on Tag\n\n    1. For tablets of non-colocate table.  most of the logic is the same as before. \n       but when selecting the destination node for clone.  the tag of the node will be considered.\n       If the required tag does not exist.  it cannot be repaired.\n       Similarly.  under the condition of ensuring that the replicas are complete.  the tablet will be\n       reallocated according to the tag or the replicas will be balanced.\n\n       Balancing is performed separately within each resource group.\n\n    2. For tablets of colocate table.  the backends sequence of buckets will be splitted by tag.\n       For example.  if replica allocation is \"tag.location.zone1:1.  tag.location.zone2:2\". \n\n       And zone1 has 2 BE: A.  B; zone2 has 3 BE: C.  D.  F\n\n       there will be 2 backend sequences: one is for zone1.  and the other is for zone2.\n       And one posible seqeunces will be:\n\n\n       zone1: [A]   [B]   [A]   [B]\n       zone2: [C.  D][D.  F][F.  C][C.  D]\n\n5. Support setting tags for user and restrict execution node with tags:\n\n\n    ```\n    set property for 'cmy' 'resource_tags.location' : 'zone1.  zone2';\n    ```\n\n    After setting.  the user 'cmy' can only query data stored on backends with tag zone1 and zone2. \n    And query can only be executed on backends with tag zone1 and zone2\n\n\n    For compatibility.  after upgrading.  the property `resource_tags.location` will be empty. \n    so that user can still query data stored on any backends.\n\n6. Modify the Unit test frame of FE so that we can created multi backends with different mocked IP in unit test.\n\n    This help us to easily test some distributed cases like query.  tablet repair and balance\n\nThe document will be added in another PR.\n\nAlso fix a bug described in #6194 ","date":"2021-09-04 10:59:35","modifiedFileCount":"161","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-07-30 09:24:50","codes":[{"authorDate":"2021-09-10 09:54:44","commitOrder":14,"curCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableAsSelectStmt) {\n            catalog.createTableAsSelect((CreateTableAsSelectStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStatsStmt) {\n            catalog.getStatisticsManager().alterTableStatistics((AlterTableStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterColumnStatsStmt) {\n            catalog.getStatisticsManager().alterColumnStatistics((AlterColumnStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabasePropertyStmt) {\n            throw new DdlException(\"Not implemented yet\");\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","date":"2021-09-10 09:54:44","endLine":290,"groupId":"101059","id":27,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(Catalogcatalog@DdlStmtddlStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d4/f75ba9dde6b102f801f0d112ad5f8f831ac33b.src","preCode":"    public static void execute(Catalog catalog, DdlStmt ddlStmt) throws Exception {\n        if (ddlStmt instanceof CreateClusterStmt) {\n            CreateClusterStmt stmt = (CreateClusterStmt) ddlStmt;\n            catalog.createCluster(stmt);\n        } else if (ddlStmt instanceof AlterClusterStmt) {\n            catalog.processModifyCluster((AlterClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropClusterStmt) {\n            catalog.dropCluster((DropClusterStmt) ddlStmt);\n        } else if (ddlStmt instanceof MigrateDbStmt) {\n            catalog.migrateDb((MigrateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof LinkDbStmt) {\n            catalog.linkDb((LinkDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDbStmt) {\n            catalog.createDb((CreateDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropDbStmt) {\n            catalog.dropDb((DropDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFunctionStmt) {\n            catalog.createFunction((CreateFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFunctionStmt) {\n            catalog.dropFunction((DropFunctionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateEncryptKeyStmt) {\n            EncryptKeyHelper.createEncryptKey((CreateEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropEncryptKeyStmt) {\n            EncryptKeyHelper.dropEncryptKey((DropEncryptKeyStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableStmt) {\n            catalog.createTable((CreateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateTableLikeStmt) {\n            catalog.createTableLike((CreateTableLikeStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropTableStmt) {\n            catalog.dropTable((DropTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateMaterializedViewStmt) {\n            catalog.createMaterializedView((CreateMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropMaterializedViewStmt) {\n            catalog.dropMaterializedView((DropMaterializedViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStmt) {\n            catalog.alterTable((AlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterTableStatsStmt) {\n            catalog.getStatisticsManager().alterTableStatistics((AlterTableStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterColumnStatsStmt) {\n            catalog.getStatisticsManager().alterColumnStatistics((AlterColumnStatsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterViewStmt) {\n            catalog.alterView((AlterViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelAlterTableStmt) {\n            catalog.cancelAlter((CancelAlterTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof LoadStmt) {\n            LoadStmt loadStmt = (LoadStmt) ddlStmt;\n            EtlJobType jobType = loadStmt.getEtlJobType();\n            if (jobType == EtlJobType.UNKNOWN) {\n                throw new DdlException(\"Unknown load job type\");\n            }\n            if (jobType == EtlJobType.HADOOP && Config.disable_hadoop_load) {\n                throw new DdlException(\"Load job by hadoop cluster is disabled.\"\n                        + \" Try using broker load. See 'help broker load;'\");\n            }\n            if (jobType == EtlJobType.HADOOP) {\n                catalog.getLoadManager().createLoadJobV1FromStmt(loadStmt, jobType, System.currentTimeMillis());\n            } else {\n                catalog.getLoadManager().createLoadJobFromStmt(loadStmt);\n            }\n        } else if (ddlStmt instanceof CancelLoadStmt) {\n            boolean isAccurateMatch = ((CancelLoadStmt) ddlStmt).isAccurateMatch();\n            boolean isLabelExist = catalog.getLoadInstance().isLabelExist(\n                    ((CancelLoadStmt) ddlStmt).getDbName(),\n                    ((CancelLoadStmt) ddlStmt).getLabel(), isAccurateMatch);\n            if (isLabelExist) {\n                catalog.getLoadInstance().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n            if (!isLabelExist || isAccurateMatch) {\n                catalog.getLoadManager().cancelLoadJob((CancelLoadStmt) ddlStmt,\n                        isAccurateMatch);\n            }\n        } else if (ddlStmt instanceof CreateRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().createRoutineLoadJob((CreateRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().pauseRoutineLoadJob((PauseRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof ResumeRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().resumeRoutineLoadJob((ResumeRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().stopRoutineLoadJob((StopRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterRoutineLoadStmt) {\n            catalog.getRoutineLoadManager().alterRoutineLoadJob((AlterRoutineLoadStmt) ddlStmt);\n        } else if (ddlStmt instanceof UpdateStmt) {\n            catalog.getUpdateManager().handleUpdate((UpdateStmt) ddlStmt);\n        } else if (ddlStmt instanceof DeleteStmt) {\n            catalog.getDeleteHandler().process((DeleteStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateUserStmt) {\n            CreateUserStmt stmt = (CreateUserStmt) ddlStmt;\n            catalog.getAuth().createUser(stmt);\n        } else if (ddlStmt instanceof DropUserStmt) {\n            DropUserStmt stmt = (DropUserStmt) ddlStmt;\n            catalog.getAuth().dropUser(stmt);\n        } else if (ddlStmt instanceof GrantStmt) {\n            GrantStmt stmt = (GrantStmt) ddlStmt;\n            catalog.getAuth().grant(stmt);\n        } else if (ddlStmt instanceof RevokeStmt) {\n            RevokeStmt stmt = (RevokeStmt) ddlStmt;\n            catalog.getAuth().revoke(stmt);\n        } else if (ddlStmt instanceof CreateRoleStmt) {\n            catalog.getAuth().createRole((CreateRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRoleStmt) {\n            catalog.getAuth().dropRole((DropRoleStmt) ddlStmt);\n        } else if (ddlStmt instanceof SetUserPropertyStmt) {\n            catalog.getAuth().updateUserProperty((SetUserPropertyStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSystemStmt) {\n            AlterSystemStmt stmt = (AlterSystemStmt) ddlStmt;\n            catalog.alterCluster(stmt);\n        } else if (ddlStmt instanceof CancelAlterSystemStmt) {\n            CancelAlterSystemStmt stmt = (CancelAlterSystemStmt) ddlStmt;\n            catalog.cancelAlterCluster(stmt);\n        } else if (ddlStmt instanceof AlterDatabaseQuotaStmt) {\n            catalog.alterDatabaseQuota((AlterDatabaseQuotaStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabaseRename) {\n            catalog.renameDatabase((AlterDatabaseRename) ddlStmt);\n        } else if (ddlStmt instanceof RecoverDbStmt) {\n            catalog.recoverDatabase((RecoverDbStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverTableStmt) {\n            catalog.recoverTable((RecoverTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof RecoverPartitionStmt) {\n            catalog.recoverPartition((RecoverPartitionStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateViewStmt) {\n            catalog.createView((CreateViewStmt) ddlStmt);\n        } else if (ddlStmt instanceof BackupStmt) {\n            catalog.backup((BackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof RestoreStmt) {\n            catalog.restore((RestoreStmt) ddlStmt);\n        } else if (ddlStmt instanceof CancelBackupStmt) {\n            catalog.cancelBackup((CancelBackupStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateRepositoryStmt) {\n            catalog.getBackupHandler().createRepository((CreateRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropRepositoryStmt) {\n            catalog.getBackupHandler().dropRepository((DropRepositoryStmt) ddlStmt);\n        } else if (ddlStmt instanceof SyncStmt) {\n            return;\n        } else if (ddlStmt instanceof TruncateTableStmt) {\n            catalog.truncateTable((TruncateTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminRepairTableStmt) {\n            catalog.getTabletChecker().repairTable((AdminRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCancelRepairTableStmt) {\n            catalog.getTabletChecker().cancelRepairTable((AdminCancelRepairTableStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetConfigStmt) {\n            catalog.setConfig((AdminSetConfigStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateFileStmt) {\n            catalog.getSmallFileMgr().createFile((CreateFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropFileStmt) {\n            catalog.getSmallFileMgr().dropFile((DropFileStmt) ddlStmt);\n        } else if (ddlStmt instanceof InstallPluginStmt) {\n            catalog.installPlugin((InstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof UninstallPluginStmt) {\n            catalog.uninstallPlugin((UninstallPluginStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCheckTabletsStmt) {\n            catalog.checkTablets((AdminCheckTabletsStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminSetReplicaStatusStmt) {\n            catalog.setReplicaStatus((AdminSetReplicaStatusStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateResourceStmt) {\n            catalog.getResourceMgr().createResource((CreateResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropResourceStmt) {\n            catalog.getResourceMgr().dropResource((DropResourceStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateDataSyncJobStmt) {\n            CreateDataSyncJobStmt createSyncJobStmt = (CreateDataSyncJobStmt) ddlStmt;\n            SyncJobManager syncJobMgr = catalog.getSyncJobManager();\n            if (!syncJobMgr.isJobNameExist(createSyncJobStmt.getDbName(), createSyncJobStmt.getJobName())) {\n                syncJobMgr.addDataSyncJob((CreateDataSyncJobStmt) ddlStmt);\n            } else {\n                throw new DdlException(\"The syncJob with jobName '\" + createSyncJobStmt.getJobName() +\n                        \"' in database [\" + createSyncJobStmt.getDbName() + \"] is already exists.\");\n            }\n        } else if (ddlStmt instanceof ResumeSyncJobStmt) {\n            catalog.getSyncJobManager().resumeSyncJob((ResumeSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof PauseSyncJobStmt) {\n            catalog.getSyncJobManager().pauseSyncJob((PauseSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof StopSyncJobStmt) {\n            catalog.getSyncJobManager().stopSyncJob((StopSyncJobStmt) ddlStmt);\n        } else if (ddlStmt instanceof AdminCleanTrashStmt) {\n            catalog.cleanTrash((AdminCleanTrashStmt) ddlStmt);\n        } else if (ddlStmt instanceof CreateSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().createSqlBlockRule((CreateSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().alterSqlBlockRule((AlterSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof DropSqlBlockRuleStmt) {\n            catalog.getSqlBlockRuleMgr().dropSqlBlockRule((DropSqlBlockRuleStmt) ddlStmt);\n        } else if (ddlStmt instanceof AlterDatabasePropertyStmt) {\n            throw new DdlException(\"Not implemented yet\");\n        } else {\n            throw new DdlException(\"Unknown statement.\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/DdlExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2021-07-30 09:24:50","commitOrder":14,"curCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","date":"2021-07-30 09:24:50","endLine":60,"groupId":"101059","id":28,"instanceNumber":2,"isCurCommit":1,"methodName":"setVariable","params":"(SetVarvar)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/32/db27f9249e454d724259c62181078fc15f6c18.src","preCode":"    private void setVariable(SetVar var) throws DdlException {\n        if (var instanceof SetPassVar) {\n            \r\n            SetPassVar setPassVar = (SetPassVar) var;\n            ctx.getCatalog().getAuth().setPassword(setPassVar);\n        } else if(var instanceof SetLdapPassVar){\n            SetLdapPassVar setLdapPassVar = (SetLdapPassVar) var;\n            ctx.getCatalog().getAuth().setLdapPassword(setLdapPassVar);\n        } else if (var instanceof SetNamesVar) {\n            \r\n            return;\n        } else if (var instanceof SetTransaction) {\n            \r\n            return;\n        } else {\n            VariableMgr.setVar(ctx.getSessionVariable(), var);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/SetExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"2c58724c84021ae5c9fdd5ba304808b1e79191d4","commitMessage":"@@@Support create table as select (#6102)\n\n","date":"2021-09-10 09:54:44","modifiedFileCount":"5","status":"M","submitter":"Stalary"}]
