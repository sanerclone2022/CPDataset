[{"authorTime":"2020-09-16 15:02:59","codes":[{"authorDate":"2020-08-26 10:52:56","commitOrder":3,"curCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tableName);\n                if (table == null) {\n                    throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","date":"2020-08-26 10:52:56","endLine":139,"groupId":"6509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeWithoutPassword","params":"(BaseRequestrequest@BaseResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/03/36c602acbd801a4eb56b62f5682912cf9904fe.src","preCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tableName);\n                if (table == null) {\n                    throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/http/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"},{"authorDate":"2020-09-16 15:02:59","commitOrder":3,"curCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            \r\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (table.getType() != Table.TableType.OLAP) {\n                    return ResponseEntityBuilder.okWithCommonError(\"only support OlapTable currently, \"\n                            + \"but Table [\" + tblName + \"] \" + \"is not a OlapTable\");\n                }\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2020-09-16 15:02:59","endLine":143,"groupId":"1373","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"query_plan","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/1c/261a7ca6b80fb4e583acae5586383eda2785ee.src","preCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            \r\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (table.getType() != Table.TableType.OLAP) {\n                    return ResponseEntityBuilder.okWithCommonError(\"only support OlapTable currently, \"\n                            + \"but Table [\" + tblName + \"] \" + \"is not a OlapTable\");\n                }\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableQueryPlanAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"17a8b57018ac76eb5bf19c35e0c3fce7f5bbdd26","commitMessage":"@@@[UI Part 3] New implemented HTTP RESTful API of Frontend (#4596)\n\nUse spring mvc rest to replace the original netty http rest\nCreated a new package `org/apache/doris/httpv2`. \nand the origin implementations under `org/apache/doris/http` remain unchanged.\n\nThis part of the code will not be used at present.  so it will not affect existing functions.\n\nAPI document can be found in #4584 \n\nProposal #4308","date":"2020-09-16 15:02:59","modifiedFileCount":"2","status":"M","submitter":"???"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":4,"curCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n\n            Table table = db.getTable(tableName);\n            if (table == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n            }\n            \r\n            if (!(table instanceof OlapTable)) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                        + \"is not a OlapTable, only support OlapTable currently\");\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":139,"groupId":"5399","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeWithoutPassword","params":"(BaseRequestrequest@BaseResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ae/8bbe623a17dd87e15bb54fd9755fe773218dac.src","preCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tableName);\n                if (table == null) {\n                    throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/http/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":4,"curCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                \r\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-01-13 10:27:58","endLine":141,"groupId":"1373","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"query_plan","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c9/a87d9248796a9bbd0df2244e9e4c88f8f79029.src","preCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            \r\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (table.getType() != Table.TableType.OLAP) {\n                    return ResponseEntityBuilder.okWithCommonError(\"only support OlapTable currently, \"\n                            + \"but Table [\" + tblName + \"] \" + \"is not a OlapTable\");\n                }\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableQueryPlanAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-07-07 10:26:32","commitOrder":5,"curCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n\n            Table table = db.getTable(tableName);\n            if (table == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n            }\n            \r\n            if (!(table instanceof OlapTable)) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                        + \"is not a OlapTable, only support OlapTable currently\");\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","date":"2021-07-07 10:26:32","endLine":139,"groupId":"5399","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeWithoutPassword","params":"(BaseRequestrequest@BaseResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c9/868706988779a13c6cb7e0bb9d553becd13804.src","preCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n\n            Table table = db.getTable(tableName);\n            if (table == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n            }\n            \r\n            if (!(table instanceof OlapTable)) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                        + \"is not a OlapTable, only support OlapTable currently\");\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/http/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":5,"curCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                \r\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-01-13 10:27:58","endLine":141,"groupId":"1373","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"query_plan","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c9/a87d9248796a9bbd0df2244e9e4c88f8f79029.src","preCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                \r\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableQueryPlanAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"739c0268ff94fe1c697fd8cc8642d3bb5162a714","commitMessage":"@@@[refactor] Remove decimal v1 related code from code base (#6079)\n\nremove ALL DECIMAL V1 type code ? this is a part of #6073","date":"2021-07-07 10:26:32","modifiedFileCount":"35","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":6,"curCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tableName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, e.getMessage());\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":131,"groupId":"5399","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"executeWithoutPassword","params":"(BaseRequestrequest@BaseResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e2/98042af9176b1e0073e868db171173be6d049a.src","preCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n\n            Table table = db.getTable(tableName);\n            if (table == null) {\n                throw new DorisHttpException(HttpResponseStatus.NOT_FOUND, \"Table [\" + tableName + \"] \" + \"does not exists\");\n            }\n            \r\n            if (!(table instanceof OlapTable)) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.FORBIDDEN, \"Table [\" + tableName + \"] \"\n                        + \"is not a OlapTable, only support OlapTable currently\");\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/http/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":6,"curCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-09-03 13:34:49","endLine":137,"groupId":"1373","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"query_plan","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d6/4a7880f9b0dd1e669c795825dbc4418457d812.src","preCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                \r\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableQueryPlanAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-24 21:42:24","commitOrder":7,"curCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tableName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, e.getMessage());\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    Optional aggregationType = Optional.ofNullable(column.getAggregationType());\n                    baseInfo.put(\"aggregation_type\", aggregationType.isPresent() ? column.getAggregationType().toSql() : \"\");\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","date":"2021-09-24 21:42:24","endLine":134,"groupId":"101289","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"executeWithoutPassword","params":"(BaseRequestrequest@BaseResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/90/00ae4890f9c4f4968510ff75206e4dbf073434.src","preCode":"    protected void executeWithoutPassword(BaseRequest request, BaseResponse response) throws DdlException {\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n        String dbName = request.getSingleParameter(DB_KEY);\n        String tableName = request.getSingleParameter(TABLE_KEY);\n        try {\n            if (Strings.isNullOrEmpty(dbName)\n                    || Strings.isNullOrEmpty(tableName)) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, \"No database or table selected.\");\n            }\n            String fullDbName = ClusterNamespace.getFullName(ConnectContext.get().getClusterName(), dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tableName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tableName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                throw new DorisHttpException(HttpResponseStatus.BAD_REQUEST, e.getMessage());\n            }\n\n            table.readLock();\n            try {\n                List<Column> columns = table.getBaseSchema();\n                List<Map<String, String>> propList = new ArrayList(columns.size());\n                for (Column column : columns) {\n                    Map<String, String> baseInfo = new HashMap<>(2);\n                    Type colType = column.getOriginType();\n                    PrimitiveType primitiveType = colType.getPrimitiveType();\n                    if (primitiveType == PrimitiveType.DECIMALV2) {\n                        ScalarType scalarType = (ScalarType) colType;\n                        baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                        baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                    }\n                    baseInfo.put(\"type\", primitiveType.toString());\n                    baseInfo.put(\"comment\", column.getComment());\n                    baseInfo.put(\"name\", column.getDisplayName());\n                    propList.add(baseInfo);\n                }\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"properties\", propList);\n            } catch (Exception e) {\n                \r\n                throw new DorisHttpException(HttpResponseStatus.INTERNAL_SERVER_ERROR, e.getMessage() == null ? \"Null Pointer Exception\" : e.getMessage());\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            String result = mapper.writeValueAsString(resultMap);\n            \r\n            response.setContentType(\"application/json\");\n            response.getContent().append(result);\n            sendResult(request, response, HttpResponseStatus.valueOf(Integer.parseInt(String.valueOf(resultMap.get(\"status\")))));\n        } catch (Exception e) {\n            \r\n            response.getContent().append(e.getMessage());\n            sendResult(request, response, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/http/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":7,"curCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-09-03 13:34:49","endLine":137,"groupId":"101289","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"query_plan","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d6/4a7880f9b0dd1e669c795825dbc4418457d812.src","preCode":"    public Object query_plan(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n\n        String postContent = HttpUtil.getBody(request);\n        try {\n            \r\n            String sql;\n            if (Strings.isNullOrEmpty(postContent)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            JSONObject jsonObject;\n            try {\n                jsonObject = new JSONObject(postContent);\n            } catch (JSONException e) {\n                return ResponseEntityBuilder.badRequest(\"malformed json: \" + e.getMessage());\n            }\n\n            sql = String.valueOf(jsonObject.opt(\"sql\"));\n            if (Strings.isNullOrEmpty(sql)) {\n                return ResponseEntityBuilder.badRequest(\"POST body must contains [sql] root object\");\n            }\n            LOG.info(\"receive SQL statement [{}] from external service [ user [{}]] for database [{}] table [{}]\",\n                    sql, ConnectContext.get().getCurrentUserIdentity(), dbName, tblName);\n\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                \r\n                handleQuery(ConnectContext.get(), fullDbName, tblName, sql, resultMap);\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableQueryPlanAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"f73af475cede584b7a2625500bbe986a48190638","commitMessage":"@@@[HTTP API] Add aggregation type information in table schema api (#6686)\n\n```\n{\n\t\"msg\": \"success\". \n\t\"code\": 0. \n\t\"data\": {\n\t\t\"properties\": [{\n\t\t\t\"type\": \"INT\". \n\t\t\t\"name\": \"k1\". \n\t\t\t\"comment\": \"\". \n\t\t\t\"aggregation_type\":\"\"\n\t\t}.  {\n\t\t\t\"type\": \"INT\". \n\t\t\t\"name\": \"k2\". \n\t\t\t\"comment\": \"\". \n\t\t\t\"aggregation_type\":\"MAX\"\n\t\t}]. \n\t\t\"status\": 200\n\t}. \n\t\"count\": 0\n}\n```","date":"2021-09-24 21:42:24","modifiedFileCount":"1","status":"M","submitter":"zhuixun"}]
