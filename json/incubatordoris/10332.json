[{"authorTime":"2021-01-16 21:37:33","codes":[{"authorDate":"2020-11-05 20:57:11","commitOrder":3,"curCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","date":"2020-11-05 20:57:11","endLine":129,"groupId":"1188","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeColocateJoinInstanceParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/eb/1bad3afb83495f8ab84d261e9bb36b8944a43a.src","preCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"},{"authorDate":"2021-01-16 21:37:33","commitOrder":3,"curCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","date":"2021-01-16 21:37:33","endLine":302,"groupId":"1188","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testColocateJoinAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ea/4adfab5c48e1439231ac5444f99c0361fce210.src","preCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"}],"commitId":"3dcbbbea956c80a91b5e0708aeedc938dd2d2d1d","commitMessage":"@@@[Enhancement] Fill assignment param of bucket shuffle and colocate shuffle for debug  (#5167)\n\nWhen Doris is in debug mode.  function `Coordinator#traceInstance` is used to print\nthe physical execute plan of a fragment instance for debug.\nFunction  `Coordinator#traceInstance` uses param `scanRangeAssignment` to print\nthe detail of a fragment. But bucket shuffle join and colocate shuffle join do not fill the param.\nThat will cause debug not work well.\nThis path fill assignment param of bucket shuffle and colocate shuffle for debug.","date":"2021-01-16 21:37:33","modifiedFileCount":"2","status":"M","submitter":"xinghuayu007"},{"authorTime":"2021-01-16 21:37:33","codes":[{"authorDate":"2021-01-20 21:42:04","commitOrder":4,"curCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        List<TScanRangeParams> scanRangeParamsList = new ArrayList<>();\n        scanRangeParamsList.add(new TScanRangeParams());\n\n        ScanRangeMap.put(scanNodeId, scanRangeParamsList);\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        \r\n        for (FInstanceExecParam instanceExecParam : params.instanceExecParams) {\n            for (List<TScanRangeParams> tempScanRangeParamsList :instanceExecParam.perNodeScanRanges.values()) {\n                Assert.assertEquals(3, tempScanRangeParamsList.size());\n            }\n        }\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","date":"2021-01-20 21:42:04","endLine":144,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeColocateJoinInstanceParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/41/e1755c21a880ceab304abbb8a3a643ec1d15ce.src","preCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-01-16 21:37:33","commitOrder":4,"curCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","date":"2021-01-16 21:37:33","endLine":302,"groupId":"1188","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testColocateJoinAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ea/4adfab5c48e1439231ac5444f99c0361fce210.src","preCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"}],"commitId":"50ba5d336d7bbfdafb73f6b2be6e3532a21a1632","commitMessage":"@@@[Bug] Colocate Join and Bucket shuffle join may scan some tablet twice time. (#5256)\n\nFix issue #5255","date":"2021-01-20 21:42:04","modifiedFileCount":"2","status":"M","submitter":"HappenLee"},{"authorTime":"2021-06-04 10:19:58","codes":[{"authorDate":"2021-06-04 10:19:58","commitOrder":5,"curCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        Map<PlanFragmentId, BucketSeqToScanRange> fragmentIdBucketSeqToScanRangeMap = new HashMap<>();\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        List<TScanRangeParams> scanRangeParamsList = new ArrayList<>();\n        scanRangeParamsList.add(new TScanRangeParams());\n\n        ScanRangeMap.put(scanNodeId, scanRangeParamsList);\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        fragmentIdBucketSeqToScanRangeMap.put(planFragmentId, bucketSeqToScanRange);\n        Deencapsulation.setField(coordinator, \"fragmentIdTobucketSeqToScanRangeMap\", fragmentIdBucketSeqToScanRangeMap);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        \r\n        for (FInstanceExecParam instanceExecParam : params.instanceExecParams) {\n            for (List<TScanRangeParams> tempScanRangeParamsList :instanceExecParam.perNodeScanRanges.values()) {\n                Assert.assertEquals(3, tempScanRangeParamsList.size());\n            }\n        }\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","date":"2021-06-04 10:19:58","endLine":146,"groupId":"10332","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeColocateJoinInstanceParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/97/143fac2e90139f7ac88845e2dd3f0ff1c9ee7d.src","preCode":"    public void testComputeColocateJoinInstanceParam()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        List<TScanRangeParams> scanRangeParamsList = new ArrayList<>();\n        scanRangeParamsList.add(new TScanRangeParams());\n\n        ScanRangeMap.put(scanNodeId, scanRangeParamsList);\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n\n        FragmentExecParams params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        Assert.assertEquals(1, params.instanceExecParams.size());\n\n        \r\n        for (FInstanceExecParam instanceExecParam : params.instanceExecParams) {\n            for (List<TScanRangeParams> tempScanRangeParamsList :instanceExecParam.perNodeScanRanges.values()) {\n                Assert.assertEquals(3, tempScanRangeParamsList.size());\n            }\n        }\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 2, params);\n        Assert.assertEquals(2, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 3, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n\n        params = new FragmentExecParams(null);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 5, params);\n        Assert.assertEquals(3, params.instanceExecParams.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-06-04 10:19:58","commitOrder":5,"curCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        Map<PlanFragmentId, BucketSeqToScanRange> fragmentIdBucketSeqToScanRangeMap = new HashMap<>();\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        fragmentIdBucketSeqToScanRangeMap.put(planFragmentId, bucketSeqToScanRange);\n        Deencapsulation.setField(coordinator, \"fragmentIdTobucketSeqToScanRangeMap\", fragmentIdBucketSeqToScanRangeMap);\n\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","date":"2021-06-04 10:19:58","endLine":317,"groupId":"10332","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testColocateJoinAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/97/143fac2e90139f7ac88845e2dd3f0ff1c9ee7d.src","preCode":"    public void testColocateJoinAssignment()  {\n        Coordinator coordinator = new Coordinator(context, analyzer, planner);\n\n        PlanFragmentId planFragmentId = new PlanFragmentId(1);\n        int scanNodeId = 1;\n        Map<PlanFragmentId, Set<Integer>> fragmentIdToScanNodeIds = new HashMap<>();\n        fragmentIdToScanNodeIds.put(planFragmentId, new HashSet<>());\n        fragmentIdToScanNodeIds.get(planFragmentId).add(scanNodeId);\n        Deencapsulation.setField(coordinator, \"fragmentIdToScanNodeIds\", fragmentIdToScanNodeIds);\n\n        \r\n        Map<Integer, TNetworkAddress> bucketSeqToAddress = new HashMap<>();\n        TNetworkAddress address = new TNetworkAddress();\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToAddress.put(i, address);\n        }\n        Map<PlanFragmentId, Map<Integer, TNetworkAddress>> fragmentToBucketSeqToAddress = new HashMap<>();\n        fragmentToBucketSeqToAddress.put(planFragmentId, bucketSeqToAddress);\n        Deencapsulation.setField(coordinator, \"fragmentIdToSeqToAddressMap\", fragmentToBucketSeqToAddress);\n\n        \r\n        BucketSeqToScanRange bucketSeqToScanRange = new BucketSeqToScanRange();\n        Map<Integer, List<TScanRangeParams>> ScanRangeMap = new HashMap<>();\n        ScanRangeMap.put(scanNodeId, new ArrayList<>());\n        for (int i = 0; i < 3; i++) {\n            bucketSeqToScanRange.put(i, ScanRangeMap);\n        }\n        Deencapsulation.setField(coordinator, \"bucketSeqToScanRange\", bucketSeqToScanRange);\n        TupleDescriptor tupleDescriptor = new TupleDescriptor(new TupleId(-1));\n        OlapScanNode olapScanNode = new OlapScanNode(new PlanNodeId(scanNodeId), tupleDescriptor, \"test\");\n        PlanFragment fragment = new PlanFragment(planFragmentId, olapScanNode,\n                new DataPartition(TPartitionType.UNPARTITIONED));\n        FragmentExecParams params = new FragmentExecParams(fragment);\n        Deencapsulation.invoke(coordinator, \"computeColocateJoinInstanceParam\", planFragmentId, 1, params);\n        StringBuilder sb = new StringBuilder();\n        params.appendTo(sb);\n        Assert.assertTrue(sb.toString().contains(\"range=[id1,range=[]]\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/qe/CoordinatorTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"a5c35eb20f3a10834f2920bf45515b2f4e411edf","commitMessage":"@@@[Bug] Fix the bug of null pointer exception of colocate join (#5961)\n\n","date":"2021-06-04 10:19:58","modifiedFileCount":"2","status":"M","submitter":"HappenLee"}]
