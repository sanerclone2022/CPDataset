[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            Catalog.getCurrentCatalog().getLoadInstance().addLoadJob(\n                    multiLoadDesc.toLoadStmt(),\n                    EtlJobType.MINI,\n                    System.currentTimeMillis());\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","date":"2020-07-21 12:42:42","endLine":138,"groupId":"1299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b5a4c5985c63bd77ca88802bbd67eb735cbd10.src","preCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            Catalog.getCurrentCatalog().getLoadInstance().addLoadJob(\n                    multiLoadDesc.toLoadStmt(),\n                    EtlJobType.MINI,\n                    System.currentTimeMillis());\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","date":"2020-07-21 12:42:42","endLine":154,"groupId":"7211","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"abort","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b5a4c5985c63bd77ca88802bbd67eb735cbd10.src","preCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-12-10 09:37:18","commitOrder":2,"curCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            Catalog.getCurrentCatalog().getLoadManager().createLoadJobFromStmt(multiLoadDesc.toLoadStmt());\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n        Catalog catalog = Catalog.getCurrentCatalog();\n        Database db = catalog.getDb(fullDbName);\n        if (db == null) {\n            throw new DdlException(\"db: \" + fullDbName + \"not found!\");\n        }\n        long dbId = db.getId();\n        ConnectContext ctx = ConnectContext.get();\n        await().atMost(Config.broker_load_default_timeout_second, TimeUnit.SECONDS).until(() -> {\n            ConnectContext.threadLocalInfo.set(ctx);\n            List<List<Comparable>> loadInfos = catalog.getLoadManager().getLoadJobInfosByDb(dbId, label, true,\n                    null);\n            if (loadInfos.size() != 1) {\n                throw new DdlException(\"label(\" + label + \") can be only used once.\");\n            }\n            List<Comparable> loadInfo = loadInfos.get(0);\n            String jobState = loadInfo.get(LoadProcDir.STATE_INDEX).toString();\n            if (jobState.equals(FINISHED.name())) {\n                return true;\n            } else if (jobState.equals(PENDING.name()) || jobState.equals(LOADING.name())) {\n                return false;\n            } else {\n                throw new DdlException(\"job failed. ErrorMsg: \" + loadInfo.get(LoadProcDir.ERR_MSG_INDEX).toString()\n                        + \", URL: \" + loadInfo.get(LoadProcDir.URL_INDEX).toString()\n                        + \", JobDetails: \" + loadInfo.get(LoadProcDir.JOB_DETAILS_INDEX).toString());\n            }\n        });\n    }\n","date":"2020-12-10 09:37:18","endLine":200,"groupId":"1299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b3/e746e3a802111a87159e26a4be8dc01b51d21c.src","preCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            Catalog.getCurrentCatalog().getLoadInstance().addLoadJob(\n                    multiLoadDesc.toLoadStmt(),\n                    EtlJobType.MINI,\n                    System.currentTimeMillis());\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","date":"2020-07-21 12:42:42","endLine":154,"groupId":"7211","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"abort","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b5a4c5985c63bd77ca88802bbd67eb735cbd10.src","preCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"e278e0b3db8b5c26d2491f88f4d6e4297dc647e6","commitMessage":"@@@[Load] Support full StreamLoad feature in multiload (#4717)\n\n","date":"2020-12-10 09:37:18","modifiedFileCount":"20","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-05-30 23:08:38","commitOrder":3,"curCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        List<Long> jobIds = Lists.newArrayList();\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            jobIds.add(Catalog.getCurrentCatalog().getLoadManager().createLoadJobFromStmt(multiLoadDesc.toLoadStmt()));\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        final long jobId = jobIds.isEmpty() ? -1 : jobIds.get(0);\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n        Catalog catalog = Catalog.getCurrentCatalog();\n        ConnectContext ctx = ConnectContext.get();\n        Awaitility.await().atMost(Config.broker_load_default_timeout_second, TimeUnit.SECONDS).until(() -> {\n            ConnectContext.threadLocalInfo.set(ctx);\n            LoadJob loadJob = catalog.getLoadManager().getLoadJob(jobId);\n            if (loadJob.getState() == JobState.FINISHED) {\n                return true;\n            } else if (loadJob.getState() == JobState.PENDING || loadJob.getState() == JobState.LOADING) {\n                return false;\n            } else {\n                throw new DdlException(\"job failed. ErrorMsg: \" + loadJob.getFailMsg().getMsg()\n                        + \", URL: \" + loadJob.getLoadingStatus().getTrackingUrl()\n                        + \", JobDetails: \" + loadJob.getLoadStatistic().toJson());\n            }\n        });\n    }\n","date":"2021-05-30 23:08:38","endLine":187,"groupId":"101058","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8b/de1ed6b21cb36d42f0215c89117d79964bb19e.src","preCode":"    public void commit(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            Catalog.getCurrentCatalog().getLoadManager().createLoadJobFromStmt(multiLoadDesc.toLoadStmt());\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n        Catalog catalog = Catalog.getCurrentCatalog();\n        Database db = catalog.getDb(fullDbName);\n        if (db == null) {\n            throw new DdlException(\"db: \" + fullDbName + \"not found!\");\n        }\n        long dbId = db.getId();\n        ConnectContext ctx = ConnectContext.get();\n        await().atMost(Config.broker_load_default_timeout_second, TimeUnit.SECONDS).until(() -> {\n            ConnectContext.threadLocalInfo.set(ctx);\n            List<List<Comparable>> loadInfos = catalog.getLoadManager().getLoadJobInfosByDb(dbId, label, true,\n                    null);\n            if (loadInfos.size() != 1) {\n                throw new DdlException(\"label(\" + label + \") can be only used once.\");\n            }\n            List<Comparable> loadInfo = loadInfos.get(0);\n            String jobState = loadInfo.get(LoadProcDir.STATE_INDEX).toString();\n            if (jobState.equals(FINISHED.name())) {\n                return true;\n            } else if (jobState.equals(PENDING.name()) || jobState.equals(LOADING.name())) {\n                return false;\n            } else {\n                throw new DdlException(\"job failed. ErrorMsg: \" + loadInfo.get(LoadProcDir.ERR_MSG_INDEX).toString()\n                        + \", URL: \" + loadInfo.get(LoadProcDir.URL_INDEX).toString()\n                        + \", JobDetails: \" + loadInfo.get(LoadProcDir.JOB_DETAILS_INDEX).toString());\n            }\n        });\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","date":"2020-07-21 12:42:42","endLine":154,"groupId":"101058","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"abort","params":"(StringfullDbName@Stringlabel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b5a4c5985c63bd77ca88802bbd67eb735cbd10.src","preCode":"    public void abort(String fullDbName, String label) throws DdlException {\n        LabelName multiLabel = new LabelName(fullDbName, label);\n        lock.writeLock().lock();\n        try {\n            MultiLoadDesc multiLoadDesc = infoMap.get(multiLabel);\n            if (multiLoadDesc == null) {\n                throw new DdlException(\"Unknown label(\" + multiLabel + \")\");\n            }\n            infoMap.remove(multiLabel);\n        } finally {\n            lock.writeLock().unlock();\n        }\n        Catalog.getCurrentCatalog().getLoadInstance().deregisterMiniLabel(fullDbName, label);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/MultiLoadMgr.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"0da59aab531186b519a6165944dedf037e5f504d","commitMessage":"@@@[Bug] Fix bug of multi load and some issue about httpv2 (#5848)\n\nTo be compatible with http v1 so that user don't need to change their code","date":"2021-05-30 23:08:38","modifiedFileCount":"6","status":"M","submitter":"Mingyu Chen"}]
