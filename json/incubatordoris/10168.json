[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-07-21 12:42:42","endLine":212,"groupId":"1893","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2a/d113d7cabef56377a67d956762a174831aca4d.src","preCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-07-21 12:42:42","endLine":269,"groupId":"5260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2a/d113d7cabef56377a67d956762a174831aca4d.src","preCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-08-21 22:57:16","codes":[{"authorDate":"2020-08-21 22:57:16","commitOrder":2,"curCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-08-21 22:57:16","endLine":213,"groupId":"1893","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/e80b73e68eaee56ada4bc58fcd59cb9b6f4fe6.src","preCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-08-21 22:57:16","commitOrder":2,"curCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-08-21 22:57:16","endLine":271,"groupId":"951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/e80b73e68eaee56ada4bc58fcd59cb9b6f4fe6.src","preCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"d61c10b76108fdbd04f7d86f89c646708a3934ea","commitMessage":"@@@[Delete] Support batch delete [part 1] (#4310)\n\n* Implements the grammar of the batch delete #4051 \n* Process create.  alter table when table has delete sign column\n* Support the syntax for enabling the delete column\n* Automatically filtered deleted data in the select statement.\n* Automatically add delete sign when create  rollup table\nTODO:\n * Optimize the reading and compaction logic on the be side.  so that the data marked as deleted will be completely deleted during base compaction","date":"2020-08-21 22:57:16","modifiedFileCount":"44","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2020-08-21 22:57:16","codes":[{"authorDate":"2020-10-10 21:16:25","commitOrder":3,"curCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitute = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitute.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-10-10 21:16:25","endLine":213,"groupId":"1893","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cb/d4b67112f3ec163ba44f242b63be184241c2cd.src","preCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-08-21 22:57:16","commitOrder":3,"curCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-08-21 22:57:16","endLine":271,"groupId":"951","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/e80b73e68eaee56ada4bc58fcd59cb9b6f4fe6.src","preCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"}],"commitId":"94a81e52c796150333c54838a889be01934983a4","commitMessage":"@@@Fix typo in our code (#4696)\n\n* fix typo in our code\n\n* fix\n\n* fix","date":"2020-10-10 21:16:25","modifiedFileCount":"176","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-07-27 13:38:15","codes":[{"authorDate":"2020-10-10 21:16:25","commitOrder":4,"curCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitute = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitute.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2020-10-10 21:16:25","endLine":213,"groupId":"10168","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cb/d4b67112f3ec163ba44f242b63be184241c2cd.src","preCode":"    public void testNormal() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"values(1,'a',2,'b')\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitute = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitute.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(IntLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitute.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitute.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(StringLiteral.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitute.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2021-07-27 13:38:15","commitOrder":4,"curCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(0) instanceof CastExpr);\n        CastExpr resultExpr0 = (CastExpr) queryStmtSubstitue.getResultExprs().get(0);\n        Assert.assertEquals(resultExpr0.getChild(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","date":"2021-07-27 13:38:15","endLine":272,"groupId":"10168","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsertSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/09/5b882bd77582cd847d3042b1a4777586a5cf7a.src","preCode":"    public void testInsertSelect() throws Exception {\n        ConnectContext ctx = UtFrameUtils.createDefaultCtx();\n        String sql = \"select kk1, kk2, kk3, kk4 from db.tbl\";\n\n        SqlScanner input = new SqlScanner(new StringReader(sql), ctx.getSessionVariable().getSqlMode());\n        SqlParser parser = new SqlParser(input);\n        Analyzer analyzer = new Analyzer(ctx.getCatalog(), ctx);\n        StatementBase statementBase = null;\n        try {\n            statementBase = SqlParserUtils.getFirstStmt(parser);\n        } catch (AnalysisException e) {\n            String errorMessage = parser.getErrorMsg(sql);\n            System.err.println(\"parse failed: \" + errorMessage);\n            if (errorMessage == null) {\n                throw e;\n            } else {\n                throw new AnalysisException(errorMessage, e);\n            }\n        }\n        statementBase.analyze(analyzer);\n\n        QueryStmt queryStmt = (QueryStmt) statementBase;\n\n        new Expectations() {{\n            targetTable.getBaseSchema(); result = getBaseSchema();\n            targetTable.getBaseSchema(anyBoolean); result = getBaseSchema();\n            targetTable.getFullSchema(); result = getFullSchema();\n        }};\n\n\n        InsertStmt stmt = new InsertStmt(target, \"label\", null, source, new ArrayList<>());\n        stmt.setTargetTable(targetTable);\n        stmt.setQueryStmt(queryStmt);\n\n        Deencapsulation.invoke(stmt, \"analyzeSubquery\", analyzer);\n        System.out.println(stmt.getQueryStmt());\n\n        QueryStmt queryStmtSubstitue = stmt.getQueryStmt();\n        Assert.assertEquals(6, queryStmtSubstitue.getResultExprs().size());\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(4) instanceof FunctionCallExpr);\n        FunctionCallExpr expr4 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(4);\n        Assert.assertTrue(expr4.getFnName().getFunction().equals(\"to_bitmap\"));\n        List<Expr> slots = Lists.newArrayList();\n        expr4.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(0), slots.get(0));\n\n        Assert.assertTrue(queryStmtSubstitue.getResultExprs().get(5) instanceof FunctionCallExpr);\n        FunctionCallExpr expr5 = (FunctionCallExpr) queryStmtSubstitue.getResultExprs().get(5);\n        Assert.assertTrue(expr5.getFnName().getFunction().equals(\"hll_hash\"));\n        slots = Lists.newArrayList();\n        expr5.collect(SlotRef.class, slots);\n        Assert.assertEquals(1, slots.size());\n        Assert.assertEquals(queryStmtSubstitue.getResultExprs().get(1), slots.get(0));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/analysis/InsertStmtTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"b3a52a05d535bbf1f6d644fe46e71901d55d4482","commitMessage":"@@@[Update] Support update syntax (#6230)\n\n [Update] Support update syntax\n\n    The current update syntax only supports updating the filtered data of a single table.\n\n    Syntax:\n\n     * UPDATE table_reference\n     *     SET assignment_list\n     *     [WHERE where_condition]\n     *\n     * value:\n     *     {expr}\n     *\n     * assignment:\n     *     col_name = value\n     *\n     * assignment_list:\n     *     assignment [.  assignment] ...\n\n    Example\n    Update unique_table\n         set v1=1\n         where k1=1\n\n    New Frontend Config: enable_concurrent_update\n    This configuration is used to control whether multi update stmt can be executed concurrently in one table.\n    Default value is false which means A table can only have one update task being executed at the same time.\n    If users want to update the same table concurrently. \n      they need to modify the configuration value to true and restart the master frontend.\n    Concurrent updates may cause write conflicts.  the result is uncertain.  please be careful.\n\n    The main realization principle:\n    1. Read the rows that meet the conditions according to the conditions set by where clause.\n    2. Modify the result of the row according to the set clause.\n    3. Write the modified row back to the table.\n\n    Some restrictions on the use of update syntax.\n    1. Only the unique table can be updated\n    2. Only the value column of the unique table can be updated\n    3. The where clause currently only supports single tables\n\n    Possible risks:\n    1. Since the current implementation method is a row update. \n         when the same table is updated concurrently.  there may be concurrency conflicts which may cause the incorrect result.\n    2. Once the conditions of the where clause are unsatisfactory.  it is likely to cause a full table scan and affect query performance.\n       Please pay attention to whether the column in the where clause can match the index when using it.\n\n    [Docs][Update] Add update document and sql-reference\n\n    Fixed #6229","date":"2021-07-27 13:38:15","modifiedFileCount":"30","status":"M","submitter":"EmmyMiao87"}]
