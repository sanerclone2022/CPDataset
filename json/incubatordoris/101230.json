[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        cardinality = getChild(0).cardinality;\n        if (hasLimit()) {\n            if (cardinality == -1) {\n                cardinality = limit;\n            } else {\n                cardinality = Math.min(cardinality, limit);\n            }\n        }\n        LOG.debug(\"stats Sort: cardinality=\" + Long.toString(cardinality));\n    }\n","date":"2020-07-21 12:42:42","endLine":136,"groupId":"4470","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/c85f9bc275de51f63d38ccd7d8d3198aa9dd5e.src","preCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        cardinality = getChild(0).cardinality;\n        if (hasLimit()) {\n            if (cardinality == -1) {\n                cardinality = limit;\n            } else {\n                cardinality = Math.min(cardinality, limit);\n            }\n        }\n        LOG.debug(\"stats Sort: cardinality=\" + Long.toString(cardinality));\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SortNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        if (getChild(0).cardinality == -1) {\n            cardinality = -1;\n        } else {\n            cardinality = Math.round(((double) getChild(0).cardinality) * computeSelectivity());\n            Preconditions.checkState(cardinality >= 0);\n        }\n        LOG.info(\"stats Select: cardinality=\" + Long.toString(cardinality));\n    }\n","date":"2020-07-21 12:42:42","endLine":73,"groupId":"7262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c7/cb70621dbcbc743e37d702fd418f6518d64752.src","preCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        if (getChild(0).cardinality == -1) {\n            cardinality = -1;\n        } else {\n            cardinality = Math.round(((double) getChild(0).cardinality) * computeSelectivity());\n            Preconditions.checkState(cardinality >= 0);\n        }\n        LOG.info(\"stats Select: cardinality=\" + Long.toString(cardinality));\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SelectNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-10-13 10:07:22","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        cardinality = getChild(0).cardinality;\n        if (hasLimit()) {\n            if (cardinality == -1) {\n                cardinality = limit;\n            } else {\n                cardinality = Math.min(cardinality, limit);\n            }\n        }\n        LOG.debug(\"stats Sort: cardinality=\" + Long.toString(cardinality));\n    }\n","date":"2020-07-21 12:42:42","endLine":136,"groupId":"4470","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/c85f9bc275de51f63d38ccd7d8d3198aa9dd5e.src","preCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        cardinality = getChild(0).cardinality;\n        if (hasLimit()) {\n            if (cardinality == -1) {\n                cardinality = limit;\n            } else {\n                cardinality = Math.min(cardinality, limit);\n            }\n        }\n        LOG.debug(\"stats Sort: cardinality=\" + Long.toString(cardinality));\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SortNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2020-10-13 10:07:22","commitOrder":2,"curCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        long cardinality = getChild(0).cardinality;\n        double selectivity = computeSelectivity();\n        if (cardinality < 0 || selectivity < 0) {\n            this.cardinality = -1;\n        } else {\n            this.cardinality = Math.round(cardinality * selectivity);\n        }\n        LOG.debug(\"stats Select: cardinality={}\", this.cardinality);\n    }\n","date":"2020-10-13 10:07:22","endLine":73,"groupId":"4428","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/83/219af9a386eaf7ffb0e43c843933641cc8d6d9.src","preCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        if (getChild(0).cardinality == -1) {\n            cardinality = -1;\n        } else {\n            cardinality = Math.round(((double) getChild(0).cardinality) * computeSelectivity());\n            Preconditions.checkState(cardinality >= 0);\n        }\n        LOG.info(\"stats Select: cardinality=\" + Long.toString(cardinality));\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SelectNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"c69fe23c423218c7b3543d9aa146111054fae913","commitMessage":"@@@[Bug] Fix hard cardinality check which makes queries fail (#4678)\n\nfix hard `Preconditions.checkState()` by setting `cardinality` to `-1` when computation is invalid.","date":"2020-10-13 10:07:22","modifiedFileCount":"3","status":"M","submitter":"ccoffline"},{"authorTime":"2021-07-14 13:08:28","codes":[{"authorDate":"2021-07-14 13:08:28","commitOrder":3,"curCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        if (!analyzer.safeIsEnableJoinReorderBasedCost()) {\n            return;\n        }\n        cardinality = getChild(0).cardinality;\n        applyConjunctsSelectivity();\n        capCardinalityAtLimit();\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"stats Sort: cardinality=\" + cardinality);\n        }\n    }\n","date":"2021-07-14 13:08:28","endLine":136,"groupId":"101230","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c0/450b97b99de2217e353eff8dfaab9a459487a1.src","preCode":"    protected void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        cardinality = getChild(0).cardinality;\n        if (hasLimit()) {\n            if (cardinality == -1) {\n                cardinality = limit;\n            } else {\n                cardinality = Math.min(cardinality, limit);\n            }\n        }\n        LOG.debug(\"stats Sort: cardinality=\" + Long.toString(cardinality));\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SortNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-07-14 13:08:28","commitOrder":3,"curCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        if (!analyzer.safeIsEnableJoinReorderBasedCost()) {\n            return;\n        }\n        cardinality = getChild(0).cardinality;\n        applyConjunctsSelectivity();\n        capCardinalityAtLimit();\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"stats Select: cardinality={}\", this.cardinality);\n        }\n    }\n","date":"2021-07-14 13:08:28","endLine":75,"groupId":"101230","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"computeStats","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d8/eacd21c384bc3cd7e19358b012c50622c70d6e.src","preCode":"    public void computeStats(Analyzer analyzer) {\n        super.computeStats(analyzer);\n        long cardinality = getChild(0).cardinality;\n        double selectivity = computeSelectivity();\n        if (cardinality < 0 || selectivity < 0) {\n            this.cardinality = -1;\n        } else {\n            this.cardinality = Math.round(cardinality * selectivity);\n        }\n        LOG.debug(\"stats Select: cardinality={}\", this.cardinality);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/SelectNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"cbc42db010c3e84679835dc08358c21d5e9a8b0b","commitMessage":"@@@[JoinReorder] Implement a better join reorder algorithm. (#6226)\n\nThe current JoinReorder algorithm mainly sorts according to the star model. \nand only considers the query association relationship between the table and the table.\nThe problems are following:\n1. Only applicable to user data whose data model is a star model.  data of other models cannot be sorted.\n2. Regardless of the cost of the table.  it is impossible to determine the size of the join table relationship. \n   and the real query optimization ability is weak.\n3. It is impossible to avoid possible time-consuming joins such as cross joins by sorting.\n\nThe new JoinReorder algorithm mainly introduces a new sorting algorithm for Join\nThe new ranking algorithm introduces the cost evaluation model to Doris.\n\nThe sorting algorithm is mainly based on the following three principles:\n1. The order is: Largest node.  Smallest node. . . Second largest node\n2. Cross join is better than Inner join\n3. The right children of Outer join.  semi join.  and anti join do not move\n\nPlanNode's cost model evaluation mainly relies on two values: cardinality and selectivity.\ncardinality: cardinality.  can also be simply understood as the number of rows.\nselectivity: selectivity.  a value between 0 and 1. Predicate generally has selectivity.\nThe cost model generally calculates the final cardinality of a PlanNode based on the pre-calculated\ncardinality of PlanNode and the selectivity of the predicate to which it belongs.\n\nCurrently.  you can configure \"enable_cost_based_join_reorder\" to control the opening and closing of JoinReorder.\nWhen the configuration is turned on.  the new sorting algorithm will take effect.  when it is turned off. \nthe old sorting algorithm will take effect.  and it is turned off by default.\n\nThe new sorting algorithm currently has no cost base evaluation for external tables (odbc.  es)\nand set calculations (intersect.  except). When using these queries.  it is not recommended to enable cost base join reorder.\nWhen using these queries.  it is not recommended to enable cost base join reorder.\n\nAt the code architecture level:\n1. The new sorting algorithm occurs in the single-node execution planning stage.\n2. Refactored the init and finalize phases of PlanNode to ensure that PlanNode planning\n   and cost evaluation have been completed before the sorting algorithm occurs.","date":"2021-07-14 13:08:28","modifiedFileCount":"42","status":"M","submitter":"EmmyMiao87"}]
