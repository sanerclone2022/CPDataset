[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","date":"2020-07-21 12:42:42","endLine":59,"groupId":"5654","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/63/4490b5b2035b68c7e2114f19b2c54569ed497a.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/TransDbProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(db);\n        Preconditions.checkNotNull(partition);\n\n        BaseProcResult result = new BaseProcResult();\n        \r\n        List<List<Comparable>> indexInfos = new ArrayList<List<Comparable>>();\n        db.readLock();\n        try {\n            result.setNames(TITLE_NAMES);\n            for (MaterializedIndex materializedIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n                List<Comparable> indexInfo = new ArrayList<Comparable>();\n                indexInfo.add(materializedIndex.getId());\n                indexInfo.add(olapTable.getIndexNameById(materializedIndex.getId()));\n                indexInfo.add(materializedIndex.getState());\n                indexInfo.add(TimeUtils.longToTimeString(materializedIndex.getLastCheckTime()));\n\n                indexInfos.add(indexInfo);\n            }\n\n        } finally {\n            db.readUnlock();\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(indexInfos, comparator);\n\n        \r\n        for (List<Comparable> info : indexInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","date":"2020-07-21 12:42:42","endLine":94,"groupId":"5654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/63/bf96d2f0c7becfb48725cf83a0d7e22d7e7c23.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(db);\n        Preconditions.checkNotNull(partition);\n\n        BaseProcResult result = new BaseProcResult();\n        \r\n        List<List<Comparable>> indexInfos = new ArrayList<List<Comparable>>();\n        db.readLock();\n        try {\n            result.setNames(TITLE_NAMES);\n            for (MaterializedIndex materializedIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n                List<Comparable> indexInfo = new ArrayList<Comparable>();\n                indexInfo.add(materializedIndex.getId());\n                indexInfo.add(olapTable.getIndexNameById(materializedIndex.getId()));\n                indexInfo.add(materializedIndex.getState());\n                indexInfo.add(TimeUtils.longToTimeString(materializedIndex.getLastCheckTime()));\n\n                indexInfos.add(indexInfo);\n            }\n\n        } finally {\n            db.readUnlock();\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(indexInfos, comparator);\n\n        \r\n        for (List<Comparable> info : indexInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/IndicesProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","date":"2020-07-21 12:42:42","endLine":59,"groupId":"101012","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/63/4490b5b2035b68c7e2114f19b2c54569ed497a.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/TransDbProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2021-01-13 10:27:58","commitOrder":2,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(db);\n        Preconditions.checkNotNull(partition);\n\n        BaseProcResult result = new BaseProcResult();\n        \r\n        List<List<Comparable>> indexInfos = new ArrayList<List<Comparable>>();\n        olapTable.readLock();\n        try {\n            result.setNames(TITLE_NAMES);\n            for (MaterializedIndex materializedIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n                List<Comparable> indexInfo = new ArrayList<Comparable>();\n                indexInfo.add(materializedIndex.getId());\n                indexInfo.add(olapTable.getIndexNameById(materializedIndex.getId()));\n                indexInfo.add(materializedIndex.getState());\n                indexInfo.add(TimeUtils.longToTimeString(materializedIndex.getLastCheckTime()));\n\n                indexInfos.add(indexInfo);\n            }\n\n        } finally {\n            olapTable.readUnlock();\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(indexInfos, comparator);\n\n        \r\n        for (List<Comparable> info : indexInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","date":"2021-01-13 10:27:58","endLine":94,"groupId":"101012","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/91/16ea66b951adf5fe35fa948a26abf65e078e71.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(db);\n        Preconditions.checkNotNull(partition);\n\n        BaseProcResult result = new BaseProcResult();\n        \r\n        List<List<Comparable>> indexInfos = new ArrayList<List<Comparable>>();\n        db.readLock();\n        try {\n            result.setNames(TITLE_NAMES);\n            for (MaterializedIndex materializedIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n                List<Comparable> indexInfo = new ArrayList<Comparable>();\n                indexInfo.add(materializedIndex.getId());\n                indexInfo.add(olapTable.getIndexNameById(materializedIndex.getId()));\n                indexInfo.add(materializedIndex.getState());\n                indexInfo.add(TimeUtils.longToTimeString(materializedIndex.getLastCheckTime()));\n\n                indexInfos.add(indexInfo);\n            }\n\n        } finally {\n            db.readUnlock();\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(indexInfos, comparator);\n\n        \r\n        for (List<Comparable> info : indexInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/IndicesProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"}]
