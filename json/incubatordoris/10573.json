[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testFixedRange() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n        PartitionKeyDesc p2 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190107\"), new PartitionValue(\"10\")));\n        PartitionKeyDesc p3 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20181231\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")));\n        PartitionKeyDesc p4 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190120\"), new PartitionValue(\"10000000000\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p2\", p2, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p3\", p3, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p4\", p4, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":184,"groupId":"7930","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixedRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/3a/758021d5df3735bfa367a19ec66170d1507cca.src","preCode":"    public void testFixedRange() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n        PartitionKeyDesc p2 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190107\"), new PartitionValue(\"10\")));\n        PartitionKeyDesc p3 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20181231\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")));\n        PartitionKeyDesc p4 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190120\"), new PartitionValue(\"10000000000\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p2\", p2, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p3\", p3, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p4\", p4, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/RangePartitionInfoTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testFixedRange2() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(new ArrayList<>(),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":256,"groupId":"6130","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixedRange2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/3a/758021d5df3735bfa367a19ec66170d1507cca.src","preCode":"    public void testFixedRange2() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(new ArrayList<>(),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/RangePartitionInfoTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-04-24 17:42:27","codes":[{"authorDate":"2021-04-24 17:42:27","commitOrder":2,"curCode":"    public void testFixedRange() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = PartitionKeyDesc.createFixed(\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n        PartitionKeyDesc p2 = PartitionKeyDesc.createFixed(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190107\"), new PartitionValue(\"10\")));\n        PartitionKeyDesc p3 = PartitionKeyDesc.createFixed(\n                Lists.newArrayList(new PartitionValue(\"20181231\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")));\n        PartitionKeyDesc p4 = PartitionKeyDesc.createFixed(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190120\"), new PartitionValue(\"10000000000\")));\n\n        singlePartitionDescs.add(new SinglePartitionDesc(false, \"p1\", p1, null));\n        singlePartitionDescs.add(new SinglePartitionDesc(false, \"p2\", p2, null));\n        singlePartitionDescs.add(new SinglePartitionDesc(false, \"p3\", p3, null));\n        singlePartitionDescs.add(new SinglePartitionDesc(false, \"p4\", p4, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SinglePartitionDesc singlePartitionDesc : singlePartitionDescs) {\n            singlePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singlePartitionDesc, 20000L, false);\n        }\n    }\n","date":"2021-04-24 17:42:27","endLine":184,"groupId":"10573","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFixedRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2f/5217849ca28449ba25647fc15bcd2c7adb85fa.src","preCode":"    public void testFixedRange() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n        PartitionKeyDesc p2 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190107\"), new PartitionValue(\"10\")));\n        PartitionKeyDesc p3 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20181231\"), new PartitionValue(\"10\")),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"100\")));\n        PartitionKeyDesc p4 = new PartitionKeyDesc(\n                Lists.newArrayList(new PartitionValue(\"20190105\"), new PartitionValue(\"100\")),\n                Lists.newArrayList(new PartitionValue(\"20190120\"), new PartitionValue(\"10000000000\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p2\", p2, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p3\", p3, null));\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p4\", p4, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/RangePartitionInfoTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-04-24 17:42:27","commitOrder":2,"curCode":"    public void testFixedRange2() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = PartitionKeyDesc.createFixed(new ArrayList<>(),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n\n        singlePartitionDescs.add(new SinglePartitionDesc(false, \"p1\", p1, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SinglePartitionDesc singlePartitionDesc : singlePartitionDescs) {\n            singlePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singlePartitionDesc, 20000L, false);\n        }\n    }\n","date":"2021-04-24 17:42:27","endLine":256,"groupId":"10573","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFixedRange2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2f/5217849ca28449ba25647fc15bcd2c7adb85fa.src","preCode":"    public void testFixedRange2() throws DdlException, AnalysisException {\n        \r\n        int columns = 2;\n        Column k1 = new Column(\"k1\", new ScalarType(PrimitiveType.INT), true, null, \"\", \"\");\n        Column k2 = new Column(\"k2\", new ScalarType(PrimitiveType.BIGINT), true, null, \"\", \"\");\n        partitionColumns.add(k1);\n        partitionColumns.add(k2);\n\n        \r\n        PartitionKeyDesc p1 = new PartitionKeyDesc(new ArrayList<>(),\n                Lists.newArrayList(new PartitionValue(\"20190101\"), new PartitionValue(\"200\")));\n\n        singleRangePartitionDescs.add(new SingleRangePartitionDesc(false, \"p1\", p1, null));\n\n        partitionInfo = new RangePartitionInfo(partitionColumns);\n\n        for (SingleRangePartitionDesc singleRangePartitionDesc : singleRangePartitionDescs) {\n            singleRangePartitionDesc.analyze(columns, null);\n            partitionInfo.handleNewSinglePartitionDesc(singleRangePartitionDesc, 20000L, false);\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/RangePartitionInfoTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"de87f4ae840c1a527379c046d7f01afb2e2d7dcc","commitMessage":"@@@[Feature] Add list partition support (#5529)\n\nAdd list partition support","date":"2021-04-24 17:42:27","modifiedFileCount":"48","status":"M","submitter":"qiye"}]
