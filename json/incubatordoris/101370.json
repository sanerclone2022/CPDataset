[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            editLog.logDropDb(dbName);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}]\", dbName);\n    }\n","date":"2020-07-21 12:42:42","endLine":2728,"groupId":"1696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"dropDb","params":"(DropDbStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/aa/6187917d6f07bca88698e265ccfd87f45979a3.src","preCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            editLog.logDropDb(dbName);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}]\", dbName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2655,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void replayDropDb(String dbName) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":2772,"groupId":"3050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"replayDropDb","params":"(StringdbName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/aa/6187917d6f07bca88698e265ccfd87f45979a3.src","preCode":"    public void replayDropDb(String dbName) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2752,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-28 15:18:52","codes":[{"authorDate":"2020-07-28 15:18:52","commitOrder":2,"curCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (stmt.isNeedCheckCommittedTxns()) {\n                    if (Catalog.getCurrentCatalog().getGlobalTransactionMgr().existCommittedTxns(db.getId(), null, null)) {\n                       throw new DdlException(\"There are still some transactions in the COMMITTED state waiting to be completed. \" +\n                               \"The database [\" + dbName +\"] cannot be dropped. If you want to forcibly drop(cannot be recovered),\" +\n                               \" please use \\\"DROP database FORCE\\\".\");\n                    }\n                }\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, !stmt.isNeedCheckCommittedTxns());\n                if (stmt.isNeedCheckCommittedTxns()) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            editLog.logDropDb(dbName, !stmt.isNeedCheckCommittedTxns());\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}], is force : {}\", dbName, !stmt.isNeedCheckCommittedTxns());\n    }\n","date":"2020-07-28 15:18:52","endLine":2742,"groupId":"1696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"dropDb","params":"(DropDbStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/58/58a1d25cc9d918309d2758c60d647f6a61e7aa.src","preCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            editLog.logDropDb(dbName);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}]\", dbName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2660,"status":"M"},{"authorDate":"2020-07-28 15:18:52","commitOrder":2,"curCode":"    public void replayDropDb(String dbName, boolean isForceDrop) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, isForceDrop);\n                if (!isForceDrop) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","date":"2020-07-28 15:18:52","endLine":2788,"groupId":"6314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"replayDropDb","params":"(StringdbName@booleanisForceDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/58/58a1d25cc9d918309d2758c60d647f6a61e7aa.src","preCode":"    public void replayDropDb(String dbName) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db);\n                Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2766,"status":"M"}],"commitId":"150f8e0e2b5e6c0224554c75715d030efe64fa8d","commitMessage":"@@@Support check committed txns before catalog drop meta.  like db.  table.  partition etc (#4029)\n\nThis PR is to ensure that dropped db .  table or partition can be with normal state after recovered by user. Commited txns can not be aborted.  because the partitions's commited versions have been changed.  and some tablets may already have new visible versions. If user just don't want the meta(db.  table or partition) anymore.  just use drop force instead of drop to skip committed txn check.","date":"2020-07-28 15:18:52","modifiedFileCount":"20","status":"M","submitter":"caiconghui"},{"authorTime":"2020-07-28 15:18:52","codes":[{"authorDate":"2020-07-30 09:54:20","commitOrder":3,"curCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (!stmt.isForceDrop()) {\n                    if (Catalog.getCurrentCatalog().getGlobalTransactionMgr().existCommittedTxns(db.getId(), null, null)) {\n                       throw new DdlException(\"There are still some transactions in the COMMITTED state waiting to be completed. \" +\n                               \"The database [\" + dbName +\"] cannot be dropped. If you want to forcibly drop(cannot be recovered),\" +\n                               \" please use \\\"DROP database FORCE\\\".\");\n                    }\n                }\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, stmt.isForceDrop());\n                if (!stmt.isForceDrop()) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            DropDbInfo info = new DropDbInfo(dbName, stmt.isForceDrop());\n            editLog.logDropDb(info);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}], is force : {}\", dbName, stmt.isForceDrop());\n    }\n","date":"2020-07-30 09:54:20","endLine":2744,"groupId":"7483","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"dropDb","params":"(DropDbStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d2/69ce102991772252271bfb27837fb0e25d4009.src","preCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (stmt.isNeedCheckCommittedTxns()) {\n                    if (Catalog.getCurrentCatalog().getGlobalTransactionMgr().existCommittedTxns(db.getId(), null, null)) {\n                       throw new DdlException(\"There are still some transactions in the COMMITTED state waiting to be completed. \" +\n                               \"The database [\" + dbName +\"] cannot be dropped. If you want to forcibly drop(cannot be recovered),\" +\n                               \" please use \\\"DROP database FORCE\\\".\");\n                    }\n                }\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, !stmt.isNeedCheckCommittedTxns());\n                if (stmt.isNeedCheckCommittedTxns()) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            editLog.logDropDb(dbName, !stmt.isNeedCheckCommittedTxns());\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}], is force : {}\", dbName, !stmt.isNeedCheckCommittedTxns());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"M"},{"authorDate":"2020-07-28 15:18:52","commitOrder":3,"curCode":"    public void replayDropDb(String dbName, boolean isForceDrop) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, isForceDrop);\n                if (!isForceDrop) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","date":"2020-07-28 15:18:52","endLine":2788,"groupId":"6314","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"replayDropDb","params":"(StringdbName@booleanisForceDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/58/58a1d25cc9d918309d2758c60d647f6a61e7aa.src","preCode":"    public void replayDropDb(String dbName, boolean isForceDrop) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, isForceDrop);\n                if (!isForceDrop) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2766,"status":"N"}],"commitId":"237271c764e19fb68c23b9d571741d65a0c6d61a","commitMessage":"@@@[Bug] Fix fe meta version problem.  make drop meta check code easy to read and add doc content for drop meta check (#4205)\n\nThis PR is mainly do three things:\n1. Fix fe meta version bug introduced by #4029 .  when fix conflict with #4086 \n2. Make drop check code easy to read\n3. Add doc content for drop meta check","date":"2020-07-30 09:54:20","modifiedFileCount":"7","status":"M","submitter":"caiconghui"},{"authorTime":"2021-02-07 22:37:18","codes":[{"authorDate":"2021-02-07 22:37:18","commitOrder":4,"curCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (!stmt.isForceDrop()) {\n                    if (Catalog.getCurrentCatalog().getGlobalTransactionMgr().existCommittedTxns(db.getId(), null, null)) {\n                       throw new DdlException(\"There are still some transactions in the COMMITTED state waiting to be completed. \" +\n                               \"The database [\" + dbName +\"] cannot be dropped. If you want to forcibly drop(cannot be recovered),\" +\n                               \" please use \\\"DROP database FORCE\\\".\");\n                    }\n                }\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, stmt.isForceDrop(), false);\n                if (!stmt.isForceDrop()) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                } else {\n                    Catalog.getCurrentCatalog().eraseDatabase(db.getId(), false);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            DropDbInfo info = new DropDbInfo(dbName, stmt.isForceDrop());\n            editLog.logDropDb(info);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}], is force : {}\", dbName, stmt.isForceDrop());\n    }\n","date":"2021-02-07 22:37:18","endLine":2687,"groupId":"101370","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"dropDb","params":"(DropDbStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/54/18b37441dbeb9543af3164ad7f8aa9c0cc83df.src","preCode":"    public void dropDb(DropDbStmt stmt) throws DdlException {\n        String dbName = stmt.getDbName();\n\n        \r\n        if (!tryLock(false)) {\n            throw new DdlException(\"Failed to acquire catalog lock. Try again\");\n        }\n        try {\n            if (!fullNameToDb.containsKey(dbName)) {\n                if (stmt.isSetIfExists()) {\n                    LOG.info(\"drop database[{}] which does not exist\", dbName);\n                    return;\n                } else {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_DB_DROP_EXISTS, dbName);\n                }\n            }\n\n            \r\n            Database db = this.fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                if (!stmt.isForceDrop()) {\n                    if (Catalog.getCurrentCatalog().getGlobalTransactionMgr().existCommittedTxns(db.getId(), null, null)) {\n                       throw new DdlException(\"There are still some transactions in the COMMITTED state waiting to be completed. \" +\n                               \"The database [\" + dbName +\"] cannot be dropped. If you want to forcibly drop(cannot be recovered),\" +\n                               \" please use \\\"DROP database FORCE\\\".\");\n                    }\n                }\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getAttachDb())) {\n                    \r\n                    final DropLinkDbAndUpdateDbInfo info = new DropLinkDbAndUpdateDbInfo();\n                    fullNameToDb.remove(db.getAttachDb());\n                    db.setDbState(DbState.NORMAL);\n                    info.setUpdateDbState(DbState.NORMAL);\n                    final Cluster cluster = nameToCluster\n                            .get(ClusterNamespace.getClusterNameFromFullName(db.getAttachDb()));\n                    final BaseParam param = new BaseParam();\n                    param.addStringParam(db.getAttachDb());\n                    param.addLongParam(db.getId());\n                    cluster.removeLinkDb(param);\n                    info.setDropDbCluster(cluster.getName());\n                    info.setDropDbId(db.getId());\n                    info.setDropDbName(db.getAttachDb());\n                    editLog.logDropLinkDb(info);\n                    return;\n                }\n\n                if (db.getDbState() == DbState.LINK && dbName.equals(db.getFullName())) {\n                    \r\n                    \r\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                if (dbName.equals(db.getAttachDb()) && db.getDbState() == DbState.MOVE) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_CLUSTER_DB_STATE_LINK_OR_MIGRATE,\n                            ClusterNamespace.getNameFromFullName(dbName));\n                    return;\n                }\n\n                \r\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, stmt.isForceDrop());\n                if (!stmt.isForceDrop()) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            \r\n            idToDb.remove(db.getId());\n            fullNameToDb.remove(db.getFullName());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n            DropDbInfo info = new DropDbInfo(dbName, stmt.isForceDrop());\n            editLog.logDropDb(info);\n        } finally {\n            unlock();\n        }\n\n        LOG.info(\"finish drop database[{}], is force : {}\", dbName, stmt.isForceDrop());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2602,"status":"M"},{"authorDate":"2021-02-07 22:37:18","commitOrder":4,"curCode":"    public void replayDropDb(String dbName, boolean isForceDrop) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, isForceDrop, true);\n                if (!isForceDrop) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                } else {\n                    Catalog.getCurrentCatalog().eraseDatabase(db.getId(), false);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","date":"2021-02-07 22:37:18","endLine":2740,"groupId":"101370","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"replayDropDb","params":"(StringdbName@booleanisForceDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/54/18b37441dbeb9543af3164ad7f8aa9c0cc83df.src","preCode":"    public void replayDropDb(String dbName, boolean isForceDrop) throws DdlException {\n        tryLock(true);\n        try {\n            Database db = fullNameToDb.get(dbName);\n            db.writeLock();\n            try {\n                Set<String> tableNames = db.getTableNamesWithLock();\n                unprotectDropDb(db, isForceDrop);\n                if (!isForceDrop) {\n                    Catalog.getCurrentRecycleBin().recycleDatabase(db, tableNames);\n                }\n            } finally {\n                db.writeUnlock();\n            }\n\n            fullNameToDb.remove(dbName);\n            idToDb.remove(db.getId());\n            final Cluster cluster = nameToCluster.get(db.getClusterName());\n            cluster.removeDb(dbName, db.getId());\n        } finally {\n            unlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/catalog/Catalog.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":2716,"status":"M"}],"commitId":"c283bb3677d1738dcb0d16f2aa7ee14eaa21c4cc","commitMessage":"@@@ [Bug] Fix bug that not erase meta such as tablet when force drop db.  table.  partition (#5329)\n\n","date":"2021-02-07 22:37:18","modifiedFileCount":"4","status":"M","submitter":"caiconghui"}]
