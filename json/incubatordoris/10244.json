[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2020-07-21 12:42:42","endLine":294,"groupId":"7145","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/f14d37637544f6c709dd96362962f2e978251f.src","preCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2020-07-21 12:42:42","endLine":603,"groupId":"3840","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFinishTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/f14d37637544f6c709dd96362962f2e978251f.src","preCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-10-10 21:16:25","codes":[{"authorDate":"2020-10-10 21:16:25","commitOrder":2,"curCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2020-10-10 21:16:25","endLine":298,"groupId":"7145","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/65/864e5ea1b1c63355d249a799f0d314bd2ad32c.src","preCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2020-10-10 21:16:25","commitOrder":2,"curCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replica1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replica2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replica3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2020-10-10 21:16:25","endLine":607,"groupId":"4327","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFinishTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/65/864e5ea1b1c63355d249a799f0d314bd2ad32c.src","preCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLable2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"}],"commitId":"94a81e52c796150333c54838a889be01934983a4","commitMessage":"@@@Fix typo in our code (#4696)\n\n* fix typo in our code\n\n* fix\n\n* fix","date":"2020-10-10 21:16:25","modifiedFileCount":"176","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2021-01-13 10:27:58","endLine":297,"groupId":"7145","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c2/e3d6e14db786035c9df75ee87abd0d7f0c67cc.src","preCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replica1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replica2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replica3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2021-01-13 10:27:58","endLine":611,"groupId":"4327","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFinishTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c2/e3d6e14db786035c9df75ee87abd0d7f0c67cc.src","preCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replica1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replica2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replica3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2021-09-03 13:34:49","endLine":304,"groupId":"10244","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCommitTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bb/2725f3fe745b823b27986fe9fd86bb0a9960d3.src","preCode":"    public void testCommitTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n        \r\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getNextVersion());\n        \r\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        \r\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n        \r\n        tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        for (Replica replica : tablet.getReplicas()) {\n            assertEquals(CatalogTestUtil.testStartVersion, replica.getVersion());\n        }\n        Replica replcia1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replcia2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replcia3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getVersion());\n        assertEquals(-1, replcia1.getLastFailedVersion());\n        assertEquals(-1, replcia2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replcia3.getLastFailedVersion());\n\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, replcia1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replcia3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replica1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replica2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replica3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","date":"2021-09-03 13:34:49","endLine":620,"groupId":"10244","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testFinishTransactionWithOneFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bb/2725f3fe745b823b27986fe9fd86bb0a9960d3.src","preCode":"    public void testFinishTransactionWithOneFailed() throws UserException {\n        TransactionState transactionState = null;\n        Partition testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        Tablet tablet = testPartition.getIndex(CatalogTestUtil.testIndexId1).getTablet(CatalogTestUtil.testTabletId1);\n        FakeCatalog.setCatalog(masterCatalog);\n        long transactionId = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel1,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        \r\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId2);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId, transTablets);\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        FakeCatalog.setCatalog(masterCatalog);\n        Set<Long> errorReplicaIds = Sets.newHashSet();\n        errorReplicaIds.add(CatalogTestUtil.testReplicaId2);\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        Replica replica1 = tablet.getReplicaById(CatalogTestUtil.testReplicaId1);\n        Replica replica2 = tablet.getReplicaById(CatalogTestUtil.testReplicaId2);\n        Replica replica3 = tablet.getReplicaById(CatalogTestUtil.testReplicaId3);\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \r\n        long transactionId2 = masterTransMgr.beginTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(CatalogTestUtil.testTableId1),\n                CatalogTestUtil.testTxnLabel2,\n                transactionSource,\n                LoadJobSourceType.FRONTEND, Config.stream_load_default_timeout_second);\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1,\n                CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo3);\n        try {\n            masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n            Assert.fail();\n        } catch (TabletQuorumFailedException e) {\n            transactionState = masterTransMgr.getTransactionState(CatalogTestUtil.testDbId1, transactionId2);\n            \r\n            assertEquals(TransactionStatus.PREPARE, transactionState.getTransactionStatus());\n        }\n\n        \r\n        tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n        masterTransMgr.commitTransaction(CatalogTestUtil.testDbId1, Lists.newArrayList(testTable1), transactionId2, transTablets);\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        \r\n        assertEquals(TransactionStatus.COMMITTED, transactionState.getTransactionStatus());\n        \r\n        testPartition = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1)\n                .getPartition(CatalogTestUtil.testPartition1);\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 1, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        \r\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n\n        \r\n        errorReplicaIds = Sets.newHashSet();\n        masterTransMgr.finishTransaction(CatalogTestUtil.testDbId1, transactionId2, errorReplicaIds);\n        assertEquals(TransactionStatus.VISIBLE, transactionState.getTransactionStatus());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getVersion());\n        assertEquals(CatalogTestUtil.testStartVersion, replica3.getVersion());\n        assertEquals(-1, replica1.getLastFailedVersion());\n        assertEquals(-1, replica2.getLastFailedVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 1, replica3.getLastFailedVersion());\n\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica1.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica2.getLastSuccessVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 2, replica3.getLastSuccessVersion());\n        \r\n        assertEquals(CatalogTestUtil.testStartVersion + 2, testPartition.getVisibleVersion());\n        assertEquals(CatalogTestUtil.testStartVersion + 3, testPartition.getNextVersion());\n\n        transactionState = fakeEditLog.getTransaction(transactionId2);\n        FakeCatalog.setCatalog(slaveCatalog);\n        slaveTransMgr.replayUpsertTransactionState(transactionState);\n        assertTrue(CatalogTestUtil.compareCatalog(masterCatalog, slaveCatalog));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
