[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_56;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","date":"2020-07-21 12:42:42","endLine":146,"groupId":"6941","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationNormal","params":"(@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/80/f612982dbd51a6749d5cab6fb33b02e43896be.src","preCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_56;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","date":"2020-07-21 12:42:42","endLine":181,"groupId":"3116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationWithJobRemoved","params":"(@MockedMetaContextmetaContext@@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/80/f612982dbd51a6749d5cab6fb33b02e43896be.src","preCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-24 10:09:53","commitOrder":2,"curCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","date":"2021-01-24 10:09:53","endLine":146,"groupId":"4350","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationNormal","params":"(@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f6/a4e0c5c28d61bf60203d9873856080886d93e9.src","preCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_56;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","date":"2020-07-21 12:42:42","endLine":181,"groupId":"3116","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationWithJobRemoved","params":"(@MockedMetaContextmetaContext@@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/80/f612982dbd51a6749d5cab6fb33b02e43896be.src","preCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"7e61400e3c82ed0e4aad6824873d0fb113ec1a9e","commitMessage":"@@@[Load Parallel][1/3] Broker Load supports setting the load parallelism (#5277)\n\n* [Load] Broker Load supports setting the load parallelism\n\nSimilar to the parallel_fragment_exec_instance_num parameter. \nit allows the user to set the parallelism of the load execution plan\non a single node when the broker load is submitted.\n\neg:\n```\n...\nproperties (\n\"load_parallelism\" = \"4\";\n...\n)\n```\n\nThis parameter is currently only used to support the load parallelism setting. \nbut it cannot significantly improve the load speed for the time being.\nThe speed increase will be completed in subsequent code submissions.\nDocuments will also be added in subsequent submissions.\n\nThis PR also update the FE meta version.","date":"2021-01-24 10:09:53","modifiedFileCount":"21","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-04-23 09:47:30","codes":[{"authorDate":"2021-01-24 10:09:53","commitOrder":3,"curCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","date":"2021-01-24 10:09:53","endLine":146,"groupId":"4350","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationNormal","params":"(@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f6/a4e0c5c28d61bf60203d9873856080886d93e9.src","preCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2021-04-23 09:47:30","commitOrder":3,"curCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.streaming_label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","date":"2021-04-23 09:47:30","endLine":184,"groupId":"4351","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationWithJobRemoved","params":"(@MockedMetaContextmetaContext@@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d8/ae0a52827a7e300d4ca44535a169dc24458cbf.src","preCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"b93e8416885ac440e9c294c4bb2089e33bde788b","commitMessage":"@@@[Optimize] Remove expired txns in batch to avoid holding lock for too long (#5675)\n\nThis CL mainly changes:\n\n1.  Add a config to control the expire time of load job\n\n    Add a new FE config \"streaming_label_keep_max_second\" to control\n    the expire time of some high frequency load job such as INSERT and STREAM LOAD.\n\n2. Remove expired txn in batch to avoid holding transaction lock for a long time","date":"2021-04-23 09:47:30","modifiedFileCount":"15","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDbNullable(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTableNullable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","date":"2021-09-03 13:34:49","endLine":146,"groupId":"10435","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerializationNormal","params":"(@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d3/3f31027ced1a5dea4aaa20b93c94eb75caecbc.src","preCode":"    public void testSerializationNormal(@Mocked Catalog catalog,\n                                        @Injectable Database database,\n                                        @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n\n        Map<Long, LoadJob> loadJobs = Deencapsulation.getField(loadManager, fieldName);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n        Assert.assertEquals(loadJobs, newLoadJobs);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDbNullable(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTableNullable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.streaming_label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","date":"2021-09-03 13:34:49","endLine":184,"groupId":"10435","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerializationWithJobRemoved","params":"(@MockedMetaContextmetaContext@@MockedCatalogcatalog@@InjectableDatabasedatabase@@InjectableTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d3/3f31027ced1a5dea4aaa20b93c94eb75caecbc.src","preCode":"    public void testSerializationWithJobRemoved(@Mocked MetaContext metaContext,\n                                                @Mocked Catalog catalog,\n                                                @Injectable Database database,\n                                                @Injectable Table table) throws Exception {\n        new Expectations(){\n            {\n                catalog.getDb(anyLong);\n                minTimes = 0;\n                result = database;\n                database.getTable(anyLong);\n                minTimes = 0;\n                result = table;\n                table.getName();\n                minTimes = 0;\n                result = \"tablename\";\n                Catalog.getCurrentCatalogJournalVersion();\n                minTimes = 0;\n                result = FeMetaVersion.VERSION_CURRENT;\n            }\n        };\n\n        loadManager = new LoadManager(new LoadJobScheduler());\n        LoadJob job1 = new InsertLoadJob(\"job1\", 1L, 1L, System.currentTimeMillis(), \"\", \"\");\n        Deencapsulation.invoke(loadManager, \"addLoadJob\", job1);\n\n        \r\n        Config.streaming_label_keep_max_second = 1;\n        Thread.sleep(2000);\n\n        File file = serializeToFile(loadManager);\n\n        LoadManager newLoadManager = deserializeFromFile(file);\n        Map<Long, LoadJob> newLoadJobs = Deencapsulation.getField(newLoadManager, fieldName);\n\n        Assert.assertEquals(0, newLoadJobs.size());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/loadv2/LoadManagerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
