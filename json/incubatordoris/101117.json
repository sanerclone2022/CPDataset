[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED);\n                ++committedTaskNum;\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":772,"groupId":"4566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"afterCommitted","params":"(TransactionStatetxnState@booleantxnOperated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/88/d7f481ce5a78d25c1aed1f88c988c6812b7520.src","preCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED);\n                ++committedTaskNum;\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++abortedTaskNum;\n                if (txnStatusChangeReasonString != null) {\n                    TransactionState.TxnStatusChangeReason txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":904,"groupId":"4568","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"afterAborted","params":"(TransactionStatetxnState@booleantxnOperated@StringtxnStatusChangeReasonString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/88/d7f481ce5a78d25c1aed1f88c988c6812b7520.src","preCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++abortedTaskNum;\n                if (txnStatusChangeReasonString != null) {\n                    TransactionState.TxnStatusChangeReason txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-12-23 09:33:52","codes":[{"authorDate":"2020-12-23 09:33:52","commitOrder":2,"curCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED, null);\n                ++committedTaskNum;\n                LOG.debug(\"routine load task committed. task id: {}, job id: {}\", txnState.getLabel(), id);\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","date":"2020-12-23 09:33:52","endLine":897,"groupId":"1783","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"afterCommitted","params":"(TransactionStatetxnState@booleantxnOperated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f1/d858b76693d11af6ca3828e85c5697c347d936.src","preCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED);\n                ++committedTaskNum;\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":874,"status":"M"},{"authorDate":"2020-12-23 09:33:52","commitOrder":2,"curCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++abortedTaskNum;\n                TransactionState.TxnStatusChangeReason txnStatusChangeReason = null;\n                if (txnStatusChangeReasonString != null) {\n                    txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED, txnStatusChangeReason);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","date":"2020-12-23 09:33:52","endLine":1030,"groupId":"1785","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"afterAborted","params":"(TransactionStatetxnState@booleantxnOperated@StringtxnStatusChangeReasonString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f1/d858b76693d11af6ca3828e85c5697c347d936.src","preCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++abortedTaskNum;\n                if (txnStatusChangeReasonString != null) {\n                    TransactionState.TxnStatusChangeReason txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":973,"status":"M"}],"commitId":"c57145b4c2633c0152fc02995c8c1912f59d25a6","commitMessage":"@@@[Bug] Fix bug that routine load may lost some data (#5093)\n\nIn the previous implementation.  whether a subtask is in commit or abort state. \nwe will try to update the job progress.  such as the consumed offset of kafka.\nUnder normal circumstances.  the aborted transaction does not consume any data. \nand all progress is 0.  so even we update the progress.  the progress will remain\nunchanged.\nHowever.  in the case of high cluster load.  the subtask may fail half of the execution on the BE side.\nAt this time.  although the task is aborted.  part of the progress is updated.\nCause the next subtask to skip these data for consumption.  resulting in data loss.","date":"2020-12-23 09:33:52","modifiedFileCount":"12","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-07-17 10:43:59","codes":[{"authorDate":"2021-07-17 10:43:59","commitOrder":3,"curCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED, null);\n                ++this.jobStatistic.committedTaskNum;\n                LOG.debug(\"routine load task committed. task id: {}, job id: {}\", txnState.getLabel(), id);\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","date":"2021-07-17 10:43:59","endLine":899,"groupId":"101117","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"afterCommitted","params":"(TransactionStatetxnState@booleantxnOperated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b7083216b684115cdb5aeed4c05d4f11a80d02.src","preCode":"    public void afterCommitted(TransactionState txnState, boolean txnOperated) throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.COMMITTED, null);\n                ++committedTaskNum;\n                LOG.debug(\"routine load task committed. task id: {}, job id: {}\", txnState.getLabel(), id);\n            }\n        } catch (Throwable e) {\n            LOG.warn(\"after committed failed\", e);\n            String errmsg = \"be \" + taskBeId + \" commit task failed \" + txnState.getLabel()\n                    + \" with error \" + e.getMessage()\n                    + \" while transaction \" + txnState.getTransactionId() + \" has been committed\";\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.INTERNAL_ERR, errmsg), false );\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after committed: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":876,"status":"M"},{"authorDate":"2021-07-17 10:43:59","commitOrder":3,"curCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++this.jobStatistic.abortedTaskNum;\n                TransactionState.TxnStatusChangeReason txnStatusChangeReason = null;\n                if (txnStatusChangeReasonString != null) {\n                    txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED, txnStatusChangeReason);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","date":"2021-07-17 10:43:59","endLine":1032,"groupId":"101117","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"afterAborted","params":"(TransactionStatetxnState@booleantxnOperated@StringtxnStatusChangeReasonString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b7083216b684115cdb5aeed4c05d4f11a80d02.src","preCode":"    public void afterAborted(TransactionState txnState, boolean txnOperated, String txnStatusChangeReasonString)\n            throws UserException {\n        long taskBeId = -1L;\n        try {\n            if (txnOperated) {\n                \r\n                Optional<RoutineLoadTaskInfo> routineLoadTaskInfoOptional = routineLoadTaskInfoList.stream().filter(\n                        entity -> entity.getTxnId() == txnState.getTransactionId()).findFirst();\n                if (!routineLoadTaskInfoOptional.isPresent()) {\n                    \r\n                    return;\n                }\n                RoutineLoadTaskInfo routineLoadTaskInfo = routineLoadTaskInfoOptional.get();\n                taskBeId = routineLoadTaskInfo.getBeId();\n                \r\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(new LogBuilder(LogKey.ROUTINE_LOAD_TASK, txnState.getLabel())\n                                      .add(\"txn_id\", txnState.getTransactionId())\n                                      .add(\"msg\", \"txn abort with reason \" + txnStatusChangeReasonString)\n                                      .build());\n                }\n                ++abortedTaskNum;\n                TransactionState.TxnStatusChangeReason txnStatusChangeReason = null;\n                if (txnStatusChangeReasonString != null) {\n                    txnStatusChangeReason =\n                            TransactionState.TxnStatusChangeReason.fromString(txnStatusChangeReasonString);\n                    if (txnStatusChangeReason != null) {\n                        switch (txnStatusChangeReason) {\n                            case OFFSET_OUT_OF_RANGE:\n                            case PAUSE:\n                                String msg = \"be \" + taskBeId + \" abort task \"\n                                    + \"with reason: \" + txnStatusChangeReasonString;\n                                updateState(JobState.PAUSED,\n                                        new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                                        false );\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                    \r\n                }\n                \r\n                executeTaskOnTxnStatusChanged(routineLoadTaskInfo, txnState, TransactionStatus.ABORTED, txnStatusChangeReason);\n            }\n        } catch (Exception e) {\n            String msg = \"be \" + taskBeId + \" abort task \" + txnState.getLabel() + \" failed with error \" + e.getMessage();\n            updateState(JobState.PAUSED, new ErrorReason(InternalErrorCode.TASKS_ABORT_ERR, msg),\n                        false );\n            LOG.warn(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, id)\n                             .add(\"task_id\", txnState.getLabel())\n                             .add(\"error_msg\", \"change job state to paused when task has been aborted with error \" + e.getMessage())\n                             .build(), e);\n        } finally {\n            writeUnlock();\n            LOG.debug(\"unlock write lock of routine load job after aborted: {}\", id);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":975,"status":"M"}],"commitId":"e39e1571ecdbe907fc755c01c268784c64c2377b","commitMessage":"@@@[Feature] Add an indicator called errorRowsAfterResumed to distinguish between ? (#6092)\n\n1. [enhancement] add an indicator called errorRowsAfterResumed to distinguish between totalErrorRows(called errorRows) and errorRowsAfterResumed. (#6092)\n2. [Refactor] separate some indicators from RoutineLoadJob class to avoid changing FeMetaVersion while modifying indicators of RoutineLoadJob.(#6092)","date":"2021-07-17 10:43:59","modifiedFileCount":"6","status":"M","submitter":"Henry2SS"}]
