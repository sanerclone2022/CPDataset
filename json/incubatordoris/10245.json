[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2020-07-21 12:42:42","endLine":361,"groupId":"3735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/f14d37637544f6c709dd96362962f2e978251f.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2020-07-21 12:42:42","endLine":428,"groupId":"3735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/f14d37637544f6c709dd96362962f2e978251f.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-10-10 21:16:25","commitOrder":2,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2020-10-10 21:16:25","endLine":365,"groupId":"3735","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/65/864e5ea1b1c63355d249a799f0d314bd2ad32c.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2020-07-21 12:42:42","endLine":428,"groupId":"3735","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/28/f14d37637544f6c709dd96362962f2e978251f.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"N"}],"commitId":"94a81e52c796150333c54838a889be01934983a4","commitMessage":"@@@Fix typo in our code (#4696)\n\n* fix typo in our code\n\n* fix\n\n* fix","date":"2020-10-10 21:16:25","modifiedFileCount":"176","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2020-12-23 09:33:52","codes":[{"authorDate":"2020-12-23 09:33:52","commitOrder":3,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2020-12-23 09:33:52","endLine":361,"groupId":"3735","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ac/736dc293ae191c37f00df46108059d45836f35.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-12-23 09:33:52","commitOrder":3,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        \r\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2020-12-23 09:33:52","endLine":429,"groupId":"3735","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ac/736dc293ae191c37f00df46108059d45836f35.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 10L);\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(11L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"}],"commitId":"c57145b4c2633c0152fc02995c8c1912f59d25a6","commitMessage":"@@@[Bug] Fix bug that routine load may lost some data (#5093)\n\nIn the previous implementation.  whether a subtask is in commit or abort state. \nwe will try to update the job progress.  such as the consumed offset of kafka.\nUnder normal circumstances.  the aborted transaction does not consume any data. \nand all progress is 0.  so even we update the progress.  the progress will remain\nunchanged.\nHowever.  in the case of high cluster load.  the subtask may fail half of the execution on the BE side.\nAt this time.  although the task is aborted.  part of the progress is updated.\nCause the next subtask to skip these data for consumption.  resulting in data loss.","date":"2020-12-23 09:33:52","modifiedFileCount":"12","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":4,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2021-01-13 10:27:58","endLine":365,"groupId":"3735","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c2/e3d6e14db786035c9df75ee87abd0d7f0c67cc.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":4,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        \r\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2021-01-13 10:27:58","endLine":434,"groupId":"3735","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c2/e3d6e14db786035c9df75ee87abd0d7f0c67cc.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        masterTransMgr.commitTransaction(1L, 1L, transTablets, txnCommitAttachment);\n\n        \r\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-07-17 10:43:59","codes":[{"authorDate":"2021-07-17 10:43:59","commitOrder":5,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2021-07-17 10:43:59","endLine":373,"groupId":"3735","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/fa5b7d7e76eeff22de4523c78e8f71ff1d8ca4.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2021-07-17 10:43:59","commitOrder":5,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        \r\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2021-07-17 10:43:59","endLine":443,"groupId":"3735","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6e/fa5b7d7e76eeff22de4523c78e8f71ff1d8ca4.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        \r\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(routineLoadJob, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"e39e1571ecdbe907fc755c01c268784c64c2377b","commitMessage":"@@@[Feature] Add an indicator called errorRowsAfterResumed to distinguish between ? (#6092)\n\n1. [enhancement] add an indicator called errorRowsAfterResumed to distinguish between totalErrorRows(called errorRows) and errorRowsAfterResumed. (#6092)\n2. [Refactor] separate some indicators from RoutineLoadJob class to avoid changing FeMetaVersion while modifying indicators of RoutineLoadJob.(#6092)","date":"2021-07-17 10:43:59","modifiedFileCount":"6","status":"M","submitter":"Henry2SS"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":6,"curCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","date":"2021-09-03 13:34:49","endLine":373,"groupId":"10245","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testCommitRoutineLoadTransaction","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedKafkaConsumerkafkaConsumer@@MockedEditLogeditLog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bb/2725f3fe745b823b27986fe9fd86bb0a9960d3.src","preCode":"    public void testCommitRoutineLoadTransaction(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked KafkaConsumer kafkaConsumer,\n            @Mocked EditLog editLog)\n            throws UserException {\n        FakeCatalog.setCatalog(masterCatalog);\n\n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\",\n                \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"default_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        \r\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(1);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 100L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n\n        Assert.assertEquals(Long.valueOf(101), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(1), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(101L), ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        \r\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":6,"curCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDbOrMetaException(CatalogTestUtil.testDbId1).getTableOrMetaException(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        \r\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","date":"2021-09-03 13:34:49","endLine":443,"groupId":"10245","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testCommitRoutineLoadTransactionWithErrorMax","params":"(@InjectableTabletCommitInfotabletCommitInfo@@MockedEditLogeditLog@@MockedKafkaConsumerkafkaConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bb/2725f3fe745b823b27986fe9fd86bb0a9960d3.src","preCode":"    public void testCommitRoutineLoadTransactionWithErrorMax(@Injectable TabletCommitInfo tabletCommitInfo,\n            @Mocked EditLog editLog,\n            @Mocked KafkaConsumer kafkaConsumer)\n            throws UserException {\n\n        FakeCatalog.setCatalog(masterCatalog);\n        \n        TabletCommitInfo tabletCommitInfo1 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId1);\n        TabletCommitInfo tabletCommitInfo2 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId2);\n        TabletCommitInfo tabletCommitInfo3 = new TabletCommitInfo(CatalogTestUtil.testTabletId1, CatalogTestUtil.testBackendId3);\n        List<TabletCommitInfo> transTablets = Lists.newArrayList();\n        transTablets.add(tabletCommitInfo1);\n        transTablets.add(tabletCommitInfo2);\n        transTablets.add(tabletCommitInfo3);\n\n        KafkaRoutineLoadJob routineLoadJob = new KafkaRoutineLoadJob(1L, \"test\", \"default_cluster\", 1L, 1L, \"host:port\", \"topic\");\n        List<RoutineLoadTaskInfo> routineLoadTaskInfoList = Deencapsulation.getField(routineLoadJob, \"routineLoadTaskInfoList\");\n        Map<Integer, Long> partitionIdToOffset = Maps.newHashMap();\n        partitionIdToOffset.put(1, 0L);\n        KafkaTaskInfo routineLoadTaskInfo = new KafkaTaskInfo(UUID.randomUUID(), 1L, \"defualt_cluster\", 20000,\n                partitionIdToOffset);\n        Deencapsulation.setField(routineLoadTaskInfo, \"txnId\", 1L);\n        routineLoadTaskInfoList.add(routineLoadTaskInfo);\n        TransactionState transactionState = new TransactionState(1L, Lists.newArrayList(1L), 1L, \"label\", null,\n                LoadJobSourceType.ROUTINE_LOAD_TASK, new TxnCoordinator(TxnSourceType.BE, \"be1\"), routineLoadJob.getId(),\n                Config.stream_load_default_timeout_second);\n        transactionState.setTransactionStatus(TransactionStatus.PREPARE);\n        masterTransMgr.getCallbackFactory().addCallback(routineLoadJob);\n        Map<Long, TransactionState> idToTransactionState = Maps.newHashMap();\n        idToTransactionState.put(1L, transactionState);\n        Deencapsulation.setField(routineLoadJob, \"maxErrorNum\", 10);\n        Map<Integer, Long> oldKafkaProgressMap = Maps.newHashMap();\n        oldKafkaProgressMap.put(1, 0L);\n        KafkaProgress oldkafkaProgress = new KafkaProgress();\n        Deencapsulation.setField(oldkafkaProgress, \"partitionIdToOffset\", oldKafkaProgressMap);\n        Deencapsulation.setField(routineLoadJob, \"progress\", oldkafkaProgress);\n        Deencapsulation.setField(routineLoadJob, \"state\", RoutineLoadJob.JobState.RUNNING);\n\n        TRLTaskTxnCommitAttachment rlTaskTxnCommitAttachment = new TRLTaskTxnCommitAttachment();\n        rlTaskTxnCommitAttachment.setId(new TUniqueId());\n        rlTaskTxnCommitAttachment.setLoadedRows(100);\n        rlTaskTxnCommitAttachment.setFilteredRows(11);\n        rlTaskTxnCommitAttachment.setJobId(Deencapsulation.getField(routineLoadJob, \"id\"));\n        rlTaskTxnCommitAttachment.setLoadSourceType(TLoadSourceType.KAFKA);\n        TKafkaRLTaskProgress tKafkaRLTaskProgress = new TKafkaRLTaskProgress();\n        Map<Integer, Long> kafkaProgress = Maps.newHashMap();\n        kafkaProgress.put(1, 110L); \r\n        tKafkaRLTaskProgress.setPartitionCmtOffset(kafkaProgress);\n        rlTaskTxnCommitAttachment.setKafkaRLTaskProgress(tKafkaRLTaskProgress);\n        TxnCommitAttachment txnCommitAttachment = new RLTaskTxnCommitAttachment(rlTaskTxnCommitAttachment);\n\n        RoutineLoadManager routineLoadManager = new RoutineLoadManager();\n        routineLoadManager.addRoutineLoadJob(routineLoadJob, \"db\");\n\n        Deencapsulation.setField(masterTransMgr.getDatabaseTransactionMgr(CatalogTestUtil.testDbId1), \"idToRunningTransactionState\", idToTransactionState);\n        Table testTable1 = masterCatalog.getDb(CatalogTestUtil.testDbId1).getTable(CatalogTestUtil.testTableId1);\n        masterTransMgr.commitTransaction(1L, Lists.newArrayList(testTable1), 1L, transTablets, txnCommitAttachment);\n\n        \r\n        RoutineLoadStatistic jobStatistic =  Deencapsulation.getField(routineLoadJob,\"jobStatistic\");\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentTotalRows\"));\n        Assert.assertEquals(Long.valueOf(0), Deencapsulation.getField(jobStatistic, \"currentErrorRows\"));\n        Assert.assertEquals(Long.valueOf(111L),\n                ((KafkaProgress) routineLoadJob.getProgress()).getOffsetByPartition(1));\n        \r\n        \r\n        Assert.assertEquals(RoutineLoadJob.JobState.PAUSED, routineLoadJob.getState());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/transaction/GlobalTransactionMgrTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
