[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void analyze(Analyzer analyzer) throws AnalysisException {\n        dbTableName.analyze(analyzer);\n\n        \r\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbTableName.getDb(),\n                                                                dbTableName.getTbl(),\n                                                                PrivPredicate.ALTER)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL ALTER TABLE\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                dbTableName.getTbl());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":82,"groupId":"6819","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"analyze","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/72/216c3e9a47d7bfddf5ea741932ec0ddcbbfb87.src","preCode":"    public void analyze(Analyzer analyzer) throws AnalysisException {\n        dbTableName.analyze(analyzer);\n\n        \r\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbTableName.getDb(),\n                                                                dbTableName.getTbl(),\n                                                                PrivPredicate.ALTER)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL ALTER TABLE\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                dbTableName.getTbl());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CancelAlterTableStmt.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(schema);\n\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        for (Column column : schema) {\n            \r\n            List<String> extras = Lists.newArrayList();\n            if (column.getAggregationType() != null) {\n                extras.add(column.getAggregationType().name());\n            }\n            if (bfColumns != null && bfColumns.contains(column.getName())) {\n                extras.add(\"BLOOM_FILTER\");\n            }\n            String extraStr = StringUtils.join(extras, \",\");\n\n            List<String> rowList = Arrays.asList(column.getName(),\n                                                 column.getOriginType().toString(),\n                                                 column.isAllowNull() ? \"Yes\" : \"No\",\n                                                 ((Boolean) column.isKey()).toString(),\n                                                 column.getDefaultValue() == null\n                                                         ? FeConstants.null_string : column.getDefaultValue(),\n                                                 extraStr);\n            result.addRow(rowList);\n        }\n        return result;\n    }\n","date":"2020-07-21 12:42:42","endLine":80,"groupId":"4105","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/73/b1f7989d882505b5ced72c03b9b5479c7a99a1.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(schema);\n\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        for (Column column : schema) {\n            \r\n            List<String> extras = Lists.newArrayList();\n            if (column.getAggregationType() != null) {\n                extras.add(column.getAggregationType().name());\n            }\n            if (bfColumns != null && bfColumns.contains(column.getName())) {\n                extras.add(\"BLOOM_FILTER\");\n            }\n            String extraStr = StringUtils.join(extras, \",\");\n\n            List<String> rowList = Arrays.asList(column.getName(),\n                                                 column.getOriginType().toString(),\n                                                 column.isAllowNull() ? \"Yes\" : \"No\",\n                                                 ((Boolean) column.isKey()).toString(),\n                                                 column.getDefaultValue() == null\n                                                         ? FeConstants.null_string : column.getDefaultValue(),\n                                                 extraStr);\n            result.addRow(rowList);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/IndexSchemaProcNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-08-26 10:52:56","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void analyze(Analyzer analyzer) throws AnalysisException {\n        dbTableName.analyze(analyzer);\n\n        \r\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbTableName.getDb(),\n                                                                dbTableName.getTbl(),\n                                                                PrivPredicate.ALTER)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL ALTER TABLE\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                dbTableName.getTbl());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":82,"groupId":"10731","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"analyze","params":"(Analyzeranalyzer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/72/216c3e9a47d7bfddf5ea741932ec0ddcbbfb87.src","preCode":"    public void analyze(Analyzer analyzer) throws AnalysisException {\n        dbTableName.analyze(analyzer);\n\n        \r\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbTableName.getDb(),\n                                                                dbTableName.getTbl(),\n                                                                PrivPredicate.ALTER)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL ALTER TABLE\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                dbTableName.getTbl());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/analysis/CancelAlterTableStmt.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-08-26 10:52:56","commitOrder":2,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(schema);\n\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        for (Column column : schema) {\n            \r\n            List<String> extras = Lists.newArrayList();\n            if (column.getAggregationType() != null) {\n                extras.add(column.getAggregationType().name());\n            }\n            if (bfColumns != null && bfColumns.contains(column.getName())) {\n                extras.add(\"BLOOM_FILTER\");\n            }\n            String extraStr = StringUtils.join(extras, \",\");\n\n            List<String> rowList = Arrays.asList(column.getDisplayName(),\n                                                 column.getOriginType().toString(),\n                                                 column.isAllowNull() ? \"Yes\" : \"No\",\n                                                 ((Boolean) column.isKey()).toString(),\n                                                 column.getDefaultValue() == null\n                                                         ? FeConstants.null_string : column.getDefaultValue(),\n                                                 extraStr);\n            result.addRow(rowList);\n        }\n        return result;\n    }\n","date":"2020-08-26 10:52:56","endLine":80,"groupId":"10731","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/73/f626af2bb62b3d2d5895be82f863d6be84ee1b.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(schema);\n\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        for (Column column : schema) {\n            \r\n            List<String> extras = Lists.newArrayList();\n            if (column.getAggregationType() != null) {\n                extras.add(column.getAggregationType().name());\n            }\n            if (bfColumns != null && bfColumns.contains(column.getName())) {\n                extras.add(\"BLOOM_FILTER\");\n            }\n            String extraStr = StringUtils.join(extras, \",\");\n\n            List<String> rowList = Arrays.asList(column.getName(),\n                                                 column.getOriginType().toString(),\n                                                 column.isAllowNull() ? \"Yes\" : \"No\",\n                                                 ((Boolean) column.isKey()).toString(),\n                                                 column.getDefaultValue() == null\n                                                         ? FeConstants.null_string : column.getDefaultValue(),\n                                                 extraStr);\n            result.addRow(rowList);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/IndexSchemaProcNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"78e1615db9df71f5b4ad22873012c73ee167ad5f","commitMessage":"@@@Show column display name on `Show Proc` stmt (#4446)\n\nThe mv column with bitmap_union function is named `mv_bitmap_union_k1` inside of Doris.\nBut this column name should not be shown to user in `Show Proc` stmt.\nInstead.  using define expr is easier to understand.\n\nChange-Id: Id07274fef9b3a97c97f1635dd3d6cf7b09561c1e","date":"2020-08-26 10:52:56","modifiedFileCount":"2","status":"M","submitter":"EmmyMiao87"}]
