[{"authorTime":"2020-09-16 15:02:59","codes":[{"authorDate":"2020-09-16 15:02:59","commitOrder":1,"curCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.writeLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                OlapTable olapTable = (OlapTable) table;\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                db.writeUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2020-09-16 15:02:59","endLine":91,"groupId":"823","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/42/9d1d0a8c9bd52c7e2614d6f81cee451f49d935.src","preCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.writeLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                OlapTable olapTable = (OlapTable) table;\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                db.writeUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableRowCountAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2020-09-16 15:02:59","commitOrder":1,"curCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2020-09-16 15:02:59","endLine":113,"groupId":"823","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"schema","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/84/0770b942d334d27c1e3ad7369fb667a46f8a0d.src","preCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"17a8b57018ac76eb5bf19c35e0c3fce7f5bbdd26","commitMessage":"@@@[UI Part 3] New implemented HTTP RESTful API of Frontend (#4596)\n\nUse spring mvc rest to replace the original netty http rest\nCreated a new package `org/apache/doris/httpv2`. \nand the origin implementations under `org/apache/doris/http` remain unchanged.\n\nThis part of the code will not be used at present.  so it will not affect existing functions.\n\nAPI document can be found in #4584 \n\nProposal #4308","date":"2020-09-16 15:02:59","modifiedFileCount":"2","status":"B","submitter":"???"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":2,"curCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            OlapTable olapTable = null;\n            try {\n                olapTable = (OlapTable) db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n\n            olapTable.readLock();\n            try {\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                olapTable.readLock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-01-13 10:27:58","endLine":89,"groupId":"5501","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/53/4e7741ad12389806f95998611d3dcaa49858dc.src","preCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.writeLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                OlapTable olapTable = (OlapTable) table;\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                db.writeUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableRowCountAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":2,"curCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-01-13 10:27:58","endLine":110,"groupId":"5501","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"schema","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a6/8abdb439c2fbb2c0f922a58ea6f649f569e6b0.src","preCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            db.readLock();\n            try {\n                Table table = db.getTable(tblName);\n                if (table == null) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \" + \"does not exists\");\n                }\n                \r\n                if (!(table instanceof OlapTable)) {\n                    return ResponseEntityBuilder.okWithCommonError(\"Table [\" + tblName + \"] \"\n                            + \"is not a OlapTable, only support OlapTable currently\");\n                }\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                db.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-07-07 10:26:32","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            OlapTable olapTable = null;\n            try {\n                olapTable = (OlapTable) db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n\n            olapTable.readLock();\n            try {\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                olapTable.readLock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-01-13 10:27:58","endLine":89,"groupId":"5501","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"count","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/53/4e7741ad12389806f95998611d3dcaa49858dc.src","preCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            OlapTable olapTable = null;\n            try {\n                olapTable = (OlapTable) db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n\n            olapTable.readLock();\n            try {\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                olapTable.readLock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableRowCountAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2021-07-07 10:26:32","commitOrder":3,"curCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-07-07 10:26:32","endLine":110,"groupId":"6150","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"schema","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a7/76fce96bb209b2c0204f3fa7d1944153c5a7aa.src","preCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2 || primitiveType == PrimitiveType.DECIMAL) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"739c0268ff94fe1c697fd8cc8642d3bb5162a714","commitMessage":"@@@[refactor] Remove decimal v1 related code from code base (#6079)\n\nremove ALL DECIMAL V1 type code ? this is a part of #6073","date":"2021-07-07 10:26:32","modifiedFileCount":"35","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            OlapTable olapTable;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                olapTable = db.getTableOrMetaException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n\n            olapTable.readLock();\n            try {\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                olapTable.readLock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-09-03 13:34:49","endLine":86,"groupId":"101417","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"count","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8d/9d7f9d6b3a057b6dc802f7e37fd3219290bb63.src","preCode":"    public Object count(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(4);\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            OlapTable olapTable = null;\n            try {\n                olapTable = (OlapTable) db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n\n            olapTable.readLock();\n            try {\n                resultMap.put(\"status\", 200);\n                resultMap.put(\"size\", olapTable.proximateRowCount());\n            } finally {\n                olapTable.readLock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableRowCountAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Table table;\n            try {\n                Database db = Catalog.getCurrentCatalog().getDbOrMetaException(fullDbName);\n                table = db.getTableOrMetaException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","date":"2021-09-03 13:34:49","endLine":107,"groupId":"101417","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"schema","params":"(@PathVariable(value=DB_KEY)finalStringdbName@@PathVariable(value=TABLE_KEY)finalStringtblName@HttpServletRequestrequest@HttpServletResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/85/6abc1d6efa1f60e9f6be296dfdb2b768fec40c.src","preCode":"    protected Object schema(\n            @PathVariable(value = DB_KEY) final String dbName,\n            @PathVariable(value = TABLE_KEY) final String tblName,\n            HttpServletRequest request, HttpServletResponse response) {\n        executeCheckPassword(request, response);\n        \r\n        Map<String, Object> resultMap = new HashMap<>(2);\n\n        try {\n            String fullDbName = getFullDbName(dbName);\n            \r\n            checkTblAuth(ConnectContext.get().getCurrentUserIdentity(), fullDbName, tblName, PrivPredicate.SELECT);\n            Database db = Catalog.getCurrentCatalog().getDb(fullDbName);\n            if (db == null) {\n                return ResponseEntityBuilder.okWithCommonError(\"Database [\" + dbName + \"] \" + \"does not exists\");\n            }\n            Table table = null;\n            try {\n                table = db.getTableOrThrowException(tblName, Table.TableType.OLAP);\n            } catch (MetaNotFoundException e) {\n                return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n            }\n            table.readLock();\n            try {\n                try {\n                    List<Column> columns = table.getBaseSchema();\n                    List<Map<String, String>> propList = new ArrayList(columns.size());\n                    for (Column column : columns) {\n                        Map<String, String> baseInfo = new HashMap<>(2);\n                        Type colType = column.getOriginType();\n                        PrimitiveType primitiveType = colType.getPrimitiveType();\n                        if (primitiveType == PrimitiveType.DECIMALV2) {\n                            ScalarType scalarType = (ScalarType) colType;\n                            baseInfo.put(\"precision\", scalarType.getPrecision() + \"\");\n                            baseInfo.put(\"scale\", scalarType.getScalarScale() + \"\");\n                        }\n                        baseInfo.put(\"type\", primitiveType.toString());\n                        baseInfo.put(\"comment\", column.getComment());\n                        baseInfo.put(\"name\", column.getDisplayName());\n                        propList.add(baseInfo);\n                    }\n                    resultMap.put(\"status\", 200);\n                    resultMap.put(\"properties\", propList);\n                } catch (Exception e) {\n                    \r\n                    return ResponseEntityBuilder.okWithCommonError(e.getMessage());\n                }\n            } finally {\n                table.readUnlock();\n            }\n        } catch (DorisHttpException e) {\n            \r\n            resultMap.put(\"status\", e.getCode().code());\n            resultMap.put(\"exception\", e.getMessage());\n        }\n\n        return ResponseEntityBuilder.ok(resultMap);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/httpv2/rest/TableSchemaAction.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
