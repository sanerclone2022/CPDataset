[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n        \n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":415,"groupId":"8026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finishRealtimePush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/46/a90edb88cb71fe23700e4e63a564b25e5ad333.src","preCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n        \n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersion_hash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequest_version()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequest_version() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":620,"groupId":"7821","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finishPush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/46/a90edb88cb71fe23700e4e63a564b25e5ad333.src","preCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersion_hash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequest_version()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequest_version() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-08-28 13:28:11","codes":[{"authorDate":"2020-08-28 13:28:11","commitOrder":2,"curCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n        \n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-08-28 13:28:11","endLine":426,"groupId":"8026","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finishRealtimePush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d7/8b1e9b4c0da4b7ea189fb2554d4b3a537b75b5.src","preCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n        \n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2020-08-28 13:28:11","commitOrder":2,"curCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-08-28 13:28:11","endLine":631,"groupId":"7821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finishPush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d7/8b1e9b4c0da4b7ea189fb2554d4b3a537b75b5.src","preCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinish_tablet_infos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersion_hash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTablet_id() == finishTabletInfos.get(1).getTablet_id()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTablet_id()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReport_version();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequest_version()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequest_version() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"3b7614e174d3999e18056d6d741641d664c52908","commitMessage":"@@@[Refactor] Use camelCase in thrift generated java sources (#4443)\n\nUse camelCase in thrift generated java sources to make us fe's code style is more unified","date":"2020-08-28 13:28:11","modifiedFileCount":"109","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":427,"groupId":"6917","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"finishRealtimePush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/72/8089dce198ca46ad7003dc0bf3e4e7eb28c56b.src","preCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n        \n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":634,"groupId":"6919","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finishPush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/72/8089dce198ca46ad7003dc0bf3e4e7eb28c56b.src","preCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"cannot find table[\" + tableId + \"] when push finished\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-01-30 20:33:34","codes":[{"authorDate":"2021-01-30 20:33:34","commitOrder":4,"curCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(partitionId, pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-01-30 20:33:34","endLine":426,"groupId":"6917","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"finishRealtimePush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/3a/8d131fc7e33ec2938ca03d24014ea4abf9bbf9.src","preCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2021-01-30 20:33:34","commitOrder":4,"curCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-01-30 20:33:34","endLine":617,"groupId":"6919","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finishPush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/3a/8d131fc7e33ec2938ca03d24014ea4abf9bbf9.src","preCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n\n                if (pushTask.isSyncDelete()) {\n                    pushTask.countDownLatch(backendId, signature);\n                } else {\n                    long asyncDeleteJobId = pushTask.getAsyncDeleteJobId();\n                    Preconditions.checkState(asyncDeleteJobId != -1);\n                    AsyncDeleteJob job = Catalog.getCurrentCatalog().getLoadInstance().getAsyncDeleteJob(asyncDeleteJobId);\n                    if (job == null) {\n                        throw new MetaNotFoundException(\"cannot find async delete job, job[\" + asyncDeleteJobId + \"]\");\n                    }\n\n                    Preconditions.checkState(!infos.isEmpty());\n                    for (ReplicaPersistInfo info : infos) {\n                        job.addReplicaPersistInfos(info);\n                    }\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"de57667d6dc7ddc32fabd0f5c3299623ab9895d1","commitMessage":"@@@[Delete] Support delete with multi partitions (#5252)\n\nSupport delete statement like:\n1. delete from table partitions(p1.  p2) where xxx;  // apply to p1.  p2\n2. delete from table where xxx;     // apply to all partitions\n\nAlso remove code about the deprecated sync/async delete job.\n\nThis CL changes FE meta version to 94","date":"2021-01-30 20:33:34","modifiedFileCount":"27","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":5,"curCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDbNullable(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTableNullable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(partitionId, pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":429,"groupId":"10972","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"finishRealtimePush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/55/de34813ba1551ab68794cd34c0ead8384d287b.src","preCode":"    private void finishRealtimePush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        long transactionId = ((PushTask) task).getTransactionId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            MaterializedIndex pushIndex = partition.getIndex(pushIndexId);\n            if (pushIndex == null) {\n                \r\n                \r\n                throw new MetaNotFoundException(\"cannot find index[\" + pushIndex + \"] when push finished\");\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    tTabletInfo -> tTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n\n            \r\n            \r\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        job.addFinishedReplica(replica);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                DeleteJob deleteJob = Catalog.getCurrentCatalog().getDeleteHandler().getDeleteJob(transactionId);\n                if (deleteJob == null) {\n                    throw new MetaNotFoundException(\"cannot find delete job, job[\" + transactionId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition,\n                            backendId, tabletId, tabletMeta.getIndexId());\n                    if (replica != null) {\n                        deleteJob.addFinishedReplica(partitionId, pushTabletId, replica);\n                        pushTask.countDownLatch(backendId, pushTabletId);\n                    }\n                }\n            } else if (pushTask.getPushType() == TPushType.LOAD_V2) {\n                long loadJobId = pushTask.getLoadJobId();\n                org.apache.doris.load.loadv2.LoadJob job = Catalog.getCurrentCatalog().getLoadManager().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                for (int i = 0; i < tabletMetaList.size(); i++) {\n                    TabletMeta tabletMeta = tabletMetaList.get(i);\n                    checkReplica(finishTabletInfos.get(i), tabletMeta);\n                    long tabletId = tabletIds.get(i);\n                    Replica replica = findRelatedReplica(olapTable, partition, backendId, tabletId, tabletMeta.getIndexId());\n                    \r\n                    if (replica != null) {\n                        ((SparkLoadJob) job).addFinishedReplica(replica.getId(), pushTabletId, backendId);\n                    }\n                }\n            }\n            \n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":5,"curCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDbNullable(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTableNullable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":619,"groupId":"10972","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"finishPush","params":"(AgentTasktask@TFinishTaskRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/55/de34813ba1551ab68794cd34c0ead8384d287b.src","preCode":"    private void finishPush(AgentTask task, TFinishTaskRequest request) {\n        List<TTabletInfo> finishTabletInfos = request.getFinishTabletInfos();\n        Preconditions.checkState(finishTabletInfos != null && !finishTabletInfos.isEmpty());\n        \n        PushTask pushTask = (PushTask) task;\n        \r\n        \r\n        \r\n        long finishVersion = finishTabletInfos.get(0).getVersion();\n        long finishVersionHash = finishTabletInfos.get(0).getVersionHash();\n        long taskVersion = pushTask.getVersion();\n        if (finishVersion != taskVersion) {\n            LOG.debug(\"finish tablet version is not consistent with task. \"\n                    + \"finish version: {}, finish version hash: {}, task: {}\", \n                    finishVersion, finishVersionHash, pushTask);\n            return;\n        }\n        \n        long dbId = pushTask.getDbId();\n        long backendId = pushTask.getBackendId();\n        long signature = task.getSignature();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash, \n                                          pushTask.getPushType(), pushTask.getTaskType());\n            return;\n        } \n\n        long tableId = pushTask.getTableId();\n        long partitionId = pushTask.getPartitionId();\n        long pushIndexId = pushTask.getIndexId();\n        long pushTabletId = pushTask.getTabletId();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        PartitionState pushState = null;\n        if (finishTabletInfos.size() == 1) {\n            pushState = PartitionState.NORMAL;\n        } else if (finishTabletInfos.size() == 2) {\n            if (finishTabletInfos.get(0).getTabletId() == finishTabletInfos.get(1).getTabletId()) {\n                pushState = PartitionState.SCHEMA_CHANGE;\n            } else {\n                pushState = PartitionState.ROLLUP;\n            }\n        } else {\n            LOG.warn(\"invalid push report infos. finishTabletInfos' size: \" + finishTabletInfos.size());\n            return;\n        }\n\n        LOG.debug(\"push report state: {}\", pushState.name());\n\n        OlapTable olapTable = (OlapTable) db.getTable(tableId);\n        if (olapTable == null) {\n            AgentTaskQueue.removeTask(backendId, TTaskType.REALTIME_PUSH, signature);\n            LOG.warn(\"finish push replica error, cannot find table[\" + tableId + \"] when push finished\");\n            return;\n        }\n\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"cannot find partition[\" + partitionId + \"] when push finished\");\n            }\n\n            \r\n            List<ReplicaPersistInfo> infos = new LinkedList<ReplicaPersistInfo>();\n            List<Long> tabletIds = finishTabletInfos.stream().map(\n                    finishTabletInfo -> finishTabletInfo.getTabletId()).collect(Collectors.toList());\n            List<TabletMeta> tabletMetaList = Catalog.getCurrentInvertedIndex().getTabletMetaList(tabletIds);\n            for (int i = 0; i < tabletMetaList.size(); i++) {\n                TabletMeta tabletMeta = tabletMetaList.get(i);\n                TTabletInfo tTabletInfo = finishTabletInfos.get(i);\n                long indexId = tabletMeta.getIndexId();\n                ReplicaPersistInfo info = updateReplicaInfo(olapTable, partition,\n                        backendId, pushIndexId, indexId,\n                        tTabletInfo, pushState);\n                if (info != null) {\n                    infos.add(info);\n                }\n            }\n\n            \r\n            long reportVersion = request.getReportVersion();\n            Catalog.getCurrentSystemInfo().updateBackendReportVersion(task.getBackendId(), reportVersion,\n                                                                       task.getDbId(), task.getTableId());\n\n            if (pushTask.getPushType() == TPushType.LOAD || pushTask.getPushType() == TPushType.LOAD_DELETE) {\n                \r\n                long loadJobId = pushTask.getLoadJobId();\n                LoadJob job = Catalog.getCurrentCatalog().getLoadInstance().getLoadJob(loadJobId);\n                if (job == null) {\n                    throw new MetaNotFoundException(\"cannot find load job, job[\" + loadJobId + \"]\");\n                }\n                \n                Preconditions.checkState(!infos.isEmpty());\n                for (ReplicaPersistInfo info : infos) {\n                    job.addReplicaPersistInfos(info);\n                }\n            } else if (pushTask.getPushType() == TPushType.DELETE) {\n                \r\n                if (pushTask.getVersion() != request.getRequestVersion()) {\n                    throw new MetaNotFoundException(\"delete task is not match. [\" + pushTask.getVersion() + \"-\"\n                            + request.getRequestVersion() + \"]\");\n                }\n            }\n\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.debug(\"finish push replica. tabletId: {}, backendId: {}\", pushTabletId, backendId);\n        } catch (MetaNotFoundException e) {\n            AgentTaskQueue.removePushTask(backendId, signature, finishVersion, finishVersionHash,\n                                          pushTask.getPushType(), pushTask.getTaskType());\n            LOG.warn(\"finish push replica error\", e);\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/MasterImpl.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
