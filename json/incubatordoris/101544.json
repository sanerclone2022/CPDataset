[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        \n        int schemaHash = backendTabletInfo.getSchema_hash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersion_hash();\n        long dataSize = backendTabletInfo.getData_size();\n        long rowCount = backendTabletInfo.getRow_count();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n            \n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            int availableBackendsNum = infoService.getClusterBackendIds(db.getClusterName(), true).size();\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, availableBackendsNum);\n            \n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                        partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                        version == 2 &&\n                        versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                                              dataSize, rowCount, ReplicaState.NORMAL, \n                                              lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n                \n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":1090,"groupId":"7621","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c8/c1d187e61a9fe992fa2372c5ade17a07a8995e.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        \n        int schemaHash = backendTabletInfo.getSchema_hash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersion_hash();\n        long dataSize = backendTabletInfo.getData_size();\n        long rowCount = backendTabletInfo.getRow_count();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n            \n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            int availableBackendsNum = infoService.getClusterBackendIds(db.getClusterName(), true).size();\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, availableBackendsNum);\n            \n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                        partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                        version == 2 &&\n                        versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                                              dataSize, rowCount, ReplicaState.NORMAL, \n                                              lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n                \n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":965,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-22 22:42:31","commitOrder":2,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        \n        int schemaHash = backendTabletInfo.getSchema_hash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersion_hash();\n        long dataSize = backendTabletInfo.getData_size();\n        long rowCount = backendTabletInfo.getRow_count();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n            \n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n            \n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                        partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                        version == 2 &&\n                        versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                                              dataSize, rowCount, ReplicaState.NORMAL, \n                                              lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n                \n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-07-22 22:42:31","endLine":1090,"groupId":"6032","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8d/4081260206d79ca5b14f3d66e920c17b05b35b.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        \n        int schemaHash = backendTabletInfo.getSchema_hash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersion_hash();\n        long dataSize = backendTabletInfo.getData_size();\n        long rowCount = backendTabletInfo.getRow_count();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n            \n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            int availableBackendsNum = infoService.getClusterBackendIds(db.getClusterName(), true).size();\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, availableBackendsNum);\n            \n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                        partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                        version == 2 &&\n                        versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                                              dataSize, rowCount, ReplicaState.NORMAL, \n                                              lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n                \n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":965,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"e4f5a2936bfecf7dd0465706f0cb2112fb852be6","commitMessage":"@@@[TabletRepair] Delete bad replicas when no BE can be used to create new replica\n\nWhen there is no available BE for relocating replicas.  delete the bad replica first.","date":"2020-07-22 22:42:31","modifiedFileCount":"7","status":"M","submitter":"Lijia Liu"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-08-28 13:28:11","commitOrder":3,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","date":"2020-08-28 13:28:11","endLine":1070,"groupId":"6032","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/56/b3a9adeceeb832a7066c876358c519e95229f1.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n\n        int schemaHash = backendTabletInfo.getSchema_hash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersion_hash();\n        long dataSize = backendTabletInfo.getData_size();\n        long rowCount = backendTabletInfo.getRow_count();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":945,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"3b7614e174d3999e18056d6d741641d664c52908","commitMessage":"@@@[Refactor] Use camelCase in thrift generated java sources (#4443)\n\nUse camelCase in thrift generated java sources to make us fe's code style is more unified","date":"2020-08-28 13:28:11","modifiedFileCount":"109","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":4,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":1068,"groupId":"6032","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/12/9f32f20fc64ecb4901e97817cd494791a78faa.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n        db.writeLock();\n        try {\n            OlapTable olapTable = (OlapTable) db.getTable(tableId);\n            if (olapTable == null) {\n                throw new MetaNotFoundException(\"table[\" + tableId + \"] does not exist\");\n            }\n\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            db.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":946,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":4,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-03-12 10:43:07","commitOrder":5,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-03-12 10:43:07","endLine":1072,"groupId":"6032","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/17/82b796cfd4b62261658fb4431e25b173728b8b.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        long dbId = tabletMeta != null ? tabletMeta.getDbId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long tableId = tabletMeta != null ? tabletMeta.getTableId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long partitionId = tabletMeta != null ? tabletMeta.getPartitionId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n        long indexId = tabletMeta != null ? tabletMeta.getIndexId() : TabletInvertedIndex.NOT_EXIST_VALUE;\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":946,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":5,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"315b8015619aa4a8e9237800ef69bb659e7453d2","commitMessage":"@@@[Bug] Fix bug that the log message is wrong when ReportHandler can not find tablet meta from TabletInvertedIndex (#5497)\n\n* [Bug] Fix bug that the log message is wrong when ReportHandler can not find tablet meta from TabletInvertedIndex\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-03-12 10:43:07","modifiedFileCount":"1","status":"M","submitter":"caiconghui"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-06-22 09:19:12","commitOrder":6,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING\n                    || status.first == TabletStatus.UNRECOVERABLE) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-06-22 09:19:12","endLine":1073,"groupId":"22","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/31/a2dc4ab8c164933fdc9f4743b57f8059837fe0.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":946,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":6,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"abcd56c6c827dcbddf103870462e91c8497d51c6","commitMessage":"@@@[Enhance] Support show unrecoverable tablets (#6045)\n\n* [Enhance] Support show unrecoverable tablets\n\nThe unrecoverable tablets are tablets which non of their replicas are healthy.\nWe should be able to find out these tablets then manual intervention.\n\nAnd these tablets should not be added to the tablet scheduler.","date":"2021-06-22 09:19:12","modifiedFileCount":"7","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":7,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(dbId);\n        OlapTable olapTable = db.getTableOrMetaException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING\n                    || status.first == TabletStatus.UNRECOVERABLE) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":1041,"groupId":"22","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/86/7c634bbdc1315df3831074127fb3aa31fac53f.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            throw new MetaNotFoundException(\"db[\" + dbId + \"] does not exist\");\n        }\n\n        OlapTable olapTable = (OlapTable) db.getTableOrThrowException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING\n                    || status.first == TabletStatus.UNRECOVERABLE) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":918,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":7,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"576","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-09-04 10:59:35","commitOrder":8,"curCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(dbId);\n        OlapTable olapTable = db.getTableOrMetaException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            ReplicaAllocation replicaAlloc = olapTable.getPartitionInfo().getReplicaAllocation(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicaAlloc, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING\n                    || status.first == TabletStatus.UNRECOVERABLE) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicaAlloc.toCreateStmt() + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","date":"2021-09-04 10:59:35","endLine":1042,"groupId":"101544","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"addReplica","params":"(longtabletId@TTabletInfobackendTabletInfo@longbackendId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/df/0e599a048a6248d1cb94745e72998a5e807251.src","preCode":"    private static void addReplica(long tabletId, TTabletInfo backendTabletInfo, long backendId)\n            throws MetaNotFoundException {\n        TabletInvertedIndex invertedIndex = Catalog.getCurrentInvertedIndex();\n        SystemInfoService infoService = Catalog.getCurrentSystemInfo();\n\n        TabletMeta tabletMeta = invertedIndex.getTabletMeta(tabletId);\n        if (tabletMeta == null || tabletMeta == TabletInvertedIndex.NOT_EXIST_TABLET_META) {\n            throw new MetaNotFoundException(\"tablet meta[\" + tabletMeta + \"] does not exist in tablet inverted index\");\n        }\n\n        long dbId = tabletMeta.getDbId();\n        long tableId = tabletMeta.getTableId();\n        long partitionId = tabletMeta.getPartitionId();\n        long indexId = tabletMeta.getIndexId();\n\n        int schemaHash = backendTabletInfo.getSchemaHash();\n        long version = backendTabletInfo.getVersion();\n        long versionHash = backendTabletInfo.getVersionHash();\n        long dataSize = backendTabletInfo.getDataSize();\n        long rowCount = backendTabletInfo.getRowCount();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(dbId);\n        OlapTable olapTable = db.getTableOrMetaException(tableId, Table.TableType.OLAP);\n        olapTable.writeLock();\n        try {\n            Partition partition = olapTable.getPartition(partitionId);\n            if (partition == null) {\n                throw new MetaNotFoundException(\"partition[\" + partitionId + \"] does not exist\");\n            }\n            short replicationNum = olapTable.getPartitionInfo().getReplicationNum(partition.getId());\n\n            MaterializedIndex materializedIndex = partition.getIndex(indexId);\n            if (materializedIndex == null) {\n                throw new MetaNotFoundException(\"index[\" + indexId + \"] does not exist\");\n            }\n\n            Tablet tablet = materializedIndex.getTablet(tabletId);\n            if (tablet == null) {\n                throw new MetaNotFoundException(\"tablet[\" + tabletId + \"] does not exist\");\n            }\n\n            long visibleVersion = partition.getVisibleVersion();\n            long visibleVersionHash = partition.getVisibleVersionHash();\n\n            \r\n            if (version < visibleVersion) {\n                throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                        + \", visible[\" + visibleVersion + \"-\" + visibleVersionHash + \"]\");\n            }\n\n            \r\n            if (schemaHash != olapTable.getSchemaHashByIndexId(indexId)) {\n                throw new MetaNotFoundException(\"schema hash is diff[\" + schemaHash + \"-\"\n                        + olapTable.getSchemaHashByIndexId(indexId) + \"]\");\n            }\n\n            \r\n            \r\n            if (Catalog.getCurrentColocateIndex().isColocateTable(olapTable.getId())) {\n                return;\n            }\n\n            List<Long> aliveBeIdsInCluster = infoService.getClusterBackendIds(db.getClusterName(), true);\n            Pair<TabletStatus, TabletSchedCtx.Priority> status = tablet.getHealthStatusWithPriority(infoService,\n                    db.getClusterName(), visibleVersion, visibleVersionHash,\n                    replicationNum, aliveBeIdsInCluster);\n\n            if (status.first == TabletStatus.VERSION_INCOMPLETE || status.first == TabletStatus.REPLICA_MISSING\n                    || status.first == TabletStatus.UNRECOVERABLE) {\n                long lastFailedVersion = -1L;\n                long lastFailedVersionHash = 0L;\n\n                boolean initPartitionCreateByOldVersionDoris =\n                        partition.getVisibleVersion() == Partition.PARTITION_INIT_VERSION &&\n                                partition.getVisibleVersionHash() == Partition.PARTITION_INIT_VERSION_HASH &&\n                                version == 2 &&\n                                versionHash == 0;\n\n                if (initPartitionCreateByOldVersionDoris) {\n                    \r\n                    \r\n                    \r\n                    \r\n                } else if (version > partition.getNextVersion() - 1) {\n                    \r\n                    throw new MetaNotFoundException(\"version is invalid. tablet[\" + version + \"-\" + versionHash + \"]\"\n                            + \", partition's max version [\" + (partition.getNextVersion() - 1) + \"]\");\n                } else if (version < partition.getCommittedVersion()) {\n                    lastFailedVersion = partition.getCommittedVersion();\n                    lastFailedVersionHash = partition.getCommittedVersionHash();\n                }\n\n                long replicaId = Catalog.getCurrentCatalog().getNextId();\n                Replica replica = new Replica(replicaId, backendId, version, versionHash, schemaHash,\n                        dataSize, rowCount, ReplicaState.NORMAL,\n                        lastFailedVersion, lastFailedVersionHash, version, versionHash);\n                tablet.addReplica(replica);\n\n                \r\n                ReplicaPersistInfo info = ReplicaPersistInfo.createForAdd(dbId, tableId, partitionId, indexId,\n                        tabletId, backendId, replicaId,\n                        version, versionHash, schemaHash, dataSize, rowCount,\n                        lastFailedVersion, lastFailedVersionHash,\n                        version, versionHash);\n\n                Catalog.getCurrentCatalog().getEditLog().logAddReplica(info);\n\n                LOG.info(\"add replica[{}-{}] to catalog. backend[{}]\", tabletId, replicaId, backendId);\n            } else {\n                \r\n                \r\n                for (Replica replica : tablet.getReplicas()) {\n                    if (replica.getBackendId() == backendId) {\n                        \r\n                        return;\n                    }\n                }\n                throw new MetaNotFoundException(\n                        \"replica is enough[\" + tablet.getReplicas().size() + \"-\" + replicationNum + \"]\");\n            }\n        } finally {\n            olapTable.writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/master/ReportHandler.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":8,"curCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","date":"2020-07-21 12:42:42","endLine":129,"groupId":"101544","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createForCondDelete","params":"(longindexId@longtabletId@longreplicaId@longversion@longversionHash@intschemaHash@longdataSize@longrowCount@longlastFailedVersion@longlastFailedVersionHash@longlastSuccessVersion@longlastSuccessVersionHash)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a3/594f100c65a567cd2cdc45d37af8da8d023a10.src","preCode":"    public static ReplicaPersistInfo createForCondDelete(long indexId, long tabletId, long replicaId, long version,\n            long versionHash, int schemaHash, long dataSize, long rowCount,\n            long lastFailedVersion, long lastFailedVersionHash,\n            long lastSuccessVersion, long lastSuccessVersionHash) {\n\n        return new ReplicaPersistInfo(ReplicaOperationType.CROND_DELETE, \n                -1L, -1L, -1L, indexId, tabletId, -1L,\n                replicaId, version, versionHash, schemaHash, dataSize, rowCount,\n                lastFailedVersion, lastFailedVersionHash,\n                lastSuccessVersion, lastSuccessVersionHash);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/ReplicaPersistInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"7db8841ae264012f37bb929b0f7ba6ffefe703c8","commitMessage":"@@@[Feature][ResourceTag] Support Resource Tag (#6203)\n\n#5902 \nThis CL mainly changes:\n\n1. Support setting tags for BE nodes:\n\n    ```\n    alter system add backend \"1272:9050.  1212:9050\" properties(\"tag.location\": \"zoneA\");\n    alter system modify backend \"1272:9050.  1212:9050\" set (\"tag.location\": \"zoneB\");\n    ```\n    And for compatibility.  all BE nodes will be set a \"default\" tag when upgrading: `\"tag.location\": \"default\"`.\n\n2. Create a new class `ReplicaAllocation` to replace the previous `replication_num`.\n\n    `ReplicaAllocation` represents the allocation of the replicas of a tablet. It contains a map from \n    Tag to number of replicas.\n    For example.  if user set a table's replication num to 3.  it will be converted to a ReplicaAllocation\n    like: `\"tag.location.default\" : \"3\"`.  which means the tablet will have 3 replicas and all of them will be\n    allocated in BE nodes with tag \"default\";\n\n3. Support create table with replication allocation:\n\n    ```\n    CREATE TABLE example_db.table_hash\n    (\n    k1 TINYINT\n    )\n    DISTRIBUTED BY HASH(k1) BUCKETS 32\n    PROPERTIES (\n        \"replication_allocation\"=\"tag.location.zone1:1.  tag.location.zone2:2\"\n    );\n    ```\n    \n    Also support set replica allocation for dynamic tables.  and modify replica allocation at runtime.\n\n    For compatibility.  user can still set \"replication_num\" = \"3\".  and it will be automatically converted to:\n    ` \"replication_allocation\"=\"tag.location.default:3\"`\n\n4. Support tablet repair and balance based on Tag\n\n    1. For tablets of non-colocate table.  most of the logic is the same as before. \n       but when selecting the destination node for clone.  the tag of the node will be considered.\n       If the required tag does not exist.  it cannot be repaired.\n       Similarly.  under the condition of ensuring that the replicas are complete.  the tablet will be\n       reallocated according to the tag or the replicas will be balanced.\n\n       Balancing is performed separately within each resource group.\n\n    2. For tablets of colocate table.  the backends sequence of buckets will be splitted by tag.\n       For example.  if replica allocation is \"tag.location.zone1:1.  tag.location.zone2:2\". \n\n       And zone1 has 2 BE: A.  B; zone2 has 3 BE: C.  D.  F\n\n       there will be 2 backend sequences: one is for zone1.  and the other is for zone2.\n       And one posible seqeunces will be:\n\n\n       zone1: [A]   [B]   [A]   [B]\n       zone2: [C.  D][D.  F][F.  C][C.  D]\n\n5. Support setting tags for user and restrict execution node with tags:\n\n\n    ```\n    set property for 'cmy' 'resource_tags.location' : 'zone1.  zone2';\n    ```\n\n    After setting.  the user 'cmy' can only query data stored on backends with tag zone1 and zone2. \n    And query can only be executed on backends with tag zone1 and zone2\n\n\n    For compatibility.  after upgrading.  the property `resource_tags.location` will be empty. \n    so that user can still query data stored on any backends.\n\n6. Modify the Unit test frame of FE so that we can created multi backends with different mocked IP in unit test.\n\n    This help us to easily test some distributed cases like query.  tablet repair and balance\n\nThe document will be added in another PR.\n\nAlso fix a bug described in #6194 ","date":"2021-09-04 10:59:35","modifiedFileCount":"161","status":"M","submitter":"Mingyu Chen"}]
