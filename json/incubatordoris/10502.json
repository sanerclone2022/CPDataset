[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadTask streamLoadTask = StreamLoadTask.fromTStreamLoadPutRequest(request, null);\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2020-07-21 12:42:42","endLine":207,"groupId":"5948","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostV2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/5e/2511badf96e145fb7c055ada6c6dc638e871a1.src","preCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadTask streamLoadTask = StreamLoadTask.fromTStreamLoadPutRequest(request, null);\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2020-07-21 12:42:42","endLine":475,"groupId":"7976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testColumnsUnknownRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/5e/2511badf96e145fb7c055ada6c6dc638e871a1.src","preCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-09-04 10:10:17","commitOrder":2,"curCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadTask streamLoadTask = StreamLoadTask.fromTStreamLoadPutRequest(request, db);\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2020-09-04 10:10:17","endLine":249,"groupId":"5948","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostV2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/18/d5523f01a8011d4c6a079917de8df2e282bad3.src","preCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadTask streamLoadTask = StreamLoadTask.fromTStreamLoadPutRequest(request, null);\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2020-07-21 12:42:42","endLine":475,"groupId":"7976","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testColumnsUnknownRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/5e/2511badf96e145fb7c055ada6c6dc638e871a1.src","preCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"N"}],"commitId":"068707484d16bbb26a7944baf89244ced07c2471","commitMessage":"@@@Support sequence column for UNIQUE_KEYS Table (#4256)\n\n* add sequence  col\n\nCo-authored-by: yangwenbo6 <yangwenbo3@jd.com>","date":"2020-09-04 10:10:17","modifiedFileCount":"24","status":"M","submitter":"Youngwb"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2021-01-13 10:27:58","endLine":248,"groupId":"10502","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostV2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a7/a07d0d18e1f821bac5dccb37718d4a4cc43f74.src","preCode":"    public void testLostV2() throws UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1, k2, v1\");\n        StreamLoadTask streamLoadTask = StreamLoadTask.fromTStreamLoadPutRequest(request, db);\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","date":"2020-07-21 12:42:42","endLine":475,"groupId":"10502","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testColumnsUnknownRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/5e/2511badf96e145fb7c055ada6c6dc638e871a1.src","preCode":"    public void testColumnsUnknownRef() throws UserException, UserException {\n        Analyzer analyzer = new Analyzer(catalog, connectContext);\n        DescriptorTable descTbl = analyzer.getDescTbl();\n\n        List<Column> columns = getBaseSchema();\n        TupleDescriptor dstDesc = descTbl.createTupleDescriptor(\"DstTableDesc\");\n        for (Column column : columns) {\n            SlotDescriptor slot = descTbl.addSlotDescriptor(dstDesc);\n            slot.setColumn(column);\n            slot.setIsMaterialized(true);\n            if (column.isAllowNull()) {\n                slot.setIsNullable(true);\n            } else {\n                slot.setIsNullable(false);\n            }\n        }\n\n        TStreamLoadPutRequest request = getBaseRequest();\n        request.setColumns(\"k1,k2,v1, v2=k3\");\n        StreamLoadScanNode scanNode = getStreamLoadScanNode(dstDesc, request);\n\n        scanNode.init(analyzer);\n        scanNode.finalize(analyzer);\n        scanNode.getNodeExplainString(\"\", TExplainLevel.NORMAL);\n        TPlanNode planNode = new TPlanNode();\n        scanNode.toThrift(planNode);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/StreamLoadScanNodeTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"N"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"}]
