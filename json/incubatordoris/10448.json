[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","date":"2020-07-21 12:42:42","endLine":332,"groupId":"6480","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunLoadingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/12/fb22be2dfb23f26c9955c6bacca10a1a4c6958.src","preCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        List<AsyncDeleteJob> deleteJobs = Lists.newArrayList();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.getQuorumFinishedDeleteJobs();\n                minTimes = 0;\n                result = deleteJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","date":"2020-07-21 12:42:42","endLine":406,"groupId":"6481","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunQuorumFinishedJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/12/fb22be2dfb23f26c9955c6bacca10a1a4c6958.src","preCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        List<AsyncDeleteJob> deleteJobs = Lists.newArrayList();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.getQuorumFinishedDeleteJobs();\n                minTimes = 0;\n                result = deleteJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-01-30 20:33:34","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","date":"2020-07-21 12:42:42","endLine":332,"groupId":"6480","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunLoadingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/12/fb22be2dfb23f26c9955c6bacca10a1a4c6958.src","preCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"N"},{"authorDate":"2021-01-30 20:33:34","commitOrder":2,"curCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","date":"2021-01-30 20:33:34","endLine":402,"groupId":"6481","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunQuorumFinishedJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/44/0ac0b32b70519a0c2562ec535c3381f569b916.src","preCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        List<AsyncDeleteJob> deleteJobs = Lists.newArrayList();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.getQuorumFinishedDeleteJobs();\n                minTimes = 0;\n                result = deleteJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"de57667d6dc7ddc32fabd0f5c3299623ab9895d1","commitMessage":"@@@[Delete] Support delete with multi partitions (#5252)\n\nSupport delete statement like:\n1. delete from table partitions(p1.  p2) where xxx;  // apply to p1.  p2\n2. delete from table where xxx;     // apply to all partitions\n\nAlso remove code about the deprecated sync/async delete job.\n\nThis CL changes FE meta version to 94","date":"2021-01-30 20:33:34","modifiedFileCount":"27","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":3,"curCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTableOrMetaException(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","date":"2021-09-03 13:34:49","endLine":333,"groupId":"10448","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testRunLoadingJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c4/c7cbee6bcb8cb74a29bcafa15d8860e2b9955a.src","preCode":"    public void testRunLoadingJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.LOADING);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 1L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        int replicaNum = 0;\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                replicaNum += tablet.getReplicas().size();\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.LOADING);\n                times = 2;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.cancelLoadJob((LoadJob) any, (CancelType) any, anyString);\n                minTimes = 0;\n                result = true;\n\n                catalog.getLoadInstance();\n                times = 4;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runLoadingJobs = UnitTestUtil.getPrivateMethod(LoadChecker.class, \"runLoadingJobs\", new Class[] {});\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n\n        \r\n        for (MaterializedIndex olapIndex : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : olapIndex.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n            }\n        }       \n\n        \r\n        runLoadingJobs.invoke(checkers.get(JobState.LOADING), new Object[] {});\n        \r\n        AgentTaskQueue.clearAllTasks();\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":3,"curCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTableOrMetaException(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","date":"2021-09-03 13:34:49","endLine":402,"groupId":"10448","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testRunQuorumFinishedJobs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c4/c7cbee6bcb8cb74a29bcafa15d8860e2b9955a.src","preCode":"    public void testRunQuorumFinishedJobs() throws Exception {\n        List<LoadJob> etlJobs = new ArrayList<LoadJob>();\n        LoadJob job = new LoadJob(label);\n        job.setState(JobState.QUORUM_FINISHED);\n        job.setDbId(dbId);\n        etlJobs.add(job);\n        \r\n        OlapTable table = (OlapTable) db.getTable(tableId);\n        Partition partition = table.getPartition(partitionId);\n        long newVersion = partition.getVisibleVersion() + 1;\n        long newVersionHash = 0L;\n        PartitionLoadInfo partitionLoadInfo = new PartitionLoadInfo(new ArrayList<Source>());\n        partitionLoadInfo.setVersion(newVersion);\n        partitionLoadInfo.setVersionHash(newVersionHash);\n        Map<Long, PartitionLoadInfo> idToPartitionLoadInfo = new HashMap<Long, PartitionLoadInfo>();\n        idToPartitionLoadInfo.put(partitionId, partitionLoadInfo);\n        TableLoadInfo tableLoadInfo = new TableLoadInfo(idToPartitionLoadInfo);\n        tableLoadInfo.addIndexSchemaHash(partition.getBaseIndex().getId(), 0);\n        Map<Long, TableLoadInfo> idToTableLoadInfo = new HashMap<Long, TableLoadInfo>();\n        idToTableLoadInfo.put(tableId, tableLoadInfo);\n        job.setIdToTableLoadInfo(idToTableLoadInfo);\n        \r\n        Map<Long, TabletLoadInfo> tabletLoadInfos = new HashMap<Long, TabletLoadInfo>();\n        for (MaterializedIndex index : partition.getMaterializedIndices(IndexExtState.ALL)) {\n            for (Tablet tablet : index.getTablets()) {\n                for (Replica replica : tablet.getReplicas()) {\n                    replica.updateVersionInfo(newVersion, newVersionHash, 0L, 0L);\n                }\n                TabletLoadInfo tabletLoadInfo = new TabletLoadInfo(\"/label/path\", 1L);\n                tabletLoadInfos.put(tablet.getId(), tabletLoadInfo);\n            }\n        }\n        job.setIdToTabletLoadInfo(tabletLoadInfos);\n\n        \r\n        new Expectations() {\n            {\n                load.getLoadJobs(JobState.QUORUM_FINISHED);\n                minTimes = 0;\n                result = etlJobs;\n\n                load.updateLoadJobState(job, JobState.FINISHED);\n                minTimes = 0;\n                result = true;\n\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n                minTimes = 0;\n\n                catalog.getLoadInstance();\n                minTimes = 0;\n                result = load;\n            }\n        };\n        \n        \r\n        LoadChecker.init(5L);\n\n        \r\n        Field checkersField = LoadChecker.class.getDeclaredField(\"checkers\");\n        checkersField.setAccessible(true);\n        Map<JobState, LoadChecker> checkers = (Map<JobState, LoadChecker>) checkersField.get(LoadChecker.class);\n        Method runQuorumFinishedJobs = UnitTestUtil.getPrivateMethod(\n                LoadChecker.class, \"runQuorumFinishedJobs\", new Class[] {});\n        runQuorumFinishedJobs.invoke(checkers.get(JobState.QUORUM_FINISHED), new Object[] {});\n        \n        Assert.assertEquals(0, AgentTaskQueue.getTaskNum());\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/load/LoadCheckerTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
