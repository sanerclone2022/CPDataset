[{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    private boolean isColocateJoin(PlanNode node) {\n        if (Config.disable_colocate_join) {\n            return false;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocateJoin()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            return isColocateJoin(childNode);\n        }\n\n        return false;\n    }\n","date":"2020-07-21 12:42:42","endLine":1067,"groupId":"1380","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isColocateJoin","params":"(PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/01/da5c6dd714493307aa8df272a07e0bfeaa7ad8.src","preCode":"    private boolean isColocateJoin(PlanNode node) {\n        if (Config.disable_colocate_join) {\n            return false;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocateJoin()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            return isColocateJoin(childNode);\n        }\n\n        return false;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1034,"status":"NB"},{"authorDate":"2020-10-11 15:37:32","commitOrder":2,"curCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            \r\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                return isBucketShuffleJoin(fragmentId, childNode);\n            }\n\n            return false;\n        }\n","date":"2020-10-11 15:37:32","endLine":1476,"groupId":"1918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isBucketShuffleJoin","params":"(intfragmentId@PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            \r\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                return isBucketShuffleJoin(fragmentId, childNode);\n            }\n\n            return false;\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1446,"status":"B"}],"commitId":"04f26e4b7f9b929c9c713fb01e513f5c80b494c0","commitMessage":"@@@[SQL] Support Bucket Shuffle Join (#4677)\n\nSupport Bucket Shuffle Join\nissue:#4394","date":"2020-10-11 15:37:32","modifiedFileCount":"7","status":"M","submitter":"HappenLee"},{"authorTime":"2020-10-11 15:37:32","codes":[{"authorDate":"2021-04-11 22:02:03","commitOrder":3,"curCode":"    private boolean isColocateJoin(PlanNode node) {\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocatePlan()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            return isColocateJoin(childNode);\n        }\n\n        return false;\n    }\n","date":"2021-04-11 22:02:03","endLine":1127,"groupId":"1380","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isColocateJoin","params":"(PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/7b/8e88023f84730f04e54e6423ee71e1f4d6db35.src","preCode":"    private boolean isColocateJoin(PlanNode node) {\n        if (Config.disable_colocate_join) {\n            return false;\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocateJoin()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            return isColocateJoin(childNode);\n        }\n\n        return false;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1098,"status":"M"},{"authorDate":"2020-10-11 15:37:32","commitOrder":3,"curCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            \r\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                return isBucketShuffleJoin(fragmentId, childNode);\n            }\n\n            return false;\n        }\n","date":"2020-10-11 15:37:32","endLine":1476,"groupId":"1918","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isBucketShuffleJoin","params":"(intfragmentId@PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/c2680b081daa7df3dacfe4df7a1b6dcf060692.src","preCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            \r\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                return isBucketShuffleJoin(fragmentId, childNode);\n            }\n\n            return false;\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1446,"status":"N"}],"commitId":"a25e3afa5b43051a3f2ca9faae679b01481b0c0b","commitMessage":"@@@[Colocate plan][Step1] Colocate join covers more situations (#5521)\n\nThe old colocate join can only cover the case where the child is hash or scan.\nIn fact.  as long as the child's data distribution meets the requirements. \nno matter what the plan node on the child node is.  a colocate join can be performed.","date":"2021-04-11 22:02:03","modifiedFileCount":"15","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2021-05-31 12:14:44","codes":[{"authorDate":"2021-05-31 12:14:44","commitOrder":4,"curCode":"    private boolean isColocateJoin(PlanNode node) {\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocatePlan()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            if (isColocateJoin(childNode)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n","date":"2021-05-31 12:14:44","endLine":1144,"groupId":"101092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isColocateJoin","params":"(PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/0018fe109b4618bf9e213cfab6f844892cc025.src","preCode":"    private boolean isColocateJoin(PlanNode node) {\n        \r\n        \r\n        \r\n        \r\n        if (ConnectContext.get() != null) {\n            if (ConnectContext.get().getSessionVariable().isDisableColocatePlan()) {\n                return false;\n            }\n        }\n\n        \r\n        if (colocateFragmentIds.contains(node.getFragmentId().asInt())) {\n            return true;\n        }\n\n        if (node instanceof HashJoinNode) {\n            HashJoinNode joinNode = (HashJoinNode) node;\n            if (joinNode.isColocate()) {\n                colocateFragmentIds.add(joinNode.getFragmentId().asInt());\n                return true;\n            }\n        }\n\n        for (PlanNode childNode : node.getChildren()) {\n            return isColocateJoin(childNode);\n        }\n\n        return false;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1113,"status":"M"},{"authorDate":"2021-05-31 12:14:44","commitOrder":4,"curCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                if (isBucketShuffleJoin(fragmentId, childNode)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n","date":"2021-05-31 12:14:44","endLine":1569,"groupId":"101092","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isBucketShuffleJoin","params":"(intfragmentId@PlanNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/0018fe109b4618bf9e213cfab6f844892cc025.src","preCode":"        private boolean isBucketShuffleJoin(int fragmentId, PlanNode node) {\n            if (ConnectContext.get() != null) {\n                if (!ConnectContext.get().getSessionVariable().isEnableBucketShuffleJoin()) {\n                    return false;\n                }\n            }\n\n            \r\n            if (fragmentId != node.getFragmentId().asInt()) {\n                return false;\n            }\n\n            if (bucketShuffleFragmentIds.contains(fragmentId)) {\n                return true;\n            }\n\n            if (node instanceof HashJoinNode) {\n                HashJoinNode joinNode = (HashJoinNode) node;\n                if (joinNode.isBucketShuffle()) {\n                    bucketShuffleFragmentIds.add(joinNode.getFragmentId().asInt());\n                    return true;\n                }\n            }\n\n            for (PlanNode childNode : node.getChildren()) {\n                return isBucketShuffleJoin(fragmentId, childNode);\n            }\n\n            return false;\n        }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/Coordinator.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1538,"status":"M"}],"commitId":"8e4b601ff256ea48b257d8e85075cbafd5865ab6","commitMessage":"@@@[Bug] Fit the bug of check Fragment whether is colocate / bucket shuffle join error (#5940)\n\n","date":"2021-05-31 12:14:44","modifiedFileCount":"1","status":"M","submitter":"HappenLee"}]
