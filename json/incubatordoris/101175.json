[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visiable, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinisheTablets = Sets.newHashSet();\n        unfinisheTablets.addAll(jobTotalTablets);\n        unfinisheTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinisheTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, db);\n            }\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":311,"groupId":"5567","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runOneLoadingJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/20/620b5f0d4629d438a82b57cff655defdffded2.src","preCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visiable, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinisheTablets = Sets.newHashSet();\n        unfinisheTablets.addAll(jobTotalTablets);\n        unfinisheTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinisheTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, db);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n            return;\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":558,"groupId":"5567","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runOneQuorumFinishedJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/20/620b5f0d4629d438a82b57cff655defdffded2.src","preCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n            return;\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-10-10 21:16:25","commitOrder":2,"curCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visible, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinishedTablets = Sets.newHashSet();\n        unfinishedTablets.addAll(jobTotalTablets);\n        unfinishedTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinishedTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, db);\n            }\n        }\n    }\n","date":"2020-10-10 21:16:25","endLine":311,"groupId":"5567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runOneLoadingJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/10/477e7fb74252d26d7505adb0efebc170134587.src","preCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visiable, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinisheTablets = Sets.newHashSet();\n        unfinisheTablets.addAll(jobTotalTablets);\n        unfinisheTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinisheTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, db);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n            return;\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":558,"groupId":"5567","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runOneQuorumFinishedJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/20/620b5f0d4629d438a82b57cff655defdffded2.src","preCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n            return;\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"N"}],"commitId":"94a81e52c796150333c54838a889be01934983a4","commitMessage":"@@@Fix typo in our code (#4696)\n\n* fix typo in our code\n\n* fix\n\n* fix","date":"2020-10-10 21:16:25","modifiedFileCount":"176","status":"M","submitter":"Zhengguo Yang"},{"authorTime":"2021-01-13 10:27:58","codes":[{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        List<Long> tableIds = Lists.newArrayList();\n\n        long tableId = job.getTableId();\n        if (tableId > 0) {\n            tableIds.add(tableId);\n        } else {\n            \r\n            \r\n            tableIds.addAll(job.getIdToTableLoadInfo().keySet());\n        }\n\n        List<Table> tables = null;\n        try {\n            tables = db.getTablesOnIdOrderOrThrowException(tableIds);\n        } catch (UserException e) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"table does not exist. dbId: \" + dbId + \", err: \" + e.getMessage());\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visible, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinishedTablets = Sets.newHashSet();\n        unfinishedTablets.addAll(jobTotalTablets);\n        unfinishedTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinishedTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, tables);\n            }\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":334,"groupId":"5567","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runOneLoadingJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b7/89cebd7b6a8effb754db0f019bcb87ca227bf0.src","preCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visible, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinishedTablets = Sets.newHashSet();\n        unfinishedTablets.addAll(jobTotalTablets);\n        unfinishedTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinishedTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, db);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2021-01-13 10:27:58","commitOrder":3,"curCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n        }\n    }\n","date":"2021-01-13 10:27:58","endLine":576,"groupId":"5567","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runOneQuorumFinishedJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b7/89cebd7b6a8effb754db0f019bcb87ca227bf0.src","preCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n            return;\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"}],"commitId":"f7730031b8eca90c150c400c8d67e008290a6f70","commitMessage":"@@@Support read and write lock in table level to reduce lock competition (#3775)\n\nThis PR is to reduce lock competition by supporting read and write lock in table level. When we modify or read table's meta.  we don't need to get database lock.  just get table write or read lock. And when we get database lock.  that means meta directly in db cannot be modified by other thread. Database lock only protect meta in Database class.  while table lock protect meta in Table class.\n\nCo-authored-by: caiconghui [???] <caiconghui@xiaomi.com>","date":"2021-01-13 10:27:58","modifiedFileCount":"108","status":"M","submitter":"caiconghui"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDbNullable(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        List<Long> tableIds = Lists.newArrayList();\n\n        long tableId = job.getTableId();\n        if (tableId > 0) {\n            tableIds.add(tableId);\n        } else {\n            \r\n            \r\n            tableIds.addAll(job.getIdToTableLoadInfo().keySet());\n        }\n\n        List<Table> tables = null;\n        try {\n            tables = db.getTablesOnIdOrderOrThrowException(tableIds);\n        } catch (UserException e) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"table does not exist. dbId: \" + dbId + \", err: \" + e.getMessage());\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visible, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinishedTablets = Sets.newHashSet();\n        unfinishedTablets.addAll(jobTotalTablets);\n        unfinishedTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinishedTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, tables);\n            }\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":321,"groupId":"101175","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"runOneLoadingJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bf/804e691cb04e7bd7d06b4dcf32c888ca22b7a4.src","preCode":"    private void runOneLoadingJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        \r\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n\n        List<Long> tableIds = Lists.newArrayList();\n\n        long tableId = job.getTableId();\n        if (tableId > 0) {\n            tableIds.add(tableId);\n        } else {\n            \r\n            \r\n            tableIds.addAll(job.getIdToTableLoadInfo().keySet());\n        }\n\n        List<Table> tables = null;\n        try {\n            tables = db.getTablesOnIdOrderOrThrowException(tableIds);\n        } catch (UserException e) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"table does not exist. dbId: \" + dbId + \", err: \" + e.getMessage());\n            return;\n        }\n\n        if (job.getTransactionId() < 0) {\n            LOG.warn(\"cancel load job {}  because it is an old type job, user should resubmit it\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"cancelled because system is during upgrade, user should resubmit it\");\n            return;\n        }\n        \r\n        TransactionState state = Catalog.getCurrentGlobalTransactionMgr()\n                .getTransactionState(job.getDbId(), job.getTransactionId());\n        if (state == null) {\n            LOG.warn(\"cancel load job {}  because could not find transaction state\", job);\n            load.cancelLoadJob(job, CancelType.UNKNOWN, \"transaction state lost\");\n            return;\n        }\n        if (state.getTransactionStatus() == TransactionStatus.ABORTED) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \n                    \"job is aborted in transaction manager [\" + state + \"]\");\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.COMMITTED) {\n            \r\n            job.setProgress(100);\n            LOG.debug(\"job {} is already committed, just wait it to be visible, transaction state {}\", job, state);\n            return;\n        } else if (state.getTransactionStatus() == TransactionStatus.VISIBLE) {\n            if (load.updateLoadJobState(job, JobState.FINISHED)) {\n                load.clearJob(job, JobState.QUORUM_FINISHED);\n            }\n            return;\n        }\n        \n        if (checkTimeout(job)) {\n            load.cancelLoadJob(job, CancelType.TIMEOUT, \"loading timeout to cancel\");\n            return;\n        }\n        \r\n        Set<Long> jobTotalTablets = submitPushTasks(job, db);\n        if (jobTotalTablets == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"submit push tasks fail\");\n            return;\n        }\n        \n        \r\n        Set<Long> fullTablets = job.getFullTablets();\n        if (state.isRunning()) {\n            job.setProgress(fullTablets.size() * 100 / jobTotalTablets.size());\n        } else {\n            job.setProgress(100);\n        }\n        \n        long stragglerTimeout = job.isSyncDeleteJob() ? job.getDeleteJobTimeout() / 2 \n                                                    : Config.load_straggler_wait_second * 1000;\n        Set<Long> unfinishedTablets = Sets.newHashSet();\n        unfinishedTablets.addAll(jobTotalTablets);\n        unfinishedTablets.removeAll(job.getQuorumTablets());\n        job.setUnfinishedTablets(unfinishedTablets);\n        if (job.getQuorumTablets().containsAll(jobTotalTablets)) {\n            \r\n            \r\n            if (job.getQuorumFinishTimeMs() < 0) {\n                job.setQuorumFinishTimeMs(System.currentTimeMillis());\n            }\n\n            \r\n            if (System.currentTimeMillis() - job.getQuorumFinishTimeMs() > stragglerTimeout\n                    || job.getFullTablets().containsAll(jobTotalTablets)) {\n                tryCommitJob(job, tables);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":4,"curCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDbNullable(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":551,"groupId":"101175","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"runOneQuorumFinishedJob","params":"(LoadJobjob)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bf/804e691cb04e7bd7d06b4dcf32c888ca22b7a4.src","preCode":"    private void runOneQuorumFinishedJob(LoadJob job) {\n        \r\n        Load load = Catalog.getCurrentCatalog().getLoadInstance();\n        long dbId = job.getDbId();\n        Database db = Catalog.getCurrentCatalog().getDb(dbId);\n        if (db == null) {\n            load.cancelLoadJob(job, CancelType.LOAD_RUN_FAIL, \"db does not exist. id: \" + dbId);\n            return;\n        }\n        \r\n        if (load.updateLoadJobState(job, JobState.FINISHED)) {\n            load.clearJob(job, JobState.QUORUM_FINISHED);\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/LoadChecker.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
