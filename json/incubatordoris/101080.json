[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void sendMetaData(ShowResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2020-07-21 12:42:42","endLine":845,"groupId":"1123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sendMetaData","params":"(ShowResultSetMetaDatametaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/09/e2e3cee7c20c6e844a6a3223b150b701b82076.src","preCode":"    private void sendMetaData(ShowResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void sendFields(List<String> colNames, List<Expr> exprs) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), exprs.get(i).getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2020-07-21 12:42:42","endLine":863,"groupId":"1124","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sendFields","params":"(List<String>colNames@List<Expr>exprs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/09/e2e3cee7c20c6e844a6a3223b150b701b82076.src","preCode":"    private void sendFields(List<String> colNames, List<Expr> exprs) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), exprs.get(i).getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-03-14 15:39:46","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    private void sendMetaData(ShowResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2020-07-21 12:42:42","endLine":845,"groupId":"1123","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sendMetaData","params":"(ShowResultSetMetaDatametaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/09/e2e3cee7c20c6e844a6a3223b150b701b82076.src","preCode":"    private void sendMetaData(ShowResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"N"},{"authorDate":"2021-03-14 15:39:46","commitOrder":2,"curCode":"    private void sendFields(List<String> colNames, List<PrimitiveType> types) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), types.get(i));\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2021-03-14 15:39:46","endLine":1019,"groupId":"35","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sendFields","params":"(List<String>colNames@List<PrimitiveType>types)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8a/125a1ff4e4302f28603da444ad4498e0aeaa2f.src","preCode":"    private void sendFields(List<String> colNames, List<Expr> exprs) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), exprs.get(i).getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"M"}],"commitId":"4b316e4c3fea76ff32af14c8c33c3e12fd6fd16b","commitMessage":"@@@[Outfile] Support exporting query result to local disk (#5489)\n\n1.\nUser can export query result to local disk like:\n\n`select * from tbl into outfile (\"file:///disk1/result_\");`\n\nAnd modify the return result to show the details of export:\n\n```\nmysql> select * from tbl1 limit 10 into outfile \"file:///home/work/path/result_\";\n+------------+-----------+----------+--------------+\n| FileNumber | TotalRows | FileSize | URL          |\n+------------+-----------+----------+--------------+\n|          1 |         2 |        8 | 192.168.1.10 |\n+------------+-----------+----------+--------------+\n```\n\n2.\nSupport create a mark file after export successfully finished.\n\nCo-authored-by: chenmingyu <chenmingyu@baidu.com>","date":"2021-03-14 15:39:46","modifiedFileCount":"3","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2021-03-14 15:39:46","codes":[{"authorDate":"2021-09-07 11:51:46","commitOrder":3,"curCode":"    private void sendMetaData(ResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2021-09-07 11:51:46","endLine":1371,"groupId":"101080","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sendMetaData","params":"(ResultSetMetaDatametaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ee/2ca13acbdc4203abf08d35346479b8d18a346e.src","preCode":"    private void sendMetaData(ShowResultSetMetaData metaData) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(metaData.getColumnCount());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (Column col : metaData.getColumns()) {\n            serializer.reset();\n            \r\n            serializer.writeField(col.getName(), col.getType().getPrimitiveType());\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1354,"status":"M"},{"authorDate":"2021-03-14 15:39:46","commitOrder":3,"curCode":"    private void sendFields(List<String> colNames, List<PrimitiveType> types) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), types.get(i));\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","date":"2021-03-14 15:39:46","endLine":1019,"groupId":"101080","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sendFields","params":"(List<String>colNames@List<PrimitiveType>types)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8a/125a1ff4e4302f28603da444ad4498e0aeaa2f.src","preCode":"    private void sendFields(List<String> colNames, List<PrimitiveType> types) throws IOException {\n        \r\n        serializer.reset();\n        serializer.writeVInt(colNames.size());\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        \r\n        for (int i = 0; i < colNames.size(); ++i) {\n            serializer.reset();\n            serializer.writeField(colNames.get(i), types.get(i));\n            context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n        }\n        \r\n        serializer.reset();\n        MysqlEofPacket eofPacket = new MysqlEofPacket(context.getState());\n        eofPacket.writeTo(serializer);\n        context.getMysqlChannel().sendOnePacket(serializer.toByteBuffer());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/qe/StmtExecutor.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"N"}],"commitId":"f591098b080b54b9267eb026ef639e1cf1d7be99","commitMessage":"@@@[Feature] Support fe login using sql tools when no be is available. (#6150)\n\nWhen no backend(be) available.  eg first time before setup or all be is down.  we cannot login to fe using most sql tools.  eg datagrip.  querious.\n\nThis is because these tools call `select version()` or  `select @@version_comment ?` right after login.  when there is no backend available.  the login will fail.\n\nI make this pr to support login when no be available.  so we can add backend or modify some configuaration using GUI sql tools.  especially the first setup time.\n\nThis pr is working at precondition that?sql tools only query very simple information that fe can handle.  there is no need to send the request to be.\n\nSo I check the query type and BE status.  if we can handle the query and no BE is available.  we will intercept and process in fe.","date":"2021-09-07 11:51:46","modifiedFileCount":"6","status":"M","submitter":"Arthur.Zhang"}]
