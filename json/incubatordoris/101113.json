[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(resumeRoutineLoadStmt.getDbFullName(), resumeRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + resumeRoutineLoadStmt.getName() + \".\");\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","date":"2020-07-21 12:42:42","endLine":272,"groupId":"2884","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeRoutineLoadJob","params":"(ResumeRoutineLoadStmtresumeRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/92/5e31ef576cb6937a72aece7c7c9faf61971c90.src","preCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(resumeRoutineLoadStmt.getDbFullName(), resumeRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + resumeRoutineLoadStmt.getName() + \".\");\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(stopRoutineLoadStmt.getDbFullName(), stopRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + stopRoutineLoadStmt.getName());\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                                    new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR, \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                                   false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","date":"2020-07-21 12:42:42","endLine":306,"groupId":"8164","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopRoutineLoadJob","params":"(StopRoutineLoadStmtstopRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/92/5e31ef576cb6937a72aece7c7c9faf61971c90.src","preCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(stopRoutineLoadStmt.getDbFullName(), stopRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + stopRoutineLoadStmt.getName());\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                                    new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR, \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                                   false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-08-06 23:11:02","codes":[{"authorDate":"2020-08-06 23:11:02","commitOrder":2,"curCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                resumeRoutineLoadStmt.getName());\n\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","date":"2020-08-06 23:11:02","endLine":262,"groupId":"2884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeRoutineLoadJob","params":"(ResumeRoutineLoadStmtresumeRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/6f7c02b0ae835f03ebbe8fa4e3524aa76d04a1.src","preCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(resumeRoutineLoadStmt.getDbFullName(), resumeRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + resumeRoutineLoadStmt.getName() + \".\");\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2020-08-06 23:11:02","commitOrder":2,"curCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","date":"2020-08-06 23:11:02","endLine":277,"groupId":"8164","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopRoutineLoadJob","params":"(StopRoutineLoadStmtstopRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/6f7c02b0ae835f03ebbe8fa4e3524aa76d04a1.src","preCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = getJob(stopRoutineLoadStmt.getDbFullName(), stopRoutineLoadStmt.getName());\n        if (routineLoadJob == null) {\n            throw new DdlException(\"There is not operable routine load job with name \" + stopRoutineLoadStmt.getName());\n        }\n        \r\n        String dbFullName;\n        String tableName;\n        try {\n            dbFullName = routineLoadJob.getDbFullName();\n            tableName = routineLoadJob.getTableName();\n        } catch (MetaNotFoundException e) {\n            throw new DdlException(\"The metadata of job has been changed. The job will be cancelled automatically\", e);\n        }\n        if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(),\n                                                                dbFullName,\n                                                                tableName,\n                                                                PrivPredicate.LOAD)) {\n            ErrorReport.reportAnalysisException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"LOAD\",\n                                                ConnectContext.get().getQualifiedUser(),\n                                                ConnectContext.get().getRemoteIP(),\n                                                tableName);\n        }\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                                    new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR, \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                                   false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"237c0807a4644ab7382abd2afc69e783bfc3c4b2","commitMessage":"@@@[RoutineLoad] Support modify routine load job (#4158)\n\nSupport ALTER ROUTINE LOAD JOB stmt.  for example:\n\n```\nalter routine load db1.label1\nproperties\n(\n\"desired_concurrent_number\"=\"3\". \n\"max_batch_interval\" = \"5\". \n\"max_batch_rows\" = \"300000\". \n\"max_batch_size\" = \"209715200\". \n\"strict_mode\" = \"false\". \n\"timezone\" = \"+08:00\"\n)\n```\n\nDetails can be found in `alter-routine-load.md`","date":"2020-08-06 23:11:02","modifiedFileCount":"11","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2020-08-06 23:11:02","codes":[{"authorDate":"2021-07-17 10:43:59","commitOrder":3,"curCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                resumeRoutineLoadStmt.getName());\n\n        routineLoadJob.jobStatistic.errorRowsAfterResumed = 0;\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","date":"2021-07-17 10:43:59","endLine":263,"groupId":"2884","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeRoutineLoadJob","params":"(ResumeRoutineLoadStmtresumeRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/05/ebeb351951118dd7946129481624f2af5f5ef0.src","preCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                resumeRoutineLoadStmt.getName());\n\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2020-08-06 23:11:02","commitOrder":3,"curCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","date":"2020-08-06 23:11:02","endLine":277,"groupId":"8164","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stopRoutineLoadJob","params":"(StopRoutineLoadStmtstopRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/6f7c02b0ae835f03ebbe8fa4e3524aa76d04a1.src","preCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"N"}],"commitId":"e39e1571ecdbe907fc755c01c268784c64c2377b","commitMessage":"@@@[Feature] Add an indicator called errorRowsAfterResumed to distinguish between ? (#6092)\n\n1. [enhancement] add an indicator called errorRowsAfterResumed to distinguish between totalErrorRows(called errorRows) and errorRowsAfterResumed. (#6092)\n2. [Refactor] separate some indicators from RoutineLoadJob class to avoid changing FeMetaVersion while modifying indicators of RoutineLoadJob.(#6092)","date":"2021-07-17 10:43:59","modifiedFileCount":"6","status":"M","submitter":"Henry2SS"},{"authorTime":"2020-08-06 23:11:02","codes":[{"authorDate":"2021-08-11 16:38:06","commitOrder":4,"curCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n\n        List<RoutineLoadJob> jobs = Lists.newArrayList();\n        if (resumeRoutineLoadStmt.isAll()) {\n            jobs = checkPrivAndGetAllJobs(resumeRoutineLoadStmt.getDbFullName());\n        } else {\n            RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                    resumeRoutineLoadStmt.getName());\n            jobs.add(routineLoadJob);\n        }\n\n        for (RoutineLoadJob routineLoadJob : jobs) {\n            try {\n                routineLoadJob.jobStatistic.errorRowsAfterResumed = 0;\n                routineLoadJob.autoResumeCount = 0;\n                routineLoadJob.firstResumeTimestamp = 0;\n                routineLoadJob.autoResumeLock = false;\n                routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n                LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                        .add(\"current_state\", routineLoadJob.getState())\n                        .add(\"user\", ConnectContext.get().getQualifiedUser())\n                        .add(\"msg\", \"routine load job has been resumed by user\")\n                        .build());\n            } catch (UserException e) {\n                LOG.warn(\"failed to resume routine load job {}\", routineLoadJob.getName(), e);\n                continue;\n            }\n        }\n    }\n","date":"2021-08-11 16:38:06","endLine":322,"groupId":"2884","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeRoutineLoadJob","params":"(ResumeRoutineLoadStmtresumeRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/7b/7e62faa9b803da8a593d1e6b0d4d604df211c9.src","preCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                resumeRoutineLoadStmt.getName());\n\n        routineLoadJob.jobStatistic.errorRowsAfterResumed = 0;\n        routineLoadJob.autoResumeCount = 0;\n        routineLoadJob.firstResumeTimestamp = 0;\n        routineLoadJob.autoResumeLock = false;\n        routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been resumed by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2020-08-06 23:11:02","commitOrder":4,"curCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","date":"2020-08-06 23:11:02","endLine":277,"groupId":"8164","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"stopRoutineLoadJob","params":"(StopRoutineLoadStmtstopRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/6f7c02b0ae835f03ebbe8fa4e3524aa76d04a1.src","preCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"N"}],"commitId":"708b6c529e83e9f0b70bd9d5dd950721cb8a77a2","commitMessage":"@@@[RoutineLoad] Support pause or resume all routine load jobs (#6394)\n\n1. PAUSE ALL ROUTINE LOAD;\n2. RESUME ALL ROUTINE LOAD;","date":"2021-08-11 16:38:06","modifiedFileCount":"4","status":"M","submitter":"Mingyu Chen"},{"authorTime":"2020-08-06 23:11:02","codes":[{"authorDate":"2021-08-12 11:50:57","commitOrder":5,"curCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n\n        List<RoutineLoadJob> jobs = Lists.newArrayList();\n        if (resumeRoutineLoadStmt.isAll()) {\n            jobs = checkPrivAndGetAllJobs(resumeRoutineLoadStmt.getDbFullName());\n        } else {\n            RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                    resumeRoutineLoadStmt.getName());\n            jobs.add(routineLoadJob);\n        }\n\n        for (RoutineLoadJob routineLoadJob : jobs) {\n            try {\n                routineLoadJob.jobStatistic.errorRowsAfterResumed = 0;\n                routineLoadJob.autoResumeCount = 0;\n                routineLoadJob.firstResumeTimestamp = 0;\n                routineLoadJob.autoResumeLock = false;\n                routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n                LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                        .add(\"current_state\", routineLoadJob.getState())\n                        .add(\"user\", ConnectContext.get().getQualifiedUser())\n                        .add(\"msg\", \"routine load job has been resumed by user\")\n                        .build());\n            } catch (UserException e) {\n                LOG.warn(\"failed to resume routine load job {}\", routineLoadJob.getName(), e);\n                \r\n                \r\n                if (!resumeRoutineLoadStmt.isAll()) {\n                    throw e;\n                }\n                continue;\n            }\n        }\n    }\n","date":"2021-08-12 11:50:57","endLine":332,"groupId":"101113","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeRoutineLoadJob","params":"(ResumeRoutineLoadStmtresumeRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/0f/0a123069310177f4c9a2d1382786dd2a672bef.src","preCode":"    public void resumeRoutineLoadJob(ResumeRoutineLoadStmt resumeRoutineLoadStmt) throws UserException {\n\n        List<RoutineLoadJob> jobs = Lists.newArrayList();\n        if (resumeRoutineLoadStmt.isAll()) {\n            jobs = checkPrivAndGetAllJobs(resumeRoutineLoadStmt.getDbFullName());\n        } else {\n            RoutineLoadJob routineLoadJob = checkPrivAndGetJob(resumeRoutineLoadStmt.getDbFullName(),\n                    resumeRoutineLoadStmt.getName());\n            jobs.add(routineLoadJob);\n        }\n\n        for (RoutineLoadJob routineLoadJob : jobs) {\n            try {\n                routineLoadJob.jobStatistic.errorRowsAfterResumed = 0;\n                routineLoadJob.autoResumeCount = 0;\n                routineLoadJob.firstResumeTimestamp = 0;\n                routineLoadJob.autoResumeLock = false;\n                routineLoadJob.updateState(RoutineLoadJob.JobState.NEED_SCHEDULE, null, false );\n                LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                        .add(\"current_state\", routineLoadJob.getState())\n                        .add(\"user\", ConnectContext.get().getQualifiedUser())\n                        .add(\"msg\", \"routine load job has been resumed by user\")\n                        .build());\n            } catch (UserException e) {\n                LOG.warn(\"failed to resume routine load job {}\", routineLoadJob.getName(), e);\n                continue;\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2020-08-06 23:11:02","commitOrder":5,"curCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","date":"2020-08-06 23:11:02","endLine":277,"groupId":"101113","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"stopRoutineLoadJob","params":"(StopRoutineLoadStmtstopRoutineLoadStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f9/6f7c02b0ae835f03ebbe8fa4e3524aa76d04a1.src","preCode":"    public void stopRoutineLoadJob(StopRoutineLoadStmt stopRoutineLoadStmt)\n            throws UserException {\n        RoutineLoadJob routineLoadJob = checkPrivAndGetJob(stopRoutineLoadStmt.getDbFullName(),\n                stopRoutineLoadStmt.getName());\n        routineLoadJob.updateState(RoutineLoadJob.JobState.STOPPED,\n                new ErrorReason(InternalErrorCode.MANUAL_STOP_ERR,\n                        \"User  \" + ConnectContext.get().getQualifiedUser() + \" stop routine load job\"),\n                false );\n        LOG.info(new LogBuilder(LogKey.ROUTINE_LOAD_JOB, routineLoadJob.getId())\n                         .add(\"current_state\", routineLoadJob.getState())\n                         .add(\"user\", ConnectContext.get().getQualifiedUser())\n                         .add(\"msg\", \"routine load job has been stopped by user\")\n                         .build());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"N"}],"commitId":"671d8f6af82c7fa32a539b7e85d1c66822be0b68","commitMessage":"@@@[Bug] Return error if user failed to pause/resume a certain routine load. (#6426)\n\nWhen operating a single job.  maintain the same behavior as before\nThis problem is introduced by #6394.","date":"2021-08-12 11:50:57","modifiedFileCount":"1","status":"M","submitter":"Mingyu Chen"}]
