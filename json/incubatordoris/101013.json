[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","date":"2020-07-21 12:42:42","endLine":59,"groupId":"5654","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/63/4490b5b2035b68c7e2114f19b2c54569ed497a.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/TransDbProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(catalog);\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        List<String> dbNames = catalog.getDbNames();\n        if (dbNames == null || dbNames.isEmpty()) {\n            \r\n            return result;\n        }\n\n        \r\n        List<List<Comparable>> dbInfos = new ArrayList<List<Comparable>>();\n        for (String dbName : dbNames) {\n            Database db = catalog.getDb(dbName);\n            if (db == null) {\n                continue;\n            }\n            List<Comparable> dbInfo = new ArrayList<Comparable>();\n            db.readLock();\n            try {\n                int tableNum = db.getTables().size();\n                dbInfo.add(db.getId());\n                dbInfo.add(dbName);\n                dbInfo.add(tableNum);\n\n                long dataQuota = db.getDataQuota();\n                Pair<Double, String> quotaUnitPair = DebugUtil.getByteUint(dataQuota);\n                String readableQuota = DebugUtil.DECIMAL_FORMAT_SCALE_3.format(quotaUnitPair.first) + \" \"\n                        + quotaUnitPair.second;\n                dbInfo.add(readableQuota);\n\n                dbInfo.add(TimeUtils.longToTimeString(db.getLastCheckTime()));\n\n                long replicaQuota = db.getReplicaQuota();\n                dbInfo.add(replicaQuota);\n\n            } finally {\n                db.readUnlock();\n            }\n            dbInfos.add(dbInfo);\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(dbInfos, comparator);\n\n        \r\n        for (List<Comparable> info : dbInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","date":"2020-07-21 12:42:42","endLine":136,"groupId":"5654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/97/34a3189cf58d10af0ea4ff0dce52a635d052cd.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(catalog);\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        List<String> dbNames = catalog.getDbNames();\n        if (dbNames == null || dbNames.isEmpty()) {\n            \r\n            return result;\n        }\n\n        \r\n        List<List<Comparable>> dbInfos = new ArrayList<List<Comparable>>();\n        for (String dbName : dbNames) {\n            Database db = catalog.getDb(dbName);\n            if (db == null) {\n                continue;\n            }\n            List<Comparable> dbInfo = new ArrayList<Comparable>();\n            db.readLock();\n            try {\n                int tableNum = db.getTables().size();\n                dbInfo.add(db.getId());\n                dbInfo.add(dbName);\n                dbInfo.add(tableNum);\n\n                long dataQuota = db.getDataQuota();\n                Pair<Double, String> quotaUnitPair = DebugUtil.getByteUint(dataQuota);\n                String readableQuota = DebugUtil.DECIMAL_FORMAT_SCALE_3.format(quotaUnitPair.first) + \" \"\n                        + quotaUnitPair.second;\n                dbInfo.add(readableQuota);\n\n                dbInfo.add(TimeUtils.longToTimeString(db.getLastCheckTime()));\n\n                long replicaQuota = db.getReplicaQuota();\n                dbInfo.add(replicaQuota);\n\n            } finally {\n                db.readUnlock();\n            }\n            dbInfos.add(dbInfo);\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(dbInfos, comparator);\n\n        \r\n        for (List<Comparable> info : dbInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/DbsProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","date":"2020-07-21 12:42:42","endLine":59,"groupId":"101013","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/63/4490b5b2035b68c7e2114f19b2c54569ed497a.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n        GlobalTransactionMgr transactionMgr = Catalog.getCurrentGlobalTransactionMgr();\n        List<List<Comparable>> infos = transactionMgr.getDbInfo();\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(infos, comparator);\n        for (List<Comparable> info : infos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/TransDbProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(catalog);\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        List<String> dbNames = catalog.getDbNames();\n        if (dbNames == null || dbNames.isEmpty()) {\n            \r\n            return result;\n        }\n\n        \r\n        List<List<Comparable>> dbInfos = new ArrayList<List<Comparable>>();\n        for (String dbName : dbNames) {\n            Database db = catalog.getDbNullable(dbName);\n            if (db == null) {\n                continue;\n            }\n            List<Comparable> dbInfo = new ArrayList<Comparable>();\n            db.readLock();\n            try {\n                int tableNum = db.getTables().size();\n                dbInfo.add(db.getId());\n                dbInfo.add(dbName);\n                dbInfo.add(tableNum);\n\n                long dataQuota = db.getDataQuota();\n                Pair<Double, String> quotaUnitPair = DebugUtil.getByteUint(dataQuota);\n                String readableQuota = DebugUtil.DECIMAL_FORMAT_SCALE_3.format(quotaUnitPair.first) + \" \"\n                        + quotaUnitPair.second;\n                dbInfo.add(readableQuota);\n\n                dbInfo.add(TimeUtils.longToTimeString(db.getLastCheckTime()));\n\n                long replicaQuota = db.getReplicaQuota();\n                dbInfo.add(replicaQuota);\n\n            } finally {\n                db.readUnlock();\n            }\n            dbInfos.add(dbInfo);\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(dbInfos, comparator);\n\n        \r\n        for (List<Comparable> info : dbInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","date":"2021-09-03 13:34:49","endLine":133,"groupId":"101013","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchResult","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/08/419d4f46a7bf29ce60ad21c31baba3f071a658.src","preCode":"    public ProcResult fetchResult() throws AnalysisException {\n        Preconditions.checkNotNull(catalog);\n        BaseProcResult result = new BaseProcResult();\n        result.setNames(TITLE_NAMES);\n\n        List<String> dbNames = catalog.getDbNames();\n        if (dbNames == null || dbNames.isEmpty()) {\n            \r\n            return result;\n        }\n\n        \r\n        List<List<Comparable>> dbInfos = new ArrayList<List<Comparable>>();\n        for (String dbName : dbNames) {\n            Database db = catalog.getDb(dbName);\n            if (db == null) {\n                continue;\n            }\n            List<Comparable> dbInfo = new ArrayList<Comparable>();\n            db.readLock();\n            try {\n                int tableNum = db.getTables().size();\n                dbInfo.add(db.getId());\n                dbInfo.add(dbName);\n                dbInfo.add(tableNum);\n\n                long dataQuota = db.getDataQuota();\n                Pair<Double, String> quotaUnitPair = DebugUtil.getByteUint(dataQuota);\n                String readableQuota = DebugUtil.DECIMAL_FORMAT_SCALE_3.format(quotaUnitPair.first) + \" \"\n                        + quotaUnitPair.second;\n                dbInfo.add(readableQuota);\n\n                dbInfo.add(TimeUtils.longToTimeString(db.getLastCheckTime()));\n\n                long replicaQuota = db.getReplicaQuota();\n                dbInfo.add(replicaQuota);\n\n            } finally {\n                db.readUnlock();\n            }\n            dbInfos.add(dbInfo);\n        }\n\n        \r\n        ListComparator<List<Comparable>> comparator = new ListComparator<List<Comparable>>(0);\n        Collections.sort(dbInfos, comparator);\n\n        \r\n        for (List<Comparable> info : dbInfos) {\n            List<String> row = new ArrayList<String>(info.size());\n            for (Comparable comparable : info) {\n                row.add(comparable.toString());\n            }\n            result.addRow(row);\n        }\n        return result;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/common/proc/DbsProcDir.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
