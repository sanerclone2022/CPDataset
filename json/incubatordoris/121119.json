[{"authorTime":"2020-10-15 22:49:39","codes":[{"authorDate":"2020-10-15 22:49:39","commitOrder":1,"curCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        Database db = Catalog.getCurrentCatalog().getDb(stmt.getDbName());\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + stmt.getDbName());\n        }\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(stmt.getLabel())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","date":"2020-10-15 22:49:39","endLine":341,"groupId":"4329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8b/42ab7c10c540c10e5108f84bedf9e6515aa8b8.src","preCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        Database db = Catalog.getCurrentCatalog().getDb(stmt.getDbName());\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + stmt.getDbName());\n        }\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(stmt.getLabel())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/LoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"},{"authorDate":"2020-10-15 22:49:39","commitOrder":1,"curCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(label)) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","date":"2020-10-15 22:49:39","endLine":1678,"groupId":"115","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/79/e4787752177450f89378768c3fe146b1516bca.src","preCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(label)) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/Load.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1593,"status":"B"}],"commitId":"21e7428999c1ec5cd201eebba8a38ebb50a3b662","commitMessage":"@@@[Feature] Support cancel load jobs in batch (#4515)\n\nSupport statement like:\n`cancel load where label like 'xxx';`","date":"2020-10-15 22:49:39","modifiedFileCount":"4","status":"B","submitter":"xy720"},{"authorTime":"2021-07-30 09:24:06","codes":[{"authorDate":"2021-07-30 09:24:06","commitOrder":2,"curCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        Database db = Catalog.getCurrentCatalog().getDb(stmt.getDbName());\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + stmt.getDbName());\n        }\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(stmt.getLabel(), CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","date":"2021-07-30 09:24:06","endLine":355,"groupId":"4329","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b8/d8cabdf855bda3868b3d0c5d2146ff69de55f1.src","preCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        Database db = Catalog.getCurrentCatalog().getDb(stmt.getDbName());\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + stmt.getDbName());\n        }\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(stmt.getLabel())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/LoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2021-07-30 09:24:06","commitOrder":2,"curCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(label, CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        loadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","date":"2021-07-30 09:24:06","endLine":1719,"groupId":"115","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/bc/78e44ba610da4a2887f658b3f88ca5b78a5f7f.src","preCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (entry.getKey().contains(label)) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/Load.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1633,"status":"M"}],"commitId":"14db74fac6ea3bff78b6e7557d621e623ebbee8e","commitMessage":"@@@[Bug] Fix show load like match (#6314)\n\n* fix show load like match\n\n* Compatible with historical issues","date":"2021-07-30 09:24:06","modifiedFileCount":"5","status":"M","submitter":"DinoZhang"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":3,"curCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(stmt.getDbName());\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(stmt.getLabel(), CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":348,"groupId":"121119","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2e/7e79ad049417a39cd99d891340775ff8799e96.src","preCode":"    public void cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        Database db = Catalog.getCurrentCatalog().getDb(stmt.getDbName());\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + stmt.getDbName());\n        }\n\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbIdToLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(stmt.getLabel())) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(stmt.getLabel()));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(stmt.getLabel(), CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        matchLoadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(entity -> !entity.isTxnDone())\n                    .collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (LoadJob loadJob : loadJobs) {\n            try {\n                loadJob.cancelJob(new FailMsg(FailMsg.CancelType.USER_CANCEL, \"user cancel\"));\n            } catch (DdlException e) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" + e.getMessage());\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/LoadManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":3,"curCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(label, CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        loadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","date":"2021-09-03 13:34:49","endLine":1695,"groupId":"121119","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelLoadJob","params":"(CancelLoadStmtstmt@booleanisAccurateMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f6/2d4c483c2dd5c05961d7b4c3472f37bfbd460c.src","preCode":"    public boolean cancelLoadJob(CancelLoadStmt stmt, boolean isAccurateMatch) throws DdlException, AnalysisException {\n        \r\n        String dbName = stmt.getDbName();\n        String label = stmt.getLabel();\n\n        \r\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n        \r\n        List<LoadJob> loadJobs = Lists.newArrayList();\n        readLock();\n        try {\n            Map<String, List<LoadJob>> labelToLoadJobs = dbLabelToLoadJobs.get(db.getId());\n            if (labelToLoadJobs == null) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> matchLoadJobs = Lists.newArrayList();\n            if (isAccurateMatch) {\n                if (labelToLoadJobs.containsKey(label)) {\n                    matchLoadJobs.addAll(labelToLoadJobs.get(label));\n                }\n            } else {\n                PatternMatcher matcher = PatternMatcher.createMysqlPattern(label, CaseSensibility.LABEL.getCaseSensibility());\n                for (Map.Entry<String, List<LoadJob>> entry : labelToLoadJobs.entrySet()) {\n                    if (matcher.match(entry.getKey())) {\n                        loadJobs.addAll(entry.getValue());\n                    }\n                }\n            }\n\n            if (matchLoadJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            \r\n            List<LoadJob> uncompletedLoadJob = matchLoadJobs.stream().filter(job -> {\n                JobState state = job.getState();\n                return state != JobState.CANCELLED && state != JobState.QUORUM_FINISHED && state != JobState.FINISHED;\n            }).collect(Collectors.toList());\n            if (uncompletedLoadJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job which label \" +\n                        (isAccurateMatch ? \"is \" : \"like \") + stmt.getLabel());\n            }\n            loadJobs.addAll(uncompletedLoadJob);\n        } finally {\n            readUnlock();\n        }\n\n        \r\n        Set<String> tableNames = Sets.newHashSet();\n        for (LoadJob loadJob : loadJobs) {\n            tableNames.addAll(loadJob.getTableNames());\n        }\n\n        if (tableNames.isEmpty()) {\n            if (Catalog.getCurrentCatalog().getAuth().checkDbPriv(ConnectContext.get(), dbName,\n                    PrivPredicate.LOAD)) {\n                ErrorReport.reportDdlException(ErrorCode.ERR_SPECIFIC_ACCESS_DENIED_ERROR, \"CANCEL LOAD\");\n            }\n        } else {\n            for (String tblName : tableNames) {\n                if (!Catalog.getCurrentCatalog().getAuth().checkTblPriv(ConnectContext.get(), dbName, tblName,\n                        PrivPredicate.LOAD)) {\n                    ErrorReport.reportDdlException(ErrorCode.ERR_TABLEACCESS_DENIED_ERROR, \"CANCEL LOAD\",\n                            ConnectContext.get().getQualifiedUser(),\n                            ConnectContext.get().getRemoteIP(), tblName);\n                }\n            }\n        }\n\n        \r\n        for (LoadJob loadJob : loadJobs) {\n            List<String> failedMsg = Lists.newArrayList();\n            boolean ok = cancelLoadJob(loadJob, CancelType.USER_CANCEL, \"user cancel\", failedMsg);\n            if (!ok) {\n                throw new DdlException(\"Cancel load job [\" + loadJob.getId() + \"] fail, \" +\n                        \"label=[\" + loadJob.getLabel() + \"] failed msg=\" +\n                        (failedMsg.isEmpty() ? \"Unknown reason\" : failedMsg.get(0)));\n            }\n        }\n\n        return true;\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/Load.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1612,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"}]
