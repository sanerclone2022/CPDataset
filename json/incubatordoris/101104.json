[{"authorTime":"2021-08-08 21:39:34","codes":[{"authorDate":"2021-08-08 21:39:34","commitOrder":1,"curCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(entity -> entity.isPaused())\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","date":"2021-08-08 21:39:34","endLine":153,"groupId":"5985","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeSyncJob","params":"(ResumeSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/60/a601965e85ea1677f7df65136a57af1ce5c885.src","preCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(entity -> entity.isPaused())\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2021-08-08 21:39:34","commitOrder":1,"curCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","date":"2021-08-08 21:39:34","endLine":188,"groupId":"5985","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopSyncJob","params":"(StopSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/60/a601965e85ea1677f7df65136a57af1ce5c885.src","preCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"c8c571af37193ee10b5437fd9b47b30c4b917d60","commitMessage":"@@@[New Feature] Support synchronizing MySQL binlog in real time [stage 1] (#6289)\n\nThis commit is the first stage of #6287 \n\nIn this commit.  we support:\n1?Sync Job\n1)? Creating sync job and data channel in Fe.\n2)?Pause sync job.\n3)?Resume sync job.\n4)?Stop sync job.\n5)?Show sync jobs.\n\n2?Canal\n1)?Subscribing and getting the binlog data of canal with creating syncjob.","date":"2021-08-08 21:39:34","modifiedFileCount":"11","status":"B","submitter":"xy720"},{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(SyncJob::isPaused)\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":147,"groupId":"2071","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeSyncJob","params":"(ResumeSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8b/06f0648b41bf6c2d77900ae2b9938390b374a1.src","preCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(entity -> entity.isPaused())\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","date":"2021-09-03 13:34:49","endLine":179,"groupId":"5985","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopSyncJob","params":"(StopSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8b/06f0648b41bf6c2d77900ae2b9938390b374a1.src","preCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDb(dbName);\n        if (db == null) {\n            throw new DdlException(\"Db does not exist. name: \" + dbName);\n        }\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"},{"authorTime":"2021-09-25 12:24:29","codes":[{"authorDate":"2021-09-25 12:24:29","commitOrder":3,"curCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws UserException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(SyncJob::isPaused)\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","date":"2021-09-25 12:24:29","endLine":154,"groupId":"101104","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"resumeSyncJob","params":"(ResumeSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e7/31e03d6d063130503d5fc7ce5bd93b36ffbacd.src","preCode":"    public void resumeSyncJob(ResumeSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> pausedSyncJob = matchJobs.stream().filter(SyncJob::isPaused)\n                    .collect(Collectors.toList());\n            if (pausedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no paused job with jobName `\"\n                        + stmt.getJobName() + \"` to resume\");\n            }\n\n            syncJobs.addAll(pausedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.resume();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-09-25 12:24:29","commitOrder":3,"curCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws UserException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","date":"2021-09-25 12:24:29","endLine":186,"groupId":"101104","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"stopSyncJob","params":"(StopSyncJobStmtstmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/e7/31e03d6d063130503d5fc7ce5bd93b36ffbacd.src","preCode":"    public void stopSyncJob(StopSyncJobStmt stmt) throws DdlException {\n        String dbName = stmt.getDbFullName();\n        String jobName = stmt.getJobName();\n\n        Database db = Catalog.getCurrentCatalog().getDbOrDdlException(dbName);\n\n        \r\n        List<SyncJob> syncJobs = Lists.newArrayList();\n        readLock();\n        try {\n            List<SyncJob> matchJobs = getSyncJobsByDbAndJobName(db.getId(), jobName);\n            if (matchJobs.isEmpty()) {\n                throw new DdlException(\"Load job does not exist\");\n            }\n\n            List<SyncJob> uncompletedSyncJob = matchJobs.stream().filter(entity -> !entity.isCompleted())\n                    .collect(Collectors.toList());\n            if (uncompletedSyncJob.isEmpty()) {\n                throw new DdlException(\"There is no uncompleted job with jobName `\"\n                        + stmt.getJobName() + \"`\");\n            }\n\n            syncJobs.addAll(uncompletedSyncJob);\n        } finally {\n            readUnlock();\n        }\n\n        for (SyncJob syncJob : syncJobs) {\n            syncJob.cancel(SyncFailMsg.MsgType.USER_CANCEL, \"user cancel\");\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/sync/SyncJobManager.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"537a542dba5604a5ad55ddfc959404cccc6dd8b4","commitMessage":"@@@[Bugs] Fix the bugs list of sync job (#6705)\n\n1?Fix bug that the sync jobs are not cancelled after deleting the database.\n2?The MySQL and Doris tables should have a one-to-one correspondence. \n      If they are not.  they should fail when creating the task.\n3?When the cluster has multiple FE.  the non-master will core when replay create the sync job.\n4?Inconsistent data when updating key column\n5?Failed to synchronize data when there are multiple tables in single sync job.\n6?After restarting the master.  resuming the paused syncjob will fail.","date":"2021-09-25 12:24:29","modifiedFileCount":"15","status":"M","submitter":"xy720"}]
