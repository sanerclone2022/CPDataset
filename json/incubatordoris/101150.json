[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void write(DataOutput out) throws IOException {\n        \r\n        Text.writeString(out, dataSourceType.name());\n\n        out.writeLong(id);\n        Text.writeString(out, name);\n        Text.writeString(out, clusterName);\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeInt(desireTaskConcurrentNum);\n        Text.writeString(out, state.name());\n        out.writeLong(maxErrorNum);\n        out.writeLong(maxBatchIntervalS);\n        out.writeLong(maxBatchRows);\n        out.writeLong(maxBatchSizeBytes);\n        progress.write(out);\n\n        out.writeLong(createTimestamp);\n        out.writeLong(pauseTimestamp);\n        out.writeLong(endTimestamp);\n\n        out.writeLong(currentErrorRows);\n        out.writeLong(currentTotalRows);\n        out.writeLong(errorRows);\n        out.writeLong(totalRows);\n        out.writeLong(unselectedRows);\n        out.writeLong(receivedBytes);\n        out.writeLong(totalTaskExcutionTimeMs);\n        out.writeLong(committedTaskNum);\n        out.writeLong(abortedTaskNum);\n\n        origStmt.write(out);\n        out.writeInt(jobProperties.size());\n        for (Map.Entry<String, String> entry : jobProperties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n\n        out.writeInt(sessionVariables.size());\n        for (Map.Entry<String, String> entry : sessionVariables.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":1313,"groupId":"5766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/88/d7f481ce5a78d25c1aed1f88c988c6812b7520.src","preCode":"    public void write(DataOutput out) throws IOException {\n        \r\n        Text.writeString(out, dataSourceType.name());\n\n        out.writeLong(id);\n        Text.writeString(out, name);\n        Text.writeString(out, clusterName);\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeInt(desireTaskConcurrentNum);\n        Text.writeString(out, state.name());\n        out.writeLong(maxErrorNum);\n        out.writeLong(maxBatchIntervalS);\n        out.writeLong(maxBatchRows);\n        out.writeLong(maxBatchSizeBytes);\n        progress.write(out);\n\n        out.writeLong(createTimestamp);\n        out.writeLong(pauseTimestamp);\n        out.writeLong(endTimestamp);\n\n        out.writeLong(currentErrorRows);\n        out.writeLong(currentTotalRows);\n        out.writeLong(errorRows);\n        out.writeLong(totalRows);\n        out.writeLong(unselectedRows);\n        out.writeLong(receivedBytes);\n        out.writeLong(totalTaskExcutionTimeMs);\n        out.writeLong(committedTaskNum);\n        out.writeLong(abortedTaskNum);\n\n        origStmt.write(out);\n        out.writeInt(jobProperties.size());\n        for (Map.Entry<String, String> entry : jobProperties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n\n        out.writeInt(sessionVariables.size());\n        for (Map.Entry<String, String> entry : sessionVariables.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","date":"2020-07-21 12:42:42","endLine":109,"groupId":"4548","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2d/08a8a43fa9dfba86d6ec97ad15302ef77eb73e.src","preCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/TableInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-07-17 10:43:59","commitOrder":2,"curCode":"    public void write(DataOutput out) throws IOException {\n        \r\n        Text.writeString(out, dataSourceType.name());\n\n        out.writeLong(id);\n        Text.writeString(out, name);\n        Text.writeString(out, clusterName);\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeInt(desireTaskConcurrentNum);\n        Text.writeString(out, state.name());\n        out.writeLong(maxErrorNum);\n        out.writeLong(maxBatchIntervalS);\n        out.writeLong(maxBatchRows);\n        out.writeLong(maxBatchSizeBytes);\n        progress.write(out);\n\n        out.writeLong(createTimestamp);\n        out.writeLong(pauseTimestamp);\n        out.writeLong(endTimestamp);\n\n        this.jobStatistic.write(out);\n\n        origStmt.write(out);\n        out.writeInt(jobProperties.size());\n        for (Map.Entry<String, String> entry : jobProperties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n\n        out.writeInt(sessionVariables.size());\n        for (Map.Entry<String, String> entry : sessionVariables.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","date":"2021-07-17 10:43:59","endLine":1514,"groupId":"101150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a9/b7083216b684115cdb5aeed4c05d4f11a80d02.src","preCode":"    public void write(DataOutput out) throws IOException {\n        \r\n        Text.writeString(out, dataSourceType.name());\n\n        out.writeLong(id);\n        Text.writeString(out, name);\n        Text.writeString(out, clusterName);\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeInt(desireTaskConcurrentNum);\n        Text.writeString(out, state.name());\n        out.writeLong(maxErrorNum);\n        out.writeLong(maxBatchIntervalS);\n        out.writeLong(maxBatchRows);\n        out.writeLong(maxBatchSizeBytes);\n        progress.write(out);\n\n        out.writeLong(createTimestamp);\n        out.writeLong(pauseTimestamp);\n        out.writeLong(endTimestamp);\n\n        out.writeLong(currentErrorRows);\n        out.writeLong(currentTotalRows);\n        out.writeLong(errorRows);\n        out.writeLong(totalRows);\n        out.writeLong(unselectedRows);\n        out.writeLong(receivedBytes);\n        out.writeLong(totalTaskExcutionTimeMs);\n        out.writeLong(committedTaskNum);\n        out.writeLong(abortedTaskNum);\n        origStmt.write(out);\n        out.writeInt(jobProperties.size());\n        for (Map.Entry<String, String> entry : jobProperties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n\n        out.writeInt(sessionVariables.size());\n        for (Map.Entry<String, String> entry : sessionVariables.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/routineload/RoutineLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1479,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","date":"2020-07-21 12:42:42","endLine":109,"groupId":"101150","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2d/08a8a43fa9dfba86d6ec97ad15302ef77eb73e.src","preCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/TableInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"e39e1571ecdbe907fc755c01c268784c64c2377b","commitMessage":"@@@[Feature] Add an indicator called errorRowsAfterResumed to distinguish between ? (#6092)\n\n1. [enhancement] add an indicator called errorRowsAfterResumed to distinguish between totalErrorRows(called errorRows) and errorRowsAfterResumed. (#6092)\n2. [Refactor] separate some indicators from RoutineLoadJob class to avoid changing FeMetaVersion while modifying indicators of RoutineLoadJob.(#6092)","date":"2021-07-17 10:43:59","modifiedFileCount":"6","status":"M","submitter":"Henry2SS"}]
