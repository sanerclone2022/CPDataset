[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n        this.isPushDown = false;\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":99,"groupId":"6390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"HashJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef@List<Expr>eqJoinConjuncts@List<Expr>otherJoinConjuncts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f6/765e7c28132a7e660971aa95c94f744697ab85.src","preCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n        this.isPushDown = false;\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/HashJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"3937","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"CrossJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cc/0eb95a4232bb9b9533ecf30e89865a4bcb2a3b.src","preCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/CrossJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-04-11 22:02:03","commitOrder":2,"curCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n        if (this.joinOp.isInnerJoin() || this.joinOp.isLeftSemiJoin()) {\n            this.isPushDown = true;\n        }\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","date":"2021-04-11 22:02:03","endLine":104,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"HashJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef@List<Expr>eqJoinConjuncts@List<Expr>otherJoinConjuncts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/23/60d5c7dbba7f424db06d06a70ce849cc2d912a.src","preCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n        this.isPushDown = false;\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/HashJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"3937","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"CrossJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cc/0eb95a4232bb9b9533ecf30e89865a4bcb2a3b.src","preCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/CrossJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"a25e3afa5b43051a3f2ca9faae679b01481b0c0b","commitMessage":"@@@[Colocate plan][Step1] Colocate join covers more situations (#5521)\n\nThe old colocate join can only cover the case where the child is hash or scan.\nIn fact.  as long as the child's data distribution meets the requirements. \nno matter what the plan node on the child node is.  a colocate join can be performed.","date":"2021-04-11 22:02:03","modifiedFileCount":"15","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-07-13 11:36:01","commitOrder":3,"curCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","date":"2021-07-13 11:36:01","endLine":100,"groupId":"101229","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"HashJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef@List<Expr>eqJoinConjuncts@List<Expr>otherJoinConjuncts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/6b/06de2a9323d172432c3b531f126b803f00a5f0.src","preCode":"    public HashJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef,\n                        List<Expr> eqJoinConjuncts, List<Expr> otherJoinConjuncts) {\n        super(id, \"HASH JOIN\");\n        Preconditions.checkArgument(eqJoinConjuncts != null && !eqJoinConjuncts.isEmpty());\n        Preconditions.checkArgument(otherJoinConjuncts != null);\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        this.innerRef = innerRef;\n        this.joinOp = innerRef.getJoinOp();\n        for (Expr eqJoinPredicate : eqJoinConjuncts) {\n            Preconditions.checkArgument(eqJoinPredicate instanceof BinaryPredicate);\n            this.eqJoinConjuncts.add((BinaryPredicate) eqJoinPredicate);\n        }\n        this.distrMode = DistributionMode.NONE;\n        this.otherJoinConjuncts = otherJoinConjuncts;\n        children.add(outer);\n        children.add(inner);\n        if (this.joinOp.isInnerJoin() || this.joinOp.isLeftSemiJoin()) {\n            this.isPushDown = true;\n        }\n\n        \r\n        \r\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        if (joinOp.equals(JoinOperator.FULL_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.LEFT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(inner.getTupleIds());\n        } else if (joinOp.equals(JoinOperator.RIGHT_OUTER_JOIN)) {\n            nullableTupleIds.addAll(outer.getTupleIds());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/HashJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","date":"2020-07-21 12:42:42","endLine":56,"groupId":"101229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"CrossJoinNode","params":"(PlanNodeIdid@PlanNodeouter@PlanNodeinner@TableRefinnerRef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/cc/0eb95a4232bb9b9533ecf30e89865a4bcb2a3b.src","preCode":"    public CrossJoinNode(PlanNodeId id, PlanNode outer, PlanNode inner, TableRef innerRef) {\n        super(id, \"CROSS JOIN\");\n        innerRef_ = innerRef;\n        tupleIds.addAll(outer.getTupleIds());\n        tupleIds.addAll(inner.getTupleIds());\n        tblRefIds.addAll(outer.getTblRefIds());\n        tblRefIds.addAll(inner.getTblRefIds());\n        children.add(outer);\n        children.add(inner);\n\n        \r\n        \r\n        nullableTupleIds.addAll(outer.getNullableTupleIds());\n        nullableTupleIds.addAll(inner.getNullableTupleIds());\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/planner/CrossJoinNode.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"394a9a1472cb8bfe91f6649afcbeee7f0178dc62","commitMessage":"@@@[Feature] Runtime Filtering for Doris (Background.  Configuration.  FE Implement.  Tuning.  Test ) (#6121)\n\n- `RuntimeFilterGenerator` is used to generate Runtime Filter and assign it to the node that uses Runtime Filter in the query plan.\n\n- `RuntimeFilter` represents a filter in the query plan.  including the specific properties of the filter.  the binding method of expr and tuple slot.  etc.\n\n- `RuntimeFilterTarget` indicates the filter information provided to ScanNode.  including target expr.  whether to merge.  etc.","date":"2021-07-13 11:36:01","modifiedFileCount":"22","status":"M","submitter":"Xinyi Zou"}]
