[{"authorTime":"2021-09-03 13:34:49","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public void testForceDropTable() throws Exception {\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl2\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        String dropTableSql = \"drop table test.tbl2 force\";\n        dropTable(dropTableSql);\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover table test.tbl2\";\n        RecoverTableStmt recoverTableStmt = (RecoverTableStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown table 'tbl2'\",\n                () -> Catalog.getCurrentCatalog().recoverTable(recoverTableStmt));\n    }\n","date":"2021-09-03 13:34:49","endLine":113,"groupId":"1298","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceDropTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/fc/543fea1ca75d67a6c50dabc0db5c5c44290bda.src","preCode":"    public void testForceDropTable() throws Exception {\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl2\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        String dropTableSql = \"drop table test.tbl2 force\";\n        dropTable(dropTableSql);\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover table test.tbl2\";\n        RecoverTableStmt recoverTableStmt = (RecoverTableStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown table 'tbl2'\",\n                () -> Catalog.getCurrentCatalog().recoverTable(recoverTableStmt));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/DropTableTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"MB"},{"authorDate":"2021-09-03 13:34:49","commitOrder":2,"curCode":"    public void testForceDropDb() throws Exception {\n        String dropDbSql = \"drop database test2 force\";\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test2\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl1\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        dropDb(dropDbSql);\n        db = Catalog.getCurrentCatalog().getDbNullable(\"default_cluster:test2\");\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertNull(db);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover database test2\";\n        RecoverDbStmt recoverDbStmt = (RecoverDbStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown database 'default_cluster:test2'\",\n                () -> Catalog.getCurrentCatalog().recoverDatabase(recoverDbStmt));\n    }\n","date":"2021-09-03 13:34:49","endLine":123,"groupId":"3134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceDropDb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/d6/95fa5bb4f5d45296bd0d2888e53f487ea8405f.src","preCode":"    public void testForceDropDb() throws Exception {\n        String dropDbSql = \"drop database test2 force\";\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test2\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl1\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        dropDb(dropDbSql);\n        db = Catalog.getCurrentCatalog().getDbNullable(\"default_cluster:test2\");\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertNull(db);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover database test2\";\n        RecoverDbStmt recoverDbStmt = (RecoverDbStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown database 'default_cluster:test2'\",\n                () -> Catalog.getCurrentCatalog().recoverDatabase(recoverDbStmt));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/DropDbTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"MB"}],"commitId":"df54b34f9843adf80d5fa753383797690e9458dd","commitMessage":"@@@[Catalog] Enforce null check at Catalog.getDb and Database.getTable (#6416)\n\nfix #5378 #5391 #5688 #5973 #6155 and all replay NPE. All replay method can now throw MetaNotFoundException and caught to log a warning for potential inconsistent metadata cases.\n\ntry to establish a clear notice for future developer to check null.","date":"2021-09-03 13:34:49","modifiedFileCount":"190","status":"M","submitter":"ccoffline"},{"authorTime":"2021-09-24 10:35:40","codes":[{"authorDate":"2021-09-03 13:34:49","commitOrder":3,"curCode":"    public void testForceDropTable() throws Exception {\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl2\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        String dropTableSql = \"drop table test.tbl2 force\";\n        dropTable(dropTableSql);\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover table test.tbl2\";\n        RecoverTableStmt recoverTableStmt = (RecoverTableStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown table 'tbl2'\",\n                () -> Catalog.getCurrentCatalog().recoverTable(recoverTableStmt));\n    }\n","date":"2021-09-03 13:34:49","endLine":113,"groupId":"10603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceDropTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/fc/543fea1ca75d67a6c50dabc0db5c5c44290bda.src","preCode":"    public void testForceDropTable() throws Exception {\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl2\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        String dropTableSql = \"drop table test.tbl2 force\";\n        dropTable(dropTableSql);\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover table test.tbl2\";\n        RecoverTableStmt recoverTableStmt = (RecoverTableStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown table 'tbl2'\",\n                () -> Catalog.getCurrentCatalog().recoverTable(recoverTableStmt));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/DropTableTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2021-09-24 10:35:40","commitOrder":3,"curCode":"    public void testForceDropDb() throws Exception {\n        String dropDbSql = \"drop database test2 force\";\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test2\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl1\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        dropDb(dropDbSql);\n        db = Catalog.getCurrentCatalog().getDbNullable(\"default_cluster:test2\");\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertNull(db);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover database test2\";\n        RecoverDbStmt recoverDbStmt = (RecoverDbStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown database 'default_cluster:test2'\",\n                () -> Catalog.getCurrentCatalog().recoverDatabase(recoverDbStmt));\n\n        dropDbSql = \"drop schema test3 force\";\n        db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test3\");\n        Assert.assertNotNull(db);\n        dropDb(dropDbSql);\n        db = Catalog.getCurrentCatalog().getDbNullable(\"default_cluster:test3\");\n        Assert.assertNull(db);\n        recoverDbSql = \"recover database test3\";\n        RecoverDbStmt recoverDbStmt2 = (RecoverDbStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown database 'default_cluster:test3'\",\n                () -> Catalog.getCurrentCatalog().recoverDatabase(recoverDbStmt2));\n\n        dropDbSql = \"drop schema if exists test3 force\";\n        dropDb(dropDbSql);\n    }\n","date":"2021-09-24 10:35:40","endLine":153,"groupId":"10603","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testForceDropDb","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/ca/2f1cb953c8b4990cadbb7c42a498169b597f27.src","preCode":"    public void testForceDropDb() throws Exception {\n        String dropDbSql = \"drop database test2 force\";\n        Database db = Catalog.getCurrentCatalog().getDbOrMetaException(\"default_cluster:test2\");\n        OlapTable table = (OlapTable) db.getTableOrMetaException(\"tbl1\");\n        Partition partition = table.getAllPartitions().iterator().next();\n        long tabletId = partition.getBaseIndex().getTablets().get(0).getId();\n        dropDb(dropDbSql);\n        db = Catalog.getCurrentCatalog().getDbNullable(\"default_cluster:test2\");\n        List<Replica> replicaList = Catalog.getCurrentCatalog().getTabletInvertedIndex().getReplicasByTabletId(tabletId);\n        Assert.assertNull(db);\n        Assert.assertTrue(replicaList.isEmpty());\n        String recoverDbSql = \"recover database test2\";\n        RecoverDbStmt recoverDbStmt = (RecoverDbStmt) UtFrameUtils.parseAndAnalyzeStmt(recoverDbSql, connectContext);\n        ExceptionChecker.expectThrowsWithMsg(DdlException.class,\n                \"Unknown database 'default_cluster:test2'\",\n                () -> Catalog.getCurrentCatalog().recoverDatabase(recoverDbStmt));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/catalog/DropDbTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"a52104fe40e82fd4f7e7690df1b80890e99379d5","commitMessage":"@@@[Bug] Fix bug that DROP SCHEMA will forcibly database (#6729)\n\n","date":"2021-09-24 10:35:40","modifiedFileCount":"1","status":"M","submitter":"Mingyu Chen"}]
