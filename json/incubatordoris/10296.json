[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testReadFile(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                             @Injectable BrokerMgr brokerMgr)\n            throws TException, UserException, UnsupportedEncodingException {\n        \r\n        TBrokerListResponse listResponse = new TBrokerListResponse();\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        listResponse.opStatus = status;\n        List<TBrokerFileStatus> files = Lists.newArrayList();\n        String filePath = \"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9/dpp_result.json\";\n        files.add(new TBrokerFileStatus(filePath, false, 10, false));\n        listResponse.files = files;\n\n        \r\n        TBrokerOpenReaderResponse openReaderResponse = new TBrokerOpenReaderResponse();\n        openReaderResponse.opStatus = status;\n        openReaderResponse.fd = new TBrokerFD(1, 2);\n\n        \r\n        String dppResultStr = \"{'normal_rows': 10, 'abnormal_rows': 0, 'failed_reason': 'etl job failed'}\";\n        TBrokerReadResponse readResponse = new TBrokerReadResponse();\n        readResponse.opStatus = status;\n        readResponse.setData(dppResultStr.getBytes(\"UTF-8\"));\n\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.listPath((TBrokerListPathRequest) any);\n                result = listResponse;\n                client.openReader((TBrokerOpenReaderRequest) any);\n                result = openReaderResponse;\n                client.pread((TBrokerPReadRequest) any);\n                result = readResponse;\n                times = 1;\n                client.closeReader((TBrokerCloseReaderRequest) any);\n                result = status;\n            }\n        };\n\n        BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n        byte[] data = BrokerUtil.readFile(filePath, brokerDesc);\n        String readStr = new String(data, \"UTF-8\");\n        Assert.assertEquals(dppResultStr, readStr);\n    }\n","date":"2020-07-21 12:42:42","endLine":224,"groupId":"7490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFile","params":"(@MockedTPaloBrokerService.Clientclient@@MockedCatalogcatalog@@InjectableBrokerMgrbrokerMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/e5d0fa7e5945e19bb4b3137b1abc6bd14fff8c.src","preCode":"    public void testReadFile(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                             @Injectable BrokerMgr brokerMgr)\n            throws TException, UserException, UnsupportedEncodingException {\n        \r\n        TBrokerListResponse listResponse = new TBrokerListResponse();\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        listResponse.opStatus = status;\n        List<TBrokerFileStatus> files = Lists.newArrayList();\n        String filePath = \"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9/dpp_result.json\";\n        files.add(new TBrokerFileStatus(filePath, false, 10, false));\n        listResponse.files = files;\n\n        \r\n        TBrokerOpenReaderResponse openReaderResponse = new TBrokerOpenReaderResponse();\n        openReaderResponse.opStatus = status;\n        openReaderResponse.fd = new TBrokerFD(1, 2);\n\n        \r\n        String dppResultStr = \"{'normal_rows': 10, 'abnormal_rows': 0, 'failed_reason': 'etl job failed'}\";\n        TBrokerReadResponse readResponse = new TBrokerReadResponse();\n        readResponse.opStatus = status;\n        readResponse.setData(dppResultStr.getBytes(\"UTF-8\"));\n\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.listPath((TBrokerListPathRequest) any);\n                result = listResponse;\n                client.openReader((TBrokerOpenReaderRequest) any);\n                result = openReaderResponse;\n                client.pread((TBrokerPReadRequest) any);\n                result = readResponse;\n                times = 1;\n                client.closeReader((TBrokerCloseReaderRequest) any);\n                result = status;\n            }\n        };\n\n        BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n        byte[] data = BrokerUtil.readFile(filePath, brokerDesc);\n        String readStr = new String(data, \"UTF-8\");\n        Assert.assertEquals(dppResultStr, readStr);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/util/BrokerUtilTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void testDeletePath(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                               @Injectable BrokerMgr brokerMgr) throws AnalysisException, TException {\n        \r\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.deletePath((TBrokerDeletePathRequest) any);\n                result = status;\n                times = 1;\n            }\n        };\n\n        try {\n            BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n            BrokerUtil.deletePath(\"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9\", brokerDesc);\n        } catch (Exception e) {\n            Assert.fail(e.getMessage());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":324,"groupId":"7490","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletePath","params":"(@MockedTPaloBrokerService.Clientclient@@MockedCatalogcatalog@@InjectableBrokerMgrbrokerMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/e5d0fa7e5945e19bb4b3137b1abc6bd14fff8c.src","preCode":"    public void testDeletePath(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                               @Injectable BrokerMgr brokerMgr) throws AnalysisException, TException {\n        \r\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.deletePath((TBrokerDeletePathRequest) any);\n                result = status;\n                times = 1;\n            }\n        };\n\n        try {\n            BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n            BrokerUtil.deletePath(\"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9\", brokerDesc);\n        } catch (Exception e) {\n            Assert.fail(e.getMessage());\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/util/BrokerUtilTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-07-18 22:14:42","commitOrder":2,"curCode":"    public void testReadFile(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                             @Injectable BrokerMgr brokerMgr)\n            throws TException, UserException, UnsupportedEncodingException {\n        \r\n        TBrokerListResponse listResponse = new TBrokerListResponse();\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        listResponse.opStatus = status;\n        List<TBrokerFileStatus> files = Lists.newArrayList();\n        String filePath = \"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9/dpp_result.json\";\n        files.add(new TBrokerFileStatus(filePath, false, 10, false));\n        listResponse.files = files;\n\n        \r\n        TBrokerOpenReaderResponse openReaderResponse = new TBrokerOpenReaderResponse();\n        openReaderResponse.opStatus = status;\n        openReaderResponse.fd = new TBrokerFD(1, 2);\n\n        \r\n        String dppResultStr = \"{'normal_rows': 10, 'abnormal_rows': 0, 'failed_reason': 'etl job failed'}\";\n        TBrokerReadResponse readResponse = new TBrokerReadResponse();\n        readResponse.opStatus = status;\n        readResponse.setData(dppResultStr.getBytes(\"UTF-8\"));\n\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.listPath((TBrokerListPathRequest) any);\n                result = listResponse;\n                client.openReader((TBrokerOpenReaderRequest) any);\n                result = openReaderResponse;\n                client.pread((TBrokerPReadRequest) any);\n                result = readResponse;\n                times = 1;\n                client.closeReader((TBrokerCloseReaderRequest) any);\n                result = status;\n            }\n        };\n\n        BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n        byte[] data = BrokerUtil.readFile(filePath, brokerDesc, 0);\n        String readStr = new String(data, \"UTF-8\");\n        Assert.assertEquals(dppResultStr, readStr);\n    }\n","date":"2021-07-18 22:14:42","endLine":225,"groupId":"10296","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testReadFile","params":"(@MockedTPaloBrokerService.Clientclient@@MockedCatalogcatalog@@InjectableBrokerMgrbrokerMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/af/7d3279e649121694cc7e88f87610d970558851.src","preCode":"    public void testReadFile(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                             @Injectable BrokerMgr brokerMgr)\n            throws TException, UserException, UnsupportedEncodingException {\n        \r\n        TBrokerListResponse listResponse = new TBrokerListResponse();\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        listResponse.opStatus = status;\n        List<TBrokerFileStatus> files = Lists.newArrayList();\n        String filePath = \"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9/dpp_result.json\";\n        files.add(new TBrokerFileStatus(filePath, false, 10, false));\n        listResponse.files = files;\n\n        \r\n        TBrokerOpenReaderResponse openReaderResponse = new TBrokerOpenReaderResponse();\n        openReaderResponse.opStatus = status;\n        openReaderResponse.fd = new TBrokerFD(1, 2);\n\n        \r\n        String dppResultStr = \"{'normal_rows': 10, 'abnormal_rows': 0, 'failed_reason': 'etl job failed'}\";\n        TBrokerReadResponse readResponse = new TBrokerReadResponse();\n        readResponse.opStatus = status;\n        readResponse.setData(dppResultStr.getBytes(\"UTF-8\"));\n\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.listPath((TBrokerListPathRequest) any);\n                result = listResponse;\n                client.openReader((TBrokerOpenReaderRequest) any);\n                result = openReaderResponse;\n                client.pread((TBrokerPReadRequest) any);\n                result = readResponse;\n                times = 1;\n                client.closeReader((TBrokerCloseReaderRequest) any);\n                result = status;\n            }\n        };\n\n        BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n        byte[] data = BrokerUtil.readFile(filePath, brokerDesc);\n        String readStr = new String(data, \"UTF-8\");\n        Assert.assertEquals(dppResultStr, readStr);\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/util/BrokerUtilTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void testDeletePath(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                               @Injectable BrokerMgr brokerMgr) throws AnalysisException, TException {\n        \r\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.deletePath((TBrokerDeletePathRequest) any);\n                result = status;\n                times = 1;\n            }\n        };\n\n        try {\n            BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n            BrokerUtil.deletePath(\"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9\", brokerDesc);\n        } catch (Exception e) {\n            Assert.fail(e.getMessage());\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":324,"groupId":"10296","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeletePath","params":"(@MockedTPaloBrokerService.Clientclient@@MockedCatalogcatalog@@InjectableBrokerMgrbrokerMgr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4b/e5d0fa7e5945e19bb4b3137b1abc6bd14fff8c.src","preCode":"    public void testDeletePath(@Mocked TPaloBrokerService.Client client, @Mocked Catalog catalog,\n                               @Injectable BrokerMgr brokerMgr) throws AnalysisException, TException {\n        \r\n        TBrokerOperationStatus status = new TBrokerOperationStatus();\n        status.statusCode = TBrokerOperationStatusCode.OK;\n        FsBroker fsBroker = new FsBroker(\"127.0.0.1\", 99999);\n\n        new MockUp<GenericPool<TPaloBrokerService.Client>>() {\n            @Mock\n            public TPaloBrokerService.Client borrowObject(TNetworkAddress address) throws Exception {\n                return client;\n            }\n\n            @Mock\n            public void returnObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n\n            @Mock\n            public void invalidateObject(TNetworkAddress address, TPaloBrokerService.Client object) {\n                return;\n            }\n        };\n\n        new Expectations() {\n            {\n                catalog.getBrokerMgr();\n                result = brokerMgr;\n                brokerMgr.getBroker(anyString, anyString);\n                result = fsBroker;\n                client.deletePath((TBrokerDeletePathRequest) any);\n                result = status;\n                times = 1;\n            }\n        };\n\n        try {\n            BrokerDesc brokerDesc = new BrokerDesc(\"broker0\", Maps.newHashMap());\n            BrokerUtil.deletePath(\"hdfs://127.0.0.1:10000/doris/jobs/1/label6/9\", brokerDesc);\n        } catch (Exception e) {\n            Assert.fail(e.getMessage());\n        }\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/common/util/BrokerUtilTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"N"}],"commitId":"a4b1622cebb10e9fbce0c9e5b4c4598f0bc08e50","commitMessage":"@@@[HttpV2] Add more httpv2 APIs (#6210)\n\n1. /api/cluster_overview to view some statistic info of the cluster\n2. /api/meta/ to view the database/table schema\n3. /api/import/file_review to review the file content with format CSV or PARQUET.","date":"2021-07-18 22:14:42","modifiedFileCount":"5","status":"M","submitter":"Mingyu Chen"}]
