[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":243,"groupId":"2871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(SparkPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/f1/dff69c78399a520f7e05137519ecedc4d7566f.src","preCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/SparkLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","date":"2020-07-21 12:42:42","endLine":161,"groupId":"2871","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(BrokerPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/9c/a4c77303820bdf6a933e76260a1fe8ddf6b8bf.src","preCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/BrokerLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-08-27 12:08:55","commitOrder":2,"curCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkLoadAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","date":"2020-08-27 12:08:55","endLine":241,"groupId":"2871","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(SparkPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/65/76be232f6b9a4fb3c28bee587ce7df91cde7e8.src","preCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/SparkLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","date":"2020-07-21 12:42:42","endLine":161,"groupId":"2871","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(BrokerPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/9c/a4c77303820bdf6a933e76260a1fe8ddf6b8bf.src","preCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/BrokerLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"8c38c79104d8b3721bd7588e1de49ade95fd1e46","commitMessage":"@@@[SparkLoad]Use the yarn command to get status and kill the application (#4383)\n\nThis cl will use yarn command as follows to kill or get status of application running on YARN.\n\n```\nyarn --config confdir application <-kill | -status> <Application ID>\n```","date":"2020-08-27 12:08:55","modifiedFileCount":"8","status":"M","submitter":"xy720"},{"authorTime":"2020-11-08 20:50:50","codes":[{"authorDate":"2020-08-27 12:08:55","commitOrder":3,"curCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkLoadAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","date":"2020-08-27 12:08:55","endLine":241,"groupId":"101157","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(SparkPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/65/76be232f6b9a4fb3c28bee587ce7df91cde7e8.src","preCode":"    private void onPendingTaskFinished(SparkPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n\n            sparkLoadAppHandle = attachment.getHandle();\n            appId = attachment.getAppId();\n            etlOutputPath = attachment.getOutputPath();\n\n            executeEtl();\n            \r\n            unprotectedLogUpdateStateInfo();\n        } finally {\n            writeUnlock();\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/SparkLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2020-11-08 20:50:50","commitOrder":3,"curCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        } catch (RejectedExecutionException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                    .add(\"database_id\", dbId)\n                    .add(\"error_msg\", \"the task queque is full.\")\n                    .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","date":"2020-11-08 20:50:50","endLine":169,"groupId":"101157","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onPendingTaskFinished","params":"(BrokerPendingTaskAttachmentattachment)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/a2/53dbe919c8edfea9156d1bc747f6629de099d8.src","preCode":"    private void onPendingTaskFinished(BrokerPendingTaskAttachment attachment) {\n        writeLock();\n        try {\n            \r\n            if (isTxnDone()) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"state\", state)\n                                 .add(\"error_msg\", \"this task will be ignored when job is: \" + state)\n                                 .build());\n                return;\n            }\n\n            if (finishedTaskIds.contains(attachment.getTaskId())) {\n                LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                                 .add(\"task_id\", attachment.getTaskId())\n                                 .add(\"error_msg\", \"this is a duplicated callback of pending task \"\n                                         + \"when broker already has loading task\")\n                                 .build());\n                return;\n            }\n\n            \r\n            finishedTaskIds.add(attachment.getTaskId());\n        } finally {\n            writeUnlock();\n        }\n\n        try {\n            Database db = getDb();\n            createLoadingTask(db, attachment);\n        } catch (UserException e) {\n            LOG.warn(new LogBuilder(LogKey.LOAD_JOB, id)\n                             .add(\"database_id\", dbId)\n                             .add(\"error_msg\", \"Failed to divide job into loading task.\")\n                             .build(), e);\n            cancelJobWithoutCheck(new FailMsg(FailMsg.CancelType.ETL_RUN_FAIL, e.getMessage()), true, true);\n            return;\n        }\n\n        loadStartTimestamp = System.currentTimeMillis();\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/load/loadv2/BrokerLoadJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"59c7d5021d1e6e9a4859a1505bfe983ef7acbcef","commitMessage":"@@@[Bug][Load] Catch retry submit exception (#4796)\n\nWhen `Load Job Task Queue` is filled.  continue to submit more jobs to the queue will cause \n`RejectedExecutionException`.\nBut `callback.onTaskFailed` function does not catch the exception.  that will cause\nre-submitting job failed.  and status is not updated to failed.\nissue: #4795 ","date":"2020-11-08 20:50:50","modifiedFileCount":"3","status":"M","submitter":"xinghuayu007"}]
