[{"authorTime":"2020-07-29 12:28:52","codes":[{"authorDate":"2020-08-09 20:48:36","commitOrder":2,"curCode":"    public void testSelfColocateJoin() throws Exception {\n        FeConstants.runningUnitTest = true;\n\n        \r\n        String queryStr = \"explain select * from test.jointest t1, test.jointest t2 where t1.k1 = t2.k1\";\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: true\"));\n\n        \r\n        queryStr = \"explain select * from test.dynamic_partition t1, test.dynamic_partition t2 where t1.k1 = t2.k1\";\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: false\"));\n    }\n","date":"2020-08-09 20:48:36","endLine":918,"groupId":"3371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelfColocateJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b9/eb997716157668da19741bf51377977f06a13d.src","preCode":"    public void testSelfColocateJoin() throws Exception {\n        FeConstants.runningUnitTest = true;\n\n        \r\n        String queryStr = \"explain select * from test.jointest t1, test.jointest t2 where t1.k1 = t2.k1\";\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: true\"));\n\n        \r\n        queryStr = \"explain select * from test.dynamic_partition t1, test.dynamic_partition t2 where t1.k1 = t2.k1\";\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: false\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/QueryPlanTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":906,"status":"B"},{"authorDate":"2020-07-29 12:28:52","commitOrder":2,"curCode":"    public void testPreferBroadcastJoin() throws Exception {\n        connectContext.setDatabase(\"default_cluster:test\");\n        String queryStr = \"explain select * from (select k1 from jointest group by k1)t2, jointest t1 where t1.k1 = t2.k1\";\n        \n        \r\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n        \n        connectContext.getSessionVariable().setPreferJoinMethod(\"shuffle\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (PARTITIONED)\"));\n\n    \n        connectContext.getSessionVariable().setPreferJoinMethod(\"broadcast\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n    }\n","date":"2020-07-29 12:28:52","endLine":928,"groupId":"2292","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferBroadcastJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/43/3671ee3b45cb33d13ba683c866a72ef0c9789b.src","preCode":"    public void testPreferBroadcastJoin() throws Exception {\n        connectContext.setDatabase(\"default_cluster:test\");\n        String queryStr = \"explain select * from (select k1 from jointest group by k1)t2, jointest t1 where t1.k1 = t2.k1\";\n        \n        \r\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n        \n        connectContext.getSessionVariable().setPreferJoinMethod(\"shuffle\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (PARTITIONED)\"));\n\n    \n        connectContext.getSessionVariable().setPreferJoinMethod(\"broadcast\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/QueryPlanTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"NB"}],"commitId":"47fff6841b9f8cd3d5af15a2ae4fad87b4f60712","commitMessage":"@@@[Bug][ColocateJoin] Fix bug of #4287 and #4285 of Colocatejoin (#4289)\n\n1.Table join itself should have same single partition to valid colocate join.\n2.Check eqjoinConjuncts column order to valid colocate join.","date":"2020-08-09 20:48:36","modifiedFileCount":"2","status":"M","submitter":"HappenLee"},{"authorTime":"2021-04-11 22:02:03","codes":[{"authorDate":"2020-08-09 20:48:36","commitOrder":3,"curCode":"    public void testSelfColocateJoin() throws Exception {\n        FeConstants.runningUnitTest = true;\n\n        \r\n        String queryStr = \"explain select * from test.jointest t1, test.jointest t2 where t1.k1 = t2.k1\";\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: true\"));\n\n        \r\n        queryStr = \"explain select * from test.dynamic_partition t1, test.dynamic_partition t2 where t1.k1 = t2.k1\";\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: false\"));\n    }\n","date":"2020-08-09 20:48:36","endLine":918,"groupId":"10541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelfColocateJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/b9/eb997716157668da19741bf51377977f06a13d.src","preCode":"    public void testSelfColocateJoin() throws Exception {\n        FeConstants.runningUnitTest = true;\n\n        \r\n        String queryStr = \"explain select * from test.jointest t1, test.jointest t2 where t1.k1 = t2.k1\";\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: true\"));\n\n        \r\n        queryStr = \"explain select * from test.dynamic_partition t1, test.dynamic_partition t2 where t1.k1 = t2.k1\";\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"colocate: false\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/QueryPlanTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":906,"status":"N"},{"authorDate":"2021-04-11 22:02:03","commitOrder":3,"curCode":"    public void testPreferBroadcastJoin() throws Exception {\n        connectContext.setDatabase(\"default_cluster:test\");\n        String queryStr = \"explain select * from (select k2 from jointest group by k2)t2, jointest t1 where t1.k1 = t2.k2\";\n\n        \r\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n\n        connectContext.getSessionVariable().setPreferJoinMethod(\"shuffle\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (PARTITIONED)\"));\n\n        connectContext.getSessionVariable().setPreferJoinMethod(\"broadcast\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n    }\n","date":"2021-04-11 22:02:03","endLine":1302,"groupId":"10541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferBroadcastJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/c6/bd97ca9436345ecb2a93ba039864c3c8526aa3.src","preCode":"    public void testPreferBroadcastJoin() throws Exception {\n        connectContext.setDatabase(\"default_cluster:test\");\n        String queryStr = \"explain select * from (select k1 from jointest group by k1)t2, jointest t1 where t1.k1 = t2.k1\";\n\n        \r\n        String explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n\n        connectContext.getSessionVariable().setPreferJoinMethod(\"shuffle\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (PARTITIONED)\"));\n\n        connectContext.getSessionVariable().setPreferJoinMethod(\"broadcast\");\n        explainString = UtFrameUtils.getSQLPlanOrErrorMsg(connectContext, queryStr);\n        Assert.assertTrue(explainString.contains(\"INNER JOIN (BROADCAST)\"));\n    }\n","realPath":"fe/fe-core/src/test/java/org/apache/doris/planner/QueryPlanTest.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"M"}],"commitId":"a25e3afa5b43051a3f2ca9faae679b01481b0c0b","commitMessage":"@@@[Colocate plan][Step1] Colocate join covers more situations (#5521)\n\nThe old colocate join can only cover the case where the child is hash or scan.\nIn fact.  as long as the child's data distribution meets the requirements. \nno matter what the plan node on the child node is.  a colocate join can be performed.","date":"2021-04-11 22:02:03","modifiedFileCount":"15","status":"M","submitter":"EmmyMiao87"}]
