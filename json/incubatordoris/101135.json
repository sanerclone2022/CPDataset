[{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        out.writeInt(restoreReplicationNum);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (OlapTable tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n    }\n","date":"2020-07-21 12:42:42","endLine":1492,"groupId":"791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/97/d2e99bd83d0e785e6f6a408edc5f58688a4e34.src","preCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        out.writeInt(restoreReplicationNum);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (OlapTable tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1436,"status":"B"},{"authorDate":"2020-07-21 12:42:42","commitOrder":1,"curCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","date":"2020-07-21 12:42:42","endLine":109,"groupId":"4548","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2d/08a8a43fa9dfba86d6ec97ad15302ef77eb73e.src","preCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/TableInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"ad17afef9139a9aeedeb2e92638e95886d515f14","commitMessage":"@@@[CodeRefactor] #4098 Make FE multi module (#4099)\n\nThis PR change the FE code structure to maven multi module structure. \nSee ISSUE: #4098 for more info.  such as How to resolve conflicts.","date":"2020-07-21 12:42:42","modifiedFileCount":"0","status":"B","submitter":"Mingyu Chen"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-01-28 18:50:18","commitOrder":2,"curCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        out.writeInt(restoreReplicationNum);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (Table tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n\n        out.writeInt(restoredResources.size());\n        for (Resource resource: restoredResources) {\n            resource.write(out);\n        }\n\n        \r\n        out.writeInt(properties.size());\n        for (Map.Entry<String, String> entry : properties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","date":"2021-01-28 18:50:18","endLine":1705,"groupId":"791","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/4f/3d1c8882e373e8fe83c591eaadd1ee30b00799.src","preCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        out.writeInt(restoreReplicationNum);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (OlapTable tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1637,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":2,"curCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","date":"2020-07-21 12:42:42","endLine":109,"groupId":"4548","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2d/08a8a43fa9dfba86d6ec97ad15302ef77eb73e.src","preCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/TableInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"6bd22bc573c3f68fe9f874ad212bfabb19e3d8c0","commitMessage":"@@@[BackupAndRestore] Support backup and restore view and external odbc table (#5299)\n\n[BackupAndRestore] Support backup and restore view and external odbc table\n\n1. Support backup and restore view and odbc table. The syntax is the same as that of the backup and restore table.\n2. If the table associated with the view does not exist in the snapshot. \n   the view can still be backed up successfully.  but the TableNotFound exception will be thrown when querying the view.\n3. If the odbc table associated with the odbc resource.  the odbc resource will be backuped and restored together.\n4. If the same view.  odbc table and resource already exists in the database.  it will compare whether the metadata of snapshot is consistent.\n   If it is inconsistent.  the restoration will fail.\n4. This pr also modified the json format of the backup information.\n   A `new_backup_objects` object is added to the root node to store backup meta-information other than olap table. \n   such as views and external tables.\n   ```\n   {\n       \"backup_objects\": {}. \n       \"new_backup_objects\": {\n           \"view\": [\n               {\"name\": \"view1\".  \"id\": \"10001\"}\n           ]. \n           \"odbc_table\": [\n               {\"name\":\"xxx\".  xxx}\n           ]\n           \"odbc_resources\": [\n               {\"name\": \"bj_oracle\"}\n           ]\n       }\n   }\n   ```\n5. This pr changes the serialization and deserialization method of backup information\n   from manual construction to automatic analysis by Gson tools.\n\nChange-Id: I216469bf2a6484177185d8354dcca2dc19f653f3","date":"2021-01-28 18:50:18","modifiedFileCount":"27","status":"M","submitter":"EmmyMiao87"},{"authorTime":"2020-07-21 12:42:42","codes":[{"authorDate":"2021-09-04 10:59:35","commitOrder":3,"curCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        replicaAlloc.write(out);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (Table tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n\n        out.writeInt(restoredResources.size());\n        for (Resource resource: restoredResources) {\n            resource.write(out);\n        }\n\n        \r\n        out.writeInt(properties.size());\n        for (Map.Entry<String, String> entry : properties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","date":"2021-09-04 10:59:35","endLine":1715,"groupId":"101135","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/8e/92395472a8f551dee7d15ff969a39edf827dfd.src","preCode":"    public void write(DataOutput out) throws IOException {\n        super.write(out);\n\n        Text.writeString(out, backupTimestamp);\n        jobInfo.write(out);\n        out.writeBoolean(allowLoad);\n        \n        Text.writeString(out, state.name());\n\n        if (backupMeta != null) {\n            out.writeBoolean(true);\n            backupMeta.write(out);\n        } else {\n            out.writeBoolean(false);\n        }\n\n        fileMapping.write(out);\n\n        out.writeLong(metaPreparedTime);\n        out.writeLong(snapshotFinishedTime);\n        out.writeLong(downloadFinishedTime);\n\n        out.writeInt(restoreReplicationNum);\n\n        out.writeInt(restoredPartitions.size());\n        for (Pair<String, Partition> entry : restoredPartitions) {\n            Text.writeString(out, entry.first);\n            entry.second.write(out);\n        }\n\n        out.writeInt(restoredTbls.size());\n        for (Table tbl : restoredTbls) {\n            tbl.write(out);\n        }\n\n        out.writeInt(restoredVersionInfo.rowKeySet().size());\n        for (long tblId : restoredVersionInfo.rowKeySet()) {\n            out.writeLong(tblId);\n            out.writeInt(restoredVersionInfo.row(tblId).size());\n            for (Map.Entry<Long, Pair<Long, Long>> entry : restoredVersionInfo.row(tblId).entrySet()) {\n                out.writeLong(entry.getKey());\n                out.writeLong(entry.getValue().first);\n                out.writeLong(entry.getValue().second);\n            }\n        }\n\n        out.writeInt(snapshotInfos.rowKeySet().size());\n        for (long tabletId : snapshotInfos.rowKeySet()) {\n            out.writeLong(tabletId);\n            Map<Long, SnapshotInfo> map = snapshotInfos.row(tabletId);\n            out.writeInt(map.size());\n            for (Map.Entry<Long, SnapshotInfo> entry : map.entrySet()) {\n                out.writeLong(entry.getKey());\n                entry.getValue().write(out);\n            }\n        }\n\n        out.writeInt(restoredResources.size());\n        for (Resource resource: restoredResources) {\n            resource.write(out);\n        }\n\n        \r\n        out.writeInt(properties.size());\n        for (Map.Entry<String, String> entry : properties.entrySet()) {\n            Text.writeString(out, entry.getKey());\n            Text.writeString(out, entry.getValue());\n        }\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/backup/RestoreJob.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":1647,"status":"M"},{"authorDate":"2020-07-21 12:42:42","commitOrder":3,"curCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","date":"2020-07-21 12:42:42","endLine":109,"groupId":"101135","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"write","params":"(DataOutputout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-incubatordoris-10-0.7/blobInfo/CC_OUT/blobs/2d/08a8a43fa9dfba86d6ec97ad15302ef77eb73e.src","preCode":"    public void write(DataOutput out) throws IOException {\n        out.writeLong(dbId);\n        out.writeLong(tableId);\n        out.writeLong(indexId);\n        out.writeLong(partitionId);\n\n        Text.writeString(out, newTableName);\n        Text.writeString(out, newRollupName);\n        Text.writeString(out, newPartitionName);\n    }\n","realPath":"fe/fe-core/src/main/java/org/apache/doris/persist/TableInfo.java","repoName":"incubatordoris","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"7db8841ae264012f37bb929b0f7ba6ffefe703c8","commitMessage":"@@@[Feature][ResourceTag] Support Resource Tag (#6203)\n\n#5902 \nThis CL mainly changes:\n\n1. Support setting tags for BE nodes:\n\n    ```\n    alter system add backend \"1272:9050.  1212:9050\" properties(\"tag.location\": \"zoneA\");\n    alter system modify backend \"1272:9050.  1212:9050\" set (\"tag.location\": \"zoneB\");\n    ```\n    And for compatibility.  all BE nodes will be set a \"default\" tag when upgrading: `\"tag.location\": \"default\"`.\n\n2. Create a new class `ReplicaAllocation` to replace the previous `replication_num`.\n\n    `ReplicaAllocation` represents the allocation of the replicas of a tablet. It contains a map from \n    Tag to number of replicas.\n    For example.  if user set a table's replication num to 3.  it will be converted to a ReplicaAllocation\n    like: `\"tag.location.default\" : \"3\"`.  which means the tablet will have 3 replicas and all of them will be\n    allocated in BE nodes with tag \"default\";\n\n3. Support create table with replication allocation:\n\n    ```\n    CREATE TABLE example_db.table_hash\n    (\n    k1 TINYINT\n    )\n    DISTRIBUTED BY HASH(k1) BUCKETS 32\n    PROPERTIES (\n        \"replication_allocation\"=\"tag.location.zone1:1.  tag.location.zone2:2\"\n    );\n    ```\n    \n    Also support set replica allocation for dynamic tables.  and modify replica allocation at runtime.\n\n    For compatibility.  user can still set \"replication_num\" = \"3\".  and it will be automatically converted to:\n    ` \"replication_allocation\"=\"tag.location.default:3\"`\n\n4. Support tablet repair and balance based on Tag\n\n    1. For tablets of non-colocate table.  most of the logic is the same as before. \n       but when selecting the destination node for clone.  the tag of the node will be considered.\n       If the required tag does not exist.  it cannot be repaired.\n       Similarly.  under the condition of ensuring that the replicas are complete.  the tablet will be\n       reallocated according to the tag or the replicas will be balanced.\n\n       Balancing is performed separately within each resource group.\n\n    2. For tablets of colocate table.  the backends sequence of buckets will be splitted by tag.\n       For example.  if replica allocation is \"tag.location.zone1:1.  tag.location.zone2:2\". \n\n       And zone1 has 2 BE: A.  B; zone2 has 3 BE: C.  D.  F\n\n       there will be 2 backend sequences: one is for zone1.  and the other is for zone2.\n       And one posible seqeunces will be:\n\n\n       zone1: [A]   [B]   [A]   [B]\n       zone2: [C.  D][D.  F][F.  C][C.  D]\n\n5. Support setting tags for user and restrict execution node with tags:\n\n\n    ```\n    set property for 'cmy' 'resource_tags.location' : 'zone1.  zone2';\n    ```\n\n    After setting.  the user 'cmy' can only query data stored on backends with tag zone1 and zone2. \n    And query can only be executed on backends with tag zone1 and zone2\n\n\n    For compatibility.  after upgrading.  the property `resource_tags.location` will be empty. \n    so that user can still query data stored on any backends.\n\n6. Modify the Unit test frame of FE so that we can created multi backends with different mocked IP in unit test.\n\n    This help us to easily test some distributed cases like query.  tablet repair and balance\n\nThe document will be added in another PR.\n\nAlso fix a bug described in #6194 ","date":"2021-09-04 10:59:35","modifiedFileCount":"161","status":"M","submitter":"Mingyu Chen"}]
