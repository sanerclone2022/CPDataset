[{"authorTime":"2020-04-08 23:06:58","codes":[{"authorDate":"2019-11-23 14:43:03","commitOrder":5,"curCode":"\tpublic void testHeapMemoryPropertyWithOldConfigKey() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB, 2048);\n\t\tconfiguration.setInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB, 4096);\n\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCli(configuration);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(2048));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(4096));\n\t}\n","date":"2019-12-03 23:29:31","endLine":397,"groupId":"48996","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeapMemoryPropertyWithOldConfigKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/717a6d677f413d5708a78807c5514895435067.src","preCode":"\tpublic void testHeapMemoryPropertyWithOldConfigKey() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB, 2048);\n\t\tconfiguration.setInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB, 4096);\n\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCli(configuration);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(2048));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(4096));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/FlinkYarnSessionCliTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"NB"},{"authorDate":"2020-04-08 23:06:58","commitOrder":5,"curCode":"\tpublic void testJobManagerMemoryPropertyWithConfigDefaultValue() throws Exception {\n\t\tint procMemory = 2048;\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCliWithJmAndTmTotalMemory(procMemory);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(procMemory));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(procMemory));\n\t}\n","date":"2020-04-27 15:11:39","endLine":452,"groupId":"48996","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerMemoryPropertyWithConfigDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/66/571907ed825f63c7997c0b7b5e92a153396c2b.src","preCode":"\tpublic void testJobManagerMemoryPropertyWithConfigDefaultValue() throws Exception {\n\t\tint procMemory = 2048;\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCliWithJmAndTmTotalMemory(procMemory);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(procMemory));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(procMemory));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/FlinkYarnSessionCliTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"}],"commitId":"c3f0ad5ce297a9a22d226e45294a29ada28ce70a","commitMessage":"@@@[FLINK-16745][yarn] Start Yarn JM with FLIP-116 JVM memory args\n","date":"2020-04-27 15:11:39","modifiedFileCount":"8","status":"M","submitter":"Andrey Zagrebin"},{"authorTime":"2020-10-07 18:50:45","codes":[{"authorDate":"2020-10-07 18:50:45","commitOrder":6,"curCode":"\tpublic void testHeapMemoryPropertyWithOldConfigKey() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB, 2048);\n\t\tconfiguration.setInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB, 4096);\n\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCli(configuration);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tconfiguration.addAll(flinkYarnSessionCli.toConfiguration(commandLine));\n\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(configuration);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(configuration);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(2048));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(4096));\n\t}\n","date":"2020-10-27 23:07:18","endLine":441,"groupId":"101864","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeapMemoryPropertyWithOldConfigKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/25fc7ad8fd18e6a5bfd3043977a6d576585284.src","preCode":"\tpublic void testHeapMemoryPropertyWithOldConfigKey() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setInteger(JobManagerOptions.JOB_MANAGER_HEAP_MEMORY_MB, 2048);\n\t\tconfiguration.setInteger(TaskManagerOptions.TASK_MANAGER_HEAP_MEMORY_MB, 4096);\n\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCli(configuration);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(2048));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(4096));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/FlinkYarnSessionCliTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"},{"authorDate":"2020-10-07 18:50:45","commitOrder":6,"curCode":"\tpublic void testJobManagerMemoryPropertyWithConfigDefaultValue() throws Exception {\n\t\tint procMemory = 2048;\n\t\tfinal Configuration configuration = createConfigurationWithJmAndTmTotalMemory(procMemory);\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCli(configuration);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tconfiguration.addAll(flinkYarnSessionCli.toConfiguration(commandLine));\n\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(configuration);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(configuration);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(procMemory));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(procMemory));\n\t}\n","date":"2020-10-27 23:07:18","endLine":461,"groupId":"101864","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerMemoryPropertyWithConfigDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/25fc7ad8fd18e6a5bfd3043977a6d576585284.src","preCode":"\tpublic void testJobManagerMemoryPropertyWithConfigDefaultValue() throws Exception {\n\t\tint procMemory = 2048;\n\t\tfinal FlinkYarnSessionCli flinkYarnSessionCli = createFlinkYarnSessionCliWithJmAndTmTotalMemory(procMemory);\n\n\t\tfinal CommandLine commandLine = flinkYarnSessionCli.parseCommandLineOptions(new String[0], false);\n\n\t\tfinal Configuration executorConfig = flinkYarnSessionCli.applyCommandLineOptionsToConfiguration(commandLine);\n\t\tfinal ClusterClientFactory<ApplicationId> clientFactory = getClusterClientFactory(executorConfig);\n\t\tfinal ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(executorConfig);\n\n\t\tassertThat(clusterSpecification.getMasterMemoryMB(), is(procMemory));\n\t\tassertThat(clusterSpecification.getTaskManagerMemoryMB(), is(procMemory));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/FlinkYarnSessionCliTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"}],"commitId":"15f3844f1a325f898540a5c1b70928c3688787a6","commitMessage":"@@@[FLINK-19493] In CliFrontend.  make flow of Configuration more obvious\n\nBefore.  it was up to the CustomCommandLine implementation whether any\nConfiguration was passed through from the flink-conf.yaml or wherever\nthe base Configuration came from.\n\nNow.  we make the flow of the Configuration explicit in\nCliFrontend.getEffectiveConfiguration(). Instead of relying on the\nConfiguration we get from the CustomCommandLine we ask the\nCustomCommandLine to materialize its settings and add them manually to\nan effective Configuration that the CliFrontend controls.\n\nThis removes the Configuration parameter from CustomCommandLines that\ndon't need it anymore.  such as DefaultCLI.  which means we also have to\ntouch tests.\n\nThis adds a new integration test in CliFrontendITCase that verifies\ncorrect parameter passing and also verifies that command line arguments\noverride base settings.\n","date":"2020-10-27 23:07:18","modifiedFileCount":"25","status":"M","submitter":"Aljoscha Krettek"}]
