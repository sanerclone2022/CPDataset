[{"authorTime":"2020-07-23 13:35:34","codes":[{"authorDate":"2020-07-23 13:35:34","commitOrder":1,"curCode":"\tpublic void testCheckpointedValidResponse() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(1, 2, 3);\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\tresponse = new CollectCoordinationResponse(version, 3, createSerializedResults(Arrays.asList(4, 5, 6)));\n\t\tbuffer.dealWithResponse(response, 3);\n\t\t\r\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\n\t\texpected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 6, createSerializedResults(Arrays.asList(6, 7)));\n\t\tbuffer.dealWithResponse(response, 5);\n\t\t\r\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\n\t\tbuffer.complete();\n\t\tAssert.assertEquals((Integer) 7, buffer.next());\n\t\tAssert.assertNull(buffer.next());\n\t}\n","date":"2020-07-23 13:35:34","endLine":153,"groupId":"53392","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointedValidResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/5d3ffd69018d226d89c3be4b7f97b332fb3003.src","preCode":"\tpublic void testCheckpointedValidResponse() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(1, 2, 3);\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\tresponse = new CollectCoordinationResponse(version, 3, createSerializedResults(Arrays.asList(4, 5, 6)));\n\t\tbuffer.dealWithResponse(response, 3);\n\t\t\r\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\n\t\texpected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 6, createSerializedResults(Arrays.asList(6, 7)));\n\t\tbuffer.dealWithResponse(response, 5);\n\t\t\r\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\n\t\tbuffer.complete();\n\t\tAssert.assertEquals((Integer) 7, buffer.next());\n\t\tAssert.assertNull(buffer.next());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectResultBufferTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2020-07-23 13:35:34","commitOrder":1,"curCode":"\tpublic void testCheckpointedRestart() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(Arrays.asList(1, 2, 3)));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tversion = \"another\";\n\t\tresponse = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 3, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\t\tAssert.assertNull(buffer.next());\n\t}\n","date":"2020-07-23 13:35:34","endLine":188,"groupId":"11251","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/5d3ffd69018d226d89c3be4b7f97b332fb3003.src","preCode":"\tpublic void testCheckpointedRestart() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(Arrays.asList(1, 2, 3)));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tversion = \"another\";\n\t\tresponse = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 3, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\t\tAssert.assertNull(buffer.next());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectResultBufferTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"791e276c8346a49130cb096bafa128d7f1231236","commitMessage":"@@@[FLINK-18558][streaming] Introduce collect iterator with at least once semantics and exactly once semantics without fault tolerance\n\nThis closes #12867","date":"2020-07-23 13:35:34","modifiedFileCount":"10","status":"B","submitter":"TsReaper"},{"authorTime":"2020-07-23 13:35:34","codes":[{"authorDate":"2021-07-26 05:31:51","commitOrder":2,"curCode":"    public void testCheckpointedValidResponse() throws Exception {\n        String version = \"version\";\n        AbstractCollectResultBuffer<Integer> buffer =\n                new CheckpointedCollectResultBuffer<>(serializer);\n\n        \r\n        CollectCoordinationResponse response =\n                new CollectCoordinationResponse(version, 0, Collections.emptyList());\n        buffer.dealWithResponse(response, 0);\n\n        List<Integer> expected = Arrays.asList(1, 2, 3);\n        response = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n        buffer.dealWithResponse(response, 0);\n        \r\n        Assert.assertNull(buffer.next());\n\n        response =\n                new CollectCoordinationResponse(\n                        version, 3, createSerializedResults(Arrays.asList(4, 5, 6)));\n        buffer.dealWithResponse(response, 3);\n        \r\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n\n        expected = Arrays.asList(4, 5, 6);\n        \r\n        response =\n                new CollectCoordinationResponse(\n                        version, 6, createSerializedResults(Arrays.asList(6, 7)));\n        buffer.dealWithResponse(response, 5);\n        \r\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n\n        \r\n        response =\n                new CollectCoordinationResponse(\n                        version, 6, createSerializedResults(Arrays.asList(8, 9, 10)));\n        buffer.dealWithResponse(response, 7);\n        \r\n        expected = Arrays.asList(7);\n        response =\n                new CollectCoordinationResponse(\n                        version, 7, createSerializedResults(Arrays.asList(8, 9)));\n        buffer.dealWithResponse(response, 7);\n        \r\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n\n        buffer.complete();\n        expected = Arrays.asList(8, 9, 10);\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n        Assert.assertNull(buffer.next());\n    }\n","date":"2021-08-10 14:34:49","endLine":184,"groupId":"103299","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCheckpointedValidResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/a2b835c8e9823d9cdc86d8248be3fe81380c98.src","preCode":"    public void testCheckpointedValidResponse() throws Exception {\n        String version = \"version\";\n        AbstractCollectResultBuffer<Integer> buffer =\n                new CheckpointedCollectResultBuffer<>(serializer);\n\n        \r\n        CollectCoordinationResponse response =\n                new CollectCoordinationResponse(version, 0, Collections.emptyList());\n        buffer.dealWithResponse(response, 0);\n\n        List<Integer> expected = Arrays.asList(1, 2, 3);\n        response = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n        buffer.dealWithResponse(response, 0);\n        \r\n        Assert.assertNull(buffer.next());\n\n        response =\n                new CollectCoordinationResponse(\n                        version, 3, createSerializedResults(Arrays.asList(4, 5, 6)));\n        buffer.dealWithResponse(response, 3);\n        \r\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n\n        expected = Arrays.asList(4, 5, 6);\n        \r\n        response =\n                new CollectCoordinationResponse(\n                        version, 6, createSerializedResults(Arrays.asList(6, 7)));\n        buffer.dealWithResponse(response, 5);\n        \r\n        for (Integer expectedValue : expected) {\n            Assert.assertEquals(expectedValue, buffer.next());\n        }\n\n        buffer.complete();\n        Assert.assertEquals((Integer) 7, buffer.next());\n        Assert.assertNull(buffer.next());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectResultBufferTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2020-07-23 13:35:34","commitOrder":2,"curCode":"\tpublic void testCheckpointedRestart() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(Arrays.asList(1, 2, 3)));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tversion = \"another\";\n\t\tresponse = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 3, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\t\tAssert.assertNull(buffer.next());\n\t}\n","date":"2020-07-23 13:35:34","endLine":188,"groupId":"103299","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedRestart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/5d3ffd69018d226d89c3be4b7f97b332fb3003.src","preCode":"\tpublic void testCheckpointedRestart() throws Exception {\n\t\tString version = \"version\";\n\t\tAbstractCollectResultBuffer<Integer> buffer = new CheckpointedCollectResultBuffer<>(serializer);\n\n\t\t\r\n\t\tCollectCoordinationResponse response = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(Arrays.asList(1, 2, 3)));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tversion = \"another\";\n\t\tresponse = new CollectCoordinationResponse(version, 0, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\n\t\tList<Integer> expected = Arrays.asList(4, 5, 6);\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 0, createSerializedResults(expected));\n\t\tbuffer.dealWithResponse(response, 0);\n\t\t\r\n\t\tAssert.assertNull(buffer.next());\n\n\t\t\r\n\t\tresponse = new CollectCoordinationResponse(version, 3, Collections.emptyList());\n\t\tbuffer.dealWithResponse(response, 0);\n\t\tfor (Integer expectedValue : expected) {\n\t\t\tAssert.assertEquals(expectedValue, buffer.next());\n\t\t}\n\t\tAssert.assertNull(buffer.next());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectResultBufferTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"cdb783761b459bc42b56d44463106ba0b3cf48fe","commitMessage":"@@@[hotfix] Fix CollectResultBuffer\n","date":"2021-08-10 14:34:49","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"}]
