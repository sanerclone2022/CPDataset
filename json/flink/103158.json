[{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":452,"groupId":"23238","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoKeyedStateOnNonBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"B"},{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":567,"groupId":"49994","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoKeyedStateOnBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/98d14b581262db3139945d97b3b0336fca2bf8.src","preCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"B"}],"commitId":"c6c17befe54d55755ebaf160ff20a11aa32bbbca","commitMessage":"@@@[FLINK-3659] Expose broadcast state on DataStream API.\n","date":"2018-02-07 21:07:45","modifiedFileCount":"5","status":"B","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:17:24","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":2,"curCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":452,"groupId":"23238","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoKeyedStateOnNonBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"},{"authorDate":"2018-01-29 23:17:24","commitOrder":2,"curCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:08:16","endLine":663,"groupId":"49994","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoKeyedStateOnBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/a439f033adc6da95d7532c49f804bb6d782288.src","preCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"}],"commitId":"26918c953287c7940120dfcfcc10dd5a42beaf81","commitMessage":"@@@[FLINK-8345] Add iterator of keyed state on broadcast side of connected streams.\n","date":"2018-02-07 21:08:16","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-02-16 04:37:44","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":3,"curCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":452,"groupId":"23238","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoKeyedStateOnNonBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"},{"authorDate":"2018-02-16 04:37:44","commitOrder":3,"curCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tassertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-03-07 00:35:03","endLine":676,"groupId":"49994","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoKeyedStateOnBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/23b751d33b967225e64eeb98a81ec70ffbd794.src","preCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"M"}],"commitId":"836998bd65ef2d0d0276faed189a0dfe8a7a6dc3","commitMessage":"@@@[FLINK-8667] Expose key in KeyedBroadcastProcessFunction#onTimer()\n\nThis closes #5500.\n","date":"2018-03-07 00:35:03","modifiedFileCount":"5","status":"M","submitter":"Bowen Li"},{"authorTime":"2018-04-10 07:08:58","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":4,"curCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":452,"groupId":"103158","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoKeyedStateOnNonBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testNoKeyedStateOnNonBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness =\n\t\t\t\t\t\tgetInitializedTestHarness(\n\t\t\t\t\t\t\t\tnew BroadcastProcessFunction<String, Integer, String>() {\n\t\t\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"5\", 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tAssert.assertEquals(\"Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tAssert.fail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"},{"authorDate":"2018-04-10 07:08:58","commitOrder":4,"curCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tassertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t}\n","date":"2018-04-12 23:04:30","endLine":676,"groupId":"103158","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoKeyedStateOnBroadcastSide","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/692d56abb88bd30a384d03fee178153611c79e.src","preCode":"\tpublic void testNoKeyedStateOnBroadcastSide() throws Exception {\n\n\t\tboolean exceptionThrown = false;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew KeyedBroadcastProcessFunction<String, String, Integer, String>() {\n\n\t\t\t\t\t\t\tprivate static final long serialVersionUID = -1725365436500098384L;\n\n\t\t\t\t\t\t\tprivate final ValueStateDescriptor<String> valueState = new ValueStateDescriptor<>(\"any\", BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processBroadcastElement(Integer value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\tgetRuntimeContext().getState(valueState).value(); \r\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void processElement(String value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t) {\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\t\t} catch (NullPointerException e) {\n\t\t\tassertEquals(\"No key set. This method should not be called outside of a keyed context.\", e.getMessage());\n\t\t\texceptionThrown = true;\n\t\t}\n\n\t\tif (!exceptionThrown) {\n\t\t\tfail(\"No exception thrown\");\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"M"}],"commitId":"584229dc00e62a6a8540b059645269bb04d0ba04","commitMessage":"@@@[FLINK-9152] Harmonize BroadcastProcessFunction Context names\n","date":"2018-04-12 23:04:30","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"}]
