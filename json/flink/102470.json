[{"authorTime":"2018-06-05 21:01:10","codes":[{"authorDate":"2018-06-05 21:01:10","commitOrder":1,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","date":"2018-06-15 01:33:36","endLine":655,"groupId":"7150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/af/776d555cb207bd177a42344140625425e5fb00.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"},{"authorDate":"2018-06-05 21:01:10","commitOrder":1,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","date":"2018-06-15 01:33:36","endLine":435,"groupId":"31380","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/b262c00196e060fb6712237d47d802ee10d8b5.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"B"}],"commitId":"03d77b862b845fc2b2836fc35fdbc8793d5064b7","commitMessage":"@@@[FLINK-9530][metrics] Fix numRecords task metric for chains\n\nThis closes #6126.\n","date":"2018-06-15 01:33:36","modifiedFileCount":"3","status":"B","submitter":"zentol"},{"authorTime":"2018-09-03 16:44:07","codes":[{"authorDate":"2018-09-03 16:44:07","commitOrder":2,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","date":"2018-09-03 21:03:30","endLine":657,"groupId":"7150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/d5021b8845fde5e5e79d2bf46d0380941fb55a.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"},{"authorDate":"2018-09-03 16:44:07","commitOrder":2,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","date":"2018-09-03 21:03:30","endLine":438,"groupId":"31380","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/8b647498818fb73bb06c024dc57fb97a936a7e.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"}],"commitId":"4573d48008d3b19fa7e90ada7d2783ed02ba71d0","commitMessage":"@@@[hotfix][metrics] Rename TaskMetricGroup#addOperator\n","date":"2018-09-03 21:03:30","modifiedFileCount":"12","status":"M","submitter":"zentol"},{"authorTime":"2019-02-21 23:26:33","codes":[{"authorDate":"2019-02-21 23:26:33","commitOrder":3,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-02-22 19:03:17","endLine":663,"groupId":"7150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/1d136d4c0546d2a56a60981330f087a0da02fd.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"},{"authorDate":"2019-02-21 23:26:33","commitOrder":3,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-02-22 19:03:17","endLine":443,"groupId":"31380","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f8/0983f84e7f306af66d02ebc1988d6fa4351a88.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"6051f5cb0dccecca24b2edb7065eabc5ea1b7bec","commitMessage":"@@@[hotfix] Fixing test instabilities in streaming.runtime.tasks.\n","date":"2019-02-22 19:03:17","modifiedFileCount":"4","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-06-12 18:14:21","codes":[{"authorDate":"2019-02-21 23:26:33","commitOrder":4,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-02-22 19:03:17","endLine":663,"groupId":"7150","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/1d136d4c0546d2a56a60981330f087a0da02fd.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"N"},{"authorDate":"2019-06-12 18:14:21","commitOrder":4,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tisInputSelectable ? TwoInputSelectableStreamTask::new : TwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-06-12 18:40:09","endLine":471,"groupId":"31380","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/0a7896b752a83ba3b4a8c03941038958528e47.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"48b54e3e40d91b4a79a56f327210e3e8e36557e9","commitMessage":"@@@[FLINK-11877][runtime] Implement the runtime handling of the InputSelectable interface\n","date":"2019-06-12 18:40:09","modifiedFileCount":"10","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-07-25 14:25:37","codes":[{"authorDate":"2019-02-21 23:26:33","commitOrder":5,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-02-22 19:03:17","endLine":663,"groupId":"7150","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/1d136d4c0546d2a56a60981330f087a0da02fd.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"N"},{"authorDate":"2019-07-25 14:25:37","commitOrder":5,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":450,"groupId":"31380","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/59987e7f3b99499721105967e329e22627787d.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tisInputSelectable ? TwoInputSelectableStreamTask::new : TwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"dc742486083f1c30213098ac946e85a99b78fb4d","commitMessage":"@@@[FLINK-13051][runtime] Replace the non-selectable stream task with the input-selectable one\n","date":"2019-08-30 18:44:24","modifiedFileCount":"13","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-08-29 17:38:27","codes":[{"authorDate":"2019-02-21 23:26:33","commitOrder":6,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-02-22 19:03:17","endLine":663,"groupId":"7150","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/1d136d4c0546d2a56a60981330f087a0da02fd.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords = 5;\n\n\t\tfor (int x = 0; x < numRecords; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"));\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords, numRecordsInCounter.getCount());\n\t\tassertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"N"},{"authorDate":"2019-08-29 17:38:27","commitOrder":6,"curCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":447,"groupId":"31380","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/af/15fbc8d3ccf0be3343fd3edf46ea384b6ee954.src","preCode":"\tpublic void testOperatorMetricReuse() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.chain(new OperatorID(), new OneInputStreamTaskTest.DuplicatingOperator(), BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tfinal TaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID operatorID, String name) {\n\t\t\t\treturn new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n\t\t\t}\n\t\t};\n\n\t\tfinal StreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\tfinal Counter numRecordsInCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n\t\tfinal Counter numRecordsOutCounter = taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tfinal int numRecords1 = 5;\n\t\tfinal int numRecords2 = 3;\n\n\t\tfor (int x = 0; x < numRecords1; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n\t\t}\n\n\t\tfor (int x = 0; x < numRecords2; x++) {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n\t\t}\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tassertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n\t\tassertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"}],"commitId":"ce557839d762b5f1ec92aa1885fd3d2ae33d0d0b","commitMessage":"@@@[FLINK-13051][runtime] Rename TwoInputSelectableStreamTask and StreamTwoInputSelectableProcessor\n","date":"2019-08-30 18:44:24","modifiedFileCount":"14","status":"M","submitter":"sunhaibotb"},{"authorTime":"2021-05-19 20:29:24","codes":[{"authorDate":"2021-05-19 20:29:24","commitOrder":7,"curCode":"    public void testOperatorMetricReuse() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new InternalOperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords = 5;\n\n        for (int x = 0; x < numRecords; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"));\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords, numRecordsInCounter.getCount());\n        assertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-14 22:42:46","endLine":808,"groupId":"7150","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/c6019a001fe17a9b1994c3520689600c06433d.src","preCode":"    public void testOperatorMetricReuse() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public OperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new OperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords = 5;\n\n        for (int x = 0; x < numRecords; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"));\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords, numRecordsInCounter.getCount());\n        assertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":745,"status":"M"},{"authorDate":"2021-05-19 20:29:24","commitOrder":7,"curCode":"    public void testOperatorMetricReuse() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new InternalOperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords1 = 5;\n        final int numRecords2 = 3;\n\n        for (int x = 0; x < numRecords1; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n        }\n\n        for (int x = 0; x < numRecords2; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n        assertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-14 22:42:46","endLine":522,"groupId":"31380","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/0dd930eba9d19b849ec9b08a1d9bdde5454830.src","preCode":"    public void testOperatorMetricReuse() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public OperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new OperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords1 = 5;\n        final int numRecords2 = 3;\n\n        for (int x = 0; x < numRecords1; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n        }\n\n        for (int x = 0; x < numRecords2; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n        assertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"63ee60859cac64f2bc6cfe2c5015ceb1199cea9c","commitMessage":"@@@[FLINK-23652][core/metrics] Extract Operator(IO)MetricGroup interfaces and expose them in RuntimeContext\n","date":"2021-08-14 22:42:46","modifiedFileCount":"66","status":"M","submitter":"Arvid Heise"},{"authorTime":"2021-08-16 15:38:06","codes":[{"authorDate":"2021-08-16 15:38:06","commitOrder":8,"curCode":"    public void testOperatorMetricReuse() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                TaskManagerMetricGroup.createTaskManagerMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, \"host\", ResourceID.generate())\n                        .addTaskForJob(\n                                new JobID(),\n                                \"jobname\",\n                                new JobVertexID(),\n                                new ExecutionAttemptID(),\n                                \"task\",\n                                0,\n                                0);\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords = 5;\n\n        for (int x = 0; x < numRecords; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"));\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords, numRecordsInCounter.getCount());\n        assertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-16 15:38:06","endLine":814,"groupId":"102470","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/647f24aeb1c1c3a4cee6eccf57cc701bb93c4f.src","preCode":"    public void testOperatorMetricReuse() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new InternalOperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords = 5;\n\n        for (int x = 0; x < numRecords; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"));\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords, numRecordsInCounter.getCount());\n        assertEquals(numRecords * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":749,"status":"M"},{"authorDate":"2021-08-16 15:38:06","commitOrder":8,"curCode":"    public void testOperatorMetricReuse() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                TaskManagerMetricGroup.createTaskManagerMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, \"host\", ResourceID.generate())\n                        .addTaskForJob(\n                                new JobID(),\n                                \"jobname\",\n                                new JobVertexID(),\n                                new ExecutionAttemptID(),\n                                \"task\",\n                                0,\n                                0);\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords1 = 5;\n        final int numRecords2 = 3;\n\n        for (int x = 0; x < numRecords1; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n        }\n\n        for (int x = 0; x < numRecords2; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n        assertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-16 15:38:06","endLine":528,"groupId":"102470","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testOperatorMetricReuse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/3de6630c3ef7db650451dd3fc5cf1483f0347d.src","preCode":"    public void testOperatorMetricReuse() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, String, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        testHarness\n                .setupOperatorChain(new OperatorID(), new DuplicatingOperator())\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .chain(\n                        new OperatorID(),\n                        new OneInputStreamTaskTest.DuplicatingOperator(),\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        final TaskMetricGroup taskMetricGroup =\n                new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID operatorID, String name) {\n                        return new InternalOperatorMetricGroup(\n                                NoOpMetricRegistry.INSTANCE, this, operatorID, name);\n                    }\n                };\n\n        final StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        final Counter numRecordsInCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();\n        final Counter numRecordsOutCounter =\n                taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        final int numRecords1 = 5;\n        final int numRecords2 = 3;\n\n        for (int x = 0; x < numRecords1; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 0, 0);\n        }\n\n        for (int x = 0; x < numRecords2; x++) {\n            testHarness.processElement(new StreamRecord<>(\"hello\"), 1, 0);\n        }\n        testHarness.waitForInputProcessing();\n\n        assertEquals(numRecords1 + numRecords2, numRecordsInCounter.getCount());\n        assertEquals((numRecords1 + numRecords2) * 2 * 2 * 2, numRecordsOutCounter.getCount());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"cb273e5c1201b0177c78dc036987349e872dd4ed","commitMessage":"@@@[FLINK-23627][metrics] Migrate OperatorMG instantiations to factory method\n\n","date":"2021-08-16 15:38:06","modifiedFileCount":"6","status":"M","submitter":"Shen Zhu"}]
