[{"authorTime":"2017-03-16 22:17:05","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":3,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2020-10-12 15:03:28","endLine":1287,"groupId":"41545","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"B"},{"authorDate":"2017-03-16 22:17:05","commitOrder":3,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2017-03-24 12:34:03","endLine":1453,"groupId":"41545","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/bb7153dd3ac65e5444c13debb7978182282c0b.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1436,"status":"NB"}],"commitId":"1aea5f059cb1e0aee6168477391e6e17c9d23dc1","commitMessage":"@@@[FLINK-19474] Implement a state backend that holds a single key at a time\n\nThis commit introduces a SingleKeyStateBackend. This state backend is a\nsimplified version of a state backend that can be used in a BATCH\nruntime mode. It requires the input to be sorted.  as it only ever\nremembers the current key. If the key changes.  the current state is\ndiscarded. Moreover this state backend does not support checkpointing.\n","date":"2020-10-12 15:03:28","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-03-11 14:14:07","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":4,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2020-10-12 15:03:28","endLine":1287,"groupId":"41545","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"N"},{"authorDate":"2021-03-11 14:14:07","commitOrder":4,"curCode":"    public void testValueStateDefaultValue() throws Exception {\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        ValueState<String> state =\n                backend.getPartitionedState(\n                        VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n        backend.setCurrentKey(1);\n        assertEquals(\"Hello\", state.value());\n\n        state.update(\"Ciao\");\n        assertEquals(\"Ciao\", state.value());\n\n        state.clear();\n        assertEquals(\"Hello\", state.value());\n\n        backend.dispose();\n    }\n","date":"2021-03-15 16:07:03","endLine":3483,"groupId":"41545","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/44e582a588850b1b47ba821f2ef66fa63f52b6.src","preCode":"    public void testValueStateDefaultValue() throws Exception {\n        AbstractKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        ValueState<String> state =\n                backend.getPartitionedState(\n                        VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n        backend.setCurrentKey(1);\n        assertEquals(\"Hello\", state.value());\n\n        state.update(\"Ciao\");\n        assertEquals(\"Ciao\", state.value());\n\n        state.clear();\n        assertEquals(\"Hello\", state.value());\n\n        backend.dispose();\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3463,"status":"M"}],"commitId":"d72fa2ea588fc0f52ebd33d583187eb27972a483","commitMessage":"@@@[FLINK-21354] Introduce ChangelogStateBackend to delegate state access\n\nThis change is to wrap the existing prod state backend (Rocksdb.  Fs.  Mem) to delegate\nstate access for these state backends. In the future.  we can forward state changes to\nStateChangeLog when states are updated. In this PR.  we only support keyed-state access.\n\nThe changes include:\n1. Introduce `DelegatingStateBackend` interface for state backend delegation\n   (in the flink-runtime module)\n2. Introduce `ChangelogStateBackend` and related delegating states for\n   state delegation (in flink-state-backends module)\n3. Implement `ChangelogStateBackend`'s Loader in `StateBackendLoader`.\n   (in the flink-runtime module)\n","date":"2021-03-15 16:07:03","modifiedFileCount":"12","status":"M","submitter":"Yuan Mei"},{"authorTime":"2021-03-26 12:16:51","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":5,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2020-10-12 15:03:28","endLine":1287,"groupId":"41545","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"N"},{"authorDate":"2021-03-26 12:16:51","commitOrder":5,"curCode":"    public void testValueStateDefaultValue() throws Exception {\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n        try {\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n            state.update(\"Ciao\");\n            assertEquals(\"Ciao\", state.value());\n\n            state.clear();\n            assertEquals(\"Hello\", state.value());\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","date":"2021-03-26 17:39:33","endLine":3587,"groupId":"19684","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/0383a381a0b12ce0e4863477d9a99d55c99806.src","preCode":"    public void testValueStateDefaultValue() throws Exception {\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        ValueState<String> state =\n                backend.getPartitionedState(\n                        VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n        backend.setCurrentKey(1);\n        assertEquals(\"Hello\", state.value());\n\n        state.update(\"Ciao\");\n        assertEquals(\"Ciao\", state.value());\n\n        state.clear();\n        assertEquals(\"Hello\", state.value());\n\n        backend.dispose();\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3565,"status":"M"}],"commitId":"97f257e46824772728a1a595edb57e5633903a55","commitMessage":"@@@[FLINK-21929][statebackend][tests] Refactor StateBackendTestBase to ensure created keyed state backend could be disposed finally\n","date":"2021-03-26 17:39:33","modifiedFileCount":"1","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-08-04 15:51:26","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":6,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2020-10-12 15:03:28","endLine":1287,"groupId":"41545","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"N"},{"authorDate":"2021-08-04 15:51:26","commitOrder":6,"curCode":"    public void testValueStateDefaultValue() throws Exception {\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n        try {\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n            state.update(\"Ciao\");\n            assertEquals(\"Ciao\", state.value());\n\n            state.clear();\n            assertEquals(\"Hello\", state.value());\n\n            backend =\n                    restoreKeyedBackend(\n                            IntSerializer.INSTANCE,\n                            runSnapshot(\n                                    backend.snapshot(\n                                            1L,\n                                            1L,\n                                            createStreamFactory(),\n                                            CheckpointOptions.forCheckpointWithDefaultLocation()),\n                                    new SharedStateRegistry()));\n            state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","date":"2021-08-07 21:20:19","endLine":3646,"groupId":"19684","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/e9da07f89f445b6c3eac9495dc26f4f64b9052.src","preCode":"    public void testValueStateDefaultValue() throws Exception {\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n        try {\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n            state.update(\"Ciao\");\n            assertEquals(\"Ciao\", state.value());\n\n            state.clear();\n            assertEquals(\"Hello\", state.value());\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3606,"status":"M"}],"commitId":"e8daf67ce5096da791e21d0915848c78c395822d","commitMessage":"@@@[hotfix][state/changelog] Persist and restore default value\n\nThe default value of ValueState is currently always\nrestored to null by the ChangelogStateBackend.\n\nThis change writes it along with metadata and uses on recovery.\n","date":"2021-08-07 21:20:19","modifiedFileCount":"7","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-09-02 14:51:36","codes":[{"authorDate":"2020-09-23 20:37:35","commitOrder":7,"curCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","date":"2020-10-12 15:03:28","endLine":1287,"groupId":"103360","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/dd2d0de2b922eabdd039d853a7810a794b7cb5.src","preCode":"\tpublic void testValueStateDefaultValue() throws Exception {\n\t\tCheckpointableKeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE);\n\n\t\tValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n\t\tValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n\t\tbackend.setCurrentKey(1);\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tstate.update(\"Ciao\");\n\t\tassertEquals(\"Ciao\", state.value());\n\n\t\tstate.clear();\n\t\tassertEquals(\"Hello\", state.value());\n\n\t\tbackend.dispose();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/sorted/state/BatchExecutionStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1270,"status":"N"},{"authorDate":"2021-09-02 14:51:36","commitOrder":7,"curCode":"    public void testValueStateDefaultValue() throws Exception {\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        KeyedStateHandle keyedStateHandle;\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n        try {\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n            state.update(\"Ciao\");\n            assertEquals(\"Ciao\", state.value());\n\n            state.clear();\n            assertEquals(\"Hello\", state.value());\n\n            keyedStateHandle =\n                    runSnapshot(\n                            backend.snapshot(\n                                    1L,\n                                    1L,\n                                    createStreamFactory(),\n                                    CheckpointOptions.forCheckpointWithDefaultLocation()),\n                            new SharedStateRegistry());\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n\n        try {\n            backend = restoreKeyedBackend(IntSerializer.INSTANCE, keyedStateHandle);\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","date":"2021-09-07 10:27:41","endLine":3654,"groupId":"103360","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testValueStateDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/67a4f3370ae45bdd8a747f6a9b2a991f01fae2.src","preCode":"    public void testValueStateDefaultValue() throws Exception {\n        ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>(\"id\", String.class, \"Hello\");\n\n        CheckpointableKeyedStateBackend<Integer> backend =\n                createKeyedBackend(IntSerializer.INSTANCE);\n        try {\n            ValueState<String> state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n            state.update(\"Ciao\");\n            assertEquals(\"Ciao\", state.value());\n\n            state.clear();\n            assertEquals(\"Hello\", state.value());\n\n            backend =\n                    restoreKeyedBackend(\n                            IntSerializer.INSTANCE,\n                            runSnapshot(\n                                    backend.snapshot(\n                                            1L,\n                                            1L,\n                                            createStreamFactory(),\n                                            CheckpointOptions.forCheckpointWithDefaultLocation()),\n                                    new SharedStateRegistry()));\n            state =\n                    backend.getPartitionedState(\n                            VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId);\n\n            backend.setCurrentKey(1);\n            assertEquals(\"Hello\", state.value());\n\n        } finally {\n            IOUtils.closeQuietly(backend);\n            backend.dispose();\n        }\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/StateBackendTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":3608,"status":"M"}],"commitId":"4f5978fd4f53428b6af85f487f3f2abbf2f590fd","commitMessage":"@@@[FLINK-23983][tests] Ensure to close and dispose created keyed-statebackend in StateBackendTestBase\n","date":"2021-09-07 10:27:41","modifiedFileCount":"1","status":"M","submitter":"Yun Tang"}]
