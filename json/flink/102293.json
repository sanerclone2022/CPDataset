[{"authorTime":"2020-09-25 22:50:09","codes":[{"authorDate":"2020-09-25 22:50:09","commitOrder":1,"curCode":"\tprivate static ArrayElementConverter createArrayElementConverter(LogicalType fieldType) {\n\t\tswitch (fieldType.getTypeRoot()) {\n\t\t\tcase NULL:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.nullNode();\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.booleanNode(array.getBoolean(pos));\n\t\t\tcase TINYINT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getByte(pos));\n\t\t\tcase SMALLINT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getShort(pos));\n\t\t\tcase INTEGER:\n\t\t\tcase INTERVAL_YEAR_MONTH:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getInt(pos));\n\t\t\tcase BIGINT:\n\t\t\tcase INTERVAL_DAY_TIME:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getLong(pos));\n\t\t\tcase FLOAT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getFloat(pos));\n\t\t\tcase DOUBLE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getDouble(pos));\n\t\t\tcase CHAR:\n\t\t\tcase VARCHAR:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.textNode(array.getString(pos).toString());\n\t\t\tcase BINARY:\n\t\t\tcase VARBINARY:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.binaryNode(array.getBinary(pos));\n\t\t\tcase DATE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> convertDate(array.getInt(pos), container);\n\t\t\tcase TIME_WITHOUT_TIME_ZONE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> convertTime(array.getInt(pos), container);\n\t\t\tcase TIMESTAMP_WITH_TIME_ZONE:\n\t\t\t\tfinal int zonedTimestampPrecision = ((LocalZonedTimestampType) fieldType).getPrecision();\n\t\t\t\treturn (csvMapper, container, array, pos) ->\n\t\t\t\t\tconvertTimestamp(array.getTimestamp(pos, zonedTimestampPrecision), container);\n\t\t\tcase TIMESTAMP_WITHOUT_TIME_ZONE:\n\t\t\t\tfinal int timestampPrecision = ((TimestampType) fieldType).getPrecision();\n\t\t\t\treturn (csvMapper, container, array, pos) ->\n\t\t\t\t\tconvertTimestamp(array.getTimestamp(pos, timestampPrecision), container);\n\t\t\tcase DECIMAL:\n\t\t\t\treturn createDecimalArrayElementConverter((DecimalType) fieldType);\n\t\t\t\r\n\t\t\tcase ARRAY:\n\t\t\tcase ROW:\n\t\t\tcase MAP:\n\t\t\tcase MULTISET:\n\t\t\tcase RAW:\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n\t\t}\n\t}\n","date":"2020-09-25 22:50:09","endLine":213,"groupId":"10367","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createArrayElementConverter","params":"(LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6a/b7f74fe6cb3d2a459b12b1757d08f7f79a8ca1.src","preCode":"\tprivate static ArrayElementConverter createArrayElementConverter(LogicalType fieldType) {\n\t\tswitch (fieldType.getTypeRoot()) {\n\t\t\tcase NULL:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.nullNode();\n\t\t\tcase BOOLEAN:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.booleanNode(array.getBoolean(pos));\n\t\t\tcase TINYINT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getByte(pos));\n\t\t\tcase SMALLINT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getShort(pos));\n\t\t\tcase INTEGER:\n\t\t\tcase INTERVAL_YEAR_MONTH:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getInt(pos));\n\t\t\tcase BIGINT:\n\t\t\tcase INTERVAL_DAY_TIME:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getLong(pos));\n\t\t\tcase FLOAT:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getFloat(pos));\n\t\t\tcase DOUBLE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.numberNode(array.getDouble(pos));\n\t\t\tcase CHAR:\n\t\t\tcase VARCHAR:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.textNode(array.getString(pos).toString());\n\t\t\tcase BINARY:\n\t\t\tcase VARBINARY:\n\t\t\t\treturn (csvMapper, container, array, pos) -> container.binaryNode(array.getBinary(pos));\n\t\t\tcase DATE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> convertDate(array.getInt(pos), container);\n\t\t\tcase TIME_WITHOUT_TIME_ZONE:\n\t\t\t\treturn (csvMapper, container, array, pos) -> convertTime(array.getInt(pos), container);\n\t\t\tcase TIMESTAMP_WITH_TIME_ZONE:\n\t\t\t\tfinal int zonedTimestampPrecision = ((LocalZonedTimestampType) fieldType).getPrecision();\n\t\t\t\treturn (csvMapper, container, array, pos) ->\n\t\t\t\t\tconvertTimestamp(array.getTimestamp(pos, zonedTimestampPrecision), container);\n\t\t\tcase TIMESTAMP_WITHOUT_TIME_ZONE:\n\t\t\t\tfinal int timestampPrecision = ((TimestampType) fieldType).getPrecision();\n\t\t\t\treturn (csvMapper, container, array, pos) ->\n\t\t\t\t\tconvertTimestamp(array.getTimestamp(pos, timestampPrecision), container);\n\t\t\tcase DECIMAL:\n\t\t\t\treturn createDecimalArrayElementConverter((DecimalType) fieldType);\n\t\t\t\r\n\t\t\tcase ARRAY:\n\t\t\tcase ROW:\n\t\t\tcase MAP:\n\t\t\tcase MULTISET:\n\t\t\tcase RAW:\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n\t\t}\n\t}\n","realPath":"flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2020-09-25 22:50:09","commitOrder":1,"curCode":"\tprivate static ArrayElementConverter createDecimalArrayElementConverter(DecimalType decimalType) {\n\t\tfinal int precision = decimalType.getPrecision();\n\t\tfinal int scale = decimalType.getScale();\n\t\treturn (csvMapper, container, array, pos) -> {\n\t\t\tDecimalData decimal = array.getDecimal(pos, precision, scale);\n\t\t\treturn convertDecimal(decimal, container);\n\t\t};\n\t}\n","date":"2020-09-25 22:50:09","endLine":235,"groupId":"10368","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDecimalArrayElementConverter","params":"(DecimalTypedecimalType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6a/b7f74fe6cb3d2a459b12b1757d08f7f79a8ca1.src","preCode":"\tprivate static ArrayElementConverter createDecimalArrayElementConverter(DecimalType decimalType) {\n\t\tfinal int precision = decimalType.getPrecision();\n\t\tfinal int scale = decimalType.getScale();\n\t\treturn (csvMapper, container, array, pos) -> {\n\t\t\tDecimalData decimal = array.getDecimal(pos, precision, scale);\n\t\t\treturn convertDecimal(decimal, container);\n\t\t};\n\t}\n","realPath":"flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"}],"commitId":"ef4d997756756bf0e1e722af8a3fcd6995f37dc8","commitMessage":"@@@[FLINK-19098][json][csv] Make RowData CSV and JSON converters public\n\nThis closes #13303\n\nCo-authored-by: Jark Wu <jark@apache.org>","date":"2020-09-25 22:50:09","modifiedFileCount":"5","status":"B","submitter":"Brian Zhou"},{"authorTime":"2020-09-25 22:50:09","codes":[{"authorDate":"2021-03-24 17:10:23","commitOrder":2,"curCode":"    private static ArrayElementConverter createArrayElementConverter(LogicalType fieldType) {\n        switch (fieldType.getTypeRoot()) {\n            case NULL:\n                return (csvMapper, container, array, pos) -> container.nullNode();\n            case BOOLEAN:\n                return (csvMapper, container, array, pos) ->\n                        container.booleanNode(array.getBoolean(pos));\n            case TINYINT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getByte(pos));\n            case SMALLINT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getShort(pos));\n            case INTEGER:\n            case INTERVAL_YEAR_MONTH:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getInt(pos));\n            case BIGINT:\n            case INTERVAL_DAY_TIME:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getLong(pos));\n            case FLOAT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getFloat(pos));\n            case DOUBLE:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getDouble(pos));\n            case CHAR:\n            case VARCHAR:\n                return (csvMapper, container, array, pos) ->\n                        container.textNode(array.getString(pos).toString());\n            case BINARY:\n            case VARBINARY:\n                return (csvMapper, container, array, pos) ->\n                        container.binaryNode(array.getBinary(pos));\n            case DATE:\n                return (csvMapper, container, array, pos) ->\n                        convertDate(array.getInt(pos), container);\n            case TIME_WITHOUT_TIME_ZONE:\n                return (csvMapper, container, array, pos) ->\n                        convertTime(array.getInt(pos), container);\n            case TIMESTAMP_WITHOUT_TIME_ZONE:\n                final int timestampPrecision = ((TimestampType) fieldType).getPrecision();\n                return (csvMapper, container, array, pos) ->\n                        convertTimestamp(\n                                array.getTimestamp(pos, timestampPrecision),\n                                container,\n                                SQL_TIMESTAMP_FORMAT);\n            case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\n                final int localZonedTimestampPrecision =\n                        ((LocalZonedTimestampType) fieldType).getPrecision();\n                return (csvMapper, container, array, pos) ->\n                        convertTimestamp(\n                                array.getTimestamp(pos, localZonedTimestampPrecision),\n                                container,\n                                SQL_TIMESTAMP_WITH_LOCAL_TIMEZONE_FORMAT);\n            case DECIMAL:\n                return createDecimalArrayElementConverter((DecimalType) fieldType);\n                \r\n                \r\n            case ARRAY:\n            case ROW:\n            case MAP:\n            case MULTISET:\n            case RAW:\n            default:\n                throw new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n        }\n    }\n","date":"2021-03-27 11:07:48","endLine":244,"groupId":"102293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createArrayElementConverter","params":"(LogicalTypefieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/f56d42cbe1172d6d01ce2c14c74740d5ae8eaa.src","preCode":"    private static ArrayElementConverter createArrayElementConverter(LogicalType fieldType) {\n        switch (fieldType.getTypeRoot()) {\n            case NULL:\n                return (csvMapper, container, array, pos) -> container.nullNode();\n            case BOOLEAN:\n                return (csvMapper, container, array, pos) ->\n                        container.booleanNode(array.getBoolean(pos));\n            case TINYINT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getByte(pos));\n            case SMALLINT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getShort(pos));\n            case INTEGER:\n            case INTERVAL_YEAR_MONTH:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getInt(pos));\n            case BIGINT:\n            case INTERVAL_DAY_TIME:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getLong(pos));\n            case FLOAT:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getFloat(pos));\n            case DOUBLE:\n                return (csvMapper, container, array, pos) ->\n                        container.numberNode(array.getDouble(pos));\n            case CHAR:\n            case VARCHAR:\n                return (csvMapper, container, array, pos) ->\n                        container.textNode(array.getString(pos).toString());\n            case BINARY:\n            case VARBINARY:\n                return (csvMapper, container, array, pos) ->\n                        container.binaryNode(array.getBinary(pos));\n            case DATE:\n                return (csvMapper, container, array, pos) ->\n                        convertDate(array.getInt(pos), container);\n            case TIME_WITHOUT_TIME_ZONE:\n                return (csvMapper, container, array, pos) ->\n                        convertTime(array.getInt(pos), container);\n            case TIMESTAMP_WITH_TIME_ZONE:\n                final int zonedTimestampPrecision =\n                        ((LocalZonedTimestampType) fieldType).getPrecision();\n                return (csvMapper, container, array, pos) ->\n                        convertTimestamp(\n                                array.getTimestamp(pos, zonedTimestampPrecision), container);\n            case TIMESTAMP_WITHOUT_TIME_ZONE:\n                final int timestampPrecision = ((TimestampType) fieldType).getPrecision();\n                return (csvMapper, container, array, pos) ->\n                        convertTimestamp(array.getTimestamp(pos, timestampPrecision), container);\n            case DECIMAL:\n                return createDecimalArrayElementConverter((DecimalType) fieldType);\n                \r\n                \r\n            case ARRAY:\n            case ROW:\n            case MAP:\n            case MULTISET:\n            case RAW:\n            default:\n                throw new UnsupportedOperationException(\"Unsupported type: \" + fieldType);\n        }\n    }\n","realPath":"flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2020-09-25 22:50:09","commitOrder":2,"curCode":"\tprivate static ArrayElementConverter createDecimalArrayElementConverter(DecimalType decimalType) {\n\t\tfinal int precision = decimalType.getPrecision();\n\t\tfinal int scale = decimalType.getScale();\n\t\treturn (csvMapper, container, array, pos) -> {\n\t\t\tDecimalData decimal = array.getDecimal(pos, precision, scale);\n\t\t\treturn convertDecimal(decimal, container);\n\t\t};\n\t}\n","date":"2020-09-25 22:50:09","endLine":235,"groupId":"102293","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDecimalArrayElementConverter","params":"(DecimalTypedecimalType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6a/b7f74fe6cb3d2a459b12b1757d08f7f79a8ca1.src","preCode":"\tprivate static ArrayElementConverter createDecimalArrayElementConverter(DecimalType decimalType) {\n\t\tfinal int precision = decimalType.getPrecision();\n\t\tfinal int scale = decimalType.getScale();\n\t\treturn (csvMapper, container, array, pos) -> {\n\t\t\tDecimalData decimal = array.getDecimal(pos, precision, scale);\n\t\t\treturn convertDecimal(decimal, container);\n\t\t};\n\t}\n","realPath":"flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"N"}],"commitId":"a5aaa0e605eb4966b5d73c987ea4d9d0bc852c6d","commitMessage":"@@@[FLINK-21947][csv] Support TIMESTAMP_LTZ type in CSV format\n\nThis closes #15356\n","date":"2021-03-27 11:07:48","modifiedFileCount":"34","status":"M","submitter":"Leonard Xu"}]
