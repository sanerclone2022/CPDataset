[{"authorTime":"2014-12-12 22:55:48","codes":[{"authorDate":"2014-12-12 22:55:48","commitOrder":1,"curCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","date":"2014-12-19 01:58:32","endLine":197,"groupId":"19974","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregatorWithoutParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/e71680d6cd2b8c5b4100dc3e35edbe22bb688b.src","preCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"},{"authorDate":"2014-12-12 22:55:48","commitOrder":1,"curCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","date":"2014-12-19 01:58:32","endLine":231,"groupId":"19974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregatorWithParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/e71680d6cd2b8c5b4100dc3e35edbe22bb688b.src","preCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"a0f7785720f786a1cf3a70ed31b9d05cfd57c65b","commitMessage":"@@@Change integration tests to reuse cluster in order to save startup and shutdown time.\n","date":"2014-12-19 01:58:32","modifiedFileCount":"24","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2015-03-18 17:44:43","codes":[{"authorDate":"2015-03-18 17:44:43","commitOrder":2,"curCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","date":"2015-03-23 16:03:50","endLine":196,"groupId":"19974","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregatorWithoutParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/44/544d37cbac543e8c60ffe31186f1243ae58377.src","preCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2015-03-18 17:44:43","commitOrder":2,"curCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","date":"2015-03-23 16:03:50","endLine":230,"groupId":"19974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregatorWithParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/44/544d37cbac543e8c60ffe31186f1243ae58377.src","preCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setDegreeOfParallelism(DOP);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"cf84bca124ac34875ef3e559abbbf509c1218542","commitMessage":"@@@[FLINK-1679] use a consistent name for parallelism\n\n* rename occurrences of degree of parallelism to parallelism\n\n* [Dd]egree[ -]of[ -]parallelism -> [pP]arallelism\n* (DOP|dop) -> [pP]arallelism\n* paraDegree -> parallelism\n* degree-of-parallelism -> parallelism\n* DEGREE_OF_PARALLELISM -> PARALLELISM\n","date":"2015-03-23 16:03:50","modifiedFileCount":"210","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2018-06-07 00:23:25","codes":[{"authorDate":"2018-06-07 00:23:25","commitOrder":3,"curCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tList<Integer> result = iterationRes.map(new ProjectSecondMapper()).collect();\n\t\tCollections.sort(result);\n\n\t\tList<Integer> expected = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n\n\t\tassertEquals(expected, result);\n\t}\n","date":"2018-07-13 20:39:31","endLine":229,"groupId":"101216","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregatorWithoutParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/49ab8d205c38dc9cf6dbf5685ec77c38eb6eb1.src","preCode":"\tpublic void testAggregatorWithoutParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregator();\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2018-06-07 00:23:25","commitOrder":3,"curCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tList<Integer> result = iterationRes.map(new ProjectSecondMapper()).collect();\n\t\tCollections.sort(result);\n\n\t\tList<Integer> expected = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5);\n\n\t\tassertEquals(result, expected);\n\t}\n","date":"2018-07-13 20:39:31","endLine":261,"groupId":"101216","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregatorWithParameterForIterateDelta","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/49ab8d205c38dc9cf6dbf5685ec77c38eb6eb1.src","preCode":"\tpublic void testAggregatorWithParameterForIterateDelta() throws Exception {\n\t\t\r\n\r\n\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\n\t\tDataSet<Tuple2<Integer, Integer>> initialSolutionSet = CollectionDataSets.getIntegerDataSet(env).map(new TupleMakerMap());\n\n\t\tDeltaIteration<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> iteration = initialSolutionSet.iterateDelta(\n\t\t\t\tinitialSolutionSet, MAX_ITERATIONS, 0);\n\n\t\t\r\n\t\tLongSumAggregator aggr = new LongSumAggregatorWithParameter(4);\n\t\titeration.registerAggregator(NEGATIVE_ELEMENTS_AGGR, aggr);\n\n\t\tDataSet<Tuple2<Integer, Integer>> updatedDs = iteration.getWorkset().map(new AggregateMapDelta());\n\n\t\tDataSet<Tuple2<Integer, Integer>> newElements = updatedDs.join(iteration.getSolutionSet())\n\t\t\t\t.where(0).equalTo(0).flatMap(new UpdateFilter());\n\n\t\tDataSet<Tuple2<Integer, Integer>> iterationRes = iteration.closeWith(newElements, newElements);\n\t\tDataSet<Integer> result = iterationRes.map(new ProjectSecondMapper());\n\t\tresult.writeAsText(resultPath);\n\n\t\tenv.execute();\n\n\t\texpected = \"1\\n\" + \"2\\n\" + \"2\\n\" + \"3\\n\" + \"3\\n\"\n\t\t\t\t+ \"3\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\" + \"4\\n\"\n\t\t\t\t+ \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\" + \"5\\n\";\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorsITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"d783c6282e7362fae29b35e61b1522912eab2c36","commitMessage":"@@@[FLINK-9503] Migrate integration tests for iterative aggregators\n\nThis closes #6129.\n","date":"2018-07-13 20:39:31","modifiedFileCount":"1","status":"M","submitter":"yanghua"}]
