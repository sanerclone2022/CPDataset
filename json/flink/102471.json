[{"authorTime":"2017-12-05 21:20:29","codes":[{"authorDate":"2017-12-05 21:20:29","commitOrder":1,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-02-02 23:12:07","endLine":680,"groupId":"2908","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/0459d205cf4b6654d9ca6c467a86c0b63a4311.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"B"},{"authorDate":"2017-12-05 21:20:29","commitOrder":1,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-02-02 23:12:07","endLine":468,"groupId":"41853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/e28b35e651964e8d292eee99c6c21d87b8ba41.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"}],"commitId":"92ad53e6a7e4c9df7055aac89b49ae95d50c5b4c","commitMessage":"@@@[FLINK-4812][metrics] Expose currentLowWatermark for all operators\n","date":"2018-02-02 23:12:07","modifiedFileCount":"11","status":"B","submitter":"zentol"},{"authorTime":"2018-07-10 19:27:34","codes":[{"authorDate":"2018-07-10 19:27:34","commitOrder":2,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-07-11 18:05:07","endLine":747,"groupId":"2908","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/1e1389263d8320ea1218c92d9a8727579d2231.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2018-07-10 19:27:34","commitOrder":2,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-07-11 18:05:07","endLine":555,"groupId":"41853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/15157358209c0bc7b98ac5007e1e9837678d79.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tTaskMetricGroup taskMetricGroup = new UnregisteredMetricGroups.UnregisteredTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"}],"commitId":"60df251ad34ac033ed6c4423a69765739cb04199","commitMessage":"@@@[FLINK-9789][metrics] Ensure uniqueness of watermark metrics\n\nThis closes #6292.\n","date":"2018-07-11 18:05:07","modifiedFileCount":"5","status":"M","submitter":"zentol"},{"authorTime":"2018-09-03 16:44:07","codes":[{"authorDate":"2018-09-03 16:44:07","commitOrder":3,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-09-03 21:03:30","endLine":747,"groupId":"2908","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/d5021b8845fde5e5e79d2bf46d0380941fb55a.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2018-09-03 16:44:07","commitOrder":3,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-09-03 21:03:30","endLine":555,"groupId":"41853","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/8b647498818fb73bb06c024dc57fb97a936a7e.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup addOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.addOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"}],"commitId":"4573d48008d3b19fa7e90ada7d2783ed02ba71d0","commitMessage":"@@@[hotfix][metrics] Rename TaskMetricGroup#addOperator\n","date":"2018-09-03 21:03:30","modifiedFileCount":"12","status":"M","submitter":"zentol"},{"authorTime":"2019-06-12 18:14:21","codes":[{"authorDate":"2018-09-03 16:44:07","commitOrder":4,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-09-03 21:03:30","endLine":747,"groupId":"2908","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/d5021b8845fde5e5e79d2bf46d0380941fb55a.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"N"},{"authorDate":"2019-06-12 18:14:21","commitOrder":4,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tisInputSelectable ? TwoInputSelectableStreamTask::new : TwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = isInputSelectable ?\n\t\t\tnew AnyReadingCoStreamMap<>(new IdentityMap()) : new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-06-12 18:40:09","endLine":597,"groupId":"41853","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/0a7896b752a83ba3b4a8c03941038958528e47.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"48b54e3e40d91b4a79a56f327210e3e8e36557e9","commitMessage":"@@@[FLINK-11877][runtime] Implement the runtime handling of the InputSelectable interface\n","date":"2019-06-12 18:40:09","modifiedFileCount":"10","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-07-25 14:25:37","codes":[{"authorDate":"2018-09-03 16:44:07","commitOrder":5,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-09-03 21:03:30","endLine":747,"groupId":"2908","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/d5021b8845fde5e5e79d2bf46d0380941fb55a.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"N"},{"authorDate":"2019-07-25 14:25:37","commitOrder":5,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":575,"groupId":"41853","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/59987e7f3b99499721105967e329e22627787d.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tisInputSelectable ? TwoInputSelectableStreamTask::new : TwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = isInputSelectable ?\n\t\t\tnew AnyReadingCoStreamMap<>(new IdentityMap()) : new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"dc742486083f1c30213098ac946e85a99b78fb4d","commitMessage":"@@@[FLINK-13051][runtime] Replace the non-selectable stream task with the input-selectable one\n","date":"2019-08-30 18:44:24","modifiedFileCount":"13","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-08-29 17:38:27","codes":[{"authorDate":"2018-09-03 16:44:07","commitOrder":6,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2018-09-03 21:03:30","endLine":747,"groupId":"2908","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/d5021b8845fde5e5e79d2bf46d0380941fb55a.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tOneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n\t\tOperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t5,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L));\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"N"},{"authorDate":"2019-08-29 17:38:27","commitOrder":6,"curCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","date":"2019-08-30 18:44:24","endLine":573,"groupId":"41853","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/af/15fbc8d3ccf0be3343fd3edf46ea384b6ee954.src","preCode":"\tpublic void testWatermarkMetrics() throws Exception {\n\t\tfinal TwoInputStreamTaskTestHarness<String, Integer, String> testHarness = new TwoInputStreamTaskTestHarness<>(\n\t\t\tTwoInputSelectableStreamTask::new,\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tCoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n\t\tfinal OperatorID headOperatorId = new OperatorID();\n\n\t\tOneInputStreamTaskTest.WatermarkMetricOperator chainedOperator = new OneInputStreamTaskTest.WatermarkMetricOperator();\n\t\tOperatorID chainedOperatorId = new OperatorID();\n\n\t\ttestHarness.setupOperatorChain(headOperatorId, headOperator)\n\t\t\t.chain(chainedOperatorId, chainedOperator, BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n\t\t\t.finish();\n\n\t\tInterceptingOperatorMetricGroup headOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingOperatorMetricGroup chainedOperatorMetricGroup = new InterceptingOperatorMetricGroup();\n\t\tInterceptingTaskMetricGroup taskMetricGroup = new InterceptingTaskMetricGroup() {\n\t\t\t@Override\n\t\t\tpublic OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n\t\t\t\tif (id.equals(headOperatorId)) {\n\t\t\t\t\treturn headOperatorMetricGroup;\n\t\t\t\t} else if (id.equals(chainedOperatorId)) {\n\t\t\t\t\treturn chainedOperatorMetricGroup;\n\t\t\t\t} else {\n\t\t\t\t\treturn super.getOrAddOperator(id, name);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tStreamMockEnvironment env = new StreamMockEnvironment(\n\t\t\ttestHarness.jobConfig, testHarness.taskConfig, testHarness.memorySize, new MockInputSplitProvider(), testHarness.bufferSize, new TestTaskStateManager()) {\n\t\t\t@Override\n\t\t\tpublic TaskMetricGroup getMetricGroup() {\n\t\t\t\treturn taskMetricGroup;\n\t\t\t}\n\t\t};\n\n\t\ttestHarness.invoke(env);\n\t\ttestHarness.waitForTaskRunning();\n\n\t\tGauge<Long> taskInputWatermarkGauge = (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headInput1WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n\t\tGauge<Long> headInput2WatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n\t\tGauge<Long> headInputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> headOutputWatermarkGauge = (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\t\tGauge<Long> chainedInputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n\t\tGauge<Long> chainedOutputWatermarkGauge = (Gauge<Long>) chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n\t\tAssert.assertEquals(\"A metric was registered multiple times.\",\n\t\t\t7,\n\t\t\tnew HashSet<>(Arrays.asList(\n\t\t\t\ttaskInputWatermarkGauge,\n\t\t\t\theadInput1WatermarkGauge,\n\t\t\t\theadInput2WatermarkGauge,\n\t\t\t\theadInputWatermarkGauge,\n\t\t\t\theadOutputWatermarkGauge,\n\t\t\t\tchainedInputWatermarkGauge,\n\t\t\t\tchainedOutputWatermarkGauge))\n\t\t\t\t.size());\n\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(1L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(2L), 1, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.processElement(new Watermark(3L), 0, 0);\n\t\ttestHarness.waitForInputProcessing();\n\t\tAssert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n\t\tAssert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n\t\ttestHarness.endInput();\n\t\ttestHarness.waitForTaskCompletion();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"}],"commitId":"ce557839d762b5f1ec92aa1885fd3d2ae33d0d0b","commitMessage":"@@@[FLINK-13051][runtime] Rename TwoInputSelectableStreamTask and StreamTwoInputSelectableProcessor\n","date":"2019-08-30 18:44:24","modifiedFileCount":"14","status":"M","submitter":"sunhaibotb"},{"authorTime":"2021-05-19 20:29:24","codes":[{"authorDate":"2021-05-19 20:29:24","commitOrder":7,"curCode":"    public void testWatermarkMetrics() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        OneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n        OperatorID headOperatorId = new OperatorID();\n\n        OneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n        OperatorID chainedOperatorId = new OperatorID();\n\n        testHarness\n                .setupOperatorChain(headOperatorId, headOperator)\n                .chain(\n                        chainedOperatorId,\n                        chainedOperator,\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        InterceptingOperatorMetricGroup headOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingOperatorMetricGroup chainedOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingTaskMetricGroup taskMetricGroup =\n                new InterceptingTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID id, String name) {\n                        if (id.equals(headOperatorId)) {\n                            return headOperatorMetricGroup;\n                        } else if (id.equals(chainedOperatorId)) {\n                            return chainedOperatorMetricGroup;\n                        } else {\n                            return super.getOrAddOperator(id, name);\n                        }\n                    }\n                };\n\n        StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        Gauge<Long> taskInputWatermarkGauge =\n                (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headInputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headOutputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n        Gauge<Long> chainedInputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> chainedOutputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n        Assert.assertEquals(\n                \"A metric was registered multiple times.\",\n                5,\n                new HashSet<>(\n                                Arrays.asList(\n                                        taskInputWatermarkGauge,\n                                        headInputWatermarkGauge,\n                                        headOutputWatermarkGauge,\n                                        chainedInputWatermarkGauge,\n                                        chainedOutputWatermarkGauge))\n                        .size());\n\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(1L));\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(2L));\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-14 22:42:46","endLine":927,"groupId":"102471","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/c6019a001fe17a9b1994c3520689600c06433d.src","preCode":"    public void testWatermarkMetrics() throws Exception {\n        final OneInputStreamTaskTestHarness<String, String> testHarness =\n                new OneInputStreamTaskTestHarness<>(\n                        OneInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        OneInputStreamOperator<String, String> headOperator = new WatermarkMetricOperator();\n        OperatorID headOperatorId = new OperatorID();\n\n        OneInputStreamOperator<String, String> chainedOperator = new WatermarkMetricOperator();\n        OperatorID chainedOperatorId = new OperatorID();\n\n        testHarness\n                .setupOperatorChain(headOperatorId, headOperator)\n                .chain(\n                        chainedOperatorId,\n                        chainedOperator,\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        InterceptingOperatorMetricGroup headOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingOperatorMetricGroup chainedOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingTaskMetricGroup taskMetricGroup =\n                new InterceptingTaskMetricGroup() {\n                    @Override\n                    public OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n                        if (id.equals(headOperatorId)) {\n                            return headOperatorMetricGroup;\n                        } else if (id.equals(chainedOperatorId)) {\n                            return chainedOperatorMetricGroup;\n                        } else {\n                            return super.getOrAddOperator(id, name);\n                        }\n                    }\n                };\n\n        StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        Gauge<Long> taskInputWatermarkGauge =\n                (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headInputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headOutputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n        Gauge<Long> chainedInputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> chainedOutputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n        Assert.assertEquals(\n                \"A metric was registered multiple times.\",\n                5,\n                new HashSet<>(\n                                Arrays.asList(\n                                        taskInputWatermarkGauge,\n                                        headInputWatermarkGauge,\n                                        headOutputWatermarkGauge,\n                                        chainedInputWatermarkGauge,\n                                        chainedOutputWatermarkGauge))\n                        .size());\n\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(1L));\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(2L));\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(8L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"},{"authorDate":"2021-05-19 20:29:24","commitOrder":7,"curCode":"    public void testWatermarkMetrics() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, Integer, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.INT_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        CoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n        final OperatorID headOperatorId = new OperatorID();\n\n        OneInputStreamTaskTest.WatermarkMetricOperator chainedOperator =\n                new OneInputStreamTaskTest.WatermarkMetricOperator();\n        OperatorID chainedOperatorId = new OperatorID();\n\n        testHarness\n                .setupOperatorChain(headOperatorId, headOperator)\n                .chain(\n                        chainedOperatorId,\n                        chainedOperator,\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        InterceptingOperatorMetricGroup headOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingOperatorMetricGroup chainedOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingTaskMetricGroup taskMetricGroup =\n                new InterceptingTaskMetricGroup() {\n                    @Override\n                    public InternalOperatorMetricGroup getOrAddOperator(\n                            OperatorID id, String name) {\n                        if (id.equals(headOperatorId)) {\n                            return headOperatorMetricGroup;\n                        } else if (id.equals(chainedOperatorId)) {\n                            return chainedOperatorMetricGroup;\n                        } else {\n                            return super.getOrAddOperator(id, name);\n                        }\n                    }\n                };\n\n        StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        Gauge<Long> taskInputWatermarkGauge =\n                (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headInput1WatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n        Gauge<Long> headInput2WatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n        Gauge<Long> headInputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headOutputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n        Gauge<Long> chainedInputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> chainedOutputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n        Assert.assertEquals(\n                \"A metric was registered multiple times.\",\n                7,\n                new HashSet<>(\n                                Arrays.asList(\n                                        taskInputWatermarkGauge,\n                                        headInput1WatermarkGauge,\n                                        headInput2WatermarkGauge,\n                                        headInputWatermarkGauge,\n                                        headOutputWatermarkGauge,\n                                        chainedInputWatermarkGauge,\n                                        chainedOutputWatermarkGauge))\n                        .size());\n\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(1L), 0, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(2L), 1, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(3L), 0, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","date":"2021-08-14 22:42:46","endLine":702,"groupId":"102471","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testWatermarkMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/0dd930eba9d19b849ec9b08a1d9bdde5454830.src","preCode":"    public void testWatermarkMetrics() throws Exception {\n        final TwoInputStreamTaskTestHarness<String, Integer, String> testHarness =\n                new TwoInputStreamTaskTestHarness<>(\n                        TwoInputStreamTask::new,\n                        BasicTypeInfo.STRING_TYPE_INFO,\n                        BasicTypeInfo.INT_TYPE_INFO,\n                        BasicTypeInfo.STRING_TYPE_INFO);\n\n        CoStreamMap<String, Integer, String> headOperator = new CoStreamMap<>(new IdentityMap());\n        final OperatorID headOperatorId = new OperatorID();\n\n        OneInputStreamTaskTest.WatermarkMetricOperator chainedOperator =\n                new OneInputStreamTaskTest.WatermarkMetricOperator();\n        OperatorID chainedOperatorId = new OperatorID();\n\n        testHarness\n                .setupOperatorChain(headOperatorId, headOperator)\n                .chain(\n                        chainedOperatorId,\n                        chainedOperator,\n                        BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()))\n                .finish();\n\n        InterceptingOperatorMetricGroup headOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingOperatorMetricGroup chainedOperatorMetricGroup =\n                new InterceptingOperatorMetricGroup();\n        InterceptingTaskMetricGroup taskMetricGroup =\n                new InterceptingTaskMetricGroup() {\n                    @Override\n                    public OperatorMetricGroup getOrAddOperator(OperatorID id, String name) {\n                        if (id.equals(headOperatorId)) {\n                            return headOperatorMetricGroup;\n                        } else if (id.equals(chainedOperatorId)) {\n                            return chainedOperatorMetricGroup;\n                        } else {\n                            return super.getOrAddOperator(id, name);\n                        }\n                    }\n                };\n\n        StreamMockEnvironment env =\n                new StreamMockEnvironment(\n                        testHarness.jobConfig,\n                        testHarness.taskConfig,\n                        testHarness.memorySize,\n                        new MockInputSplitProvider(),\n                        testHarness.bufferSize,\n                        new TestTaskStateManager()) {\n                    @Override\n                    public TaskMetricGroup getMetricGroup() {\n                        return taskMetricGroup;\n                    }\n                };\n\n        testHarness.invoke(env);\n        testHarness.waitForTaskRunning();\n\n        Gauge<Long> taskInputWatermarkGauge =\n                (Gauge<Long>) taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headInput1WatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_1_WATERMARK);\n        Gauge<Long> headInput2WatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_2_WATERMARK);\n        Gauge<Long> headInputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> headOutputWatermarkGauge =\n                (Gauge<Long>) headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n        Gauge<Long> chainedInputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);\n        Gauge<Long> chainedOutputWatermarkGauge =\n                (Gauge<Long>)\n                        chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);\n\n        Assert.assertEquals(\n                \"A metric was registered multiple times.\",\n                7,\n                new HashSet<>(\n                                Arrays.asList(\n                                        taskInputWatermarkGauge,\n                                        headInput1WatermarkGauge,\n                                        headInput2WatermarkGauge,\n                                        headInputWatermarkGauge,\n                                        headOutputWatermarkGauge,\n                                        chainedInputWatermarkGauge,\n                                        chainedOutputWatermarkGauge))\n                        .size());\n\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(1L), 0, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(Long.MIN_VALUE, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(Long.MIN_VALUE, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(2L), 1, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(1L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(1L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.processElement(new Watermark(3L), 0, 0);\n        testHarness.waitForInputProcessing();\n        Assert.assertEquals(2L, taskInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(3L, headInput1WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headInput2WatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, headOutputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(2L, chainedInputWatermarkGauge.getValue().longValue());\n        Assert.assertEquals(4L, chainedOutputWatermarkGauge.getValue().longValue());\n\n        testHarness.endInput();\n        testHarness.waitForTaskCompletion();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"}],"commitId":"63ee60859cac64f2bc6cfe2c5015ceb1199cea9c","commitMessage":"@@@[FLINK-23652][core/metrics] Extract Operator(IO)MetricGroup interfaces and expose them in RuntimeContext\n","date":"2021-08-14 22:42:46","modifiedFileCount":"66","status":"M","submitter":"Arvid Heise"}]
