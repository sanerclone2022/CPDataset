[{"authorTime":"2021-03-20 02:54:27","codes":[{"authorDate":"2021-01-25 00:57:44","commitOrder":4,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                    }\n                };\n\n        coordinator.checkpointState(\n                new CheckpointMetaData(0, 0),\n                new CheckpointOptions(SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(false, broadcastedPriorityEvent.get());\n    }\n","date":"2021-01-28 18:01:53","endLine":175,"groupId":"18391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3fc4e1f1bbd41897c61bf46e000626486b0cc5.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                    }\n                };\n\n        coordinator.checkpointState(\n                new CheckpointMetaData(0, 0),\n                new CheckpointOptions(SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(false, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"NB"},{"authorDate":"2021-03-20 02:54:27","commitOrder":4,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                        \r\n                        coordinator\n                                .getChannelStateWriter()\n                                .addOutputData(\n                                        0,\n                                        new ResultSubpartitionInfo(0, 0),\n                                        0,\n                                        BufferBuilderTestUtils.buildSomeBuffer(1337));\n                    }\n                };\n\n        CheckpointOptions forcedAlignedOptions =\n                CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                        .withUnalignedUnsupported();\n        coordinator.checkpointState(\n                new CheckpointMetaData(42, 0),\n                forcedAlignedOptions,\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(true, broadcastedPriorityEvent.get());\n    }\n","date":"2021-03-31 04:02:57","endLine":223,"groupId":"5712","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/42bd870ed4864590f6046dc445dcdbb401cad9.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                        \r\n                        coordinator\n                                .getChannelStateWriter()\n                                .addOutputData(\n                                        0,\n                                        new ResultSubpartitionInfo(0, 0),\n                                        0,\n                                        BufferBuilderTestUtils.buildSomeBuffer(1337));\n                    }\n                };\n\n        CheckpointOptions forcedAlignedOptions =\n                CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                        .withUnalignedUnsupported();\n        coordinator.checkpointState(\n                new CheckpointMetaData(42, 0),\n                forcedAlignedOptions,\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(true, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"41936fe9cc323b27eb01145bdc91f57624359eea","commitMessage":"@@@[FLINK-21945][streaming] Force aligned barriers on pointwise connections.\n\nIntroduces the AlignmentType to CheckpointOptions that includes a FORCED_ALIGNED. This barrier acts as an aligned barrier but keeps a potential timeout internally. The timeout is then later used to restore the previous state in SubtaskCheckpointCoordinatorImpl.\n","date":"2021-03-31 04:02:57","modifiedFileCount":"9","status":"M","submitter":"Arvid Heise"},{"authorTime":"2021-04-07 19:03:41","codes":[{"authorDate":"2021-01-25 00:57:44","commitOrder":5,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                    }\n                };\n\n        coordinator.checkpointState(\n                new CheckpointMetaData(0, 0),\n                new CheckpointOptions(SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(false, broadcastedPriorityEvent.get());\n    }\n","date":"2021-01-28 18:01:53","endLine":175,"groupId":"18391","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3fc4e1f1bbd41897c61bf46e000626486b0cc5.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                    }\n                };\n\n        coordinator.checkpointState(\n                new CheckpointMetaData(0, 0),\n                new CheckpointOptions(SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(false, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2021-04-07 19:03:41","commitOrder":5,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                        \r\n                        coordinator\n                                .getChannelStateWriter()\n                                .addOutputData(\n                                        checkpointId,\n                                        new ResultSubpartitionInfo(0, 0),\n                                        0,\n                                        BufferBuilderTestUtils.buildSomeBuffer(500));\n                    }\n                };\n\n        CheckpointOptions forcedAlignedOptions =\n                CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                        .withUnalignedUnsupported();\n        coordinator.checkpointState(\n                new CheckpointMetaData(checkpointId, 0),\n                forcedAlignedOptions,\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(true, broadcastedPriorityEvent.get());\n    }\n","date":"2021-04-07 23:53:17","endLine":224,"groupId":"18392","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/39d2909e9168051ff1034be162cafe2a535cb4.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                        \r\n                        coordinator\n                                .getChannelStateWriter()\n                                .addOutputData(\n                                        0,\n                                        new ResultSubpartitionInfo(0, 0),\n                                        0,\n                                        BufferBuilderTestUtils.buildSomeBuffer(1337));\n                    }\n                };\n\n        CheckpointOptions forcedAlignedOptions =\n                CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                        .withUnalignedUnsupported();\n        coordinator.checkpointState(\n                new CheckpointMetaData(42, 0),\n                forcedAlignedOptions,\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(true, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"21c84502bdc8442200ef499f91f9ca45278bea68","commitMessage":"@@@[FLINK-22105][tests] Fix checkpoint id in testForceAlignedCheckpointResultingInPriorityEvents\n","date":"2021-04-07 23:53:17","modifiedFileCount":"1","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-04-07 17:48:02","codes":[{"authorDate":"2021-04-07 17:48:02","commitOrder":6,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-04-07 23:53:17","endLine":181,"groupId":"18391","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/49e68ded01d5f2c0e83abf65862fca77bdba45.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                    }\n                };\n\n        coordinator.checkpointState(\n                new CheckpointMetaData(0, 0),\n                new CheckpointOptions(SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(false, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2021-04-07 17:48:02","commitOrder":6,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-04-07 23:53:17","endLine":227,"groupId":"18392","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/49e68ded01d5f2c0e83abf65862fca77bdba45.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n        final OperatorChain<?, ?> operatorChain =\n                new OperatorChain(\n                        new MockStreamTaskBuilder(mockEnvironment).build(),\n                        new NonRecordWriter<>()) {\n                    @Override\n                    public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                            throws IOException {\n                        super.broadcastEvent(event, isPriorityEvent);\n                        broadcastedPriorityEvent.set(isPriorityEvent);\n                        \r\n                        coordinator\n                                .getChannelStateWriter()\n                                .addOutputData(\n                                        checkpointId,\n                                        new ResultSubpartitionInfo(0, 0),\n                                        0,\n                                        BufferBuilderTestUtils.buildSomeBuffer(500));\n                    }\n                };\n\n        CheckpointOptions forcedAlignedOptions =\n                CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                        .withUnalignedUnsupported();\n        coordinator.checkpointState(\n                new CheckpointMetaData(checkpointId, 0),\n                forcedAlignedOptions,\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n\n        assertEquals(true, broadcastedPriorityEvent.get());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"3cf8597cf3bcccc847519fa12925a2b984e80304","commitMessage":"@@@[hotfix][tests] Close SubtaskCheckpointCoordinator in tests\n\nThis is to reveal any async failures occurring for\nexample when writing channel state.\n","date":"2021-04-07 23:53:17","modifiedFileCount":"1","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-07-11 11:06:24","codes":[{"authorDate":"2021-07-11 11:06:24","commitOrder":7,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-07-13 15:18:24","endLine":183,"groupId":"27489","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/858014c930de8cbdb616d915915579a3aa89f3.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-07-11 11:06:24","commitOrder":7,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-07-13 15:18:24","endLine":230,"groupId":"27490","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/858014c930de8cbdb616d915915579a3aa89f3.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"5aba6167343b68dab713b4f2b3ddb9dbd46f2df4","commitMessage":"@@@[FLINK-21088][runtime][checkpoint] Pass the finish on restore status to operator chain\n","date":"2021-07-13 15:18:24","modifiedFileCount":"6","status":"M","submitter":"Yun Gao"},{"authorTime":"2021-07-28 13:46:47","codes":[{"authorDate":"2021-07-28 13:46:47","commitOrder":8,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-08-03 19:19:41","endLine":184,"groupId":"27489","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/43a36d04a16e5fb3ea17fff0d95d1560fd7c79.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-07-28 13:46:47","commitOrder":8,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-08-03 19:19:41","endLine":232,"groupId":"27490","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/43a36d04a16e5fb3ea17fff0d95d1560fd7c79.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"66bf4e6891a0cb271ca940d3814db83ca51164d5","commitMessage":"@@@[FLINK-21080][runtime][checkpoint] The task reports whether it has called operators' finish method\n","date":"2021-08-03 19:19:41","modifiedFileCount":"12","status":"M","submitter":"Yun Gao"},{"authorTime":"2021-08-10 21:05:00","codes":[{"authorDate":"2021-08-10 21:05:00","commitOrder":9,"curCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new RegularOperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-08-14 17:24:42","endLine":183,"groupId":"102511","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSavepointNotResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/c4678f5326fe80866abf6457c306d31fcffb21.src","preCode":"    public void testSavepointNotResultingInPriorityEvents() throws Exception {\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                        }\n                    };\n\n            coordinator.checkpointState(\n                    new CheckpointMetaData(0, 0),\n                    new CheckpointOptions(\n                            SAVEPOINT, CheckpointStorageLocationReference.getDefault()),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(false, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-08-10 21:05:00","commitOrder":9,"curCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new RegularOperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>()) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","date":"2021-08-14 17:24:42","endLine":230,"groupId":"102511","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceAlignedCheckpointResultingInPriorityEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ef/c4678f5326fe80866abf6457c306d31fcffb21.src","preCode":"    public void testForceAlignedCheckpointResultingInPriorityEvents() throws Exception {\n        final long checkpointId = 42L;\n        MockEnvironment mockEnvironment = MockEnvironment.builder().build();\n\n        try (SubtaskCheckpointCoordinator coordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setUnalignedCheckpointEnabled(true)\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n\n            AtomicReference<Boolean> broadcastedPriorityEvent = new AtomicReference<>(null);\n            final OperatorChain<?, ?> operatorChain =\n                    new OperatorChain(\n                            new MockStreamTaskBuilder(mockEnvironment).build(),\n                            new NonRecordWriter<>(),\n                            false) {\n                        @Override\n                        public void broadcastEvent(AbstractEvent event, boolean isPriorityEvent)\n                                throws IOException {\n                            super.broadcastEvent(event, isPriorityEvent);\n                            broadcastedPriorityEvent.set(isPriorityEvent);\n                            \r\n                            coordinator\n                                    .getChannelStateWriter()\n                                    .addOutputData(\n                                            checkpointId,\n                                            new ResultSubpartitionInfo(0, 0),\n                                            0,\n                                            BufferBuilderTestUtils.buildSomeBuffer(500));\n                        }\n                    };\n\n            CheckpointOptions forcedAlignedOptions =\n                    CheckpointOptions.unaligned(CheckpointStorageLocationReference.getDefault())\n                            .withUnalignedUnsupported();\n            coordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, 0),\n                    forcedAlignedOptions,\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> true);\n\n            assertEquals(true, broadcastedPriorityEvent.get());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"0bc3bae27a0fcb920ac25a8e6acebe50243e50a1","commitMessage":"@@@[FLINK-23708][task][refactor] Split OperatorChain into Finished and Regular classes\n","date":"2021-08-14 17:24:42","modifiedFileCount":"8","status":"M","submitter":"Piotr Nowojski"}]
