[{"authorTime":"2016-07-18 17:37:06","codes":[{"authorDate":"2016-07-18 17:37:06","commitOrder":1,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-07-27 03:12:05","endLine":2214,"groupId":"41349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/266c432742594aedef6440ff50d2c2c4203be6.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2172,"status":"B"},{"authorDate":"2016-07-18 17:37:06","commitOrder":1,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-07-27 03:12:05","endLine":2262,"groupId":"6759","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/266c432742594aedef6440ff50d2c2c4203be6.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2217,"status":"B"}],"commitId":"12bf7c1a0b81d199085fe874c64763c51a93b3bf","commitMessage":"@@@[FLINK-4207] WindowOperator becomes very slow with allowed lateness\n","date":"2016-07-27 03:12:05","modifiedFileCount":"16","status":"B","submitter":"kl0u"},{"authorTime":"2016-08-11 00:44:50","codes":[{"authorDate":"2016-08-11 00:44:50","commitOrder":2,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-09-01 01:10:01","endLine":2183,"groupId":"23889","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/a6f556796c5e88af3f93de8d4445e42b02169d.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2143,"status":"M"},{"authorDate":"2016-08-11 00:44:50","commitOrder":2,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-09-01 01:10:01","endLine":2229,"groupId":"6759","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/a6f556796c5e88af3f93de8d4445e42b02169d.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2186,"status":"M"}],"commitId":"4809f5367b08a9734fc1bd4875be51a9f3bb65aa","commitMessage":"@@@[FLINK-3761] Refactor State Backends/Make Keyed State Key-Group Aware\n\nThe biggest change in this is that functionality that used to be in\nAbstractStateBackend is now moved to CheckpointStreamFactory and\nKeyedStateBackend. The former is responsible for providing streams that\ncan be used to checkpoint data while the latter is responsible for\nkeeping keyed state. A keyed backend can checkpoint the state that it\nkeeps by using a CheckpointStreamFactory.\n\nThis also refactors how asynchronous keyed state snapshots work. They\nare not implemented using a Future/RunnableFuture.\n\nAlso.  this changes the keyed state backends to be key-group aware and to\nsnapshot the state in key-groups with an index for restoring.\n","date":"2016-09-01 01:10:01","modifiedFileCount":"100","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-10-05 05:49:54","codes":[{"authorDate":"2016-10-05 05:49:54","commitOrder":3,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":2133,"groupId":"32613","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2094,"status":"M"},{"authorDate":"2016-10-05 05:49:54","commitOrder":3,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-06 02:04:34","endLine":2177,"groupId":"6759","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/a6524b4be41e76bc2250e273e2598685f8f6ee.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\toperator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse(\"Tuple2<String, Integer>\"), new ExecutionConfig());\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2136,"status":"M"}],"commitId":"1cd8d4f418a707790c091fed2428627eae9da423","commitMessage":"@@@[hotfix] [streaming api] Remove obsolete and unused InputTypeSerializer from WindowOperator\n","date":"2016-10-06 02:04:34","modifiedFileCount":"4","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-01-13 22:17:09","codes":[{"authorDate":"2017-01-13 22:17:09","commitOrder":4,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-01-23 04:53:39","endLine":2131,"groupId":"23042","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/aa506e95bc097a8c6bad4fa787b3a2cdd9b91d.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2092,"status":"M"},{"authorDate":"2017-01-13 22:17:09","commitOrder":4,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-01-23 04:53:39","endLine":2175,"groupId":"6759","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/aa506e95bc097a8c6bad4fa787b3a2cdd9b91d.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO); ;\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2134,"status":"M"}],"commitId":"3b97128f05bacfb80afe4a2a49741c31ff306cd2","commitMessage":"@@@[FLINK-5590] [runtime] Add proper internal state hierarchy\n\nThis introduces an internal state hierarchy that mirrors the external state hierarchy. \nbut gives the runtime access to methods that should not be part of the user facing API. \nsuch as:\n  - setting namespaces\n  - accessing raw values\n  - merging namespaces\n","date":"2017-01-23 04:53:39","modifiedFileCount":"38","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-03-01 22:36:17","codes":[{"authorDate":"2017-03-01 22:36:17","commitOrder":5,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":2354,"groupId":"23042","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2314,"status":"M"},{"authorDate":"2017-03-01 22:36:17","commitOrder":5,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":2399,"groupId":"36786","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2357,"status":"M"}],"commitId":"07a15d0e1647c79ae010ca6df5b1830a4087dd56","commitMessage":"@@@[FLINK-4460] Provide late-data output for window operations\n\nWe use side outputs to emit dropped late data.\n","date":"2017-03-18 14:44:17","modifiedFileCount":"8","status":"M","submitter":"Chen Qin"},{"authorTime":"2017-05-17 20:01:04","codes":[{"authorDate":"2017-05-17 20:01:04","commitOrder":6,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":2315,"groupId":"23042","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2275,"status":"M"},{"authorDate":"2017-05-17 20:01:04","commitOrder":6,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":2360,"groupId":"36786","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int GAP_SIZE = 3;\n\t\tfinal long LATENESS = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(GAP_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tLATENESS,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2318,"status":"M"}],"commitId":"12b4185c6c09101b64e12a84c33dc4d28f95cff9","commitMessage":"@@@[FLINK-6603] [streaming] Enable checkstyle on test sources\n\nUpdates / reverts the import order by sections:\n- org.apache.flink.*\n- all other imports\n- javax.*\n- java.*\n- static imports\n\nAdds EmptyLineSeparator to enforce an extra newline (not enforced\nbetween field or local variable declarations).\n\nThis closes #3941\n","date":"2017-05-23 04:22:24","modifiedFileCount":"395","status":"M","submitter":"Greg Hogan"},{"authorTime":"2017-12-20 19:27:56","codes":[{"authorDate":"2017-12-20 19:27:56","commitOrder":7,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":2338,"groupId":"23042","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2298,"status":"M"},{"authorDate":"2017-12-20 19:27:56","commitOrder":7,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":2383,"groupId":"36786","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2341,"status":"M"}],"commitId":"091a37052b7045b3ed28c68bfea109024a5d1871","commitMessage":"@@@[FLINK-8298][tests] Properly shutdown MockEnvironment to release resources\n\nThis closes #5193.\n","date":"2018-01-06 12:30:12","modifiedFileCount":"9","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":8,"curCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":2444,"groupId":"102618","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyListStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testCleanupTimerWithEmptyListStateForSessionWindows() throws Exception {\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> windowStateDesc =\n\t\t\tnew ListStateDescriptor<>(\"window-contents\", inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\twindowStateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new PassThroughFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2406,"status":"M"},{"authorDate":"2018-05-04 23:15:51","commitOrder":8,"curCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":2487,"groupId":"102618","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupTimerWithEmptyReduceStateForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testCleanupTimerWithEmptyReduceStateForSessionWindows() throws Exception {\n\n\t\tfinal int gapSize = 3;\n\t\tfinal long lateness = 10;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\tnew SumReducer(),\n\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator =\n\t\t\tnew WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(gapSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\tlateness,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\tcreateTestHarness(operator);\n\n\t\ttestHarness.open();\n\n\t\tConcurrentLinkedQueue<Object> expected = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\t\ttestHarness.processWatermark(new Watermark(4998));\n\n\t\texpected.add(new StreamRecord<>(new Tuple3<>(\"key2-1\", 1000L, 4000L), 3999));\n\t\texpected.add(new Watermark(4998));\n\n\t\ttestHarness.processWatermark(new Watermark(14600));\n\t\texpected.add(new Watermark(14600));\n\n\t\tConcurrentLinkedQueue<Object> actual = testHarness.getOutput();\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expected, actual, new Tuple2ResultSortComparator());\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":2447,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
