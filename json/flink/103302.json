[{"authorTime":"2020-05-09 14:45:00","codes":[{"authorDate":"2020-05-09 14:45:00","commitOrder":1,"curCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-16 17:24:56","endLine":64,"groupId":"33144","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/d62371ed6fecb4d40575ab35dd33586f0191b4.src","preCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2020-05-09 14:45:00","commitOrder":1,"curCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-16 17:24:56","endLine":111,"groupId":"50645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/d62371ed6fecb4d40575ab35dd33586f0191b4.src","preCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"7c6251ede2e164ce29749088a4cd0903f6a486aa","commitMessage":"@@@[FLINK-17734][streaming] Add an operator coordinator and sink function to collect sink data.\n\n* The coordinator acts as a proxy between the client and the sink function.  because in some environments clients can't directly talk to task managers.\n* The sink function uses a simple to handle failures in order to achieve exactly-once semantics. See {{CollectSinkFunction}} for more details.\n\nThis closes #12069\n","date":"2020-05-16 17:24:56","modifiedFileCount":"13","status":"B","submitter":"TsReaper"},{"authorTime":"2020-05-13 00:44:20","codes":[{"authorDate":"2020-05-09 14:45:00","commitOrder":2,"curCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-16 17:24:56","endLine":64,"groupId":"33144","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/d62371ed6fecb4d40575ab35dd33586f0191b4.src","preCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2020-05-13 00:44:20","commitOrder":2,"curCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0, null);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-17 00:25:56","endLine":111,"groupId":"50645","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d2/ad57b35eb050251db385eafe96503b75640392.src","preCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"b3da4e18873dd6e31404c24ce877ff79c19c9300","commitMessage":"@@@[FLINK-10740][scheduler] Add failure reason to OperatorCoordinator.failTask(...)\n","date":"2020-05-17 00:25:56","modifiedFileCount":"9","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-05-17 21:47:31","codes":[{"authorDate":"2020-05-17 21:47:31","commitOrder":3,"curCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator(SOCKET_TIMEOUT_MILLIS);\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-17 21:47:31","endLine":66,"groupId":"103302","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/66/a624a92095de9709befebf7a4342fb21ba1857.src","preCode":"\tpublic void testNoAddress() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-05-17 21:47:31","commitOrder":3,"curCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator(SOCKET_TIMEOUT_MILLIS);\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0, null);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","date":"2020-05-17 21:47:31","endLine":113,"groupId":"103302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testServerFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/66/a624a92095de9709befebf7a4342fb21ba1857.src","preCode":"\tpublic void testServerFailure() throws Exception {\n\t\tCollectSinkOperatorCoordinator coordinator = new CollectSinkOperatorCoordinator();\n\t\tcoordinator.start();\n\n\t\tList<List<Row>> expected = Arrays.asList(\n\t\t\tArrays.asList(Row.of(1, \"aaa\"), Row.of(2, \"bbb\")),\n\t\t\tArrays.asList(Row.of(3, \"ccc\"), Row.of(4, \"ddd\"), Row.of(5, \"eee\")));\n\t\tServerThread server = new ServerThread(expected, 3);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tCollectCoordinationRequest request = new CollectCoordinationRequest(\"version1\", 123);\n\t\tCollectCoordinationResponse response =\n\t\t\t(CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version2\", 456);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(1));\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version3\", 789);\n\t\tCompletableFuture<CoordinationResponse> responseFuture = coordinator.handleCoordinationRequest(request);\n\t\tcoordinator.subtaskFailed(0, null);\n\n\t\t\r\n\t\texpected = Collections.singletonList(Arrays.asList(Row.of(6, \"fff\"), Row.of(7, \"ggg\")));\n\t\tserver = new ServerThread(expected, 2);\n\t\tserver.start();\n\t\tcoordinator.handleEventFromOperator(0, new CollectSinkAddressEvent(server.getServerAddress()));\n\n\t\t\r\n\t\tresponse = (CollectCoordinationResponse) responseFuture.get();\n\t\tassertResponseEquals(request, response, -1, Collections.emptyList());\n\n\t\t\r\n\t\trequest = new CollectCoordinationRequest(\"version4\", 101112);\n\t\tresponse = (CollectCoordinationResponse) coordinator.handleCoordinationRequest(request).get();\n\t\tassertResponseEquals(request, response, 0, expected.get(0));\n\n\t\tserver.close();\n\t\tcoordinator.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/collect/CollectSinkOperatorCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"8650e409763a9b4eba92c77cc02ca22edc0230af","commitMessage":"@@@ [FLINK-17735][streaming] Add an iterator to collect sink results through coordination rest api \n\nThis closes #12073","date":"2020-05-17 21:47:31","modifiedFileCount":"5","status":"M","submitter":"TsReaper"}]
