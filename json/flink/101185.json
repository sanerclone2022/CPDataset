[{"authorTime":"2021-02-20 01:28:12","codes":[{"authorDate":"2018-06-22 22:34:10","commitOrder":2,"curCode":"\tprivate JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n\t\tSlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n\t\tfinal JobVertex source = new JobVertex(\"source\");\n\t\tsource.setInvokableClass(OneTimeFailingInvokable.class);\n\t\tsource.setParallelism(parallelism);\n\t\tsource.setSlotSharingGroup(slotSharingGroup);\n\n\t\tfinal JobVertex sink = new JobVertex(\"sink\");\n\t\tsink.setInvokableClass(NoOpInvokable.class);\n\t\tsink.setParallelism(parallelism);\n\t\tsink.setSlotSharingGroup(slotSharingGroup);\n\n\t\tsink.connectNewDataSetAsInput(source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\t\tJobGraph jobGraph = new JobGraph(source, sink);\n\n\t\tjobGraph.setScheduleMode(ScheduleMode.EAGER);\n\n\t\tExecutionConfig executionConfig = new ExecutionConfig();\n\t\texecutionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n\t\tjobGraph.setExecutionConfig(executionConfig);\n\n\t\treturn jobGraph;\n\t}\n","date":"2018-06-27 21:03:40","endLine":142,"groupId":"49953","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraph","params":"(longdelay@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/03/44d71879b81987312cebba5d6d1091ff35942f.src","preCode":"\tprivate JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n\t\tSlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n\t\tfinal JobVertex source = new JobVertex(\"source\");\n\t\tsource.setInvokableClass(OneTimeFailingInvokable.class);\n\t\tsource.setParallelism(parallelism);\n\t\tsource.setSlotSharingGroup(slotSharingGroup);\n\n\t\tfinal JobVertex sink = new JobVertex(\"sink\");\n\t\tsink.setInvokableClass(NoOpInvokable.class);\n\t\tsink.setParallelism(parallelism);\n\t\tsink.setSlotSharingGroup(slotSharingGroup);\n\n\t\tsink.connectNewDataSetAsInput(source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\t\tJobGraph jobGraph = new JobGraph(source, sink);\n\n\t\tjobGraph.setScheduleMode(ScheduleMode.EAGER);\n\n\t\tExecutionConfig executionConfig = new ExecutionConfig();\n\t\texecutionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n\t\tjobGraph.setExecutionConfig(executionConfig);\n\n\t\treturn jobGraph;\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/runtime/SchedulingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"NB"},{"authorDate":"2021-02-20 01:28:12","commitOrder":2,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","date":"2021-02-22 16:13:34","endLine":107,"groupId":"25750","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/bc486d4fcc3daed0d82920c83ef3571b1e1cdc.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"50eca3182cad284990fd8c48b50e74582995d99f","commitMessage":"@@@[FLINK-21390] Rename DeclarativeScheduler to AdaptiveScheduler\n\nNote that this commit also changes the system property to enable the adaptive scheduler\nfrom flink.tests.enable-declarative-scheduler to flink.tests.enable-adaptive-scheduler.\n\nThis closes #14970.\n","date":"2021-02-22 16:13:34","modifiedFileCount":"5","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-02-20 01:28:12","codes":[{"authorDate":"2021-03-03 18:37:49","commitOrder":3,"curCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n        JobGraph jobGraph = new JobGraph(source, sink);\n        jobGraph.setJobType(JobType.STREAMING);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n        jobGraph.setExecutionConfig(executionConfig);\n\n        return jobGraph;\n    }\n","date":"2021-03-04 21:15:28","endLine":154,"groupId":"49953","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraph","params":"(longdelay@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ce/71ae681cbccea45b2dfed7705493223e7c3257.src","preCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n        JobGraph jobGraph = new JobGraph(source, sink);\n\n        jobGraph.setScheduleMode(ScheduleMode.EAGER);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n        jobGraph.setExecutionConfig(executionConfig);\n\n        return jobGraph;\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/runtime/SchedulingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2021-02-20 01:28:12","commitOrder":3,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","date":"2021-02-22 16:13:34","endLine":107,"groupId":"25750","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/bc486d4fcc3daed0d82920c83ef3571b1e1cdc.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"872ad09fa530a345fff5202d985309f8bec586ca","commitMessage":"@@@[FLINK-21580] Remove ScheduleMode from JobGraph and its test\n\nThe JobGraph's JobType replaces the ScheduleMode. Before we always configured the\nScheduleMode in accordance with the JobType. Now.  only the JobType defines which\ntype of scheduling is selected.\n\n* JobType.STREAMING: The whole job must be deployed at the same time\n* JobType.BATCH: The job can be executed in steps\n\nThis closes #15076.\n","date":"2021-03-04 21:15:28","modifiedFileCount":"23","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-03 23:01:50","codes":[{"authorDate":"2021-03-03 18:37:49","commitOrder":4,"curCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n        JobGraph jobGraph = new JobGraph(source, sink);\n        jobGraph.setJobType(JobType.STREAMING);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n        jobGraph.setExecutionConfig(executionConfig);\n\n        return jobGraph;\n    }\n","date":"2021-03-04 21:15:28","endLine":154,"groupId":"49953","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraph","params":"(longdelay@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ce/71ae681cbccea45b2dfed7705493223e7c3257.src","preCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n        JobGraph jobGraph = new JobGraph(source, sink);\n        jobGraph.setJobType(JobType.STREAMING);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n        jobGraph.setExecutionConfig(executionConfig);\n\n        return jobGraph;\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/runtime/SchedulingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2021-03-03 23:01:50","commitOrder":4,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","date":"2021-03-06 02:37:53","endLine":107,"groupId":"25750","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/f11fd857fb7b1d8b065d1e7c3abb5038d84cad.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return new JobGraph(\"Simple job\", source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"88c2d1026a43965dff8fcb0d44230e76c5ebd0d7","commitMessage":"@@@[FLINK-21401] Replace explicit JobGraph generation with JobGraphTestUtil factories\n","date":"2021-03-06 02:37:53","modifiedFileCount":"35","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-03 23:01:50","codes":[{"authorDate":"2021-03-04 00:42:34","commitOrder":5,"curCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n\n        return JobGraphBuilder.newStreamingJobGraphBuilder()\n                .addJobVertices(Arrays.asList(source, sink))\n                .setExecutionConfig(executionConfig)\n                .build();\n    }\n","date":"2021-03-06 02:37:53","endLine":155,"groupId":"101185","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createJobGraph","params":"(longdelay@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/8b5f97aad8cff9ec07c0b5558cc57dc500d113.src","preCode":"    private JobGraph createJobGraph(long delay, int parallelism) throws IOException {\n        SlotSharingGroup slotSharingGroup = new SlotSharingGroup();\n\n        final JobVertex source = new JobVertex(\"source\");\n        source.setInvokableClass(OneTimeFailingInvokable.class);\n        source.setParallelism(parallelism);\n        source.setSlotSharingGroup(slotSharingGroup);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(parallelism);\n        sink.setSlotSharingGroup(slotSharingGroup);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n        JobGraph jobGraph = new JobGraph(source, sink);\n        jobGraph.setJobType(JobType.STREAMING);\n\n        ExecutionConfig executionConfig = new ExecutionConfig();\n        executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, delay));\n        jobGraph.setExecutionConfig(executionConfig);\n\n        return jobGraph;\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/runtime/SchedulingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-03-03 23:01:50","commitOrder":5,"curCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","date":"2021-03-06 02:37:53","endLine":107,"groupId":"101185","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraph","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/f11fd857fb7b1d8b065d1e7c3abb5038d84cad.src","preCode":"    private JobGraph createJobGraph() {\n        final JobVertex source = new JobVertex(\"Source\");\n        source.setInvokableClass(NoOpInvokable.class);\n        source.setParallelism(PARALLELISM);\n\n        final JobVertex sink = new JobVertex(\"sink\");\n        sink.setInvokableClass(NoOpInvokable.class);\n        sink.setParallelism(PARALLELISM);\n\n        sink.connectNewDataSetAsInput(\n                source, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED);\n\n        return JobGraphTestUtils.streamingJobGraph(source, sink);\n    }\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/adaptive/AdaptiveSchedulerSimpleITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"e000723fba5ff76d5c837e49d16c570dc55c274a","commitMessage":"@@@[FLINK-21401] Add JobGraphBuilder and adapt call sites of JobGraph constructor\n","date":"2021-03-06 02:37:53","modifiedFileCount":"31","status":"M","submitter":"Till Rohrmann"}]
