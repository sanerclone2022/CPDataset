[{"authorTime":"2020-02-23 15:49:11","codes":[{"authorDate":"2020-02-23 15:49:11","commitOrder":1,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-05 09:17:40","endLine":129,"groupId":"19301","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/4b645b5d8ddd1a1b8b3b06f0c8f3a08a4dfbd8.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2020-02-23 15:49:11","commitOrder":1,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultMainContainer.getImagePullPolicy());\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(1, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-05 09:17:40","endLine":74,"groupId":"3736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/37b621dd06205edbaeb9380c2962da08e2bcb5.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultMainContainer.getImagePullPolicy());\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(1, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"10f53290dd07a64013623d7269c9d599dd7c2482","commitMessage":"@@@[FLINK-16194][k8s] Introduce Factories that chain the decorators together to construct all the client/cluster-side Kubernetes resources\n","date":"2020-03-05 09:17:40","modifiedFileCount":"2","status":"B","submitter":"felixzheng"},{"authorTime":"2020-03-17 23:12:26","codes":[{"authorDate":"2020-03-17 23:12:26","commitOrder":2,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-17 23:12:26","endLine":129,"groupId":"19301","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/17c9fd444f7f20388c73832518c92fa2a09fe7.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-03-17 23:12:26","commitOrder":2,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(1, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-17 23:12:26","endLine":74,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/14/f6c48eb0d2654ba217ba9cf091d01d351138c8.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY, resultMainContainer.getImagePullPolicy());\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(1, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"6cf07d374a34742a919a1dc1edf4eb1c1f44e831","commitMessage":"@@@[FLINK-16494][k8s] Switch to enum type for config option KubernetesConfigOptions.CONTAINER_IMAGE_PULL_POLICY\n\nThis closes #11406 .","date":"2020-03-17 23:12:26","modifiedFileCount":"10","status":"M","submitter":"Canbin Zheng"},{"authorTime":"2020-03-07 21:33:17","codes":[{"authorDate":"2020-03-17 23:12:26","commitOrder":3,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-17 23:12:26","endLine":129,"groupId":"19301","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/17c9fd444f7f20388c73832518c92fa2a09fe7.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2020-03-07 21:33:17","commitOrder":3,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(4, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-23 15:03:16","endLine":84,"groupId":"18811","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/2b641100b17072dcdd7e2e24f7f79cf75e8485.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(1, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"f56a075aa029832b9cbacab51649c900498e18e9","commitMessage":"@@@[FLINK-15667][k8s] Support to mount custom Hadoop Configurations\n\nThis closes #11415 .\n","date":"2020-03-23 15:03:16","modifiedFileCount":"10","status":"M","submitter":"felixzheng"},{"authorTime":"2020-03-07 21:33:17","codes":[{"authorDate":"2020-05-26 01:28:09","commitOrder":4,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-05-26 01:28:09","endLine":144,"groupId":"19301","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/6693fd4464cd7df3a54dcbe37348a3aabf5a15.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(JOB_MANAGER_MEMORY + \"Mi\", requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2020-03-07 21:33:17","commitOrder":4,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(4, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-03-23 15:03:16","endLine":84,"groupId":"18811","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/2b641100b17072dcdd7e2e24f7f79cf75e8485.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(4, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"42077e9631c569abfcac685f3f1899bc9d85bd5b","commitMessage":"@@@[FLINK-17565][k8s] Bump fabric8 version from 4.5.2 to 4.9.2\n\nThis closes #12215 .","date":"2020-05-26 01:28:09","modifiedFileCount":"4","status":"M","submitter":"Canbin Zheng"},{"authorTime":"2020-05-09 17:28:45","codes":[{"authorDate":"2020-05-26 01:28:09","commitOrder":5,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-05-26 01:28:09","endLine":144,"groupId":"19301","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/6693fd4464cd7df3a54dcbe37348a3aabf5a15.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2020-05-09 17:28:45","commitOrder":5,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-06-24 16:43:03","endLine":83,"groupId":"18811","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9b/98841e50e23e4461014c408e3ffeda70de5ffb.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(4, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"66484922d5704a5e2c68078a0b1a3daebb5d8029","commitMessage":"@@@[FLINK-17579] Allow user to set the TaskManager ResourceID in standalone mode\n\nThis closes #12054.\n","date":"2020-06-24 16:43:03","modifiedFileCount":"18","status":"M","submitter":"Yangze Guo"},{"authorTime":"2020-08-10 17:40:58","codes":[{"authorDate":"2020-08-10 17:40:58","commitOrder":6,"curCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(2, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-08-21 15:11:52","endLine":146,"groupId":"19301","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/b8a62b3c8f84324725d814980d9aadc0121b11.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-08-10 17:40:58","commitOrder":6,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(2, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-08-21 15:11:52","endLine":85,"groupId":"18811","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/e0952072dedfb5db222fe66b586a52ceed346f.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"1ad2fcea422237243cfa01cd35a817f5239a9de1","commitMessage":"@@@[FLINK-15793][k8s] Replace kubernetes-entry.sh with unified docker-entrypoint.sh\n","date":"2020-08-21 15:11:52","modifiedFileCount":"9","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-06-22 16:39:35","codes":[{"authorDate":"2020-06-22 16:39:35","commitOrder":7,"curCode":"\tpublic void testPodSpec() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(3, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(2, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(3, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-10-22 11:33:26","endLine":157,"groupId":"19301","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/3fedc3e5b17efb83417e560b901849c7359798.src","preCode":"\tpublic void testPodSpec() {\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(1, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(2, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(1, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-06-22 16:39:35","commitOrder":7,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(2, resultMainContainer.getArgs().size());\n\t\tassertEquals(4, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-10-22 11:33:26","endLine":97,"groupId":"18811","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9b/d7a0ffefb69b715df6ccc326e27e9904b5ea22.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(2, resultMainContainer.getArgs().size());\n\t\tassertEquals(2, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"3862a4aaf3750506eb69af6faf822b07d7d725a2","commitMessage":"@@@[FLINK-18971][kubernetes] Support to mount kerberos conf as ConfigMap and Keytab as Secrete in Kubernetes\n","date":"2020-10-22 11:33:26","modifiedFileCount":"9","status":"M","submitter":"Yangze Guo"},{"authorTime":"2020-12-18 14:04:18","codes":[{"authorDate":"2020-12-18 14:04:18","commitOrder":8,"curCode":"\tpublic void testPodSpec() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(3, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\t\r\n\t\tassertEquals(3, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(3, resultedMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-12-23 17:22:21","endLine":158,"groupId":"19301","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/6ced3457acd2029bf6265cd7ad735e7ebe7a5b.src","preCode":"\tpublic void testPodSpec() throws IOException {\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tfinal PodSpec resultPodSpec =\n\t\t\tthis.kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\n\t\tassertEquals(1, resultPodSpec.getContainers().size());\n\t\tassertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n\t\tassertEquals(3, resultPodSpec.getVolumes().size());\n\n\t\tfinal Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n\t\tassertEquals(KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultedMainContainer.getEnv().size());\n\t\tassertTrue(resultedMainContainer.getEnv()\n\t\t\t\t.stream()\n\t\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(3, resultedMainContainer.getPorts().size());\n\n\t\tfinal Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n\t\tassertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n\t\tassertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n\t\tassertEquals(1, resultedMainContainer.getCommand().size());\n\t\tassertEquals(2, resultedMainContainer.getArgs().size());\n\n\t\tassertEquals(3, resultedMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-12-18 14:04:18","commitOrder":8,"curCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\t\r\n\t\tassertEquals(3, resultMainContainer.getArgs().size());\n\t\tassertEquals(4, resultMainContainer.getVolumeMounts().size());\n\t}\n","date":"2020-12-23 17:22:21","endLine":98,"groupId":"18811","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/0317f40efb84762a8d5e04c0443f94229db66e.src","preCode":"\tpublic void testContainer() {\n\t\tfinal List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n\t\tassertEquals(1, resultContainers.size());\n\n\t\tfinal Container resultMainContainer = resultContainers.get(0);\n\t\tassertEquals(\n\t\t\tKubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n\t\t\tresultMainContainer.getName());\n\t\tassertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n\t\tassertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n\t\tassertEquals(3, resultMainContainer.getEnv().size());\n\t\tassertTrue(resultMainContainer.getEnv()\n\t\t\t.stream()\n\t\t\t.anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n\t\tassertEquals(1, resultMainContainer.getPorts().size());\n\t\tassertEquals(1, resultMainContainer.getCommand().size());\n\t\tassertEquals(2, resultMainContainer.getArgs().size());\n\t\tassertEquals(4, resultMainContainer.getVolumeMounts().size());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"59a212fa7750286b88486dd6894b32fa2aec3ecb","commitMessage":"@@@[FLINK-20650][k8s] Remove \"native-k8s\" command and add bash wrapper for JobManager and TaskManager container args\n\nThe \"native-k8s\" command has been deprecated. Flink should use the pass-through mode. Note that Flink needs to add a \"bash -c\" wrapper so that the environment variables could be expanded when executing in the \"docker-entrypoint.sh\".\n\nThe corresponding PR in flink-docker is https://github.com/apache/flink-docker/pull/49.\n\nThis closes #14419\n","date":"2020-12-23 17:22:21","modifiedFileCount":"8","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-02-20 10:00:14","codes":[{"authorDate":"2021-02-20 10:00:14","commitOrder":9,"curCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-01 17:38:17","endLine":195,"groupId":"19301","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/a3e6cd254dc2a018975d065c38162f6974abba.src","preCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(\n                KubernetesJobManagerParameters.JOB_MANAGER_MAIN_CONTAINER_NAME,\n                resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-02-20 10:00:14","commitOrder":9,"curCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-01 17:38:17","endLine":98,"groupId":"18811","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/342e0ac750b6084bd16f871bfc27c52c0b2660.src","preCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(\n                KubernetesTaskManagerParameters.TASK_MANAGER_MAIN_CONTAINER_NAME,\n                resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"a9003ddd646fb76ee30c109652a3e35ed9b8057e","commitMessage":"@@@[FLINK-15656][k8s] Unify the main container name of jobmanager and taskmanager pod\n","date":"2021-03-01 17:38:17","modifiedFileCount":"9","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-02-20 10:00:14","codes":[{"authorDate":"2021-02-20 11:30:39","commitOrder":10,"curCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-01 17:38:17","endLine":198,"groupId":"19301","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2021-02-20 10:00:14","commitOrder":10,"curCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-01 17:38:17","endLine":98,"groupId":"18811","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/342e0ac750b6084bd16f871bfc27c52c0b2660.src","preCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"4957736f9d00f6a2e7185fcea9965efd5aea9da0","commitMessage":"@@@[FLINK-15656][k8s] Support pod template for native kubernetes integration\n\nBenifit from flexibility of pod template.  we could support init container.  sidecar container.  volume mount.  pod security context.  etc.\n","date":"2021-03-01 17:38:17","modifiedFileCount":"17","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-03-15 16:43:36","codes":[{"authorDate":"2021-02-20 11:30:39","commitOrder":11,"curCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-01 17:38:17","endLine":198,"groupId":"102379","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testPodSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testPodSpec() throws IOException {\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        final PodSpec resultPodSpec =\n                this.kubernetesJobManagerSpecification\n                        .getDeployment()\n                        .getSpec()\n                        .getTemplate()\n                        .getSpec();\n\n        assertEquals(1, resultPodSpec.getContainers().size());\n        assertEquals(SERVICE_ACCOUNT_NAME, resultPodSpec.getServiceAccountName());\n        assertEquals(3, resultPodSpec.getVolumes().size());\n\n        final Container resultedMainContainer = resultPodSpec.getContainers().get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultedMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultedMainContainer.getImage());\n        assertEquals(\n                CONTAINER_IMAGE_PULL_POLICY.name(), resultedMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultedMainContainer.getEnv().size());\n        assertTrue(\n                resultedMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(3, resultedMainContainer.getPorts().size());\n\n        final Map<String, Quantity> requests = resultedMainContainer.getResources().getRequests();\n        assertEquals(Double.toString(JOB_MANAGER_CPU), requests.get(\"cpu\").getAmount());\n        assertEquals(String.valueOf(JOB_MANAGER_MEMORY), requests.get(\"memory\").getAmount());\n\n        assertEquals(1, resultedMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultedMainContainer.getArgs().size());\n\n        assertEquals(3, resultedMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2021-03-15 16:43:36","commitOrder":11,"curCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(4, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","date":"2021-03-16 17:11:11","endLine":99,"groupId":"102379","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testContainer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/1cb619b69a587e23ea2f54845281785902d4a6.src","preCode":"    public void testContainer() {\n        final List<Container> resultContainers = this.resultPod.getSpec().getContainers();\n        assertEquals(1, resultContainers.size());\n\n        final Container resultMainContainer = resultContainers.get(0);\n        assertEquals(Constants.MAIN_CONTAINER_NAME, resultMainContainer.getName());\n        assertEquals(CONTAINER_IMAGE, resultMainContainer.getImage());\n        assertEquals(CONTAINER_IMAGE_PULL_POLICY.name(), resultMainContainer.getImagePullPolicy());\n\n        assertEquals(3, resultMainContainer.getEnv().size());\n        assertTrue(\n                resultMainContainer.getEnv().stream()\n                        .anyMatch(envVar -> envVar.getName().equals(\"key1\")));\n\n        assertEquals(1, resultMainContainer.getPorts().size());\n        assertEquals(1, resultMainContainer.getCommand().size());\n        \r\n        assertEquals(3, resultMainContainer.getArgs().size());\n        assertEquals(4, resultMainContainer.getVolumeMounts().size());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesTaskManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"4f9ec4762c3e7f8fcde47adda15a2fe1e3a2ca78","commitMessage":"@@@[FLINK-21793][k8s] Use RM generated JVM memory options.\n\nThis closes #15214\n","date":"2021-03-16 17:11:11","modifiedFileCount":"9","status":"M","submitter":"Xintong Song"}]
