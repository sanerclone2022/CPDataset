[{"authorTime":"2020-05-21 10:18:15","codes":[{"authorDate":"2020-05-21 10:18:15","commitOrder":2,"curCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","date":"2020-05-21 21:21:02","endLine":77,"groupId":"38794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/4a808b617b7d87c04aff6fa79f7646f82f0338.src","preCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2020-05-21 10:18:15","commitOrder":2,"curCode":"\tpublic void testGroupByInsert() {\n\t\tTableEnvUtil.execInsertSqlAndWaitResult(\n\t\t\ttEnv,\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE));\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","date":"2020-05-21 21:21:02","endLine":107,"groupId":"24363","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByInsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/4a808b617b7d87c04aff6fa79f7646f82f0338.src","preCode":"\tpublic void testGroupByInsert() {\n\t\tTableEnvUtil.execInsertSqlAndWaitResult(\n\t\t\ttEnv,\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE));\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"MB"}],"commitId":"4dbc18def80403df3387a2cc468aeb4f17ed3df5","commitMessage":"@@@[FLINK-17356][jdbc][postgres] Add IT cases for inserting group by query into posgres catalog table\n\nThis closes #12273\n","date":"2020-05-21 21:21:02","modifiedFileCount":"5","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-17 14:23:46","codes":[{"authorDate":"2020-05-21 10:18:15","commitOrder":3,"curCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","date":"2020-05-21 21:21:02","endLine":77,"groupId":"38794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fe/4a808b617b7d87c04aff6fa79f7646f82f0338.src","preCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-06-17 14:23:46","commitOrder":3,"curCode":"\tpublic void testGroupByInsert() throws Exception {\n\t\ttEnv.executeSql(\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE))\n\t\t\t.await();\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","date":"2020-09-07 17:35:17","endLine":111,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByInsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e9/a3469d2f19bf0e37c4fbcc25186c9e325f7a9f.src","preCode":"\tpublic void testGroupByInsert() {\n\t\tTableEnvUtil.execInsertSqlAndWaitResult(\n\t\t\ttEnv,\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE));\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"6f2a0412c0eb00adeb494fcc1d68481bdf2dd7b8","commitMessage":"@@@[FLINK-18337][table] Introduce TableResult#await method to block until data is ready or job finished\n\nThis closes #12688.\n","date":"2020-09-07 17:35:17","modifiedFileCount":"26","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-06-18 11:52:35","codes":[{"authorDate":"2020-06-18 11:52:35","commitOrder":4,"curCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = CollectionUtil.iteratorToList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":82,"groupId":"38794","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/bdce1249a0a7139fe9d614f42941af49b6c684.src","preCode":"\tpublic void testFullPath() {\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from %s.%s.`%s`\",\n\t\t\t\tTEST_CATALOG_NAME,\n\t\t\t\tDEFAULT_DATABASE,\n\t\t\t\tPostgresTablePath.fromFlinkTableName(TABLE1))).execute().collect());\n\t\tassertEquals(\"[1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-06-18 11:52:35","commitOrder":4,"curCode":"\tpublic void testGroupByInsert() throws Exception {\n\t\ttEnv.executeSql(\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE))\n\t\t\t.await();\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":110,"groupId":"313","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByInsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/bdce1249a0a7139fe9d614f42941af49b6c684.src","preCode":"\tpublic void testGroupByInsert() throws Exception {\n\t\ttEnv.executeSql(\n\t\t\tString.format(\n\t\t\t\t\"insert into `%s` \" +\n\t\t\t\t\t\"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \" +\n\t\t\t\t\t\"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \" +\n\t\t\t\t\t\"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \" +\n\t\t\t\t\t\"max(`date`), max(`time`), max(`default_numeric`) \" +\n\t\t\t\t\t\"from `%s` group by `int`, `short`\",\n\t\t\t\tTABLE_PRIMITIVE_TYPE2,\n\t\t\t\tTABLE_PRIMITIVE_TYPE))\n\t\t\t.await();\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\ttEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2)).execute().collect());\n\t\tassertEquals(\"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"91d2b628bfe1a2e7beed5111a6d9a572cc6bc310","commitMessage":"@@@[hotfix][table][connector] Use CollectionUtil#iteratorToList instead of Guava Lists\n","date":"2020-09-07 17:37:11","modifiedFileCount":"18","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":5,"curCode":"    public void testFullPath() {\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        String.format(\n                                                \"select * from %s.%s.`%s`\",\n                                                TEST_CATALOG_NAME,\n                                                DEFAULT_DATABASE,\n                                                PostgresTablePath.fromFlinkTableName(TABLE1)))\n                                .execute()\n                                .collect());\n        assertEquals(\"[+I[1]]\", results.toString());\n    }\n","date":"2021-01-08 00:17:30","endLine":100,"groupId":"10486","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/429ffbbb8d75466ef6e23b3a37d8ac669350ca.src","preCode":"    public void testFullPath() {\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        String.format(\n                                                \"select * from %s.%s.`%s`\",\n                                                TEST_CATALOG_NAME,\n                                                DEFAULT_DATABASE,\n                                                PostgresTablePath.fromFlinkTableName(TABLE1)))\n                                .execute()\n                                .collect());\n        assertEquals(\"[1]\", results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":5,"curCode":"    public void testGroupByInsert() throws Exception {\n        tEnv.executeSql(\n                        String.format(\n                                \"insert into `%s` \"\n                                        + \"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \"\n                                        + \"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \"\n                                        + \"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \"\n                                        + \"max(`date`), max(`time`), max(`default_numeric`) \"\n                                        + \"from `%s` group by `int`, `short`\",\n                                TABLE_PRIMITIVE_TYPE2, TABLE_PRIMITIVE_TYPE))\n                .await();\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2))\n                                .execute()\n                                .collect());\n        assertEquals(\n                \"[+I[1, [65], 3, 4, 5.5, 6.6, 7.70000, 8.8, true, a, B, C  , d, 2016-06-22T19:10:25, 2015-01-01, 00:51:03, 500.000000000000000000]]\",\n                results.toString());\n    }\n","date":"2021-01-08 00:17:30","endLine":135,"groupId":"10486","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByInsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/429ffbbb8d75466ef6e23b3a37d8ac669350ca.src","preCode":"    public void testGroupByInsert() throws Exception {\n        tEnv.executeSql(\n                        String.format(\n                                \"insert into `%s` \"\n                                        + \"select `int`, cast('A' as bytes), `short`, max(`long`), max(`real`), \"\n                                        + \"max(`double_precision`), max(`numeric`), max(`decimal`), max(`boolean`), \"\n                                        + \"max(`text`), 'B', 'C', max(`character_varying`), max(`timestamp`), \"\n                                        + \"max(`date`), max(`time`), max(`default_numeric`) \"\n                                        + \"from `%s` group by `int`, `short`\",\n                                TABLE_PRIMITIVE_TYPE2, TABLE_PRIMITIVE_TYPE))\n                .await();\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(String.format(\"select * from `%s`\", TABLE_PRIMITIVE_TYPE2))\n                                .execute()\n                                .collect());\n        assertEquals(\n                \"[1,[65],3,4,5.5,6.6,7.70000,8.8,true,a,B,C  ,d,2016-06-22T19:10:25,2015-01-01,00:51:03,500.000000000000000000]\",\n                results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/catalog/PostgresCatalogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"}]
