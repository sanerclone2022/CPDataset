[{"authorTime":"2019-11-01 18:31:24","codes":[{"authorDate":"2019-10-23 02:22:36","commitOrder":2,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2019-11-01 02:42:44","endLine":74,"groupId":"45675","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/4aeaf7d23456ecccfc5d273d6e1c126b3ad232.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"NB"},{"authorDate":"2019-11-01 18:31:24","commitOrder":2,"curCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","date":"2019-11-14 22:20:20","endLine":79,"groupId":"45675","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/1feab8c190eb6b9e96636e19842280a83e30b7.src","preCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"}],"commitId":"f074d1ff0d7115c64c966778cc08f0eae8db38e6","commitMessage":"@@@[FLINK-14758] Add Executor-related interfaces + wire their discovery to environments.\n","date":"2019-11-14 22:20:20","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-11-18 21:20:46","codes":[{"authorDate":"2019-10-23 02:22:36","commitOrder":3,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2019-11-01 02:42:44","endLine":74,"groupId":"45675","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/4aeaf7d23456ecccfc5d273d6e1c126b3ad232.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-11-18 21:20:46","commitOrder":3,"curCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","date":"2019-11-21 20:56:37","endLine":81,"groupId":"45675","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/de967c5ae492840430b5fff0edb96d3a39b027.src","preCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"aae87a12a5956843ef74efc83a02a48f5055a8e5","commitMessage":"@@@[hotfix] Make the DefaultExecutorServiceLoader a singleton\n","date":"2019-11-21 20:56:37","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-11-18 21:22:03","codes":[{"authorDate":"2019-10-23 02:22:36","commitOrder":4,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2019-11-01 02:42:44","endLine":74,"groupId":"45675","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/4aeaf7d23456ecccfc5d273d6e1c126b3ad232.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-11-18 21:22:03","commitOrder":4,"curCode":"\tpublic ExecutorFactory getExecutorFactory(@Nonnull final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","date":"2019-11-21 20:56:38","endLine":85,"groupId":"45675","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullfinalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/88f8d02cd07236b413cfcdb377fc050a4f5b62.src","preCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"68a79878996054b18bf9f0470c3d5229afd8a9fd","commitMessage":"@@@[hotfix] Annotate all the Executor-related interfaces as @Internal\n","date":"2019-11-21 20:56:38","modifiedFileCount":"6","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-11-20 22:22:10","codes":[{"authorDate":"2019-10-23 02:22:36","commitOrder":5,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2019-11-01 02:42:44","endLine":74,"groupId":"45675","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/4aeaf7d23456ecccfc5d273d6e1c126b3ad232.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-11-20 22:22:10","commitOrder":5,"curCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","date":"2019-11-21 20:56:39","endLine":83,"groupId":"45675","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/6147f07f14be1246b287a91ccc5cafcd3c7b65.src","preCode":"\tpublic ExecutorFactory getExecutorFactory(@Nonnull final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"2c117ad30496fffff9f59d50b0cd74434df1d98b","commitMessage":"@@@[hotfix] Remove @nonnull annotatation from all the Executor-related interfaces\n","date":"2019-11-21 20:56:39","modifiedFileCount":"6","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-12-17 16:34:26","codes":[{"authorDate":"2019-10-23 02:22:36","commitOrder":6,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2019-11-01 02:42:44","endLine":74,"groupId":"45675","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/4aeaf7d23456ecccfc5d273d6e1c126b3ad232.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-12-17 16:34:26","commitOrder":6,"curCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","date":"2020-01-13 20:59:55","endLine":83,"groupId":"45675","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/cf8b4208f8b5b287cc335c03d68f4234d5140f.src","preCode":"\tpublic ExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"d82b6042626a6d5119861438e498292541faa20d","commitMessage":"@@@[FLINK-15292] Rename ExecutorFactory to PipelineExecutorFactory\n","date":"2020-01-13 20:59:55","modifiedFileCount":"17","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-05-22 18:11:15","codes":[{"authorDate":"2020-05-22 18:11:15","commitOrder":7,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"No ClusterClientFactory found. If you were targeting a Yarn cluster, \" +\n\t\t\t\t\t\"please make sure to export the HADOOP_CLASSPATH environment variable or have hadoop in your \" +\n\t\t\t\t\t\"classpath. For more information refer to the \\\"Deployment & Operations\\\" section of the official \" +\n\t\t\t\t\t\"Apache Flink documentation.\");\n\t\t}\n\n\t\treturn (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2020-05-29 02:39:19","endLine":82,"groupId":"45675","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/c43a20d7b1b20fcbfd1fca1e594aafd6b3a8d7.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-05-22 18:11:15","commitOrder":7,"curCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No ExecutorFactory found to execute the application.\");\n\t\t}\n\n\t\treturn compatibleFactories.get(0);\n\t}\n","date":"2020-05-29 02:39:19","endLine":89,"groupId":"45675","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6b/07f7fdcb6a9adf77924ec535b9fe4dd5d76b55.src","preCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\treturn compatibleFactories.isEmpty() ? null : compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"c8ab94f2107d28c0f3e356a4d4c801a88e719ed0","commitMessage":"@@@[FLINK-17819][yarn] Fix error msg for yarn deployments when hadoop not in classpath\n\nThis closes #12317.\n","date":"2020-05-29 02:39:19","modifiedFileCount":"8","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-06-19 20:10:02","codes":[{"authorDate":"2020-06-19 20:10:02","commitOrder":8,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<ClusterClientFactory> loader =\n\t\t\t\tServiceLoader.load(ClusterClientFactory.class);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"No ClusterClientFactory found. If you were targeting a Yarn cluster, \" +\n\t\t\t\t\t\"please make sure to export the HADOOP_CLASSPATH environment variable or have hadoop in your \" +\n\t\t\t\t\t\"classpath. For more information refer to the \\\"Deployment & Operations\\\" section of the official \" +\n\t\t\t\t\t\"Apache Flink documentation.\");\n\t\t}\n\n\t\treturn (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2020-06-22 21:57:27","endLine":83,"groupId":"45675","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/56abe447ac04d337cb20224fe1642a2623b1c2.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"No ClusterClientFactory found. If you were targeting a Yarn cluster, \" +\n\t\t\t\t\t\"please make sure to export the HADOOP_CLASSPATH environment variable or have hadoop in your \" +\n\t\t\t\t\t\"classpath. For more information refer to the \\\"Deployment & Operations\\\" section of the official \" +\n\t\t\t\t\t\"Apache Flink documentation.\");\n\t\t}\n\n\t\treturn (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-06-19 20:10:02","commitOrder":8,"curCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<PipelineExecutorFactory> loader =\n\t\t\t\tServiceLoader.load(PipelineExecutorFactory.class);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No ExecutorFactory found to execute the application.\");\n\t\t}\n\n\t\treturn compatibleFactories.get(0);\n\t}\n","date":"2020-06-22 21:57:27","endLine":88,"groupId":"45675","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/e9f0898af5400bafc8b434a76f33d75f19f715.src","preCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = defaultLoader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No ExecutorFactory found to execute the application.\");\n\t\t}\n\n\t\treturn compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"b05ab524836c1c07d128610248fe372c8d697974","commitMessage":"@@@[FLINK-18352] Make DefaultClusterClientServiceLoader/DefaultExecutorServiceLoader thread-safe\n\nThis closes #12719.\n","date":"2020-06-22 21:57:27","modifiedFileCount":"8","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-06-19 20:10:02","codes":[{"authorDate":"2020-11-26 00:37:00","commitOrder":9,"curCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<ClusterClientFactory> loader =\n\t\t\t\tServiceLoader.load(ClusterClientFactory.class);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"No ClusterClientFactory found. If you were targeting a Yarn cluster, \" +\n\t\t\t\t\t\"please make sure to export the HADOOP_CLASSPATH environment variable or have hadoop in your \" +\n\t\t\t\t\t\"classpath. For more information refer to the \\\"Deployment\\\" section of the official \" +\n\t\t\t\t\t\"Apache Flink documentation.\");\n\t\t}\n\n\t\treturn (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","date":"2020-11-30 19:20:20","endLine":85,"groupId":"101833","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getClusterClientFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/9a51edf83c7eaa8aed16f6d30ca9496bf4664d.src","preCode":"\tpublic <ClusterID> ClusterClientFactory<ClusterID> getClusterClientFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<ClusterClientFactory> loader =\n\t\t\t\tServiceLoader.load(ClusterClientFactory.class);\n\n\t\tfinal List<ClusterClientFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<ClusterClientFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal ClusterClientFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal List<String> configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + String.join(\"\\n\", configStr) + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"No ClusterClientFactory found. If you were targeting a Yarn cluster, \" +\n\t\t\t\t\t\"please make sure to export the HADOOP_CLASSPATH environment variable or have hadoop in your \" +\n\t\t\t\t\t\"classpath. For more information refer to the \\\"Deployment & Operations\\\" section of the official \" +\n\t\t\t\t\t\"Apache Flink documentation.\");\n\t\t}\n\n\t\treturn (ClusterClientFactory<ClusterID>) compatibleFactories.get(0);\n\t}\n","realPath":"flink-clients/src/main/java/org/apache/flink/client/deployment/DefaultClusterClientServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-06-19 20:10:02","commitOrder":9,"curCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<PipelineExecutorFactory> loader =\n\t\t\t\tServiceLoader.load(PipelineExecutorFactory.class);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No ExecutorFactory found to execute the application.\");\n\t\t}\n\n\t\treturn compatibleFactories.get(0);\n\t}\n","date":"2020-06-22 21:57:27","endLine":88,"groupId":"101833","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(finalConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/e9f0898af5400bafc8b434a76f33d75f19f715.src","preCode":"\tpublic PipelineExecutorFactory getExecutorFactory(final Configuration configuration) {\n\t\tcheckNotNull(configuration);\n\n\t\tfinal ServiceLoader<PipelineExecutorFactory> loader =\n\t\t\t\tServiceLoader.load(PipelineExecutorFactory.class);\n\n\t\tfinal List<PipelineExecutorFactory> compatibleFactories = new ArrayList<>();\n\t\tfinal Iterator<PipelineExecutorFactory> factories = loader.iterator();\n\t\twhile (factories.hasNext()) {\n\t\t\ttry {\n\t\t\t\tfinal PipelineExecutorFactory factory = factories.next();\n\t\t\t\tif (factory != null && factory.isCompatibleWith(configuration)) {\n\t\t\t\t\tcompatibleFactories.add(factory);\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tif (e.getCause() instanceof NoClassDefFoundError) {\n\t\t\t\t\tLOG.info(\"Could not load factory due to missing dependencies.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (compatibleFactories.size() > 1) {\n\t\t\tfinal String configStr =\n\t\t\t\t\tconfiguration.toMap().entrySet().stream()\n\t\t\t\t\t\t\t.map(e -> e.getKey() + \"=\" + e.getValue())\n\t\t\t\t\t\t\t.collect(Collectors.joining(\"\\n\"));\n\n\t\t\tthrow new IllegalStateException(\"Multiple compatible client factories found for:\\n\" + configStr + \".\");\n\t\t}\n\n\t\tif (compatibleFactories.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\"No ExecutorFactory found to execute the application.\");\n\t\t}\n\n\t\treturn compatibleFactories.get(0);\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/core/execution/DefaultExecutorServiceLoader.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"586d3d08640fe4925d93922776176860a9a0f1f6","commitMessage":"@@@[FLINK-20347] Rework YARN resource provider page\n\nThis closes #14238\n","date":"2020-11-30 19:20:20","modifiedFileCount":"2","status":"M","submitter":"Robert Metzger"}]
