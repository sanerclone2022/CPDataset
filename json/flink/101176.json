[{"authorTime":"2018-10-17 06:26:24","codes":[{"authorDate":"2018-10-11 22:48:51","commitOrder":9,"curCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","date":"2018-10-15 17:06:02","endLine":117,"groupId":"1139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/47/3fb3959f854815856cba709d515797c110eeb6.src","preCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"},{"authorDate":"2018-10-17 06:26:24","commitOrder":9,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2018-10-17 06:26:24","endLine":221,"groupId":"3254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/3f1e1b9d3faad2024429e7a44a9a92363aada5.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"953d42e0851ddc070b1d178c8bac4f2b563247d8","commitMessage":"@@@[FLINK-10405] [tests] Port JobManagerFailsITCase to new code base (#6841)\n\n* [FLINK-10405] [tests] Port JobManagerFailsITCase to new code base\n\n* revert redundant assertion\n","date":"2018-10-17 06:26:24","modifiedFileCount":"0","status":"M","submitter":"Tzu-Li Chen"},{"authorTime":"2018-10-17 06:26:24","codes":[{"authorDate":"2019-05-10 19:50:35","commitOrder":10,"curCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(2, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","date":"2019-05-15 19:49:36","endLine":117,"groupId":"1139","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/85/77f9c57b2452b9f4dbcfcd49f9aeedb9fc146e.src","preCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-10-17 06:26:24","commitOrder":10,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2018-10-17 06:26:24","endLine":221,"groupId":"3254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/3f1e1b9d3faad2024429e7a44a9a92363aada5.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"N"}],"commitId":"c10e18c0eb497588f0f2e27590a6f6c6a9d23563","commitMessage":"@@@[FLINK-12111][tests] Allow multiple restarts\n\nFor some reason this test could fail multiple times.  instead of just once.\n","date":"2019-05-15 19:49:36","modifiedFileCount":"1","status":"M","submitter":"Chesnay Schepler"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":11,"curCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(2, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","date":"2019-08-27 20:27:23","endLine":116,"groupId":"1139","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/87c7b6a267a63196bab5d9aee7a02b025da423.src","preCode":"\tpublic void testTaskManagerFailure(Configuration configuration, final File coordinateDir) throws Exception {\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(2, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\ttouchFile(new File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tlong sum = result.collect().get(0);\n\t\tassertEquals(numElements * (numElements + 1L) / 2L, sum);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":11,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":221,"groupId":"3254","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/c91cbb75014499662639a4b1f5e1be04a02d02.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2021-07-01 20:36:40","commitOrder":12,"curCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","date":"2021-07-08 15:11:44","endLine":124,"groupId":"1139","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/d709e031c922dffcb68bc3faf63f414e05993d.src","preCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(2, 0L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":12,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":221,"groupId":"3254","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/c91cbb75014499662639a4b1f5e1be04a02d02.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"63de5d9ee0d8539bec910bb71a5f3e0699e4e6d2","commitMessage":"@@@[FLINK-23202][rpc] Fail with AkkaRecipientUnreachableException if local actor has terminated\n\nThis commit replaces the AskTimeoutException with an AkkaRecipientUnreachableException if the local actor\nhas already terminated. This works by looking at the exception message. This ensures that we respond with\nthe right exception if the local actor is unreachable.\n\nThis closes #16342.\n","date":"2021-07-08 15:11:44","modifiedFileCount":"6","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2021-07-02 17:14:04","commitOrder":13,"curCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","date":"2021-07-16 15:12:52","endLine":124,"groupId":"1139","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/e3aeebb228d1ad9838a02c8795fac9f27cd5b7.src","preCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":13,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":221,"groupId":"3254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/c91cbb75014499662639a4b1f5e1be04a02d02.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"3f7ac4700b7c6b13312a0d453d4dfdc3dd5d5dac","commitMessage":"@@@[FLINK-23209] Introduce HeartbeatListener.notifyTargetUnreachable\n\nWith this commit Flink's HeartbeatServices listen to the result of the heartbeat rpcs.\nIf a rpc fails with RecipientUnreachableException.  then it will fail the heartbeat and\ncall HeartbeatListener.notifyTargetUnreachable. All Flink components (ResourceManager. \nJobMaster and TaskExecutor) will treat this signal similar to a heartbeat timeout. This\nmeans that connection failures on the TCP layer will now speed up the detection of lost\ncomponents.\n","date":"2021-07-16 15:12:52","modifiedFileCount":"30","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2021-09-02 04:16:58","commitOrder":14,"curCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1500L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","date":"2021-09-03 17:44:46","endLine":124,"groupId":"101176","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testTaskManagerFailure","params":"(Configurationconfiguration@finalFilecoordinateDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5b/bd3fb5db1c8326136f05cb20d9a6795ea8f4b9.src","preCode":"    public void testTaskManagerFailure(Configuration configuration, final File coordinateDir)\n            throws Exception {\n\n        ExecutionEnvironment env =\n                ExecutionEnvironment.createRemoteEnvironment(\"localhost\", 1337, configuration);\n        env.setParallelism(PARALLELISM);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000L));\n        env.getConfig().setExecutionMode(executionMode);\n\n        final long numElements = 100000L;\n        final DataSet<Long> result =\n                env.generateSequence(1, numElements)\n\n                        \r\n                        \r\n                        .rebalance()\n                        \r\n                        .map(\n                                new RichMapFunction<Long, Long>() {\n\n                                    private final File proceedFile =\n                                            new File(coordinateDir, PROCEED_MARKER_FILE);\n\n                                    private boolean markerCreated = false;\n                                    private boolean checkForProceedFile = true;\n\n                                    @Override\n                                    public Long map(Long value) throws Exception {\n                                        if (!markerCreated) {\n                                            int taskIndex =\n                                                    getRuntimeContext().getIndexOfThisSubtask();\n                                            touchFile(\n                                                    new File(\n                                                            coordinateDir,\n                                                            READY_MARKER_FILE_PREFIX + taskIndex));\n                                            markerCreated = true;\n                                        }\n\n                                        \r\n                                        if (checkForProceedFile) {\n                                            if (proceedFile.exists()) {\n                                                checkForProceedFile = false;\n                                            } else {\n                                                \r\n                                                Thread.sleep(100);\n                                            }\n                                        }\n                                        return value;\n                                    }\n                                })\n                        .reduce(\n                                new ReduceFunction<Long>() {\n                                    @Override\n                                    public Long reduce(Long value1, Long value2) {\n                                        return value1 + value2;\n                                    }\n                                });\n\n        long sum = result.collect().get(0);\n        assertEquals(numElements * (numElements + 1L) / 2L, sum);\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/TaskManagerProcessFailureBatchRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":14,"curCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":221,"groupId":"101176","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobManagerFailure","params":"(StringzkQuorum@finalFilecoordinateDir@finalFilezookeeperStoragePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/c91cbb75014499662639a4b1f5e1be04a02d02.src","preCode":"\tprivate void testJobManagerFailure(String zkQuorum, final File coordinateDir, final File zookeeperStoragePath) throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(HighAvailabilityOptions.HA_MODE, \"ZOOKEEPER\");\n\t\tconfig.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zkQuorum);\n\t\tconfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH, zookeeperStoragePath.getAbsolutePath());\n\n\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\"leader\", 1, config);\n\t\tenv.setParallelism(PARALLELISM);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L));\n\t\tenv.getConfig().setExecutionMode(executionMode);\n\n\t\tfinal long numElements = 100000L;\n\t\tfinal DataSet<Long> result = env.generateSequence(1, numElements)\n\t\t\t\t\r\n\t\t\t\t.rebalance()\n\t\t\t\t\r\n\t\t\t\t.map(new RichMapFunction<Long, Long>() {\n\n\t\t\t\t\tprivate final File proceedFile = new File(coordinateDir, PROCEED_MARKER_FILE);\n\n\t\t\t\t\tprivate boolean markerCreated = false;\n\t\t\t\t\tprivate boolean checkForProceedFile = true;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\t\t\tif (!markerCreated) {\n\t\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\t\tnew File(coordinateDir, READY_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t\t\tmarkerCreated = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (checkForProceedFile) {\n\t\t\t\t\t\t\tif (proceedFile.exists()) {\n\t\t\t\t\t\t\t\tcheckForProceedFile = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t.flatMap(new RichFlatMapFunction<Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t\tassertEquals(numElements * (numElements + 1L) / 2L, (long) value);\n\n\t\t\t\t\t\tint taskIndex = getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t\t\t\tAbstractTaskManagerProcessFailureRecoveryTest.touchFile(\n\t\t\t\t\t\t\t\tnew File(coordinateDir, FINISH_MARKER_FILE_PREFIX + taskIndex));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tresult.output(new DiscardingOutputFormat<Long>());\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/JobManagerHAProcessFailureRecoveryITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"338ae25ca68c788a51a9f8a9ae322133a785d233","commitMessage":"@@@[FLINK-24091][tests] Harden TaskManagerProcessFailureBatchRecoveryITCase\n\nThis commit hardens the TaskManagerProcessFailureBatchRecoveryITCase.testTaskManagerProcessFailure by decreasing\nthe heartbeat interval and the number of failed heartbeat RPCs. Moreover.  it increases the delay between job restarts\nso that there is enough time for the heartbeat rpc to fail.\n\nThis closes #17107.\n","date":"2021-09-03 17:44:46","modifiedFileCount":"2","status":"M","submitter":"Till Rohrmann"}]
