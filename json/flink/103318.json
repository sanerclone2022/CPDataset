[{"authorTime":"2017-02-22 21:55:17","codes":[{"authorDate":"2017-01-13 19:09:58","commitOrder":3,"curCode":"\tpublic void testInternalIterableAllWindowFunction() throws Exception {\n\n\t\tAllWindowFunctionMock mock = mock(AllWindowFunctionMock.class);\n\t\tInternalIterableAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).apply(w, i, c);\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-01-14 05:47:24","endLine":82,"groupId":"13066","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalIterableAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/c3423e3a3a59b31117f364fe40e90ac965f285.src","preCode":"\tpublic void testInternalIterableAllWindowFunction() throws Exception {\n\n\t\tAllWindowFunctionMock mock = mock(AllWindowFunctionMock.class);\n\t\tInternalIterableAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).apply(w, i, c);\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2017-02-22 21:55:17","commitOrder":3,"curCode":"\tpublic void testInternalIterableProcessAllWindowFunction() throws Exception {\n\n\t\tProcessAllWindowFunctionMock mock = mock(ProcessAllWindowFunctionMock.class);\n\t\tInternalIterableProcessAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableProcessAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).process((ProcessAllWindowFunctionMock.Context) anyObject(), eq(i), eq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-02-28 21:02:56","endLine":143,"groupId":"13066","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalIterableProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/795e913642159c0576d3ad0bf1421bb973caec.src","preCode":"\tpublic void testInternalIterableProcessAllWindowFunction() throws Exception {\n\n\t\tProcessAllWindowFunctionMock mock = mock(ProcessAllWindowFunctionMock.class);\n\t\tInternalIterableProcessAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableProcessAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).process((ProcessAllWindowFunctionMock.Context) anyObject(), eq(i), eq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"788b839213811c6f2407ac6d54fef28dfa3d29a6","commitMessage":"@@@[FLINK-5157] [streaming] Introduce ProcessAllWindowFunction\n","date":"2017-02-28 21:02:56","modifiedFileCount":"7","status":"M","submitter":"Ventura Del Monte"},{"authorTime":"2017-03-06 12:07:18","codes":[{"authorDate":"2017-03-06 12:07:18","commitOrder":4,"curCode":"\tpublic void testInternalIterableAllWindowFunction() throws Exception {\n\n\t\tAllWindowFunctionMock mock = mock(AllWindowFunctionMock.class);\n\t\tInternalIterableAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\n\t\twindowFunction.process(((byte)0), w, ctx, i, c);\n\t\tverify(mock).apply(w, i, c);\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-03-25 23:59:17","endLine":112,"groupId":"103318","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInternalIterableAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/34607160e89824950b84ebaf0797d2f1fb272b.src","preCode":"\tpublic void testInternalIterableAllWindowFunction() throws Exception {\n\n\t\tAllWindowFunctionMock mock = mock(AllWindowFunctionMock.class);\n\t\tInternalIterableAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).apply(w, i, c);\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2017-03-06 12:07:18","commitOrder":4,"curCode":"\tpublic void testInternalIterableProcessAllWindowFunction() throws Exception {\n\n\t\tProcessAllWindowFunctionMock mock = mock(ProcessAllWindowFunctionMock.class);\n\t\tInternalIterableProcessAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableProcessAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\tInternalWindowFunction.InternalWindowContext ctx = mock(InternalWindowFunction.InternalWindowContext.class);\n\t\twindowFunction.process(((byte)0), w, ctx, i, c);\n\t\tverify(mock).process((ProcessAllWindowFunctionMock.Context) anyObject(), eq(i), eq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","date":"2017-03-25 23:59:17","endLine":154,"groupId":"103318","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInternalIterableProcessAllWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/34607160e89824950b84ebaf0797d2f1fb272b.src","preCode":"\tpublic void testInternalIterableProcessAllWindowFunction() throws Exception {\n\n\t\tProcessAllWindowFunctionMock mock = mock(ProcessAllWindowFunctionMock.class);\n\t\tInternalIterableProcessAllWindowFunction<Long, String, TimeWindow> windowFunction =\n\t\t\tnew InternalIterableProcessAllWindowFunction<>(mock);\n\n\t\t\r\n\t\tTypeInformation<String> stringType = BasicTypeInfo.STRING_TYPE_INFO;\n\t\tExecutionConfig execConf = new ExecutionConfig();\n\t\texecConf.setParallelism(42);\n\n\t\tStreamingFunctionUtils.setOutputType(windowFunction, stringType, execConf);\n\t\tverify(mock).setOutputType(stringType, execConf);\n\n\t\t\r\n\t\tConfiguration config = new Configuration();\n\n\t\twindowFunction.open(config);\n\t\tverify(mock).open(config);\n\n\t\t\r\n\t\tRuntimeContext rCtx = mock(RuntimeContext.class);\n\n\t\twindowFunction.setRuntimeContext(rCtx);\n\t\tverify(mock).setRuntimeContext(rCtx);\n\n\t\t\r\n\t\tTimeWindow w = mock(TimeWindow.class);\n\t\tIterable<Long> i = (Iterable<Long>)mock(Iterable.class);\n\t\tCollector<String> c = (Collector<String>) mock(Collector.class);\n\n\t\twindowFunction.apply(((byte)0), w, i, c);\n\t\tverify(mock).process((ProcessAllWindowFunctionMock.Context) anyObject(), eq(i), eq(c));\n\n\t\t\r\n\t\twindowFunction.close();\n\t\tverify(mock).close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/windowing/functions/InternalWindowFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"fad201bfb0b1f2757f68f7b3ffaf97a486eb93e8","commitMessage":"@@@[FLINK-5929] Allow Access to Per-Window State in ProcessWindowFunction\n","date":"2017-03-25 23:59:17","modifiedFileCount":"24","status":"M","submitter":"Seth Wiesman"}]
