[{"authorTime":"2019-02-11 07:05:10","codes":[{"authorDate":"2019-02-11 07:05:10","commitOrder":1,"curCode":"\tpublic void testDefaultKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\tenvs.put(YarnConfigKeys.REMOTE_KEYTAB_PATH, resourceDirPath);\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue());\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\t}\n","date":"2020-03-13 21:37:33","endLine":74,"groupId":"50222","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultKerberosKeytabConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/4565ade9241f9833ea299603117835e03a5182.src","preCode":"\tpublic void testDefaultKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\tenvs.put(YarnConfigKeys.REMOTE_KEYTAB_PATH, resourceDirPath);\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue());\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnTaskExecutorRunnerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2019-02-11 07:05:10","commitOrder":1,"curCode":"\tpublic void testPreInstallKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, \"src/test/resources/krb5.keytab\");\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\t\r\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), containsString(\"src/test/resources/krb5.keytab\"));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), containsString(\"src/test/resources/krb5.keytab\"));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\n\t}\n","date":"2020-03-13 21:37:33","endLine":103,"groupId":"50222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreInstallKerberosKeytabConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/4565ade9241f9833ea299603117835e03a5182.src","preCode":"\tpublic void testPreInstallKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, \"src/test/resources/krb5.keytab\");\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\t\r\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), containsString(\"src/test/resources/krb5.keytab\"));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), containsString(\"src/test/resources/krb5.keytab\"));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnTaskExecutorRunnerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"0920e6447283579551d14a0fed726f8b8d73bd3f","commitMessage":"@@@[FLINK-11088] Allow YARN to discover pre-installed keytab files\n\nThis is to change how keytab files are discovered. \n    * remove hard-coded keytab filenames\n    * extended YARNSessionFIFOITCase to accommodate different types of security setting test cases regenerate configuration documentations\n","date":"2020-03-13 21:37:33","modifiedFileCount":"9","status":"B","submitter":"Rong Rong"},{"authorTime":"2020-07-31 23:46:04","codes":[{"authorDate":"2020-07-31 23:46:04","commitOrder":2,"curCode":"\tpublic void testDefaultKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\tenvs.put(YarnConfigKeys.REMOTE_KEYTAB_PATH, resourceDirPath);\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue());\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupAndModifyConfiguration(configuration, resourceDirPath, envs);\n\n\t\t\r\n\t\tSecurityUtils.install(new SecurityConfiguration(configuration));\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\t}\n","date":"2020-08-07 18:27:17","endLine":78,"groupId":"101848","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultKerberosKeytabConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/879ba9ffd27d2fd3cdc6ba682da5a8565c0220.src","preCode":"\tpublic void testDefaultKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\tenvs.put(YarnConfigKeys.REMOTE_KEYTAB_PATH, resourceDirPath);\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue());\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), is(new File(resourceDirPath, YarnConfigOptions.LOCALIZED_KEYTAB_PATH.defaultValue()).getAbsolutePath()));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnTaskExecutorRunnerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-07-31 23:46:04","commitOrder":2,"curCode":"\tpublic void testPreInstallKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, \"src/test/resources/krb5.keytab\");\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupAndModifyConfiguration(configuration, resourceDirPath, envs);\n\n\t\t\r\n\t\tSecurityUtils.install(new SecurityConfiguration(configuration));\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\t\r\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), containsString(\"src/test/resources/krb5.keytab\"));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), containsString(\"src/test/resources/krb5.keytab\"));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\n\t}\n","date":"2020-08-07 18:27:17","endLine":110,"groupId":"101848","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreInstallKerberosKeytabConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/879ba9ffd27d2fd3cdc6ba682da5a8565c0220.src","preCode":"\tpublic void testPreInstallKerberosKeytabConfiguration() throws Exception {\n\t\tfinal String resourceDirPath = Paths.get(\"src\", \"test\", \"resources\").toAbsolutePath().toString();\n\n\t\tfinal Map<String, String> envs = new HashMap<>(2);\n\t\tenvs.put(YarnConfigKeys.KEYTAB_PRINCIPAL, \"testuser1@domain\");\n\t\t\r\n\t\tenvs.put(YarnConfigKeys.LOCAL_KEYTAB_PATH, \"src/test/resources/krb5.keytab\");\n\n\t\tConfiguration configuration = new Configuration();\n\t\tYarnTaskExecutorRunner.setupConfigurationAndInstallSecurityContext(configuration, resourceDirPath, envs);\n\n\t\tfinal List<SecurityModule> modules = SecurityUtils.getInstalledModules();\n\t\tOptional<SecurityModule> moduleOpt = modules.stream().filter(module -> module instanceof HadoopModule).findFirst();\n\n\t\tif (moduleOpt.isPresent()) {\n\t\t\tHadoopModule hadoopModule = (HadoopModule) moduleOpt.get();\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getPrincipal(), is(\"testuser1@domain\"));\n\t\t\t\r\n\t\t\tassertThat(hadoopModule.getSecurityConfig().getKeytab(), containsString(\"src/test/resources/krb5.keytab\"));\n\t\t} else {\n\t\t\tfail(\"Can not find HadoopModule!\");\n\t\t}\n\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB), containsString(\"src/test/resources/krb5.keytab\"));\n\t\tassertThat(configuration.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL), is(\"testuser1@domain\"));\n\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnTaskExecutorRunnerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"182be5145b5b45cfedc65abca5dfe723651aa38e","commitMessage":"@@@[FLINK-16510] Allow configuring shutdown behavior to avoid JVM freeze\n\nThis adds the configuration option `cluster.processes.halt-on-fatal-error`\nwhich defaults to `false`. If set to `true`.  a custom SecurityManager will be\ninstalled on top of the existing SecurityManager to exit forcefully via\n`Runtime#halt`.\n\nExiting that way may be necessary due to the Java 8 JVM freezing during a\ngraceful shutdown when using the G1 garbage collector.\n\nThis closes #13042.\n","date":"2020-08-07 18:27:17","modifiedFileCount":"8","status":"M","submitter":"Maximilian Michels"}]
