[{"authorTime":"2016-02-01 06:28:32","codes":[{"authorDate":"2016-02-01 06:28:32","commitOrder":1,"curCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","date":"2016-02-02 23:55:44","endLine":151,"groupId":"48361","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkKryoInitialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/9629ab6bfff72e7d8b71dd60283b7dda570961.src","preCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/ValueComparator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2016-02-01 06:28:32","commitOrder":1,"curCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","date":"2016-02-02 23:55:44","endLine":128,"groupId":"48361","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkKryoInitialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/93/29866046939a4953aa6daac996bd31129252da.src","preCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/ValueSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"21a715867d655bb61df9a9f7eef37e42b99e206a","commitMessage":"@@@[FLINK-3303] [core] Move all type utilities to flink-core\n","date":"2016-02-02 23:55:44","modifiedFileCount":"38","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2017-05-08 02:04:23","codes":[{"authorDate":"2016-02-01 06:28:32","commitOrder":2,"curCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","date":"2016-02-02 23:55:44","endLine":151,"groupId":"10939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkKryoInitialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/9629ab6bfff72e7d8b71dd60283b7dda570961.src","preCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/ValueComparator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2017-05-08 02:04:23","commitOrder":2,"curCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\n\t\t\tKryoUtils.applyRegistrations(this.kryo, kryoRegistrations.values());\n\t\t}\n\t}\n","date":"2017-05-08 02:04:23","endLine":149,"groupId":"10939","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkKryoInitialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/10/e233037b61eb3cc0ac89c8c07d753c9eb66971.src","preCode":"\tprivate void checkKryoInitialized() {\n\t\tif (this.kryo == null) {\n\t\t\tthis.kryo = new Kryo();\n\n\t\t\tKryo.DefaultInstantiatorStrategy instantiatorStrategy = new Kryo.DefaultInstantiatorStrategy();\n\t\t\tinstantiatorStrategy.setFallbackInstantiatorStrategy(new StdInstantiatorStrategy());\n\t\t\tkryo.setInstantiatorStrategy(instantiatorStrategy);\n\n\t\t\tthis.kryo.setAsmEnabled(true);\n\t\t\tthis.kryo.register(type);\n\t\t}\n\t}\n","realPath":"flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/ValueSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"8aa5e05733655e7b3d1f11ed15f61672d61e5cb5","commitMessage":"@@@[FLINK-6178] [core] Allow serializer upgrades for managed state\n\nThis commit adds the functionality of allowing serializer upgrades for\nFlink's managed state. It consists of 2 major changes: 1) new\nuser-facing API in `TypeSerializer`.  and 2) activate serializer upgrades\nin state backends.\n\nFor 1) new user-facing API for `TypeSerializer`.  the following is added:\n- new class: TypeSerializerConfigSnapshot\n- new class: CompatibilityResult\n- new method: TypeSerializer#snapshotConfiguration()\n- new method:\n  TypeSerializer#ensureCompatibility(TypeSerializerConfigSnapshot)\n\nGenerally speaking.  configuration snapshots contains a point-in-time\nview of a serializer's state / configuration.  and is persisted along\nwith checkpoints. On restore.  the configuration is confronted with the\nnew serializer of the state to check for compatibility.  which may\nintroduce reconfiguration of the new serializer to be compatible.\n\nThis compatibility check is integrated in the state backends' restore\nflow in 2). Currently.  if the check results in the need to perform state\nmigration.  the restore simply fails as the state migration feature isn't\nyet available.\n","date":"2017-05-08 02:04:23","modifiedFileCount":"92","status":"M","submitter":"Tzu-Li (Gordon) Tai"}]
