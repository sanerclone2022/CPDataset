[{"authorTime":"2015-10-20 23:04:21","codes":[{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testSocketSink() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0);\n\t\t\t\t\tsimpleSink.open(new Configuration());\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t\tsimpleSink.close();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","date":"2015-10-21 17:01:43","endLine":101,"groupId":"37748","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSocketSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/4acde1e8aee5e2c0a2e51c9b38fbc9ae21a077.src","preCode":"\tpublic void testSocketSink() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0);\n\t\t\t\t\tsimpleSink.open(new Configuration());\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t\tsimpleSink.close();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/SocketClientSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testSinkAutoFlush() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal SocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0, true);\n\t\tsimpleSink.open(new Configuration());\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t\r\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tsimpleSink.close();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","date":"2015-10-21 17:01:43","endLine":143,"groupId":"44366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSinkAutoFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/4acde1e8aee5e2c0a2e51c9b38fbc9ae21a077.src","preCode":"\tpublic void testSinkAutoFlush() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal SocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0, true);\n\t\tsimpleSink.open(new Configuration());\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t\r\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tsimpleSink.close();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/SocketClientSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"06f6ac5d3edbc8dd20baf6e1b30900c189a68876","commitMessage":"@@@[FLINK-2877] Move Streaming API out of Staging package\n","date":"2015-10-21 17:01:43","modifiedFileCount":"0","status":"B","submitter":"Rufus Refactor"},{"authorTime":"2017-08-29 21:50:56","codes":[{"authorDate":"2017-08-29 21:50:56","commitOrder":2,"curCode":"\tpublic void testSocketSink() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0);\n\t\t\t\t\tsimpleSink.open(new Configuration());\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n', SinkContextUtil.forTimestamp(0));\n\t\t\t\t\tsimpleSink.close();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","date":"2017-09-21 19:46:17","endLine":103,"groupId":"103052","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSocketSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/dce11d40f073626d9d6209417e0ada6e0cfe22.src","preCode":"\tpublic void testSocketSink() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0);\n\t\t\t\t\tsimpleSink.open(new Configuration());\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t\tsimpleSink.close();\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/SocketClientSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2017-08-29 21:50:56","commitOrder":2,"curCode":"\tpublic void testSinkAutoFlush() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal SocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0, true);\n\t\tsimpleSink.open(new Configuration());\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t\r\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n', SinkContextUtil.forTimestamp(0));\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tsimpleSink.close();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","date":"2017-09-21 19:46:17","endLine":145,"groupId":"103052","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSinkAutoFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/dce11d40f073626d9d6209417e0ada6e0cfe22.src","preCode":"\tpublic void testSinkAutoFlush() throws Exception {\n\t\tfinal ServerSocket server = new ServerSocket(0);\n\t\tfinal int port = server.getLocalPort();\n\n\t\tfinal SocketClientSink<String> simpleSink = new SocketClientSink<>(host, port, simpleSchema, 0, true);\n\t\tsimpleSink.open(new Configuration());\n\n\t\tfinal AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n\t\tThread sinkRunner = new Thread(\"Test sink runner\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t\r\n\t\t\t\t\tsimpleSink.invoke(TEST_MESSAGE + '\\n');\n\t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n\t\t\t\t\terror.set(t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tsinkRunner.start();\n\n\t\tSocket sk = server.accept();\n\t\tBufferedReader rdr = new BufferedReader(new InputStreamReader(sk.getInputStream()));\n\t\tString value = rdr.readLine();\n\n\t\tsinkRunner.join();\n\t\tsimpleSink.close();\n\t\tserver.close();\n\n\t\tif (error.get() != null) {\n\t\t\tThrowable t = error.get();\n\t\t\tt.printStackTrace();\n\t\t\tfail(\"Error in spawned thread: \" + t.getMessage());\n\t\t}\n\n\t\tassertEquals(TEST_MESSAGE, value);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/SocketClientSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"e7996b0d0ff5fe705a3830f3855f977cad4f0c44","commitMessage":"@@@[FLINK-7552] Extend SinkFunction interface with SinkContext\n","date":"2017-09-21 19:46:17","modifiedFileCount":"8","status":"M","submitter":"Aljoscha Krettek"}]
