[{"authorTime":"2020-03-21 21:17:34","codes":[{"authorDate":"2020-03-21 21:17:34","commitOrder":1,"curCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","date":"2020-04-03 18:23:08","endLine":140,"groupId":"51802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleExecutions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/82/a4750e20411cf4bf67fdcf8ee1b414d850532a.src","preCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2020-03-21 21:17:34","commitOrder":1,"curCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","date":"2020-04-03 18:23:08","endLine":153,"groupId":"51802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobClientInteractionAfterShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/82/a4750e20411cf4bf67fdcf8ee1b414d850532a.src","preCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"db81417b8616850aa36b34fecafcc275db2cb10a","commitMessage":"@@@[FLINK-16705] Ensure MiniCluster shutdown does not interfere with JobResult retrieval\n\nThere is a race condition in `LocalExecutor` between (a) shutting down the\ncluster when the job has finished and (b) the client which retrieves the result\nof the job execution.\n\nThis was observed in Beam.  running a large test suite with the Flink Runner.\n\nWe should make sure the job result retrieval and the cluster shutdown do not\ninterfere. This adds a PerJobMiniClusterClient which guarantees that.\n\nImprove message for running flag state checks in MiniCluster\n\nAdditionally check for the JobID in PerJobMiniClusterClient\n\nIntroduce PerJobMiniCluster and a corresponding JobClient\n\nAdd TestLogger to test\n\nConvert shutdown methods to be async\n\nThis closes #11473.\n","date":"2020-04-03 18:23:08","modifiedFileCount":"9","status":"B","submitter":"Maximilian Michels"},{"authorTime":"2020-07-29 16:42:32","codes":[{"authorDate":"2020-07-29 16:42:32","commitOrder":2,"curCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","date":"2020-09-06 18:24:52","endLine":138,"groupId":"51802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleExecutions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/69cde6edbcc2f4bdf01e69cfa2e810ba156af8.src","preCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2020-07-29 16:42:32","commitOrder":2,"curCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","date":"2020-09-06 18:24:52","endLine":151,"groupId":"51802","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobClientInteractionAfterShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/69cde6edbcc2f4bdf01e69cfa2e810ba156af8.src","preCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph()).get();\n\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"65ed03936a736190f7ffcb6ba0709a99ffcb98fa","commitMessage":"@@@[FLINK-16866] Make jobsubmission non-blocking\n\nThis closes #13217\n","date":"2020-09-06 18:24:52","modifiedFileCount":"35","status":"M","submitter":"Robert Metzger"},{"authorTime":"2020-09-24 14:30:51","codes":[{"authorDate":"2020-09-24 14:30:51","commitOrder":3,"curCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult().get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult().get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","date":"2020-09-25 20:00:13","endLine":138,"groupId":"101796","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleExecutions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2e/86aeef66031d48e89cda1c3f7eceefbb29e689.src","preCode":"\tpublic void testMultipleExecutions() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t\t{\n\t\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\t\tassertThatMiniClusterIsShutdown();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2020-09-24 14:30:51","commitOrder":3,"curCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\tjobClient.getJobExecutionResult().get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","date":"2020-09-25 20:00:13","endLine":151,"groupId":"101796","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJobClientInteractionAfterShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2e/86aeef66031d48e89cda1c3f7eceefbb29e689.src","preCode":"\tpublic void testJobClientInteractionAfterShutdown() throws Exception {\n\t\tPerJobMiniClusterFactory perJobMiniClusterFactory = initializeMiniCluster();\n\t\tJobClient jobClient = perJobMiniClusterFactory.submitJob(getNoopJobGraph(), ClassLoader.getSystemClassLoader()).get();\n\t\tjobClient.getJobExecutionResult(getClass().getClassLoader()).get();\n\t\tassertThatMiniClusterIsShutdown();\n\n\t\tassertThrows(\n\t\t\t\"MiniCluster is not yet running or has already been shut down.\",\n\t\t\tIllegalStateException.class,\n\t\t\tjobClient::cancel);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/PerJobMiniClusterFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"b692300a07fce41fc8cce8823432dd6b8db0784c","commitMessage":"@@@[FLINK-19124][datastream] Remove ClassLoader parameter from JobClient methods\n","date":"2020-09-25 20:00:13","modifiedFileCount":"35","status":"M","submitter":"SteNicholas"}]
