[{"authorTime":"2020-07-10 16:41:08","codes":[{"authorDate":"2020-07-10 16:41:08","commitOrder":1,"curCode":"\tpublic void testAuthConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\t\tconfiguration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n\t\tconfiguration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch7Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.AuthRestClientFactory(null, USERNAME, PASSWORD));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","date":"2020-07-10 16:41:08","endLine":146,"groupId":"2993","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuthConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/18d64cfdfd28e651a016a7274c2354fb22e9ee.src","preCode":"\tpublic void testAuthConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\t\tconfiguration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n\t\tconfiguration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch7Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.AuthRestClientFactory(null, USERNAME, PASSWORD));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2020-07-10 16:41:08","commitOrder":1,"curCode":"\tpublic void testAuthConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\t\tconfiguration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n\t\tconfiguration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch6Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.AuthRestClientFactory(null, USERNAME, PASSWORD));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","date":"2020-07-10 16:41:08","endLine":146,"groupId":"2993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAuthConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/54ed54b07c6c51d8d6906a57607ac22c7f5b0e.src","preCode":"\tpublic void testAuthConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\t\tconfiguration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n\t\tconfiguration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch6Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.AuthRestClientFactory(null, USERNAME, PASSWORD));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"ee653778689023ddfdf007d5bde1daad8fbbc081","commitMessage":"@@@[FLINK-18361][es][table] Support username and password options for new Elasticsearch connector\n\nCo-authored-by: zhisheng17 <zhisheng2018@gmail.com>\n\nThis closes #12715","date":"2020-07-10 16:41:08","modifiedFileCount":"10","status":"B","submitter":"Yangze Guo"},{"authorTime":"2021-06-30 16:32:46","codes":[{"authorDate":"2021-06-30 16:32:46","commitOrder":2,"curCode":"    public void testAuthConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchConnectorOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchConnectorOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n        configuration.setString(ElasticsearchConnectorOptions.USERNAME_OPTION.key(), USERNAME);\n        configuration.setString(ElasticsearchConnectorOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch7DynamicSink testSink =\n                new Elasticsearch7DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch7Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(\n                        new Elasticsearch7DynamicSink.AuthRestClientFactory(\n                                null, USERNAME, PASSWORD));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","date":"2021-07-12 18:56:17","endLine":158,"groupId":"10808","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAuthConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/54/c75741fa5c6df8ae6b5bd30db0ec388400666a.src","preCode":"    public void testAuthConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n        configuration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n        configuration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch7DynamicSink testSink =\n                new Elasticsearch7DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch7Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(\n                        new Elasticsearch7DynamicSink.AuthRestClientFactory(\n                                null, USERNAME, PASSWORD));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2021-06-30 16:32:46","commitOrder":2,"curCode":"    public void testAuthConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchConnectorOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchConnectorOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n        configuration.setString(ElasticsearchConnectorOptions.USERNAME_OPTION.key(), USERNAME);\n        configuration.setString(ElasticsearchConnectorOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch6DynamicSink testSink =\n                new Elasticsearch6DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch6Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(\n                        new Elasticsearch6DynamicSink.AuthRestClientFactory(\n                                null, USERNAME, PASSWORD));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","date":"2021-07-12 18:56:17","endLine":158,"groupId":"10808","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAuthConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/54222e06380a48a3a6176d8b2c882743001fba.src","preCode":"    public void testAuthConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n        configuration.setString(ElasticsearchOptions.USERNAME_OPTION.key(), USERNAME);\n        configuration.setString(ElasticsearchOptions.PASSWORD_OPTION.key(), PASSWORD);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch6DynamicSink testSink =\n                new Elasticsearch6DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch6Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(\n                        new Elasticsearch6DynamicSink.AuthRestClientFactory(\n                                null, USERNAME, PASSWORD));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"2dbb3de221339edf120dac3fbbd6e13c3e54af11","commitMessage":"@@@[FLINK-23064][connector-elasticsearch] Make connector options PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"11","status":"M","submitter":"Ingo B?rk"}]
