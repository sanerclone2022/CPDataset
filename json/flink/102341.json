[{"authorTime":"2020-11-05 15:00:31","codes":[{"authorDate":"2020-11-05 15:00:31","commitOrder":1,"curCode":"\tpublic void testRemove() throws Exception {\n\t\tnew Context() {{\n\t\t\trunTest(\n\t\t\t\t() -> {\n\t\t\t\t\tleaderCallbackGrantLeadership();\n\t\t\t\t\tLongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n\t\t\t\t\tfinal KubernetesStateHandleStore<Long> store = new KubernetesStateHandleStore<>(\n\t\t\t\t\t\tflinkKubeClient, LEADER_CONFIGMAP_NAME, longStateStorage, filter, LOCK_IDENTITY);\n\t\t\t\t\tstore.addAndLock(key, state);\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(1));\n\t\t\t\t\tassertThat(store.releaseAndTryRemove(key), is(true));\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(0));\n\n\t\t\t\t\t\r\n\t\t\t\t\tassertThat(LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(), is(1));\n\t\t\t\t});\n\t\t}};\n\t}\n","date":"2020-11-08 00:54:31","endLine":345,"groupId":"18579","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ed/9c1ae9a7df6f18f65843464b5390fe36f7bdad.src","preCode":"\tpublic void testRemove() throws Exception {\n\t\tnew Context() {{\n\t\t\trunTest(\n\t\t\t\t() -> {\n\t\t\t\t\tleaderCallbackGrantLeadership();\n\t\t\t\t\tLongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n\t\t\t\t\tfinal KubernetesStateHandleStore<Long> store = new KubernetesStateHandleStore<>(\n\t\t\t\t\t\tflinkKubeClient, LEADER_CONFIGMAP_NAME, longStateStorage, filter, LOCK_IDENTITY);\n\t\t\t\t\tstore.addAndLock(key, state);\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(1));\n\t\t\t\t\tassertThat(store.releaseAndTryRemove(key), is(true));\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(0));\n\n\t\t\t\t\t\r\n\t\t\t\t\tassertThat(LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(), is(1));\n\t\t\t\t});\n\t\t}};\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStoreTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"},{"authorDate":"2020-11-05 15:00:31","commitOrder":1,"curCode":"\tpublic void testRemoveFailedShouldNotDiscardState() throws Exception {\n\t\tnew Context() {{\n\t\t\trunTest(\n\t\t\t\t() -> {\n\t\t\t\t\tleaderCallbackGrantLeadership();\n\t\t\t\t\tLongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n\t\t\t\t\tfinal KubernetesStateHandleStore<Long> store = new KubernetesStateHandleStore<>(\n\t\t\t\t\t\tflinkKubeClient, LEADER_CONFIGMAP_NAME, longStateStorage, filter, LOCK_IDENTITY);\n\n\t\t\t\t\tstore.addAndLock(key, state);\n\t\t\t\t\t\r\n\t\t\t\t\tgetLeaderCallback().notLeader();\n\t\t\t\t\telectionEventHandler.waitForRevokeLeader(TIMEOUT);\n\t\t\t\t\tgetLeaderConfigMap().getAnnotations().remove(KubernetesLeaderElector.LEADER_ANNOTATION_KEY);\n\n\t\t\t\t\tassertThat(store.releaseAndTryRemove(key), is(false));\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(1));\n\n\t\t\t\t\tassertThat(LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(), is(0));\n\t\t\t\t});\n\t\t}};\n\t}\n","date":"2020-11-08 00:54:31","endLine":370,"groupId":"18579","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveFailedShouldNotDiscardState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ed/9c1ae9a7df6f18f65843464b5390fe36f7bdad.src","preCode":"\tpublic void testRemoveFailedShouldNotDiscardState() throws Exception {\n\t\tnew Context() {{\n\t\t\trunTest(\n\t\t\t\t() -> {\n\t\t\t\t\tleaderCallbackGrantLeadership();\n\t\t\t\t\tLongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n\t\t\t\t\tfinal KubernetesStateHandleStore<Long> store = new KubernetesStateHandleStore<>(\n\t\t\t\t\t\tflinkKubeClient, LEADER_CONFIGMAP_NAME, longStateStorage, filter, LOCK_IDENTITY);\n\n\t\t\t\t\tstore.addAndLock(key, state);\n\t\t\t\t\t\r\n\t\t\t\t\tgetLeaderCallback().notLeader();\n\t\t\t\t\telectionEventHandler.waitForRevokeLeader(TIMEOUT);\n\t\t\t\t\tgetLeaderConfigMap().getAnnotations().remove(KubernetesLeaderElector.LEADER_ANNOTATION_KEY);\n\n\t\t\t\t\tassertThat(store.releaseAndTryRemove(key), is(false));\n\t\t\t\t\tassertThat(store.getAllAndLock().size(), is(1));\n\n\t\t\t\t\tassertThat(LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(), is(0));\n\t\t\t\t});\n\t\t}};\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStoreTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"8b4f28b334af4cb2e36d6f46805f9631ce34e091","commitMessage":"@@@[FLINK-19543][k8s] Implement KubernetesStateHandleStore based on Kubernetes API\n","date":"2020-11-08 00:54:31","modifiedFileCount":"2","status":"B","submitter":"wangyang0918"},{"authorTime":"2021-05-04 19:08:07","codes":[{"authorDate":"2021-05-04 19:08:07","commitOrder":2,"curCode":"    public void testRemove() throws Exception {\n        new Context() {\n            {\n                runTest(\n                        () -> {\n                            leaderCallbackGrantLeadership();\n\n                            final KubernetesStateHandleStore<\n                                            TestingLongStateHandleHelper.LongStateHandle>\n                                    store =\n                                            new KubernetesStateHandleStore<>(\n                                                    flinkKubeClient,\n                                                    LEADER_CONFIGMAP_NAME,\n                                                    longStateStorage,\n                                                    filter,\n                                                    LOCK_IDENTITY);\n                            store.addAndLock(key, state);\n                            assertThat(store.getAllAndLock().size(), is(1));\n                            assertThat(store.releaseAndTryRemove(key), is(true));\n                            assertThat(store.getAllAndLock().size(), is(0));\n\n                            \r\n                            assertThat(TestingLongStateHandleHelper.getGlobalDiscardCount(), is(1));\n                        });\n            }\n        };\n    }\n","date":"2021-05-18 16:58:42","endLine":515,"groupId":"102341","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/230f5250fabfd320d3c09968b016e6446942f6.src","preCode":"    public void testRemove() throws Exception {\n        new Context() {\n            {\n                runTest(\n                        () -> {\n                            leaderCallbackGrantLeadership();\n                            LongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n                            final KubernetesStateHandleStore<Long> store =\n                                    new KubernetesStateHandleStore<>(\n                                            flinkKubeClient,\n                                            LEADER_CONFIGMAP_NAME,\n                                            longStateStorage,\n                                            filter,\n                                            LOCK_IDENTITY);\n                            store.addAndLock(key, state);\n                            assertThat(store.getAllAndLock().size(), is(1));\n                            assertThat(store.releaseAndTryRemove(key), is(true));\n                            assertThat(store.getAllAndLock().size(), is(0));\n\n                            \r\n                            assertThat(\n                                    LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(),\n                                    is(1));\n                        });\n            }\n        };\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStoreTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2021-05-04 19:08:07","commitOrder":2,"curCode":"    public void testRemoveFailedShouldNotDiscardState() throws Exception {\n        new Context() {\n            {\n                runTest(\n                        () -> {\n                            leaderCallbackGrantLeadership();\n\n                            final KubernetesStateHandleStore<\n                                            TestingLongStateHandleHelper.LongStateHandle>\n                                    store =\n                                            new KubernetesStateHandleStore<>(\n                                                    flinkKubeClient,\n                                                    LEADER_CONFIGMAP_NAME,\n                                                    longStateStorage,\n                                                    filter,\n                                                    LOCK_IDENTITY);\n\n                            store.addAndLock(key, state);\n                            \r\n                            getLeaderCallback().notLeader();\n                            electionEventHandler.waitForRevokeLeader(TIMEOUT);\n                            getLeaderConfigMap()\n                                    .getAnnotations()\n                                    .remove(KubernetesLeaderElector.LEADER_ANNOTATION_KEY);\n\n                            assertThat(store.releaseAndTryRemove(key), is(false));\n                            assertThat(store.getAllAndLock().size(), is(1));\n\n                            assertThat(TestingLongStateHandleHelper.getGlobalDiscardCount(), is(0));\n                        });\n            }\n        };\n    }\n","date":"2021-05-18 16:58:42","endLine":550,"groupId":"102341","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveFailedShouldNotDiscardState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/230f5250fabfd320d3c09968b016e6446942f6.src","preCode":"    public void testRemoveFailedShouldNotDiscardState() throws Exception {\n        new Context() {\n            {\n                runTest(\n                        () -> {\n                            leaderCallbackGrantLeadership();\n                            LongRetrievableStateHandle.clearNumberOfGlobalDiscardCalls();\n\n                            final KubernetesStateHandleStore<Long> store =\n                                    new KubernetesStateHandleStore<>(\n                                            flinkKubeClient,\n                                            LEADER_CONFIGMAP_NAME,\n                                            longStateStorage,\n                                            filter,\n                                            LOCK_IDENTITY);\n\n                            store.addAndLock(key, state);\n                            \r\n                            getLeaderCallback().notLeader();\n                            electionEventHandler.waitForRevokeLeader(TIMEOUT);\n                            getLeaderConfigMap()\n                                    .getAnnotations()\n                                    .remove(KubernetesLeaderElector.LEADER_ANNOTATION_KEY);\n\n                            assertThat(store.releaseAndTryRemove(key), is(false));\n                            assertThat(store.getAllAndLock().size(), is(1));\n\n                            assertThat(\n                                    LongRetrievableStateHandle.getNumberOfGlobalDiscardCalls(),\n                                    is(0));\n                        });\n            }\n        };\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStoreTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"cc59ad5e62a6183fccbe1d429c608a727f00b307","commitMessage":"@@@[FLINK-22494][ha] Refactors TestingLongStateHandleHelper to operate on references\n\nThe previous implementation stored the state in the StateHandle. This causes\nproblems when deserializing the state creating a new instance that does not\npoint to the actual state but is a copy of this state.\n\nThis refactoring introduces LongStateHandle handling the actual state and\nLongRetrievableStateHandle referencing this handle.\n","date":"2021-05-18 16:58:42","modifiedFileCount":"4","status":"M","submitter":"Matthias Pohl"}]
