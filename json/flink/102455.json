[{"authorTime":"2017-10-24 18:16:08","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void testReducingState() throws Exception {\n\t\t\r\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\n\t\tfinal long numElements = 1024L;\n\n\t\tJobID jobId = null;\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setStateBackend(stateBackend);\n\t\t\tenv.setParallelism(maxParallelism);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\t\tDataStream<Tuple2<Integer, Long>> source = env\n\t\t\t\t\t.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\t\r\n\t\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState =\n\t\t\t\t\tnew ReducingStateDescriptor<>(\n\t\t\t\t\t\t\t\"any\",\n\t\t\t\t\t\t\tnew SumReduce(),\n\t\t\t\t\t\t\tsource.getType());\n\n\t\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f0;\n\t\t\t\t}\n\t\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\t\t\r\n\t\t\tJobGraph jobGraph = env.getStreamGraph().getJobGraph();\n\t\t\tjobId = jobGraph.getJobID();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\t\r\n\t\t\tlong expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t} finally {\n\t\t\t\r\n\t\t\tif (jobId != null) {\n\t\t\t\tCompletableFuture<CancellationSuccess> cancellation = FutureUtils.toJava(cluster\n\t\t\t\t\t\t.getLeaderGateway(deadline.timeLeft())\n\t\t\t\t\t\t.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())\n\t\t\t\t\t\t.mapTo(ClassTag$.MODULE$.<CancellationSuccess>apply(CancellationSuccess.class)));\n\n\t\t\t\tcancellation.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":852,"groupId":"1804","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/bae9ce1d03b78c9ebdbab13bd2cd7dae28f903.src","preCode":"\tpublic void testReducingState() throws Exception {\n\t\t\r\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\n\t\tfinal long numElements = 1024L;\n\n\t\tJobID jobId = null;\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setStateBackend(stateBackend);\n\t\t\tenv.setParallelism(maxParallelism);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\t\tDataStream<Tuple2<Integer, Long>> source = env\n\t\t\t\t\t.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\t\r\n\t\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState =\n\t\t\t\t\tnew ReducingStateDescriptor<>(\n\t\t\t\t\t\t\t\"any\",\n\t\t\t\t\t\t\tnew SumReduce(),\n\t\t\t\t\t\t\tsource.getType());\n\n\t\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f0;\n\t\t\t\t}\n\t\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\t\t\r\n\t\t\tJobGraph jobGraph = env.getStreamGraph().getJobGraph();\n\t\t\tjobId = jobGraph.getJobID();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\t\r\n\t\t\tlong expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t} finally {\n\t\t\t\r\n\t\t\tif (jobId != null) {\n\t\t\t\tCompletableFuture<CancellationSuccess> cancellation = FutureUtils.toJava(cluster\n\t\t\t\t\t\t.getLeaderGateway(deadline.timeLeft())\n\t\t\t\t\t\t.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())\n\t\t\t\t\t\t.mapTo(ClassTag$.MODULE$.<CancellationSuccess>apply(CancellationSuccess.class)));\n\n\t\t\t\tcancellation.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"B"},{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-10-27 00:57:34","endLine":1495,"groupId":"8351","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/bae9ce1d03b78c9ebdbab13bd2cd7dae28f903.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1460,"status":"B"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"B","submitter":"kkloudas"},{"authorTime":"2017-11-14 22:05:45","codes":[{"authorDate":"2017-11-14 22:05:45","commitOrder":2,"curCode":"\tpublic void testReducingState() throws Exception {\n\t\t\r\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\n\t\tfinal long numElements = 1024L;\n\n\t\tJobID jobId = null;\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setStateBackend(stateBackend);\n\t\t\tenv.setParallelism(maxParallelism);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\t\tDataStream<Tuple2<Integer, Long>> source = env\n\t\t\t\t\t.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\t\r\n\t\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState =\n\t\t\t\t\tnew ReducingStateDescriptor<>(\n\t\t\t\t\t\t\t\"any\",\n\t\t\t\t\t\t\tnew SumReduce(),\n\t\t\t\t\t\t\tsource.getType());\n\n\t\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f0;\n\t\t\t\t}\n\t\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\t\t\r\n\t\t\tJobGraph jobGraph = env.getStreamGraph().getJobGraph();\n\t\t\tjobId = jobGraph.getJobID();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\t\r\n\t\t\tlong expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t} finally {\n\t\t\t\r\n\t\t\tif (jobId != null) {\n\t\t\t\tCompletableFuture<CancellationSuccess> cancellation = FutureUtils.toJava(cluster\n\t\t\t\t\t\t.getLeaderGateway(deadline.timeLeft())\n\t\t\t\t\t\t.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())\n\t\t\t\t\t\t.mapTo(ClassTag$.MODULE$.<CancellationSuccess>apply(CancellationSuccess.class)));\n\n\t\t\t\tcancellation.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t}\n\t}\n","date":"2017-11-17 17:29:30","endLine":934,"groupId":"1804","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/cbb61e6276aa9830b3ae88e2a1e11b3af01c1e.src","preCode":"\tpublic void testReducingState() throws Exception {\n\t\t\r\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\n\t\tfinal long numElements = 1024L;\n\n\t\tJobID jobId = null;\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setStateBackend(stateBackend);\n\t\t\tenv.setParallelism(maxParallelism);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\t\tDataStream<Tuple2<Integer, Long>> source = env\n\t\t\t\t\t.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\t\r\n\t\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState =\n\t\t\t\t\tnew ReducingStateDescriptor<>(\n\t\t\t\t\t\t\t\"any\",\n\t\t\t\t\t\t\tnew SumReduce(),\n\t\t\t\t\t\t\tsource.getType());\n\n\t\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f0;\n\t\t\t\t}\n\t\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\t\t\r\n\t\t\tJobGraph jobGraph = env.getStreamGraph().getJobGraph();\n\t\t\tjobId = jobGraph.getJobID();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\t\r\n\t\t\tlong expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t} finally {\n\t\t\t\r\n\t\t\tif (jobId != null) {\n\t\t\t\tCompletableFuture<CancellationSuccess> cancellation = FutureUtils.toJava(cluster\n\t\t\t\t\t\t.getLeaderGateway(deadline.timeLeft())\n\t\t\t\t\t\t.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())\n\t\t\t\t\t\t.mapTo(ClassTag$.MODULE$.<CancellationSuccess>apply(CancellationSuccess.class)));\n\n\t\t\t\tcancellation.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"},{"authorDate":"2017-11-14 22:05:45","commitOrder":2,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-11-17 17:29:30","endLine":1555,"groupId":"41411","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/cbb61e6276aa9830b3ae88e2a1e11b3af01c1e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvStateWithRetries(\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tQUERY_RETRY_DELAY,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1520,"status":"M"}],"commitId":"a0838de79ff73b0322f3ce255df54f5f33b2bf3b","commitMessage":"@@@[FLINK-8063][QS] QS client does not retry when an UnknownKvStateLocation is thrown.\n","date":"2017-11-17 17:29:30","modifiedFileCount":"3","status":"M","submitter":"kkloudas"},{"authorTime":"2017-11-14 22:05:45","codes":[{"authorDate":"2017-12-06 21:32:46","commitOrder":3,"curCode":"\tpublic void testReducingState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","date":"2017-12-06 21:33:28","endLine":795,"groupId":"2200","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/283677c571d65404062dac6e07b8955fc65575.src","preCode":"\tpublic void testReducingState() throws Exception {\n\t\t\r\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\n\t\tfinal long numElements = 1024L;\n\n\t\tJobID jobId = null;\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setStateBackend(stateBackend);\n\t\t\tenv.setParallelism(maxParallelism);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\t\tDataStream<Tuple2<Integer, Long>> source = env\n\t\t\t\t\t.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\t\r\n\t\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState =\n\t\t\t\t\tnew ReducingStateDescriptor<>(\n\t\t\t\t\t\t\t\"any\",\n\t\t\t\t\t\t\tnew SumReduce(),\n\t\t\t\t\t\t\tsource.getType());\n\n\t\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) throws Exception {\n\t\t\t\t\treturn value.f0;\n\t\t\t\t}\n\t\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\t\t\r\n\t\t\tJobGraph jobGraph = env.getStreamGraph().getJobGraph();\n\t\t\tjobId = jobGraph.getJobID();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\t\r\n\t\t\tlong expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t} finally {\n\t\t\t\r\n\t\t\tif (jobId != null) {\n\t\t\t\tCompletableFuture<CancellationSuccess> cancellation = FutureUtils.toJava(cluster\n\t\t\t\t\t\t.getLeaderGateway(deadline.timeLeft())\n\t\t\t\t\t\t.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft())\n\t\t\t\t\t\t.mapTo(ClassTag$.MODULE$.<CancellationSuccess>apply(CancellationSuccess.class)));\n\n\t\t\t\tcancellation.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":731,"status":"M"},{"authorDate":"2017-11-14 22:05:45","commitOrder":3,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-11-17 17:29:30","endLine":1555,"groupId":"41411","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/cbb61e6276aa9830b3ae88e2a1e11b3af01c1e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1520,"status":"N"}],"commitId":"a3fd548e9c76c67609bbf159d5fb743d756450b1","commitMessage":"@@@[FLINK-7880][QS] Wait for proper resource cleanup after each ITCase.\n","date":"2017-12-06 21:33:28","modifiedFileCount":"5","status":"M","submitter":"kkloudas"},{"authorTime":"2017-11-27 16:29:54","codes":[{"authorDate":"2017-11-27 16:29:54","commitOrder":4,"curCode":"\tpublic void testReducingState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","date":"2017-12-14 22:26:39","endLine":797,"groupId":"2200","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ad7fa4e30fedb36a8499694388d7db79921b9e.src","preCode":"\tpublic void testReducingState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"},{"authorDate":"2017-11-27 16:29:54","commitOrder":4,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-12-14 22:26:39","endLine":1421,"groupId":"41411","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ad7fa4e30fedb36a8499694388d7db79921b9e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(50L);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"M"}],"commitId":"917fbcbee4599c1d198a4c63942fe1d2762aa64a","commitMessage":"@@@[hotfix] [tests] Speed up queryable state IT tests by removing sleep\n","date":"2017-12-14 22:26:39","modifiedFileCount":"1","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2017-11-27 16:29:54","codes":[{"authorDate":"2018-02-26 18:55:14","commitOrder":5,"curCode":"\tpublic void testReducingState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(jobGraph, AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-03-11 23:17:21","endLine":760,"groupId":"47579","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e9/9a28b36a212bf1b57b90b36967980c8ce0d7e2.src","preCode":"\tpublic void testReducingState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2017-11-27 16:29:54","commitOrder":5,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-12-14 22:26:39","endLine":1421,"groupId":"41411","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ad7fa4e30fedb36a8499694388d7db79921b9e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"N"}],"commitId":"8365c90b8d8fe637e8a54fb21d56e001258db5f2","commitMessage":"@@@[FLINK-8778] Port queryable state ITCases to use MiniClusterResource\n","date":"2018-03-11 23:17:21","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-11-27 16:29:54","codes":[{"authorDate":"2019-11-01 14:51:28","commitOrder":6,"curCode":"\tpublic void testReducingState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tClientUtils.submitJob(clusterClient, jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-11-01 14:51:28","endLine":747,"groupId":"47579","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/91ab6fafdf31af79c0ef04c64bf1db55d035ab.src","preCode":"\tpublic void testReducingState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(jobGraph, AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2017-11-27 16:29:54","commitOrder":6,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-12-14 22:26:39","endLine":1421,"groupId":"41411","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ad7fa4e30fedb36a8499694388d7db79921b9e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"N"}],"commitId":"bf5235e340543b9c4551d2131e8a405bd1e9e0c0","commitMessage":"@@@[FLINK-14496][client] Exclude detach flag from ClusterClient\n\nThis closes #9972 .","date":"2019-11-01 14:51:28","modifiedFileCount":"37","status":"M","submitter":"tison"},{"authorTime":"2017-11-27 16:29:54","codes":[{"authorDate":"2020-08-15 08:29:49","commitOrder":7,"curCode":"\tpublic void testReducingState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.submitJob(jobGraph).get();\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-20 07:30:49","endLine":745,"groupId":"102455","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testReducingState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/3d3d81b472528e78cdc7aff060fbe4c6a960ac.src","preCode":"\tpublic void testReducingState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\tReducingStateDescriptor<Tuple2<Integer, Long>> reducingState = new ReducingStateDescriptor<>(\n\t\t\t\t\"any\", new SumReduce(), source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 8470749712274833552L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"jungle\", reducingState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tClientUtils.submitJob(clusterClient, jobGraph);\n\n\t\t\tfinal long expected = numElements * (numElements + 1L) / 2L;\n\n\t\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\t\tboolean success = false;\n\t\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\t\tCompletableFuture<ReducingState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tjobId,\n\t\t\t\t\t\t\t\"jungle\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\t\treducingState,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\texecutor);\n\n\t\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).get();\n\n\t\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"M"},{"authorDate":"2017-11-27 16:29:54","commitOrder":7,"curCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","date":"2017-12-14 22:26:39","endLine":1421,"groupId":"102455","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"executeValueQuery","params":"(finalDeadlinedeadline@finalQueryableStateClientclient@finalJobIDjobId@finalStringqueryableStateName@finalValueStateDescriptor<Tuple2<Integer@Long>>stateDescriptor@finallongexpected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ad7fa4e30fedb36a8499694388d7db79921b9e.src","preCode":"\tprivate void executeValueQuery(\n\t\t\tfinal Deadline deadline,\n\t\t\tfinal QueryableStateClient client,\n\t\t\tfinal JobID jobId,\n\t\t\tfinal String queryableStateName,\n\t\t\tfinal ValueStateDescriptor<Tuple2<Integer, Long>> stateDescriptor,\n\t\t\tfinal long expected) throws Exception {\n\n\t\tfor (int key = 0; key < maxParallelism; key++) {\n\t\t\tboolean success = false;\n\t\t\twhile (deadline.hasTimeLeft() && !success) {\n\t\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> future = getKvState(\n\t\t\t\t\t\tdeadline,\n\t\t\t\t\t\tclient,\n\t\t\t\t\t\tjobId,\n\t\t\t\t\t\tqueryableStateName,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\t\tstateDescriptor,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\texecutor);\n\n\t\t\t\tTuple2<Integer, Long> value = future.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).value();\n\n\t\t\t\tassertEquals(\"Key mismatch\", key, value.f0.intValue());\n\t\t\t\tif (expected == value.f1) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t} else {\n\t\t\t\t\t\r\n\t\t\t\t\tThread.sleep(RETRY_TIMEOUT);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassertTrue(\"Did not succeed query\", success);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"N"}],"commitId":"dfb8a3be7f0d113032a28cf6a1b296725e5562f5","commitMessage":"@@@[FLINK-15299][test] Move ClientUtils#submitJob & ClientUtils#submitJobAndWaitForResult to test scope\n\nThis closes #11469 .\n","date":"2020-08-20 07:30:49","modifiedFileCount":"28","status":"M","submitter":"tison"}]
