[{"authorTime":"2017-02-17 11:19:18","codes":[{"authorDate":"2017-02-17 11:19:18","commitOrder":1,"curCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend= mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","date":"2017-02-23 23:56:29","endLine":302,"groupId":"6967","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createListPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/496f2e0e41d44f2829fe7b58083a06b865c819.src","preCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend= mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2017-02-17 11:19:18","commitOrder":1,"curCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend= mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\t\t\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\t\t\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","date":"2017-02-23 23:56:29","endLine":338,"groupId":"30811","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/496f2e0e41d44f2829fe7b58083a06b865c819.src","preCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend= mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\t\t\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\t\t\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"}],"commitId":"30c9e2b683bf7f4776ffc23b6a860946a4429ae5","commitMessage":"@@@[FLINK-4856] Add MapState for keyed state\n","date":"2017-02-23 23:56:29","modifiedFileCount":"22","status":"B","submitter":"xiaogang.sxg"},{"authorTime":"2018-05-08 23:46:29","codes":[{"authorDate":"2018-05-08 23:46:29","commitOrder":2,"curCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","date":"2018-05-22 16:42:30","endLine":340,"groupId":"6967","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createListPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/4ceddbe598c82e4e3a11475fe8aa0b27edca89.src","preCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"},{"authorDate":"2018-05-08 23:46:29","commitOrder":2,"curCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","date":"2018-05-22 16:42:30","endLine":377,"groupId":"30811","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/4ceddbe598c82e4e3a11475fe8aa0b27edca89.src","preCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"3fd694db6f502e5df12476246dce05b1d1fc27bf","commitMessage":"@@@[FLINK-9316][streaming] Expose operator's unique ID in DataStream programs\n\nThis allows to uniquely and stably across multiple job submissions identify operators.\nPreviously two different operators that were executed by tasks that had the same name\nwere indistinguishable.\n","date":"2018-05-22 16:42:30","modifiedFileCount":"6","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2019-03-06 17:26:58","codes":[{"authorDate":"2019-03-06 17:26:58","commitOrder":3,"curCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","date":"2019-03-06 17:26:58","endLine":347,"groupId":"6967","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createListPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/678c32bb81d1b275219eed71b80d8830023b76.src","preCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"},{"authorDate":"2019-03-06 17:26:58","commitOrder":3,"curCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","date":"2019-03-06 17:26:58","endLine":388,"groupId":"2399","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/678c32bb81d1b275219eed71b80d8830023b76.src","preCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\t\"test_op\",\n\t\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()));\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"f10a7d8b5da5d9836a8fb3b2f38e099152f1d75f","commitMessage":"@@@[FLINK-11833] [State Backends] Cleanup unnecessary createKeyedStateBackend methods in StateBackend\n\nThis closes #7909.","date":"2019-03-06 17:26:58","modifiedFileCount":"12","status":"M","submitter":"Yu Li"},{"authorTime":"2020-03-12 00:53:38","codes":[{"authorDate":"2019-03-06 17:26:58","commitOrder":4,"curCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","date":"2019-03-06 17:26:58","endLine":347,"groupId":"103241","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createListPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/678c32bb81d1b275219eed71b80d8830023b76.src","preCode":"\tprivate static AbstractStreamOperator<?> createListPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<ListState<String>>() {\n\n\t\t\t@Override\n\t\t\tpublic ListState<String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tListStateDescriptor<String> descr =\n\t\t\t\t\t\t(ListStateDescriptor<String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(ListStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"},{"authorDate":"2020-03-12 00:53:38","commitOrder":4,"curCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\twhen(operatorMock.getProcessingTimeService()).thenReturn(new TestProcessingTimeService());\n\t\treturn operatorMock;\n\t}\n","date":"2020-03-25 22:06:35","endLine":422,"groupId":"103241","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapPlainMockOp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tprivate static AbstractStreamOperator<?> createMapPlainMockOp() throws Exception {\n\n\t\tAbstractStreamOperator<?> operatorMock = mock(AbstractStreamOperator.class);\n\t\tExecutionConfig config = new ExecutionConfig();\n\n\t\tKeyedStateBackend keyedStateBackend = mock(KeyedStateBackend.class);\n\n\t\tDefaultKeyedStateStore keyedStateStore = new DefaultKeyedStateStore(keyedStateBackend, config);\n\n\t\twhen(operatorMock.getExecutionConfig()).thenReturn(config);\n\n\t\tdoAnswer(new Answer<MapState<Integer, String>>() {\n\n\t\t\t@Override\n\t\t\tpublic MapState<Integer, String> answer(InvocationOnMock invocationOnMock) throws Throwable {\n\t\t\t\tMapStateDescriptor<Integer, String> descr =\n\t\t\t\t\t\t(MapStateDescriptor<Integer, String>) invocationOnMock.getArguments()[2];\n\n\t\t\t\tAbstractKeyedStateBackend<Integer> backend = new MemoryStateBackend().createKeyedStateBackend(\n\t\t\t\t\tnew DummyEnvironment(\"test_task\", 1, 0),\n\t\t\t\t\tnew JobID(),\n\t\t\t\t\t\"test_op\",\n\t\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\t1,\n\t\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\t\tnew KvStateRegistry().createTaskRegistry(new JobID(), new JobVertexID()),\n\t\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\tnew CloseableRegistry());\n\t\t\t\tbackend.setCurrentKey(0);\n\t\t\t\treturn backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, descr);\n\t\t\t}\n\t\t}).when(keyedStateBackend).getPartitionedState(Matchers.any(), any(TypeSerializer.class), any(MapStateDescriptor.class));\n\n\t\twhen(operatorMock.getKeyedStateStore()).thenReturn(keyedStateStore);\n\t\twhen(operatorMock.getOperatorID()).thenReturn(new OperatorID());\n\t\treturn operatorMock;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"239088e603baede4fbbd05f75655c54bb3750fcb","commitMessage":"@@@[FLINK-16316][operators] Cut dependency between StreamingRuntimeContext and AbstractStreamOperator\n\nThis simplifies dependencies between those two classes and will allow for StreamingRuntimeContext\nto be re-used in new replacement for AbstractStreamOperator.\n","date":"2020-03-25 22:06:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"}]
