[{"authorTime":"2019-08-20 22:12:01","codes":[{"authorDate":"2019-08-20 22:12:01","commitOrder":1,"curCode":"\tpublic void testKeySpacePutAndGet() {\n\t\tfor (int level = 0; level <= MAX_LEVEL; level++) {\n\t\t\tint keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n\t\t\tKeySpace keySpace = createKeySpace(level, keyLen);\n\t\t\tint keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n\t\t\tint totalKeySpaceLen = keyMetaLen + keyLen;\n\t\t\tint offset = 100;\n\t\t\tMemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(totalKeySpaceLen + offset);\n\t\t\tputKeySpace(keySpace, segment, offset);\n\t\t\tverifyGetKeySpace(keySpace, segment, offset);\n\t\t}\n\t}\n","date":"2019-11-08 01:31:48","endLine":51,"groupId":"22608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeySpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/d2d1850f05cd98b61e88e9c48053f99a24cb18.src","preCode":"\tpublic void testKeySpacePutAndGet() {\n\t\tfor (int level = 0; level <= MAX_LEVEL; level++) {\n\t\t\tint keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n\t\t\tKeySpace keySpace = createKeySpace(level, keyLen);\n\t\t\tint keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n\t\t\tint totalKeySpaceLen = keyMetaLen + keyLen;\n\t\t\tint offset = 100;\n\t\t\tMemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(totalKeySpaceLen + offset);\n\t\t\tputKeySpace(keySpace, segment, offset);\n\t\t\tverifyGetKeySpace(keySpace, segment, offset);\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2019-08-20 22:12:01","commitOrder":1,"curCode":"\tpublic void testValueSpacePutAndGet() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tint valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n\t\t\tValueSpace valueSpace = createValueSpace(valueLen);\n\t\t\tint valueMetaLen = SkipListUtils.getValueMetaLen();\n\t\t\tint totalValueSpaceLen = valueMetaLen + valueLen;\n\t\t\tint offset = 100;\n\t\t\tMemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(totalValueSpaceLen + offset);\n\t\t\tputValueSpace(valueSpace, segment, offset);\n\t\t\tverifyGetValueSpace(valueSpace, segment, offset);\n\t\t}\n\t}\n","date":"2019-11-08 01:31:48","endLine":65,"groupId":"22608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueSpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/d2d1850f05cd98b61e88e9c48053f99a24cb18.src","preCode":"\tpublic void testValueSpacePutAndGet() {\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tint valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n\t\t\tValueSpace valueSpace = createValueSpace(valueLen);\n\t\t\tint valueMetaLen = SkipListUtils.getValueMetaLen();\n\t\t\tint totalValueSpaceLen = valueMetaLen + valueLen;\n\t\t\tint offset = 100;\n\t\t\tMemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(totalValueSpaceLen + offset);\n\t\t\tputValueSpace(valueSpace, segment, offset);\n\t\t\tverifyGetValueSpace(valueSpace, segment, offset);\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"525f3c9c45f8534f1782986781140473909116a8","commitMessage":"@@@[FLINK-12697][state backends] Support on-disk state storage for spill-able heap backend\n","date":"2019-11-08 01:31:48","modifiedFileCount":"4","status":"B","submitter":"Yu Li"},{"authorTime":"2021-02-19 17:12:54","codes":[{"authorDate":"2021-02-19 17:12:54","commitOrder":2,"curCode":"    public void testKeySpacePutAndGet() {\n        for (int level = 0; level <= MAX_LEVEL; level++) {\n            int keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            KeySpace keySpace = createKeySpace(level, keyLen);\n            int keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n            int totalKeySpaceLen = keyMetaLen + keyLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateHeapSegment(totalKeySpaceLen + offset);\n            putKeySpace(keySpace, segment, offset);\n            verifyGetKeySpace(keySpace, segment, offset);\n        }\n    }\n","date":"2021-02-21 09:12:32","endLine":50,"groupId":"22608","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeySpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/acb376440afa5cf1d559319c441fed2a8762d6.src","preCode":"    public void testKeySpacePutAndGet() {\n        for (int level = 0; level <= MAX_LEVEL; level++) {\n            int keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            KeySpace keySpace = createKeySpace(level, keyLen);\n            int keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n            int totalKeySpaceLen = keyMetaLen + keyLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateUnpooledSegment(totalKeySpaceLen + offset);\n            putKeySpace(keySpace, segment, offset);\n            verifyGetKeySpace(keySpace, segment, offset);\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-02-19 17:12:54","commitOrder":2,"curCode":"    public void testValueSpacePutAndGet() {\n        for (int i = 0; i < 100; i++) {\n            int valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            ValueSpace valueSpace = createValueSpace(valueLen);\n            int valueMetaLen = SkipListUtils.getValueMetaLen();\n            int totalValueSpaceLen = valueMetaLen + valueLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateHeapSegment(totalValueSpaceLen + offset);\n            putValueSpace(valueSpace, segment, offset);\n            verifyGetValueSpace(valueSpace, segment, offset);\n        }\n    }\n","date":"2021-02-21 09:12:32","endLine":65,"groupId":"22608","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueSpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/acb376440afa5cf1d559319c441fed2a8762d6.src","preCode":"    public void testValueSpacePutAndGet() {\n        for (int i = 0; i < 100; i++) {\n            int valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            ValueSpace valueSpace = createValueSpace(valueLen);\n            int valueMetaLen = SkipListUtils.getValueMetaLen();\n            int totalValueSpaceLen = valueMetaLen + valueLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateUnpooledSegment(totalValueSpaceLen + offset);\n            putValueSpace(valueSpace, segment, offset);\n            verifyGetValueSpace(valueSpace, segment, offset);\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"86015c766ba186f18c2b3b41c3900ea4f809a1c2","commitMessage":"@@@[FLINK-21417][core] Update MemorySegmentFactory with explicit segment types.\n\nThis closes #14966\n","date":"2021-02-21 09:12:32","modifiedFileCount":"118","status":"M","submitter":"Xintong Song"},{"authorTime":"2021-02-22 14:11:51","codes":[{"authorDate":"2021-02-22 14:11:51","commitOrder":3,"curCode":"    public void testKeySpacePutAndGet() {\n        for (int level = 0; level <= MAX_LEVEL; level++) {\n            int keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            KeySpace keySpace = createKeySpace(level, keyLen);\n            int keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n            int totalKeySpaceLen = keyMetaLen + keyLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateUnpooledSegment(totalKeySpaceLen + offset);\n            putKeySpace(keySpace, segment, offset);\n            verifyGetKeySpace(keySpace, segment, offset);\n        }\n    }\n","date":"2021-02-22 14:18:02","endLine":50,"groupId":"10120","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testKeySpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/9fec0ecef62b84be6c92ccc771f5fb1d7482a0.src","preCode":"    public void testKeySpacePutAndGet() {\n        for (int level = 0; level <= MAX_LEVEL; level++) {\n            int keyLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            KeySpace keySpace = createKeySpace(level, keyLen);\n            int keyMetaLen = SkipListUtils.getKeyMetaLen(level);\n            int totalKeySpaceLen = keyMetaLen + keyLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateHeapSegment(totalKeySpaceLen + offset);\n            putKeySpace(keySpace, segment, offset);\n            verifyGetKeySpace(keySpace, segment, offset);\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-02-22 14:11:51","commitOrder":3,"curCode":"    public void testValueSpacePutAndGet() {\n        for (int i = 0; i < 100; i++) {\n            int valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            ValueSpace valueSpace = createValueSpace(valueLen);\n            int valueMetaLen = SkipListUtils.getValueMetaLen();\n            int totalValueSpaceLen = valueMetaLen + valueLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateUnpooledSegment(totalValueSpaceLen + offset);\n            putValueSpace(valueSpace, segment, offset);\n            verifyGetValueSpace(valueSpace, segment, offset);\n        }\n    }\n","date":"2021-02-22 14:18:02","endLine":65,"groupId":"10120","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testValueSpacePutAndGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/9fec0ecef62b84be6c92ccc771f5fb1d7482a0.src","preCode":"    public void testValueSpacePutAndGet() {\n        for (int i = 0; i < 100; i++) {\n            int valueLen = ThreadLocalRandom.current().nextInt(100) + 1;\n            ValueSpace valueSpace = createValueSpace(valueLen);\n            int valueMetaLen = SkipListUtils.getValueMetaLen();\n            int totalValueSpaceLen = valueMetaLen + valueLen;\n            int offset = 100;\n            MemorySegment segment =\n                    MemorySegmentFactory.allocateHeapSegment(totalValueSpaceLen + offset);\n            putValueSpace(valueSpace, segment, offset);\n            verifyGetValueSpace(valueSpace, segment, offset);\n        }\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"b81392665950c22ed347abcab611050a7fd1ae38","commitMessage":"@@@Revert FLINK-21417 due to performance regression.\n\n- 86015c766ba186f18c2b3b41c3900ea4f809a1c2: \"[FLINK-21417][core] Update MemorySegmentFactory with explicit segment types.\"\n- 1d0f5e5bc4e4926554a2f381b96ee4d569de8af5: \"[FLINK-21417][core] Re-abstract wrapping methods for memory segments.\"\n- 94362fa8917618ea3fa2a46b072abe528034070d: \"[FLINK-21417][core] Seprate OffHeapMemorySegment into DirectMemorySegment and UnsafeMemorySegment.\"\n- 046f950a820b35fde6f411fb90f42ab1b5eaaeff: \"[FLINK-21417][core] Turn HybridMemorySegment into OffHeapMemorySegment.\"\n- 10df8703a24b040481d1f56db5a74a3964c350c9: \"[FLINK-21417][core] Move some access methods from HybridMemorySegment to MemorySegment.\n- 0a664e1869e62005c37de2de0c19148468f1f059: \"[FLINK-21417][core] Migrate on-heap use cases of HybridMemorySegment to HeapMemorySegment.\"\n","date":"2021-02-22 14:18:02","modifiedFileCount":"118","status":"M","submitter":"Xintong Song"}]
