[{"authorTime":"2019-12-04 22:38:37","codes":[{"authorDate":"2019-12-04 22:38:37","commitOrder":1,"curCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertEquals(harness.getOutputValues(), Arrays.asList(0,1));\n\t}\n","date":"2019-12-05 17:16:58","endLine":100,"groupId":"52421","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHarnessForCoProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/78d3db10393c68b9acff171bc1e2ef81ff51ab.src","preCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertEquals(harness.getOutputValues(), Arrays.asList(0,1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2019-12-04 22:38:37","commitOrder":1,"curCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer,Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\t final MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertEquals(harness.getOutputValues(), Arrays.asList(0,1));\n\t}\n","date":"2019-12-05 17:16:58","endLine":176,"groupId":"45630","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHarnessForKeyedBroadcastProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/78d3db10393c68b9acff171bc1e2ef81ff51ab.src","preCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer,Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\t final MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertEquals(harness.getOutputValues(), Arrays.asList(0,1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"}],"commitId":"ed99909f38096586b3a156e42306d75e4174dbae","commitMessage":"@@@[FLINK-14890] Add ProcessFunctionTestHarnesses tests\n","date":"2019-12-05 17:16:58","modifiedFileCount":"2","status":"B","submitter":"Alexander Fedulov"},{"authorTime":"2019-12-05 01:36:58","codes":[{"authorDate":"2019-12-05 01:36:58","commitOrder":2,"curCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(isStreamRecord(0), isStreamRecord(1)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":99,"groupId":"52421","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHarnessForCoProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/18ba2137755eadde25f6fcc445c4e251ea3b8f.src","preCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(isStreamRecord(0), isStreamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"MB"},{"authorDate":"2019-12-05 01:36:58","commitOrder":2,"curCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(isStreamRecord(0), isStreamRecord(1)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":175,"groupId":"45630","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHarnessForKeyedBroadcastProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/18ba2137755eadde25f6fcc445c4e251ea3b8f.src","preCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(isStreamRecord(0), isStreamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"MB"}],"commitId":"2891a532a4e61e82027a7561f946ea00b0affa6f","commitMessage":"@@@[FLINK-14809] Use StreamRecord matchers in ProcessFunctionTestHarnessTest\n","date":"2019-12-05 17:16:58","modifiedFileCount":"2","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2019-12-05 01:41:26","codes":[{"authorDate":"2019-12-05 01:41:26","commitOrder":3,"curCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":100,"groupId":"52421","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHarnessForCoProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/ea1694b000f0bbfe164cff233f2300e9c2acc2.src","preCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"MB"},{"authorDate":"2019-12-05 01:41:26","commitOrder":3,"curCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":178,"groupId":"45630","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHarnessForKeyedBroadcastProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/ea1694b000f0bbfe164cff233f2300e9c2acc2.src","preCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"MB"}],"commitId":"23e62e4aa997b937943ab192a00608b1c681c683","commitMessage":"@@@[minor] Rename StreamRecordMatchers.isStreamRecord() to streamRecord()\n","date":"2019-12-05 17:16:58","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2019-12-05 19:56:41","codes":[{"authorDate":"2019-12-05 19:56:41","commitOrder":4,"curCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertEquals(harness.extractOutputValues(), Arrays.asList(0, 1));\n\t}\n","date":"2019-12-06 17:15:58","endLine":100,"groupId":"103399","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHarnessForCoProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/43774d810d82447cbefb4942719c6bf5a1f2eb.src","preCode":"\tpublic void testHarnessForCoProcessFunction() throws Exception {\n\t\tCoProcessFunction<Integer, String, Integer> function = new CoProcessFunction<Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processElement2(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forCoProcessFunction(function);\n\n\t\tharness.processElement2(\"0\", 1);\n\t\tharness.processElement1(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-12-05 19:56:41","commitOrder":4,"curCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertEquals(harness.extractOutputValues(), Arrays.asList(0, 1));\n\t}\n","date":"2019-12-06 17:15:58","endLine":176,"groupId":"103399","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHarnessForKeyedBroadcastProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/43774d810d82447cbefb4942719c6bf5a1f2eb.src","preCode":"\tpublic void testHarnessForKeyedBroadcastProcessFunction() throws Exception {\n\t\tKeyedBroadcastProcessFunction<Integer, Integer, String, Integer> function = new KeyedBroadcastProcessFunction<Integer, Integer, String, Integer>() {\n\n\t\t\t@Override\n\t\t\tpublic void processElement(Integer value, ReadOnlyContext ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(value);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\tout.collect(Integer.parseInt(value));\n\t\t\t}\n\t\t};\n\n\t\tfinal MapStateDescriptor<Integer, String> stateDescriptor =\n\t\t\tnew MapStateDescriptor<>(\n\t\t\t\t\"keys\", BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tKeyedBroadcastOperatorTestHarness<Integer, Integer, String, Integer> harness = ProcessFunctionTestHarnesses\n\t\t\t.forKeyedBroadcastProcessFunction(function, x -> x, TypeInformation.of(Integer.class), stateDescriptor);\n\n\t\tharness.processBroadcastElement(\"0\", 1);\n\t\tharness.processElement(1, 10);\n\n\t\tassertThat(harness.extractOutputStreamRecords(), contains(streamRecord(0), StreamRecordMatchers\n\t\t\t\t.streamRecord(1)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/ProcessFunctionTestHarnessesTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"8403fd4d672396d0d7f6cb5d1e491a5791d73718","commitMessage":"@@@[FLINK-14890] Add utility method to extract values from test harnesses and use in ProcessFunctionTestHarnessesTest\n","date":"2019-12-06 17:15:58","modifiedFileCount":"2","status":"M","submitter":"Alexander Fedulov"}]
