[{"authorTime":"2020-11-07 19:18:19","codes":[{"authorDate":"2020-11-07 19:18:19","commitOrder":1,"curCode":"\tpublic void testNonPartition() throws Exception {\n\t\tprepareTables(false);\n\t\tcreateTable(false, source.toURI().toString(), false);\n\t\tcreateTable(true, sink.toURI().toString(), false);\n\n\t\ttEnv().executeSql(\"insert into sink select id,name,UPPER(name),description,weight from source\").await();\n\t\tCloseableIterator<Row> iter = tEnv()\n\t\t\t\t.executeSql(\"select id,upper_name,description,weight from sink\").collect();\n\n\t\tList<String> results = CollectionUtil.iteratorToList(iter).stream()\n\t\t\t\t.map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n\t\t\t\t.collect(Collectors.toList());\n\t\titer.close();\n\n\t\tAssert.assertEquals(EXPECTED, results);\n\t}\n","date":"2020-11-07 19:18:19","endLine":119,"groupId":"38334","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/3e12c0aea8250a7fc25edb1c97d3aab4f97a75.src","preCode":"\tpublic void testNonPartition() throws Exception {\n\t\tprepareTables(false);\n\t\tcreateTable(false, source.toURI().toString(), false);\n\t\tcreateTable(true, sink.toURI().toString(), false);\n\n\t\ttEnv().executeSql(\"insert into sink select id,name,UPPER(name),description,weight from source\").await();\n\t\tCloseableIterator<Row> iter = tEnv()\n\t\t\t\t.executeSql(\"select id,upper_name,description,weight from sink\").collect();\n\n\t\tList<String> results = CollectionUtil.iteratorToList(iter).stream()\n\t\t\t\t.map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n\t\t\t\t.collect(Collectors.toList());\n\t\titer.close();\n\n\t\tAssert.assertEquals(EXPECTED, results);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFileSystemITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2020-11-07 19:18:19","commitOrder":1,"curCode":"\tpublic void testPartition() throws Exception {\n\t\tprepareTables(true);\n\t\tcreateTable(false, source.toURI().toString(), true);\n\t\tcreateTable(true, sink.toURI().toString(), true);\n\n\t\ttEnv().executeSql(\"insert into sink select id,name,UPPER(name),description,weight,p from source\").await();\n\t\tCloseableIterator<Row> iter = tEnv()\n\t\t\t\t.executeSql(\"select id,upper_name,description,weight,p from sink\").collect();\n\t\tList<Row> list = CollectionUtil.iteratorToList(iter);\n\t\titer.close();\n\n\t\tList<String> results = list.stream()\n\t\t\t\t.map(row -> Row.project(row, new int[] {0, 1, 2, 3}))\n\t\t\t\t.map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tAssert.assertEquals(EXPECTED, results);\n\n\t\t\r\n\t\tfor (Row row : list) {\n\t\t\tAssert.assertEquals(1, row.getField(4));\n\t\t}\n\t}\n","date":"2020-11-07 19:18:19","endLine":144,"groupId":"38333","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/3e12c0aea8250a7fc25edb1c97d3aab4f97a75.src","preCode":"\tpublic void testPartition() throws Exception {\n\t\tprepareTables(true);\n\t\tcreateTable(false, source.toURI().toString(), true);\n\t\tcreateTable(true, sink.toURI().toString(), true);\n\n\t\ttEnv().executeSql(\"insert into sink select id,name,UPPER(name),description,weight,p from source\").await();\n\t\tCloseableIterator<Row> iter = tEnv()\n\t\t\t\t.executeSql(\"select id,upper_name,description,weight,p from sink\").collect();\n\t\tList<Row> list = CollectionUtil.iteratorToList(iter);\n\t\titer.close();\n\n\t\tList<String> results = list.stream()\n\t\t\t\t.map(row -> Row.project(row, new int[] {0, 1, 2, 3}))\n\t\t\t\t.map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tAssert.assertEquals(EXPECTED, results);\n\n\t\t\r\n\t\tfor (Row row : list) {\n\t\t\tAssert.assertEquals(1, row.getField(4));\n\t\t}\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFileSystemITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"f850f556f7f26f99636058481e57a251a9b654fb","commitMessage":"@@@[FLINK-19823][table][fs-connector] Filesystem connector supports de/serialization schema\n\nThis closes #13957","date":"2020-11-07 19:18:19","modifiedFileCount":"10","status":"B","submitter":"Jingsong Lee"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testNonPartition() throws Exception {\n        prepareTables(false);\n        createTable(false, source.toURI().toString(), false);\n        createTable(true, sink.toURI().toString(), false);\n\n        tEnv().executeSql(\n                        \"insert into sink select id,name,UPPER(name),description,weight from source\")\n                .await();\n        CloseableIterator<Row> iter =\n                tEnv().executeSql(\"select id,upper_name,description,weight from sink\").collect();\n\n        List<String> results =\n                CollectionUtil.iteratorToList(iter).stream()\n                        .map(Row::toString)\n                        .collect(Collectors.toList());\n        iter.close();\n\n        Assert.assertEquals(EXPECTED, results);\n    }\n","date":"2021-01-08 00:17:30","endLine":121,"groupId":"102142","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNonPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/b0e90af854dfb8260646809bf9b415ee40524d.src","preCode":"    public void testNonPartition() throws Exception {\n        prepareTables(false);\n        createTable(false, source.toURI().toString(), false);\n        createTable(true, sink.toURI().toString(), false);\n\n        tEnv().executeSql(\n                        \"insert into sink select id,name,UPPER(name),description,weight from source\")\n                .await();\n        CloseableIterator<Row> iter =\n                tEnv().executeSql(\"select id,upper_name,description,weight from sink\").collect();\n\n        List<String> results =\n                CollectionUtil.iteratorToList(iter).stream()\n                        .map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n                        .collect(Collectors.toList());\n        iter.close();\n\n        Assert.assertEquals(EXPECTED, results);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFileSystemITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testPartition() throws Exception {\n        prepareTables(true);\n        createTable(false, source.toURI().toString(), true);\n        createTable(true, sink.toURI().toString(), true);\n\n        tEnv().executeSql(\n                        \"insert into sink select id,name,UPPER(name),description,weight,p from source\")\n                .await();\n        CloseableIterator<Row> iter =\n                tEnv().executeSql(\"select id,upper_name,description,weight,p from sink\").collect();\n        List<Row> list = CollectionUtil.iteratorToList(iter);\n        iter.close();\n\n        List<String> results =\n                list.stream()\n                        .map(row -> Row.project(row, new int[] {0, 1, 2, 3}))\n                        .map(Row::toString)\n                        .collect(Collectors.toList());\n\n        Assert.assertEquals(EXPECTED, results);\n\n        \r\n        for (Row row : list) {\n            Assert.assertEquals(1, row.getField(4));\n        }\n    }\n","date":"2021-01-08 00:17:30","endLine":149,"groupId":"102142","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7a/b0e90af854dfb8260646809bf9b415ee40524d.src","preCode":"    public void testPartition() throws Exception {\n        prepareTables(true);\n        createTable(false, source.toURI().toString(), true);\n        createTable(true, sink.toURI().toString(), true);\n\n        tEnv().executeSql(\n                        \"insert into sink select id,name,UPPER(name),description,weight,p from source\")\n                .await();\n        CloseableIterator<Row> iter =\n                tEnv().executeSql(\"select id,upper_name,description,weight,p from sink\").collect();\n        List<Row> list = CollectionUtil.iteratorToList(iter);\n        iter.close();\n\n        List<String> results =\n                list.stream()\n                        .map(row -> Row.project(row, new int[] {0, 1, 2, 3}))\n                        .map(row -> row.getKind().shortString() + \"(\" + row.toString() + \")\")\n                        .collect(Collectors.toList());\n\n        Assert.assertEquals(EXPECTED, results);\n\n        \r\n        for (Row row : list) {\n            Assert.assertEquals(1, row.getField(4));\n        }\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFileSystemITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"}]
