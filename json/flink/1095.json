[{"authorTime":"2018-03-10 05:47:35","codes":[{"authorDate":"2018-03-10 05:47:35","commitOrder":2,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException, RocksDBException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2018-03-29 23:35:39","endLine":217,"groupId":"40439","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c7/5a2edf13229c40aede1067e9f9647802424dee.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException, RocksDBException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"},{"authorDate":"2018-03-10 05:47:35","commitOrder":2,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayOutputStreamWithPos tmpKeySerializationStream = new ByteArrayOutputStreamWithPos(128);\n\t\tDataOutputViewStreamWrapper tmpKeySerializationDateDataOutputView = new DataOutputViewStreamWrapper(tmpKeySerializationStream);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationStream,\n\t\t\t\ttmpKeySerializationDateDataOutputView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationStream.toByteArray());\n\t}\n","date":"2018-03-29 23:35:39","endLine":149,"groupId":"40439","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/59979bdb2b31e7a007d4f4599bc1f3f739c9f1.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayOutputStreamWithPos tmpKeySerializationStream = new ByteArrayOutputStreamWithPos(128);\n\t\tDataOutputViewStreamWrapper tmpKeySerializationDateDataOutputView = new DataOutputViewStreamWrapper(tmpKeySerializationStream);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationStream,\n\t\t\t\ttmpKeySerializationDateDataOutputView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationStream.toByteArray());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"MB"}],"commitId":"db8e1f09bd7dcd9f392bf987e96cddcb34665b6c","commitMessage":"@@@[FLINK-8802] [QS] Fix concurrent access to non-duplicated serializers.\n\nThis closes #5691.\n","date":"2018-03-29 23:35:39","modifiedFileCount":"42","status":"M","submitter":"kkloudas"},{"authorTime":"2018-03-10 05:47:35","codes":[{"authorDate":"2018-06-13 16:24:10","commitOrder":3,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2018-06-18 20:41:50","endLine":214,"groupId":"40439","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9d/00a6723ae0cb3e94f85be1497c9eac68832718.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException, RocksDBException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2018-03-10 05:47:35","commitOrder":3,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayOutputStreamWithPos tmpKeySerializationStream = new ByteArrayOutputStreamWithPos(128);\n\t\tDataOutputViewStreamWrapper tmpKeySerializationDateDataOutputView = new DataOutputViewStreamWrapper(tmpKeySerializationStream);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationStream,\n\t\t\t\ttmpKeySerializationDateDataOutputView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationStream.toByteArray());\n\t}\n","date":"2018-03-29 23:35:39","endLine":149,"groupId":"40439","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/59979bdb2b31e7a007d4f4599bc1f3f739c9f1.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayOutputStreamWithPos tmpKeySerializationStream = new ByteArrayOutputStreamWithPos(128);\n\t\tDataOutputViewStreamWrapper tmpKeySerializationDateDataOutputView = new DataOutputViewStreamWrapper(tmpKeySerializationStream);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationStream,\n\t\t\t\ttmpKeySerializationDateDataOutputView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationStream.toByteArray());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"}],"commitId":"0bdde8377c254195fe94709d639bf03f9bd77606","commitMessage":"@@@[FLINK-9571] Repace StateBinder with internal backend-specific state factories\n\nThis closes #6173.\n","date":"2018-06-18 20:41:50","modifiedFileCount":"42","status":"M","submitter":"Andrey Zagrebin"},{"authorTime":"2018-08-11 02:06:58","codes":[{"authorDate":"2018-06-13 16:24:10","commitOrder":4,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2018-06-18 20:41:50","endLine":214,"groupId":"40439","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9d/00a6723ae0cb3e94f85be1497c9eac68832718.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"},{"authorDate":"2018-08-11 02:06:58","commitOrder":4,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayDataOutputView tmpKeySerializationView = new ByteArrayDataOutputView(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.toByteArray());\n\t}\n","date":"2018-08-11 02:07:56","endLine":155,"groupId":"46649","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/b7f1fa4a7887d4e9c9c72c841722348717d80d.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayOutputStreamWithPos tmpKeySerializationStream = new ByteArrayOutputStreamWithPos(128);\n\t\tDataOutputViewStreamWrapper tmpKeySerializationDateDataOutputView = new DataOutputViewStreamWrapper(tmpKeySerializationStream);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationStream,\n\t\t\t\ttmpKeySerializationDateDataOutputView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationStream.toByteArray());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"18ff4ab8e55d76522f835cc683f57252b3f742bc","commitMessage":"@@@[FLINK-10124][state] Use ByteArrayDataInput/OutputView instead of stream + wrapper\n","date":"2018-08-11 02:07:56","modifiedFileCount":"12","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-08-11 02:06:58","codes":[{"authorDate":"2018-08-19 20:39:34","commitOrder":5,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2018-08-22 19:33:05","endLine":215,"groupId":"48812","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/9da7dd810d0d71671385c8634b28a7f00156dd.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2018-08-11 02:06:58","commitOrder":5,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayDataOutputView tmpKeySerializationView = new ByteArrayDataOutputView(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.toByteArray());\n\t}\n","date":"2018-08-11 02:07:56","endLine":155,"groupId":"46649","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/b7f1fa4a7887d4e9c9c72c841722348717d80d.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayDataOutputView tmpKeySerializationView = new ByteArrayDataOutputView(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.toByteArray());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"2b6beedc1cfc7327cd8817a36064364e09e427cb","commitMessage":"@@@[FLINK-10175][state] Fix concurrent access to shared buffer between RocksDBMapState and querable state\n","date":"2018-08-22 19:33:05","modifiedFileCount":"1","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-08-22 19:31:49","codes":[{"authorDate":"2018-08-19 20:39:34","commitOrder":6,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2018-08-22 19:33:05","endLine":215,"groupId":"48812","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/9da7dd810d0d71671385c8634b28a7f00156dd.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"},{"authorDate":"2018-08-22 19:31:49","commitOrder":6,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tDataOutputSerializer tmpKeySerializationView = new DataOutputSerializer(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.getCopyOfBuffer());\n\t}\n","date":"2018-08-22 19:33:25","endLine":155,"groupId":"4018","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/8fbb23a9958d66bb8ef60e32a4158793d31541.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tByteArrayDataOutputView tmpKeySerializationView = new ByteArrayDataOutputView(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.toByteArray());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"3fd6587208a16940eab327ed37fa4e23d0b7eb62","commitMessage":"@@@[FLINK-10176][state] Replace ByteArrayData[Input|Output]View with (enhanced) Data[Output|InputDe]Serializer\n\nThis closes #6583.\n","date":"2018-08-22 19:33:25","modifiedFileCount":"20","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-11-27 13:51:29","codes":[{"authorDate":"2018-11-27 13:51:29","commitOrder":7,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyWithGroupAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2019-01-07 19:59:38","endLine":216,"groupId":"48812","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/cbdedb1d91e408907768ff3b1134c67562ef6a.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() throws IOException {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2018-11-27 13:51:29","commitOrder":7,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\tRocksDBSerializedCompositeKeyBuilder<K> keyBuilder =\n\t\t\t\t\t\tnew RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\t\t\t\tsafeKeySerializer,\n\t\t\t\t\t\t\tbackend.getKeyGroupPrefixBytes(),\n\t\t\t\t\t\t\t32\n\t\t\t\t\t\t);\n\t\tkeyBuilder.setKeyAndKeyGroup(keyAndNamespace.f0, keyGroup);\n\t\tbyte[] key = keyBuilder.buildCompositeKeyNamespace(keyAndNamespace.f1, namespaceSerializer);\n\t\treturn backend.db.get(columnFamily, key);\n\t}\n","date":"2019-01-07 19:59:38","endLine":144,"groupId":"48812","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/19a8a2816703cfc800de9ef8dc5768f463b362.src","preCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<V> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\t\r\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tint keyGroup = KeyGroupRangeAssignment.assignToKeyGroup(keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n\t\t\r\n\t\t\r\n\t\tDataOutputSerializer tmpKeySerializationView = new DataOutputSerializer(128);\n\n\t\twriteKeyWithGroupAndNamespace(\n\t\t\t\tkeyGroup,\n\t\t\t\tkeyAndNamespace.f0,\n\t\t\t\tsafeKeySerializer,\n\t\t\t\tkeyAndNamespace.f1,\n\t\t\t\tsafeNamespaceSerializer,\n\t\t\t\ttmpKeySerializationView);\n\n\t\treturn backend.db.get(columnFamily, tmpKeySerializationView.getCopyOfBuffer());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"54ef382439b1687a645a377a5f6a095746423109","commitMessage":"@@@[FLINK-9702] Improvement in (de)serialization of keys and values for RocksDB state\n\nThis closes #7288.\n\nCo-authored-by: Stefan Richter <s.richter@data-artisans.com>\nCo-authored-by: klion26 <qcx978132955@gmail.com>\n","date":"2019-01-07 19:59:38","modifiedFileCount":"10","status":"M","submitter":"Stefan Richter"},{"authorTime":"2021-01-28 21:41:53","codes":[{"authorDate":"2018-11-27 13:51:29","commitOrder":8,"curCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyWithGroupAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","date":"2019-01-07 19:59:38","endLine":216,"groupId":"1095","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"iterator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/cbdedb1d91e408907768ff3b1134c67562ef6a.src","preCode":"\tpublic Iterator<Map.Entry<UK, UV>> iterator() {\n\t\tfinal byte[] prefixBytes = serializeCurrentKeyWithGroupAndNamespace();\n\n\t\treturn new RocksDBMapIterator<Map.Entry<UK, UV>>(backend.db, prefixBytes, userKeySerializer, userValueSerializer, dataInputView) {\n\t\t\t@Override\n\t\t\tpublic Map.Entry<UK, UV> next() {\n\t\t\t\treturn nextEntry();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBMapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2021-01-28 21:41:53","commitOrder":8,"curCode":"    public byte[] getSerializedValue(\n            final byte[] serializedKeyAndNamespace,\n            final TypeSerializer<K> safeKeySerializer,\n            final TypeSerializer<N> safeNamespaceSerializer,\n            final TypeSerializer<V> safeValueSerializer)\n            throws Exception {\n\n        \r\n        \r\n        Tuple2<K, N> keyAndNamespace =\n                KvStateSerializer.deserializeKeyAndNamespace(\n                        serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n        int keyGroup =\n                KeyGroupRangeAssignment.assignToKeyGroup(\n                        keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n        SerializedCompositeKeyBuilder<K> keyBuilder =\n                new SerializedCompositeKeyBuilder<>(\n                        safeKeySerializer, backend.getKeyGroupPrefixBytes(), 32);\n        keyBuilder.setKeyAndKeyGroup(keyAndNamespace.f0, keyGroup);\n        byte[] key = keyBuilder.buildCompositeKeyNamespace(keyAndNamespace.f1, namespaceSerializer);\n        return backend.db.get(columnFamily, key);\n    }\n","date":"2021-02-06 01:38:46","endLine":148,"groupId":"1095","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<V>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4e/a9022f49a530fd8ed423c3fc9cf6dc8ae2f8c9.src","preCode":"    public byte[] getSerializedValue(\n            final byte[] serializedKeyAndNamespace,\n            final TypeSerializer<K> safeKeySerializer,\n            final TypeSerializer<N> safeNamespaceSerializer,\n            final TypeSerializer<V> safeValueSerializer)\n            throws Exception {\n\n        \r\n        \r\n        Tuple2<K, N> keyAndNamespace =\n                KvStateSerializer.deserializeKeyAndNamespace(\n                        serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n        int keyGroup =\n                KeyGroupRangeAssignment.assignToKeyGroup(\n                        keyAndNamespace.f0, backend.getNumberOfKeyGroups());\n\n        RocksDBSerializedCompositeKeyBuilder<K> keyBuilder =\n                new RocksDBSerializedCompositeKeyBuilder<>(\n                        safeKeySerializer, backend.getKeyGroupPrefixBytes(), 32);\n        keyBuilder.setKeyAndKeyGroup(keyAndNamespace.f0, keyGroup);\n        byte[] key = keyBuilder.buildCompositeKeyNamespace(keyAndNamespace.f1, namespaceSerializer);\n        return backend.db.get(columnFamily, key);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/AbstractRocksDBState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"a3436cb67866fddec45c9ac1bd760c24732ca32b","commitMessage":"@@@[refactor] Move RocksDBCompositeKeyBuilder to a common package\n","date":"2021-02-06 01:38:46","modifiedFileCount":"13","status":"M","submitter":"Dawid Wysakowicz"}]
