[{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:07:45","endLine":496,"groupId":"49996","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"B"},{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tprivate static <KEY, IN1, IN2, K, V, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:07:45","endLine":637,"groupId":"49996","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalTypeInformation<KEY>keyTypeInfo@finalKeySelector<IN1@KEY>keyKeySelector@finalKeyedBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/98d14b581262db3139945d97b3b0336fca2bf8.src","preCode":"\tprivate static <KEY, IN1, IN2, K, V, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"B"}],"commitId":"c6c17befe54d55755ebaf160ff20a11aa32bbbca","commitMessage":"@@@[FLINK-3659] Expose broadcast state on DataStream API.\n","date":"2018-02-07 21:07:45","modifiedFileCount":"5","status":"B","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:17:24","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":2,"curCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:07:45","endLine":496,"groupId":"49996","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"N"},{"authorDate":"2018-01-29 23:17:24","commitOrder":2,"curCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:08:16","endLine":733,"groupId":"49996","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalTypeInformation<KEY>keyTypeInfo@finalKeySelector<IN1@KEY>keyKeySelector@finalKeyedBroadcastProcessFunction<KEY@IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/a439f033adc6da95d7532c49f804bb6d782288.src","preCode":"\tprivate static <KEY, IN1, IN2, K, V, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"}],"commitId":"26918c953287c7940120dfcfcc10dd5a42beaf81","commitMessage":"@@@[FLINK-8345] Add iterator of keyed state on broadcast side of connected streams.\n","date":"2018-02-07 21:08:16","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:17:24","codes":[{"authorDate":"2018-01-29 23:23:04","commitOrder":3,"curCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState,\n\t\t\tfinal MapStateDescriptor<?, ?>... descriptors) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tArrays.asList(descriptors)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:08:52","endLine":574,"groupId":"23240","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState@finalMapStateDescriptor<?@?>...descriptors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/e1c3e390c54db3d03ff2ad1d9c744f499655d6.src","preCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2018-01-29 23:17:24","commitOrder":3,"curCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-07 21:08:16","endLine":733,"groupId":"49996","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalTypeInformation<KEY>keyTypeInfo@finalKeySelector<IN1@KEY>keyKeySelector@finalKeyedBroadcastProcessFunction<KEY@IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorStateHandlesinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/a439f033adc6da95d7532c49f804bb6d782288.src","preCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"N"}],"commitId":"28768235068039e4ff50c5235ab79c54410b4ec0","commitMessage":"@@@[FLINK-8446] Support multiple broadcast states.\n","date":"2018-02-07 21:08:52","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":4,"curCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorSubtaskState initState,\n\t\t\tfinal MapStateDescriptor<?, ?>... descriptors) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tArrays.asList(descriptors)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-25 22:10:28","endLine":574,"groupId":"23240","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorSubtaskStateinitState@finalMapStateDescriptor<?@?>...descriptors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/72e4549c69b771951f9368f1263f71649de17a.src","preCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState,\n\t\t\tfinal MapStateDescriptor<?, ?>... descriptors) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tArrays.asList(descriptors)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2018-02-23 17:36:09","commitOrder":4,"curCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorSubtaskState initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","date":"2018-02-25 22:10:28","endLine":733,"groupId":"49996","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getInitializedTestHarness","params":"(finalTypeInformation<KEY>keyTypeInfo@finalKeySelector<IN1@KEY>keyKeySelector@finalKeyedBroadcastProcessFunction<KEY@IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorSubtaskStateinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/607d404d26b083a0b19a1f2abdc18c1ffaf5a9.src","preCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorStateHandles initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2020-12-28 21:30:59","codes":[{"authorDate":"2020-12-28 21:30:59","commitOrder":5,"curCode":"            TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n                    final BroadcastProcessFunction<IN1, IN2, OUT> function,\n                    final int maxParallelism,\n                    final int numTasks,\n                    final int taskIdx,\n                    final OperatorSubtaskState initState,\n                    final MapStateDescriptor<?, ?>... descriptors)\n                    throws Exception {\n\n        TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness =\n                new TwoInputStreamOperatorTestHarness<>(\n                        new CoBroadcastWithNonKeyedOperator<>(\n                                Preconditions.checkNotNull(function), Arrays.asList(descriptors)),\n                        maxParallelism,\n                        numTasks,\n                        taskIdx);\n        testHarness.setup();\n        testHarness.initializeState(initState);\n        testHarness.open();\n\n        return testHarness;\n    }\n","date":"2020-12-28 21:35:13","endLine":600,"groupId":"103159","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"getInitializedTestHarness","params":"(finalBroadcastProcessFunction<IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorSubtaskStateinitState@finalMapStateDescriptor<?@?>...descriptors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/e80d11991bed4de1f48112b15dc5e049f03121.src","preCode":"\tprivate static <IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal BroadcastProcessFunction<IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorSubtaskState initState,\n\t\t\tfinal MapStateDescriptor<?, ?>... descriptors) throws Exception {\n\n\t\tTwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness = new TwoInputStreamOperatorTestHarness<>(\n\t\t\t\tnew CoBroadcastWithNonKeyedOperator<>(\n\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\tArrays.asList(descriptors)),\n\t\t\t\tmaxParallelism, numTasks, taskIdx\n\t\t);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"},{"authorDate":"2020-12-28 21:30:59","commitOrder":5,"curCode":"            TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n                    final TypeInformation<KEY> keyTypeInfo,\n                    final KeySelector<IN1, KEY> keyKeySelector,\n                    final KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n                    final int maxParallelism,\n                    final int numTasks,\n                    final int taskIdx,\n                    final OperatorSubtaskState initState)\n                    throws Exception {\n\n        final TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        new CoBroadcastWithKeyedOperator<>(\n                                Preconditions.checkNotNull(function),\n                                Collections.singletonList(STATE_DESCRIPTOR)),\n                        keyKeySelector,\n                        null,\n                        keyTypeInfo,\n                        maxParallelism,\n                        numTasks,\n                        taskIdx);\n\n        testHarness.setup();\n        testHarness.initializeState(initState);\n        testHarness.open();\n\n        return testHarness;\n    }\n","date":"2020-12-28 21:35:13","endLine":831,"groupId":"103159","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"getInitializedTestHarness","params":"(finalTypeInformation<KEY>keyTypeInfo@finalKeySelector<IN1@KEY>keyKeySelector@finalKeyedBroadcastProcessFunction<KEY@IN1@IN2@OUT>function@finalintmaxParallelism@finalintnumTasks@finalinttaskIdx@finalOperatorSubtaskStateinitState)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/80ca531b89f32fdc290739177e394ee5dad342.src","preCode":"\tprivate static <KEY, IN1, IN2, OUT> TwoInputStreamOperatorTestHarness<IN1, IN2, OUT> getInitializedTestHarness(\n\t\t\tfinal TypeInformation<KEY> keyTypeInfo,\n\t\t\tfinal KeySelector<IN1, KEY> keyKeySelector,\n\t\t\tfinal KeyedBroadcastProcessFunction<KEY, IN1, IN2, OUT> function,\n\t\t\tfinal int maxParallelism,\n\t\t\tfinal int numTasks,\n\t\t\tfinal int taskIdx,\n\t\t\tfinal OperatorSubtaskState initState) throws Exception {\n\n\t\tfinal TwoInputStreamOperatorTestHarness<IN1, IN2, OUT>  testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\tnew CoBroadcastWithKeyedOperator<>(\n\t\t\t\t\t\t\t\tPreconditions.checkNotNull(function),\n\t\t\t\t\t\t\t\tCollections.singletonList(STATE_DESCRIPTOR)),\n\t\t\t\t\t\tkeyKeySelector,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tkeyTypeInfo,\n\t\t\t\t\t\tmaxParallelism,\n\t\t\t\t\t\tnumTasks,\n\t\t\t\t\t\ttaskIdx\n\t\t\t\t);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(initState);\n\t\ttestHarness.open();\n\n\t\treturn testHarness;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":804,"status":"M"}],"commitId":"c6997c97c575d334679915c328792b8a3067cfb5","commitMessage":"@@@[FLINK-20651] Format code with Spotless/google-java-format\n","date":"2020-12-28 21:35:13","modifiedFileCount":"11013","status":"M","submitter":"Rufus Refactor"}]
