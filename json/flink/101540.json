[{"authorTime":"2019-12-19 20:15:41","codes":[{"authorDate":"2019-12-19 20:15:41","commitOrder":1,"curCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-12-19 20:15:41","endLine":124,"groupId":"29345","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyPlanDump","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/91e411e8af8c49753fcad164f5476b4115cb8d.src","preCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/PreviewPlanDumpTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2019-12-19 20:15:41","commitOrder":1,"curCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-12-19 20:15:41","endLine":120,"groupId":"29345","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyOptimizedPlan","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/31481fb0dee494dfc4d0f1d1d3fd1ca54a7067.src","preCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/DumpCompiledPlanTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"e7dab6f27323c98f3e117573ced6f4dec86f93ef","commitMessage":"@@@[FLINK-15312][tests] Remove PlanExposingEnvironment\n\n","date":"2019-12-19 20:15:41","modifiedFileCount":"6","status":"B","submitter":"tison"},{"authorTime":"2020-01-09 19:23:03","codes":[{"authorDate":"2020-01-09 19:23:03","commitOrder":2,"curCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-01-11 01:07:57","endLine":124,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyPlanDump","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/d4ab052ce0e123fa58fd9dabc1bd27854c421d.src","preCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/PreviewPlanDumpTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-01-09 19:23:03","commitOrder":2,"curCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-01-11 01:07:57","endLine":120,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyOptimizedPlan","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/eb02461a1fc1dfb48d1580b871666fbe19a8dc.src","preCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/DumpCompiledPlanTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"4bb4a50c4ed6c909dc98788bc239ba77340d6fb7","commitMessage":"@@@[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.\n","date":"2020-01-11 01:07:57","modifiedFileCount":"13","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2020-04-02 18:14:03","codes":[{"authorDate":"2020-04-02 18:14:03","commitOrder":3,"curCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, new Configuration(), 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-04-02 18:14:07","endLine":125,"groupId":"101540","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyPlanDump","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/b0a2f9ea7b510adecb96bcfd4765ca7601f01b.src","preCode":"\tprivate static void verifyPlanDump(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal List<DataSinkNode> sinks = Optimizer.createPreOptimizedPlan(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getPactPlanAsJSON(sinks);\n\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/PreviewPlanDumpTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2020-04-02 18:14:03","commitOrder":3,"curCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, new Configuration(), 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-04-02 18:14:07","endLine":121,"groupId":"101540","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyOptimizedPlan","params":"(Class<?>entrypoint@String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/0c148b47b344e7390c81ed2921f32ddd551d02.src","preCode":"\tprivate void verifyOptimizedPlan(Class<?> entrypoint, String... args) throws Exception {\n\t\tfinal PackagedProgram program = PackagedProgram\n\t\t\t.newBuilder()\n\t\t\t.setEntryPointClassName(entrypoint.getName())\n\t\t\t.setArguments(args)\n\t\t\t.build();\n\n\t\tfinal Pipeline pipeline = PackagedProgramUtils.getPipelineFromProgram(program, 1, true);\n\n\t\tassertTrue(pipeline instanceof Plan);\n\n\t\tfinal Plan plan = (Plan) pipeline;\n\n\t\tfinal OptimizedPlan op = compileNoStats(plan);\n\t\tfinal PlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tfinal String json = dumper.getOptimizerPlanAsJSON(op);\n\t\ttry (JsonParser parser = new JsonFactory().createParser(json)) {\n\t\t\twhile (parser.nextToken() != null) {\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/jsonplan/DumpCompiledPlanTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"89522f9fbf5974ba1acee0ec3cb7ee626d7a91c0","commitMessage":"@@@[FLINK-16944][tests] Fix compile errors\n","date":"2020-04-02 18:14:07","modifiedFileCount":"2","status":"M","submitter":"Chesnay Schepler"}]
