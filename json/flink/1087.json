[{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-02-23 03:16:41","commitOrder":1,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistry = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistry, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistry);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.operatorIdentifier,\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.numberOfTransferingThreads,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistry,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","date":"2019-02-23 03:16:41","endLine":352,"groupId":"49694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/a03a28649ff1f3d9a7d95bcedeabab5e8881df.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistry = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistry, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistry);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.operatorIdentifier,\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.numberOfTransferingThreads,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistry,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"},{"authorDate":"2019-02-23 03:16:41","commitOrder":1,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"B"}],"commitId":"3bf06b9dd3dc66dcfdeccaaa591ace41ea51e343","commitMessage":"@@@[FLINK-10043] [State Backends] Refactor RocksDBKeyedStateBackend object construction/initialization/restore code\n\nThis closes #7674.\n","date":"2019-02-23 03:16:41","modifiedFileCount":"36","status":"B","submitter":"Yu Li"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-03-01 11:52:14","commitOrder":2,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.operatorIdentifier,\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.numberOfTransferingThreads,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","date":"2019-03-05 03:27:50","endLine":354,"groupId":"49694","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/245d0aad0fa3240ad7acb2fdbee3b19947aa4b.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistry = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistry, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistry);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.operatorIdentifier,\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.numberOfTransferingThreads,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistry,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":2,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"eada52be5194a018a41e7ea51ea86e0273df2073","commitMessage":"@@@[FLINK-11804] [State Backends] Make sure the CloseableRegistry used in backend builder is registered with task\n\nWe need to make sure each stream constructed in restore could also be closed in case of task cancel. \nfor example the data input stream opened for serDe during restore.\n\nAlso removed close of CloseableRegistry in RocksDBKeyedStateBackendBuilder.\n","date":"2019-03-05 03:27:50","modifiedFileCount":"23","status":"M","submitter":"Yu Li"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-03-06 23:45:33","commitOrder":3,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","date":"2019-03-06 23:45:33","endLine":352,"groupId":"49694","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/6845e6925b3f6fd3472c199adb63117778a898.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.operatorIdentifier,\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.numberOfTransferingThreads,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":3,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"953a5ffcbdae4115f7d525f310723cf8770779df","commitMessage":"@@@[hotfix][statebackend] Reduce and simplify code for column creation in RocksDB backend\n\nThis closes #7830.","date":"2019-03-06 23:45:33","modifiedFileCount":"9","status":"M","submitter":"azagrebin"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-04-08 17:32:48","commitOrder":4,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","date":"2019-04-10 14:15:03","endLine":356,"groupId":"49694","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/5a7a00f97f42fd5dcd57f675147ae8404e9335.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.numberOfKeyGroups,\n\t\t\tthis.keyGroupRange,\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager\n\t\t);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":4,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"5dc8afd4c8bfea1b2aea0eb6f83ffce38bad3955","commitMessage":"@@@[FLINK-12121] [State Backends] Use composition instead of inheritance for InternalKeyContext in backends\n\nThis closes #8122.\n","date":"2019-04-10 14:15:03","modifiedFileCount":"21","status":"M","submitter":"Yu Li"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-04-10 17:32:19","commitOrder":5,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","date":"2019-04-11 12:45:21","endLine":356,"groupId":"49694","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/15c94318c7d5ebb616142db59daffb3a1ff88d.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider,\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":5,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"1132a52a58c3710a9a183111fda84cd1432605fa","commitMessage":"@@@[FLINK-12066] [State Backends] Remove StateSerializerProvider field in keyed state backend\n\nThis closes #8078.\n","date":"2019-04-11 12:45:21","modifiedFileCount":"5","status":"M","submitter":"Yu Li"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2019-11-24 16:20:09","commitOrder":6,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","date":"2019-12-11 21:01:21","endLine":359,"groupId":"53277","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/818acafa9ccb5f3ad51d83d1586d76b032f764.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = new WriteOptions().setDisableWAL(true);\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(dbOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.dbOptions,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":6,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"e05618b427f22cb73694658f5a21fb1767709efa","commitMessage":"@@@[FLINK-14926][state-backend-rocksdb] Ensure that RocksObjects are always closed on backend disposal\n\nThis also ensures that the newly introduces shared resources (shared cache and write buffers)\nare properly closed when the RocksDB state backend is disposed.\n\nThis closes #10300\n","date":"2019-12-11 21:01:21","modifiedFileCount":"10","status":"M","submitter":"Yu Li"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2020-01-10 15:40:54","commitOrder":7,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-01-10 15:40:54","endLine":368,"groupId":"53277","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/c438e29ee835957c87381547cbd6b3a00f10e6.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":7,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"6df2e0e6db6d58819fcec9a9dd1e9cf1c632af0a","commitMessage":"@@@[FLINK-12785][StateBackend] RocksDB savepoint recovery can use a lot of unmanaged memory\n\nAdd size based flush policy for RocksDBWriteBatchWrapper.  to prevent too much memory consumption during savepoint recovery.\n\nThis closes #10329.","date":"2020-01-10 15:40:54","modifiedFileCount":"11","status":"M","submitter":"Congxian Qiu"},{"authorTime":"2019-02-23 03:16:41","codes":[{"authorDate":"2020-05-25 12:57:51","commitOrder":8,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-05-26 16:47:21","endLine":362,"groupId":"53277","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/a0184a07317323d0336884ec3f11323dae68fc.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(enableTtlCompactionFilter, ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-02-23 03:16:41","commitOrder":8,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2019-02-23 03:16:41","endLine":414,"groupId":"43906","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/627b25e0a774350d4d978dc1ae6871cc6612e0.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"aa505a4220a4c1910bb447cb60f36ea2201bd9fb","commitMessage":"@@@[FLINK-15621][state][TTL] Remove deprecated option and method to disable TTL compaction filter\n\nThis closes #12307.\n","date":"2020-05-26 16:47:21","modifiedFileCount":"7","status":"M","submitter":"Jiayi Liao"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-05 01:16:27","commitOrder":9,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-16 16:31:11","endLine":373,"groupId":"0","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/bdbb81b1ed4c68f8393627ec9438fee1863c82.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":9,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-16 16:31:11","endLine":405,"groupId":"43906","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"}],"commitId":"8ca388ca0225ff22f532c8a65f97d8cfea027c22","commitMessage":"@@@[FLINK-17800][roksdb] Ensure total order seek to avoid user misuse\n","date":"2020-06-16 16:31:11","modifiedFileCount":"15","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-16 14:01:29","commitOrder":10,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, optionsContainer.getWriteOptions(), writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-16 16:31:11","endLine":361,"groupId":"49933","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/46bde1ad6009b212aa151d08961dcaa1914e23.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":10,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-16 16:31:11","endLine":405,"groupId":"43906","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"f1250625b2ade530fa2619d6e1bb734832748d31","commitMessage":"@@@[FLINK-17800][roksdb] Support customized RocksDB write/read options and use RocksDBResourceContainer to get them\n","date":"2020-06-16 16:31:11","modifiedFileCount":"5","status":"M","submitter":"Yu Li"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-17 16:13:19","commitOrder":11,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-17 20:33:00","endLine":373,"groupId":"0","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/bdbb81b1ed4c68f8393627ec9438fee1863c82.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, optionsContainer.getWriteOptions(), writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":11,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-16 16:31:11","endLine":405,"groupId":"43906","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"59486908060cbb04c9b34d800a935758d06d1c69","commitMessage":"@@@Revert \"[FLINK-17800][roksdb] Support customized RocksDB write/read options and use RocksDBResourceContainer to get them\"\n\nThis reverts commit f1250625b2ade530fa2619d6e1bb734832748d31.\n","date":"2020-06-17 20:33:00","modifiedFileCount":"5","status":"M","submitter":"Robert Metzger"},{"authorTime":"2020-06-17 16:13:30","codes":[{"authorDate":"2020-06-17 16:13:30","commitOrder":12,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-17 20:33:00","endLine":362,"groupId":"53277","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/a0184a07317323d0336884ec3f11323dae68fc.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2020-06-17 16:13:30","commitOrder":12,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","date":"2020-06-17 20:33:00","endLine":400,"groupId":"43906","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/abed6718f9f0015c41be536691d2f7b3275798.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"f6f51d8767990cee7f1ca052b040530b646c3efe","commitMessage":"@@@Revert \"[FLINK-17800][roksdb] Ensure total order seek to avoid user misuse\"\n\nThis reverts commit 8ca388ca0225ff22f532c8a65f97d8cfea027c22.\n","date":"2020-06-17 20:33:00","modifiedFileCount":"15","status":"M","submitter":"Robert Metzger"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-05 01:16:27","commitOrder":13,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-26 22:24:49","endLine":373,"groupId":"0","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/bdbb81b1ed4c68f8393627ec9438fee1863c82.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(keyGroupPrefixBytes, kvStateInformation, db,\n\t\t\t\twriteBatchWrapper, nativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":13,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"}],"commitId":"3516e37ae0aa4ee040b6844f336541315a455ce9","commitMessage":"@@@[FLINK-17800][rocksdb] Ensure total order seek to avoid user misuse\n","date":"2020-06-26 22:24:49","modifiedFileCount":"15","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-06-16 14:01:29","commitOrder":14,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, optionsContainer.getWriteOptions(), writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-06-26 22:27:56","endLine":361,"groupId":"49933","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/46bde1ad6009b212aa151d08961dcaa1914e23.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\t\r\n\t\tWriteOptions writeOptions = null;\n\t\tReadOptions readOptions = null;\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteOptions = new WriteOptions().setDisableWAL(true);\n\t\t\treadOptions = RocksDBOperationUtils.createTotalOrderSeekReadOptions();\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, writeOptions, writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\treadOptions,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t\tIOUtils.closeQuietly(writeOptions);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\twriteOptions,\n\t\t\treadOptions,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":14,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"1718f50645ddc01d5e2e13cc5627bafe98191fa2","commitMessage":"@@@[FLINK-17800][rocksdb] Support customized RocksDB write/read options and use RocksDBResourceContainer to get them\n","date":"2020-06-26 22:27:56","modifiedFileCount":"5","status":"M","submitter":"Yu Li"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-12-16 01:30:23","commitOrder":15,"curCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, optionsContainer.getWriteOptions(), writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlogger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tlogger.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\tlogger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","date":"2020-12-17 21:15:16","endLine":358,"groupId":"49933","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/442482aa7f6a6c266688851c88111354deda13.src","preCode":"\tpublic RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n\t\tRocksDBWriteBatchWrapper writeBatchWrapper = null;\n\t\tColumnFamilyHandle defaultColumnFamilyHandle = null;\n\t\tRocksDBNativeMetricMonitor nativeMetricMonitor = null;\n\t\tCloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n\t\tLinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation = new LinkedHashMap<>();\n\t\tRocksDB db = null;\n\t\tAbstractRocksDBRestoreOperation restoreOperation = null;\n\t\tRocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n\t\t\tnew RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n\t\tResourceGuard rocksDBResourceGuard = new ResourceGuard();\n\t\tSnapshotStrategy<K> snapshotStrategy;\n\t\tPriorityQueueSetFactory priorityQueueFactory;\n\t\tRocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n\t\t\r\n\t\tint keyGroupPrefixBytes = RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(numberOfKeyGroups);\n\t\ttry {\n\t\t\t\r\n\t\t\tUUID backendUID = UUID.randomUUID();\n\t\t\tSortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n\t\t\tlong lastCompletedCheckpointId = -1L;\n\t\t\tif (injectedTestDB != null) {\n\t\t\t\tdb = injectedTestDB;\n\t\t\t\tdefaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n\t\t\t\tnativeMetricMonitor = nativeMetricOptions.isEnabled() ?\n\t\t\t\t\tnew RocksDBNativeMetricMonitor(nativeMetricOptions, metricGroup, db) : null;\n\t\t\t} else {\n\t\t\t\tprepareDirectories();\n\t\t\t\trestoreOperation = getRocksDBRestoreOperation(\n\t\t\t\t\tkeyGroupPrefixBytes, cancelStreamRegistry, kvStateInformation, ttlCompactFiltersManager);\n\t\t\t\tRocksDBRestoreResult restoreResult = restoreOperation.restore();\n\t\t\t\tdb = restoreResult.getDb();\n\t\t\t\tdefaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n\t\t\t\tnativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n\t\t\t\tif (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n\t\t\t\t\tbackendUID = restoreResult.getBackendUID();\n\t\t\t\t\tmaterializedSstFiles = restoreResult.getRestoredSstFiles();\n\t\t\t\t\tlastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriteBatchWrapper = new RocksDBWriteBatchWrapper(db, optionsContainer.getWriteOptions(), writeBatchSize);\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsharedRocksKeyBuilder = new RocksDBSerializedCompositeKeyBuilder<>(\n\t\t\t\tkeySerializerProvider.currentSchemaSerializer(),\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\t32);\n\t\t\t\r\n\t\t\tsnapshotStrategy = initializeSavepointAndCheckpointStrategies(cancelStreamRegistryForBackend, rocksDBResourceGuard,\n\t\t\t\tkvStateInformation, keyGroupPrefixBytes, db, backendUID, materializedSstFiles, lastCompletedCheckpointId);\n\t\t\t\r\n\t\t\tpriorityQueueFactory = initPriorityQueueFactory(\n\t\t\t\tkeyGroupPrefixBytes,\n\t\t\t\tkvStateInformation,\n\t\t\t\tdb,\n\t\t\t\twriteBatchWrapper,\n\t\t\t\tnativeMetricMonitor);\n\t\t} catch (Throwable e) {\n\t\t\t\r\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(kvStateInformation.values().size());\n\t\t\tIOUtils.closeQuietly(cancelStreamRegistryForBackend);\n\t\t\tIOUtils.closeQuietly(writeBatchWrapper);\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(nativeMetricMonitor);\n\t\t\tfor (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo : kvStateInformation.values()) {\n\t\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n\t\t\t\tIOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\t\r\n\t\t\tIOUtils.closeQuietly(restoreOperation);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(optionsContainer);\n\t\t\tttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n\t\t\tkvStateInformation.clear();\n\t\t\ttry {\n\t\t\t\tFileUtils.deleteDirectory(instanceBasePath);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tLOG.warn(\"Failed to instance base path for RocksDB: \" + instanceBasePath, ex);\n\t\t\t}\n\t\t\t\r\n\t\t\tif (e instanceof BackendBuildingException) {\n\t\t\t\tthrow (BackendBuildingException) e;\n\t\t\t} else {\n\t\t\t\tString errMsg = \"Caught unexpected exception.\";\n\t\t\t\tLOG.error(errMsg, e);\n\t\t\t\tthrow new BackendBuildingException(errMsg, e);\n\t\t\t}\n\t\t}\n\t\tInternalKeyContext<K> keyContext = new InternalKeyContextImpl<>(\n\t\t\tkeyGroupRange,\n\t\t\tnumberOfKeyGroups\n\t\t);\n\t\treturn new RocksDBKeyedStateBackend<>(\n\t\t\tthis.userCodeClassLoader,\n\t\t\tthis.instanceBasePath,\n\t\t\tthis.optionsContainer,\n\t\t\tcolumnFamilyOptionsFactory,\n\t\t\tthis.kvStateRegistry,\n\t\t\tthis.keySerializerProvider.currentSchemaSerializer(),\n\t\t\tthis.executionConfig,\n\t\t\tthis.ttlTimeProvider,\n\t\t\tdb,\n\t\t\tkvStateInformation,\n\t\t\tkeyGroupPrefixBytes,\n\t\t\tcancelStreamRegistryForBackend,\n\t\t\tthis.keyGroupCompressionDecorator,\n\t\t\trocksDBResourceGuard,\n\t\t\tsnapshotStrategy.checkpointSnapshotStrategy,\n\t\t\tsnapshotStrategy.savepointSnapshotStrategy,\n\t\t\twriteBatchWrapper,\n\t\t\tdefaultColumnFamilyHandle,\n\t\t\tnativeMetricMonitor,\n\t\t\tsharedRocksKeyBuilder,\n\t\t\tpriorityQueueFactory,\n\t\t\tttlCompactFiltersManager,\n\t\t\tkeyContext,\n\t\t\twriteBatchSize);\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":15,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"f4a0f78ac153efa5995028f90df2438ddd65a79b","commitMessage":"@@@[FLINK-19013][state-backends] Add start/end logs for state restoration\n","date":"2020-12-17 21:15:16","modifiedFileCount":"7","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-01-28 21:41:53","commitOrder":16,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        AbstractRocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-02-06 01:38:46","endLine":394,"groupId":"49933","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/6426cf5a2551252259958a1548e89f6587842b.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        AbstractRocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        RocksDBSerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                RocksDBKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new RocksDBSerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":16,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"a3436cb67866fddec45c9ac1bd760c24732ca32b","commitMessage":"@@@[refactor] Move RocksDBCompositeKeyBuilder to a common package\n","date":"2021-02-06 01:38:46","modifiedFileCount":"13","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-02-08 23:32:25","commitOrder":17,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-02-25 00:19:05","endLine":394,"groupId":"49933","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ce/90d0551ace109c85752e72f74758514797e608.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        AbstractRocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":17,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"3ed5c1a26f53b9481d5616669c91c0f272bdc949","commitMessage":"@@@[refactor] Remove AbstractRocksDBRestoreOperation\n\nSo far both the RocksFullSnapshotRestoreOperation and\nRocksIncrementalRestoreOperation extended from\nAbstractRocksDBRestoreOperation in order to share some functions.\nHowever it required e.g. unnecessary parameters to be passed just to\nfulfill the requirements of the base class. Moreover a base class makes\nit harder to extend classes independently.\n\nThis commit changes sharing the common code to use composition instead\nof inheritance.\n","date":"2021-02-25 00:19:05","modifiedFileCount":"5","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-02-09 00:09:19","commitOrder":18,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-02-25 00:19:05","endLine":403,"groupId":"29806","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/2a185fedcae6993941002b033f8c35e84a5412.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":18,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"a9fef44654b0c154af573f5c27398e27d3351cf9","commitMessage":"@@@[FLINK-21344] Handle heap timers in Rocks state\n\nWe serialize the heap timers into the same format as if they were\nactually stored in RocksDB instead of storing them in a raw operator\nstate. It lets users change between using heap and RocksDB timers.\n","date":"2021-02-25 00:19:05","modifiedFileCount":"14","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-01-27 23:58:16","commitOrder":19,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        RocksDBSnapshotStrategyBase<K, ?> checkpointStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            checkpointStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                checkpointStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-03-01 17:27:55","endLine":403,"groupId":"29806","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/db141f8ca6289ac7deb73f73d686032b87ee3c.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        SnapshotStrategy<K> snapshotStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            snapshotStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                snapshotStrategy.checkpointSnapshotStrategy,\n                snapshotStrategy.savepointSnapshotStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":19,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"7f092358799100a0df5258a660736688a6302932","commitMessage":"@@@[FLINK-21505] Enforce common/unified savepoint format at the operator level\n\nBefore.  we were relying on the fact that all keyed backends would use\nthe same strategy for savepoints.\n\nNow.  we're forcing them at the API level to provide a SavepointResources\nthat we can then use to create a unified savepoint using\nSavepointSnapshotStrategy.\n\nThis closes #14982\n","date":"2021-03-01 17:27:55","modifiedFileCount":"11","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-03-09 00:44:40","commitOrder":20,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        RocksDBSnapshotStrategyBase<K, ?> checkpointStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            checkpointStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                latencyTrackingStateConfig,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                checkpointStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-04-01 14:16:24","endLine":409,"groupId":"29806","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/b0be01ef94dae6d345f2a87d794ae3f4cf3e6d.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        RocksDBSnapshotStrategyBase<K, ?> checkpointStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            checkpointStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                checkpointStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":20,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"43906","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"a402eaec1f71288651a24cf40f08b3f54924a63d","commitMessage":"@@@[FLINK-16444][state] Introduce latency tracking state config and basic classes\n","date":"2021-04-01 14:16:24","modifiedFileCount":"24","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2021-06-11 17:20:48","commitOrder":21,"curCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        RocksDBSnapshotStrategyBase<K, ?> checkpointStrategy = null;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            checkpointStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            IOUtils.closeQuietly(checkpointStrategy);\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                latencyTrackingStateConfig,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                checkpointStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","date":"2021-06-17 14:49:55","endLine":410,"groupId":"1087","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/6677d219c59bfb3e783617a8bfe21f55ed8895.src","preCode":"    public RocksDBKeyedStateBackend<K> build() throws BackendBuildingException {\n        RocksDBWriteBatchWrapper writeBatchWrapper = null;\n        ColumnFamilyHandle defaultColumnFamilyHandle = null;\n        RocksDBNativeMetricMonitor nativeMetricMonitor = null;\n        CloseableRegistry cancelStreamRegistryForBackend = new CloseableRegistry();\n        LinkedHashMap<String, RocksDBKeyedStateBackend.RocksDbKvStateInfo> kvStateInformation =\n                new LinkedHashMap<>();\n        LinkedHashMap<String, HeapPriorityQueueSnapshotRestoreWrapper<?>> registeredPQStates =\n                new LinkedHashMap<>();\n        RocksDB db = null;\n        RocksDBRestoreOperation restoreOperation = null;\n        RocksDbTtlCompactFiltersManager ttlCompactFiltersManager =\n                new RocksDbTtlCompactFiltersManager(ttlTimeProvider);\n\n        ResourceGuard rocksDBResourceGuard = new ResourceGuard();\n        RocksDBSnapshotStrategyBase<K, ?> checkpointStrategy;\n        PriorityQueueSetFactory priorityQueueFactory;\n        SerializedCompositeKeyBuilder<K> sharedRocksKeyBuilder;\n        \r\n        int keyGroupPrefixBytes =\n                CompositeKeySerializationUtils.computeRequiredBytesInKeyGroupPrefix(\n                        numberOfKeyGroups);\n\n        try {\n            \r\n            UUID backendUID = UUID.randomUUID();\n            SortedMap<Long, Set<StateHandleID>> materializedSstFiles = new TreeMap<>();\n            long lastCompletedCheckpointId = -1L;\n            if (injectedTestDB != null) {\n                db = injectedTestDB;\n                defaultColumnFamilyHandle = injectedDefaultColumnFamilyHandle;\n                nativeMetricMonitor =\n                        nativeMetricOptions.isEnabled()\n                                ? new RocksDBNativeMetricMonitor(\n                                        nativeMetricOptions, metricGroup, db)\n                                : null;\n            } else {\n                prepareDirectories();\n                restoreOperation =\n                        getRocksDBRestoreOperation(\n                                keyGroupPrefixBytes,\n                                cancelStreamRegistry,\n                                kvStateInformation,\n                                registeredPQStates,\n                                ttlCompactFiltersManager);\n                RocksDBRestoreResult restoreResult = restoreOperation.restore();\n                db = restoreResult.getDb();\n                defaultColumnFamilyHandle = restoreResult.getDefaultColumnFamilyHandle();\n                nativeMetricMonitor = restoreResult.getNativeMetricMonitor();\n                if (restoreOperation instanceof RocksDBIncrementalRestoreOperation) {\n                    backendUID = restoreResult.getBackendUID();\n                    materializedSstFiles = restoreResult.getRestoredSstFiles();\n                    lastCompletedCheckpointId = restoreResult.getLastCompletedCheckpointId();\n                }\n            }\n\n            writeBatchWrapper =\n                    new RocksDBWriteBatchWrapper(\n                            db, optionsContainer.getWriteOptions(), writeBatchSize);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            sharedRocksKeyBuilder =\n                    new SerializedCompositeKeyBuilder<>(\n                            keySerializerProvider.currentSchemaSerializer(),\n                            keyGroupPrefixBytes,\n                            32);\n            \r\n            checkpointStrategy =\n                    initializeSavepointAndCheckpointStrategies(\n                            cancelStreamRegistryForBackend,\n                            rocksDBResourceGuard,\n                            kvStateInformation,\n                            registeredPQStates,\n                            keyGroupPrefixBytes,\n                            db,\n                            backendUID,\n                            materializedSstFiles,\n                            lastCompletedCheckpointId);\n            \r\n            priorityQueueFactory =\n                    initPriorityQueueFactory(\n                            keyGroupPrefixBytes,\n                            kvStateInformation,\n                            db,\n                            writeBatchWrapper,\n                            nativeMetricMonitor);\n        } catch (Throwable e) {\n            \r\n            List<ColumnFamilyOptions> columnFamilyOptions =\n                    new ArrayList<>(kvStateInformation.values().size());\n            IOUtils.closeQuietly(cancelStreamRegistryForBackend);\n            IOUtils.closeQuietly(writeBatchWrapper);\n            RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                    columnFamilyOptions, defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(defaultColumnFamilyHandle);\n            IOUtils.closeQuietly(nativeMetricMonitor);\n            for (RocksDBKeyedStateBackend.RocksDbKvStateInfo kvStateInfo :\n                    kvStateInformation.values()) {\n                RocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(\n                        columnFamilyOptions, kvStateInfo.columnFamilyHandle);\n                IOUtils.closeQuietly(kvStateInfo.columnFamilyHandle);\n            }\n            IOUtils.closeQuietly(db);\n            \r\n            IOUtils.closeQuietly(restoreOperation);\n            IOUtils.closeAllQuietly(columnFamilyOptions);\n            IOUtils.closeQuietly(optionsContainer);\n            ttlCompactFiltersManager.disposeAndClearRegisteredCompactionFactories();\n            kvStateInformation.clear();\n            try {\n                FileUtils.deleteDirectory(instanceBasePath);\n            } catch (Exception ex) {\n                logger.warn(\"Failed to delete base path for RocksDB: \" + instanceBasePath, ex);\n            }\n            \r\n            if (e instanceof BackendBuildingException) {\n                throw (BackendBuildingException) e;\n            } else {\n                String errMsg = \"Caught unexpected exception.\";\n                logger.error(errMsg, e);\n                throw new BackendBuildingException(errMsg, e);\n            }\n        }\n        InternalKeyContext<K> keyContext =\n                new InternalKeyContextImpl<>(keyGroupRange, numberOfKeyGroups);\n        logger.info(\"Finished building RocksDB keyed state-backend at {}.\", instanceBasePath);\n        return new RocksDBKeyedStateBackend<>(\n                this.userCodeClassLoader,\n                this.instanceBasePath,\n                this.optionsContainer,\n                columnFamilyOptionsFactory,\n                this.kvStateRegistry,\n                this.keySerializerProvider.currentSchemaSerializer(),\n                this.executionConfig,\n                this.ttlTimeProvider,\n                latencyTrackingStateConfig,\n                db,\n                kvStateInformation,\n                registeredPQStates,\n                keyGroupPrefixBytes,\n                cancelStreamRegistryForBackend,\n                this.keyGroupCompressionDecorator,\n                rocksDBResourceGuard,\n                checkpointStrategy,\n                writeBatchWrapper,\n                defaultColumnFamilyHandle,\n                nativeMetricMonitor,\n                sharedRocksKeyBuilder,\n                priorityQueueFactory,\n                ttlCompactFiltersManager,\n                keyContext,\n                writeBatchSize);\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackendBuilder.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-06-05 01:16:27","commitOrder":21,"curCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","date":"2020-06-26 22:24:49","endLine":405,"groupId":"1087","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/c75373663a7907ab32890bce3551d338a6083f.src","preCode":"\t\tpublic void close() {\n\t\t\tList<ColumnFamilyOptions> columnFamilyOptions = new ArrayList<>(columnFamilyDescriptors.size() + 1);\n\t\t\tcolumnFamilyDescriptors.forEach((cfd) -> columnFamilyOptions.add(cfd.getOptions()));\n\t\t\tRocksDBOperationUtils.addColumnFamilyOptionsToCloseLater(columnFamilyOptions, defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeQuietly(defaultColumnFamilyHandle);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyHandles);\n\t\t\tIOUtils.closeQuietly(db);\n\t\t\tIOUtils.closeAllQuietly(columnFamilyOptions);\n\t\t\tIOUtils.closeQuietly(readOptions);\n\t\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/restore/RocksDBIncrementalRestoreOperation.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"8be1058a60565587b465a2237136dbbbb4c168f3","commitMessage":"@@@[FLINK-23003][runtime] Fix resource leak in RocksIncrementalSnapshotStrategy\n","date":"2021-06-17 14:49:55","modifiedFileCount":"5","status":"M","submitter":"leiyanfei"}]
