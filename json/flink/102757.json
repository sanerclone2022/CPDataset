[{"authorTime":"2016-11-24 15:14:48","codes":[{"authorDate":"2017-01-25 03:08:28","commitOrder":2,"curCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-01-26 02:56:23","endLine":485,"groupId":"40935","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b6/c161827d651314b7d982e39f8b386101ee23ad.src","preCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"B"},{"authorDate":"2016-11-24 15:14:48","commitOrder":2,"curCode":"\tpublic void testReduceEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.reduce(new DummyReducer());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-01-11 17:35:47","endLine":249,"groupId":"40935","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceEventTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/2d2752b38ba44fb215925483fa73128f7d731f.src","preCode":"\tpublic void testReduceEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.reduce(new DummyReducer());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"NB"}],"commitId":"1542260d52238e87de4fa040e6079465777e8263","commitMessage":"@@@[FLINK-5630] [streaming api] Followups to the AggregateFunction\n\n  - Add a RichAggregateFunction\n  - Document generic type parameters\n  - Allowing different input/output types for the cases where an additional window apply function is specified\n  - Adding the aggregate() methods to the Scala API\n  - Adding the window translation tests\n","date":"2017-01-26 02:56:23","modifiedFileCount":"7","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =\n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":525,"groupId":"102757","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/f1ccd82d9ad6943385f4b4bf602aa8f657cacd.src","preCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =\n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testReduceEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.reduce(new DummyReducer());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":244,"groupId":"102757","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceEventTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/871406ac51fcb92088b16ceba657da0961f6c8.src","preCode":"\tpublic void testReduceEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.reduce(new DummyReducer());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = (WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ReducingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
