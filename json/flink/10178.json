[{"authorTime":"2016-04-19 00:34:55","codes":[{"authorDate":"2016-04-18 23:41:47","commitOrder":2,"curCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class),\n\t\t\tMatchers.any(java.util.List.class),\n\t\t\tMatchers.any(java.util.List.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String)invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer)invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration)invocation.getArguments()[2]);\n\t\t\t\ttestPlanExecutor.setJars((List<String>)invocation.getArguments()[3]);\n\t\t\t\ttestPlanExecutor.setGlobalClasspaths((List<String>)invocation.getArguments()[4]);\n\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2016-04-25 21:30:30","endLine":93,"groupId":"31321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConfigurationForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a3/c272f22af6c7c36a50e43cbb8ca38eb68f63e5.src","preCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class),\n\t\t\tMatchers.any(java.util.List.class),\n\t\t\tMatchers.any(java.util.List.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String)invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer)invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration)invocation.getArguments()[2]);\n\t\t\t\ttestPlanExecutor.setJars((List<String>)invocation.getArguments()[3]);\n\t\t\t\ttestPlanExecutor.setGlobalClasspaths((List<String>)invocation.getArguments()[4]);\n\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting)settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"},{"authorDate":"2016-04-19 00:34:55","commitOrder":2,"curCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof RemoteStreamEnvironment);\n\n\t\tRemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2016-04-25 23:50:32","endLine":114,"groupId":"31324","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationForwardingStreamEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/91/9f80592c7f06763fe35553596b185e6b5e1661.src","preCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof RemoteStreamEnvironment);\n\n\t\tRemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"7498d3e35a29449270a88a30eb32b7de74887f5b","commitMessage":"@@@[FLINK-3778] [shell] Forward configuration from FlinkILoop to ScalaShellRemoteStreamEnvironment\n\nWith this PR the configuration of the FlinkILoop is properly forwarded to the\nScalaShellRemoteStreamEnvironment.\n\nThis closes #1906.\n","date":"2016-04-25 23:50:32","modifiedFileCount":"3","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2016-04-19 00:34:55","codes":[{"authorDate":"2019-09-24 19:34:38","commitOrder":3,"curCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String) invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer) invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]);\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2019-10-16 20:06:02","endLine":98,"groupId":"14518","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConfigurationForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/bc2a0aa28934f88edcd5364649f965026faf05.src","preCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class),\n\t\t\tMatchers.any(java.util.List.class),\n\t\t\tMatchers.any(java.util.List.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String) invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer) invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]);\n\t\t\t\ttestPlanExecutor.setJars((List<String>) invocation.getArguments()[3]);\n\t\t\t\ttestPlanExecutor.setGlobalClasspaths((List<String>) invocation.getArguments()[4]);\n\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2016-04-19 00:34:55","commitOrder":3,"curCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof RemoteStreamEnvironment);\n\n\t\tRemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2016-04-25 23:50:32","endLine":114,"groupId":"31324","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationForwardingStreamEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/91/9f80592c7f06763fe35553596b185e6b5e1661.src","preCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof RemoteStreamEnvironment);\n\n\t\tRemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"eafdb64e40b30ca120e318a62be21107657b5573","commitMessage":"@@@[FLINK-14290] Move jars and classpath out of executors and add to execute() method\n\nBefore.  the executors were potentially storing the jar and classpath\ninternally while the jars and classpaths are really a property of the\npipeline that should be executed. This change reflects that.\n","date":"2019-10-16 20:06:02","modifiedFileCount":"11","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2019-11-27 17:51:34","codes":[{"authorDate":"2019-09-24 19:34:38","commitOrder":4,"curCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String) invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer) invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]);\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2019-10-16 20:06:02","endLine":98,"groupId":"14518","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConfigurationForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/bc2a0aa28934f88edcd5364649f965026faf05.src","preCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String) invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer) invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]);\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-11-27 17:51:34","commitOrder":4,"curCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof ScalaShellRemoteStreamEnvironment);\n\n\t\tScalaShellRemoteStreamEnvironment remoteStreamEnv = (ScalaShellRemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2019-12-03 18:30:58","endLine":115,"groupId":"31324","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationForwardingStreamEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/ae44a34569b0d1ce71d25cb9a464bbc16afa80.src","preCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof RemoteStreamEnvironment);\n\n\t\tRemoteStreamEnvironment remoteStreamEnv = (RemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"814a9fab421acda9ac5938ff86e09d6c39f7a5f5","commitMessage":"@@@[hotfix] Decouple ScalaShellRemoteStreamEnvironment from RemoteStreamEnvironment\n","date":"2019-12-03 18:30:58","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-12-05 21:46:11","codes":[{"authorDate":"2019-12-05 21:46:11","commitOrder":5,"curCode":"\tpublic void testConfigurationForwarding() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tconfiguration.setString(JobManagerOptions.ADDRESS, \"localhost\");\n\t\tconfiguration.setInteger(JobManagerOptions.PORT, 6123);\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(configuration, Option.<String[]>empty());\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\t\tassertTrue(env instanceof ScalaShellEnvironment);\n\n\t\tConfiguration forwardedConfiguration = env.getConfiguration();\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2019-12-07 23:16:53","endLine":53,"groupId":"10178","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConfigurationForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/827e9ca87f404cbf50ad6c52555b780c7fce49.src","preCode":"\tpublic void testConfigurationForwarding() throws Exception {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tfinal TestPlanExecutor testPlanExecutor = new TestPlanExecutor();\n\n\t\tPowerMockito.mockStatic(PlanExecutor.class);\n\t\tBDDMockito.given(PlanExecutor.createRemoteExecutor(\n\t\t\tMatchers.anyString(),\n\t\t\tMatchers.anyInt(),\n\t\t\tMatchers.any(Configuration.class)\n\t\t)).willAnswer(new Answer<PlanExecutor>() {\n\t\t\t@Override\n\t\t\tpublic PlanExecutor answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\ttestPlanExecutor.setHost((String) invocation.getArguments()[0]);\n\t\t\t\ttestPlanExecutor.setPort((Integer) invocation.getArguments()[1]);\n\t\t\t\ttestPlanExecutor.setConfiguration((Configuration) invocation.getArguments()[2]);\n\t\t\t\treturn testPlanExecutor;\n\t\t\t}\n\t\t});\n\n\t\tSettings settings = new Settings();\n\t\t((MutableSettings.BooleanSetting) settings.usejavacp()).value_$eq(true);\n\n\t\tflinkILoop.settings_$eq(settings);\n\t\tflinkILoop.createInterpreter();\n\n\t\tExecutionEnvironment env = flinkILoop.scalaBenv().getJavaEnv();\n\n\t\tenv.fromElements(1).output(new DiscardingOutputFormat<Integer>());\n\n\t\tenv.execute(\"Test job\");\n\n\t\tConfiguration forwardedConfiguration = testPlanExecutor.getConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-12-05 21:46:11","commitOrder":5,"curCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\t\tconfiguration.setString(JobManagerOptions.ADDRESS, \"localhost\");\n\t\tconfiguration.setInteger(JobManagerOptions.PORT, 6123);\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\t\tassertTrue(streamEnv instanceof ScalaShellStreamEnvironment);\n\n\t\tScalaShellStreamEnvironment remoteStreamEnv = (ScalaShellStreamEnvironment) streamEnv;\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","date":"2019-12-07 23:16:53","endLine":70,"groupId":"10178","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationForwardingStreamEnvironment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/827e9ca87f404cbf50ad6c52555b780c7fce49.src","preCode":"\tpublic void testConfigurationForwardingStreamEnvironment() {\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(\"foobar\", \"foobar\");\n\n\t\tFlinkILoop flinkILoop = new FlinkILoop(\"localhost\", 6123, configuration, Option.<String[]>empty());\n\n\t\tStreamExecutionEnvironment streamEnv = flinkILoop.scalaSenv().getJavaEnv();\n\n\t\tassertTrue(streamEnv instanceof ScalaShellRemoteStreamEnvironment);\n\n\t\tScalaShellRemoteStreamEnvironment remoteStreamEnv = (ScalaShellRemoteStreamEnvironment) streamEnv;\n\n\t\tConfiguration forwardedConfiguration = remoteStreamEnv.getClientConfiguration();\n\n\t\tassertEquals(configuration, forwardedConfiguration);\n\t}\n","realPath":"flink-scala-shell/src/test/java/org/apache/flink/api/java/FlinkILoopTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"585f5d47852f2e6deec7242462f98139d6a1f51d","commitMessage":"@@@[FLINK-15118] Make flink-scala-shell use Executors\n","date":"2019-12-07 23:16:53","modifiedFileCount":"1","status":"M","submitter":"Kostas Kloudas"}]
