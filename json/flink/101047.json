[{"authorTime":"2020-06-11 14:43:29","codes":[{"authorDate":"2020-05-09 11:25:24","commitOrder":4,"curCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-05-12 09:37:14","endLine":136,"groupId":"2734","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/cbda51c27b4f112bd3632f4919d082ecdb8672.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"NB"},{"authorDate":"2020-06-11 14:43:29","commitOrder":4,"curCode":"\tpublic void testEmptyStringLiteralParameters() {\n\t\tTableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttableEnv.unloadModule(\"core\");\n\t\ttableEnv.loadModule(\"hive\", new HiveModule());\n\n\t\t\r\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect());\n\t\tassertEquals(\"[fb]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(tableEnv.sqlQuery(\"select length('')\").execute().collect());\n\t\tassertEquals(\"[0]\", results.toString());\n\t}\n","date":"2020-06-11 14:43:29","endLine":187,"groupId":"2734","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyStringLiteralParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/3d8186f3638a3a17c15812795945b79fc0617a.src","preCode":"\tpublic void testEmptyStringLiteralParameters() {\n\t\tTableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttableEnv.unloadModule(\"core\");\n\t\ttableEnv.loadModule(\"hive\", new HiveModule());\n\n\t\t\r\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect());\n\t\tassertEquals(\"[fb]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(tableEnv.sqlQuery(\"select length('')\").execute().collect());\n\t\tassertEquals(\"[0]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"c9488eb8a53a07ea9541c6a2c00e196e90274320","commitMessage":"@@@[FLINK-18030][hive] Hive UDF doesn't accept empty string literal parameters\n\n\nThis closes #12403","date":"2020-06-11 14:43:29","modifiedFileCount":"3","status":"M","submitter":"Rui Li"},{"authorTime":"2020-06-18 11:52:35","codes":[{"authorDate":"2020-06-18 11:52:35","commitOrder":5,"curCode":"\tpublic void testConstantArguments() {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":134,"groupId":"24490","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/3fad4189ba46177da2276f88605b456212506a.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-06-18 11:52:35","commitOrder":5,"curCode":"\tpublic void testEmptyStringLiteralParameters() {\n\t\tTableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttableEnv.unloadModule(\"core\");\n\t\ttableEnv.loadModule(\"hive\", new HiveModule());\n\n\t\t\r\n\t\tList<Row> results = CollectionUtil.iteratorToList(\n\t\t\t\ttableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect());\n\t\tassertEquals(\"[fb]\", results.toString());\n\n\t\t\r\n\t\tresults = CollectionUtil.iteratorToList(tableEnv.sqlQuery(\"select length('')\").execute().collect());\n\t\tassertEquals(\"[0]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":185,"groupId":"24490","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyStringLiteralParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/3fad4189ba46177da2276f88605b456212506a.src","preCode":"\tpublic void testEmptyStringLiteralParameters() {\n\t\tTableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttableEnv.unloadModule(\"core\");\n\t\ttableEnv.loadModule(\"hive\", new HiveModule());\n\n\t\t\r\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\").execute().collect());\n\t\tassertEquals(\"[fb]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(tableEnv.sqlQuery(\"select length('')\").execute().collect());\n\t\tassertEquals(\"[0]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"91d2b628bfe1a2e7beed5111a6d9a572cc6bc310","commitMessage":"@@@[hotfix][table][connector] Use CollectionUtil#iteratorToList instead of Guava Lists\n","date":"2020-09-07 17:37:11","modifiedFileCount":"18","status":"M","submitter":"godfreyhe"},{"authorTime":"2021-06-24 15:56:28","codes":[{"authorDate":"2021-06-24 15:56:28","commitOrder":6,"curCode":"    public void testConstantArguments() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvInBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n        assertEquals(\"[anbn]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[abcdefg]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[ab12.34]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        \"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n        \r\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n        assertEquals(\"[null]\", results.toString());\n    }\n","date":"2021-07-06 19:28:35","endLine":171,"groupId":"101047","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/7b5d8b69ec892b9e2efaabe40913897d4b017f.src","preCode":"    public void testConstantArguments() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n        assertEquals(\"[anbn]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[abcdefg]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[ab12.34]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        \"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n        \r\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n        assertEquals(\"[null]\", results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-06-24 15:56:28","commitOrder":6,"curCode":"    public void testEmptyStringLiteralParameters() {\n        TableEnvironment tableEnv = HiveTestUtils.createTableEnvInBatchMode();\n\n        tableEnv.unloadModule(\"core\");\n        tableEnv.loadModule(\"hive\", new HiveModule());\n\n        \r\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[fb]\", results.toString());\n\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tableEnv.sqlQuery(\"select length('')\").execute().collect());\n        assertEquals(\"[0]\", results.toString());\n    }\n","date":"2021-07-06 19:28:35","endLine":232,"groupId":"101047","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testEmptyStringLiteralParameters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/7b5d8b69ec892b9e2efaabe40913897d4b017f.src","preCode":"    public void testEmptyStringLiteralParameters() {\n        TableEnvironment tableEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n        tableEnv.unloadModule(\"core\");\n        tableEnv.loadModule(\"hive\", new HiveModule());\n\n        \r\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tableEnv.sqlQuery(\"select regexp_replace('foobar','oo|ar','')\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[fb]\", results.toString());\n\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tableEnv.sqlQuery(\"select length('')\").execute().collect());\n        assertEquals(\"[0]\", results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"312fe4c1ce17ac6e5515bcab560b86456993daf5","commitMessage":"@@@[FLINK-22880][table] Remove 'blink' term from code base\n\nThis removes all mentionings of the term \"blink\" in the code\nbase. In order to reduce user confusion.  do not use this term\nanymore but refer to as \"Flink SQL\" or \"Flink Table API\".\n\nThis closes #16374.\n","date":"2021-07-06 19:28:35","modifiedFileCount":"73","status":"M","submitter":"Timo Walther"}]
