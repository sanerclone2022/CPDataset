[{"authorTime":"2017-10-22 16:57:43","codes":[{"authorDate":"2017-10-22 16:57:43","commitOrder":1,"curCode":"\tpublic void testKeyedCoProcessFunctionSideOutput() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout2-3\", \"sideout2-4\", \"sideout2-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","date":"2017-10-24 20:01:20","endLine":543,"groupId":"18316","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyedCoProcessFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/07dbd31a14244a819f1e3b219d8fd94e7adcaa.src","preCode":"\tpublic void testKeyedCoProcessFunctionSideOutput() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout2-3\", \"sideout2-4\", \"sideout2-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"B"},{"authorDate":"2017-10-22 16:57:43","commitOrder":1,"curCode":"\tpublic void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag1 = new OutputTag<String>(\"side1\"){};\n\t\tfinal OutputTag<String> sideOutputTag2 = new OutputTag<String>(\"side2\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag1, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag2, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);\n\t\tpassThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout1-3\"), sideOutputResultSink1.getSortedResult());\n\t\tassertEquals(Arrays.asList(\"sideout2-4\", \"sideout2-5\"), sideOutputResultSink2.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","date":"2017-10-24 20:01:20","endLine":592,"groupId":"18313","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testKeyedCoProcessFunctionSideOutputWithMultipleConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/07dbd31a14244a819f1e3b219d8fd94e7adcaa.src","preCode":"\tpublic void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag1 = new OutputTag<String>(\"side1\"){};\n\t\tfinal OutputTag<String> sideOutputTag2 = new OutputTag<String>(\"side2\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag1, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag2, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);\n\t\tpassThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout1-3\"), sideOutputResultSink1.getSortedResult());\n\t\tassertEquals(Arrays.asList(\"sideout2-4\", \"sideout2-5\"), sideOutputResultSink2.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"B"}],"commitId":"35ad5396caa533735070aa514134f08c3e3ecee1","commitMessage":"@@@[FLINK-7864] Support side-outputs in CoProcessFunction\n","date":"2017-10-24 20:01:20","modifiedFileCount":"5","status":"B","submitter":"Bowen Li"},{"authorTime":"2019-01-11 17:53:40","codes":[{"authorDate":"2019-01-11 17:53:40","commitOrder":2,"curCode":"\tpublic void testKeyedCoProcessFunctionSideOutput() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t.keyBy(i -> i)\n\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t.process(new KeyedCoProcessFunction<Integer, Integer, Integer, Integer>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\tif (value < 3) {\n\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout1-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\tif (value >= 3) {\n\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout2-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1-1\", \"sideout1-2-2\", \"sideout2-3-3\", \"sideout2-4-4\", \"sideout2-5-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","date":"2019-05-27 21:49:15","endLine":589,"groupId":"101520","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyedCoProcessFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/876ed4f39e227bc427a7ed4d5972056aee33c1.src","preCode":"\tpublic void testKeyedCoProcessFunctionSideOutput() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 3) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout2-3\", \"sideout2-4\", \"sideout2-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2019-01-11 17:53:40","commitOrder":2,"curCode":"\tpublic void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag1 = new OutputTag<String>(\"side1\"){};\n\t\tfinal OutputTag<String> sideOutputTag2 = new OutputTag<String>(\"side2\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t.keyBy(i -> i)\n\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t.process(new KeyedCoProcessFunction<Integer, Integer, Integer, Integer>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out)\n\t\t\t\t\tthrows Exception {\n\t\t\t\t\tif (value < 4) {\n\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\tctx.output(sideOutputTag1, \"sideout1-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out)\n\t\t\t\t\tthrows Exception {\n\t\t\t\t\tif (value >= 4) {\n\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\tctx.output(sideOutputTag2, \"sideout2-\" + ctx.getCurrentKey() + \"-\" + String.valueOf(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);\n\t\tpassThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1-1\", \"sideout1-2-2\", \"sideout1-3-3\"), sideOutputResultSink1.getSortedResult());\n\t\tassertEquals(Arrays.asList(\"sideout2-4-4\", \"sideout2-5-5\"), sideOutputResultSink2.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","date":"2019-05-27 21:49:15","endLine":689,"groupId":"101520","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testKeyedCoProcessFunctionSideOutputWithMultipleConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/876ed4f39e227bc427a7ed4d5972056aee33c1.src","preCode":"\tpublic void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {\n\t\tfinal OutputTag<String> sideOutputTag1 = new OutputTag<String>(\"side1\"){};\n\t\tfinal OutputTag<String> sideOutputTag2 = new OutputTag<String>(\"side2\"){};\n\n\t\tTestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>();\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> ds1 = see.fromCollection(elements);\n\t\tDataStream<Integer> ds2 = see.fromCollection(elements);\n\n\t\tSingleOutputStreamOperator<Integer> passThroughtStream = ds1\n\t\t\t\t.keyBy(i -> i)\n\t\t\t\t.connect(ds2.keyBy(i -> i))\n\t\t\t\t.process(new CoProcessFunction<Integer, Integer, Integer>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value < 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag1, \"sideout1-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tif (value >= 4) {\n\t\t\t\t\t\t\tout.collect(value);\n\t\t\t\t\t\t\tctx.output(sideOutputTag2, \"sideout2-\" + String.valueOf(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tpassThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);\n\t\tpassThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);\n\t\tpassThroughtStream.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout1-1\", \"sideout1-2\", \"sideout1-3\"), sideOutputResultSink1.getSortedResult());\n\t\tassertEquals(Arrays.asList(\"sideout2-4\", \"sideout2-5\"), sideOutputResultSink2.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"}],"commitId":"3a5bf89384ed07431d15285ef40e751daf9d0c83","commitMessage":"@@@[FLINK-11283] Accessing the key when processing connected keyed stream\n","date":"2019-05-27 21:49:15","modifiedFileCount":"7","status":"M","submitter":"yanghua"}]
