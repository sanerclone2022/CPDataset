[{"authorTime":"2018-02-22 01:08:13","codes":[{"authorDate":"2018-02-22 01:08:13","commitOrder":1,"curCode":"\tpublic void writeSavepoint() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (flinkGenerateSavepointBackendType) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new LegacyCheckpointedSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new LegacyCheckpointedFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new LegacyCheckpointedFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new KeyedStateSettingFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckpointedUdfOperator(new LegacyCheckpointedFlatMapWithKeyedState())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew TimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\texecuteAndSavepoint(\n\t\t\tenv,\n\t\t\t\"src/test/resources/\" + getSavepointPath(flinkGenerateSavepointVersion, flinkGenerateSavepointBackendType),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","date":"2018-02-22 22:28:20","endLine":145,"groupId":"17939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeSavepoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/a691163e154e77fe314fa887c571b50306d973.src","preCode":"\tpublic void writeSavepoint() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (flinkGenerateSavepointBackendType) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new LegacyCheckpointedSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new LegacyCheckpointedFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new LegacyCheckpointedFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new KeyedStateSettingFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckpointedUdfOperator(new LegacyCheckpointedFlatMapWithKeyedState())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew TimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\texecuteAndSavepoint(\n\t\t\tenv,\n\t\t\t\"src/test/resources/\" + getSavepointPath(flinkGenerateSavepointVersion, flinkGenerateSavepointBackendType),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/utils/LegacyStatefulJobSavepointMigrationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2018-02-22 01:08:13","commitOrder":1,"curCode":"\tpublic void testSavepointRestore() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (testStateBackend) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new CheckingRestoringSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new CheckingRestoringFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingRestoringFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingKeyedStateFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingRestoringUdfOperator(new CheckingRestoringFlatMapWithKeyedStateInOperator())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingTimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\trestoreAndExecute(\n\t\t\tenv,\n\t\t\tgetResourceFilename(getSavepointPath(testMigrateVersion, testStateBackend)),\n\t\t\tnew Tuple2<>(CheckingRestoringSource.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, 1),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedState.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingKeyedStateFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringUdfOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedStateInOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","date":"2018-02-22 22:28:20","endLine":201,"groupId":"6163","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSavepointRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/a691163e154e77fe314fa887c571b50306d973.src","preCode":"\tpublic void testSavepointRestore() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (testStateBackend) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new CheckingRestoringSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new CheckingRestoringFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingRestoringFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingKeyedStateFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingRestoringUdfOperator(new CheckingRestoringFlatMapWithKeyedStateInOperator())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingTimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\trestoreAndExecute(\n\t\t\tenv,\n\t\t\tgetResourceFilename(getSavepointPath(testMigrateVersion, testStateBackend)),\n\t\t\tnew Tuple2<>(CheckingRestoringSource.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, 1),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedState.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingKeyedStateFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringUdfOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedStateInOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/utils/LegacyStatefulJobSavepointMigrationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"70a2e7e95b46e7f8451cd07d4f73930671225273","commitMessage":"@@@[FLINK-8735] Rename StatefulJobSavepointMigrationITCase\n\nThis is preparation for modifying a new ITCase to use modern state\nfeatures.\n","date":"2018-02-22 22:28:20","modifiedFileCount":"0","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void writeSavepoint() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tswitch (flinkGenerateSavepointBackendType) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new LegacyCheckpointedSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new LegacyCheckpointedFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new LegacyCheckpointedFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new KeyedStateSettingFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckpointedUdfOperator(new LegacyCheckpointedFlatMapWithKeyedState())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew TimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\texecuteAndSavepoint(\n\t\t\tenv,\n\t\t\t\"src/test/resources/\" + getSavepointPath(flinkGenerateSavepointVersion, flinkGenerateSavepointBackendType),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","date":"2020-10-01 23:03:45","endLine":140,"groupId":"101601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeSavepoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/1a1859696139eac317e9bc88d7bcf425108d47.src","preCode":"\tpublic void writeSavepoint() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (flinkGenerateSavepointBackendType) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new LegacyCheckpointedSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new LegacyCheckpointedFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new LegacyCheckpointedFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new KeyedStateSettingFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckpointedUdfOperator(new LegacyCheckpointedFlatMapWithKeyedState())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew TimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\texecuteAndSavepoint(\n\t\t\tenv,\n\t\t\t\"src/test/resources/\" + getSavepointPath(flinkGenerateSavepointVersion, flinkGenerateSavepointBackendType),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/utils/LegacyStatefulJobSavepointMigrationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testSavepointRestore() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tswitch (testStateBackend) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new CheckingRestoringSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new CheckingRestoringFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingRestoringFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingKeyedStateFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingRestoringUdfOperator(new CheckingRestoringFlatMapWithKeyedStateInOperator())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingTimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\trestoreAndExecute(\n\t\t\tenv,\n\t\t\tgetResourceFilename(getSavepointPath(testMigrateVersion, testStateBackend)),\n\t\t\tnew Tuple2<>(CheckingRestoringSource.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, 1),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedState.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingKeyedStateFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringUdfOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedStateInOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","date":"2020-10-01 23:03:45","endLine":195,"groupId":"101601","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSavepointRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/1a1859696139eac317e9bc88d7bcf425108d47.src","preCode":"\tpublic void testSavepointRestore() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tswitch (testStateBackend) {\n\t\t\tcase StateBackendLoader.ROCKSDB_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new RocksDBStateBackend(new MemoryStateBackend()));\n\t\t\t\tbreak;\n\t\t\tcase StateBackendLoader.MEMORY_STATE_BACKEND_NAME:\n\t\t\t\tenv.setStateBackend(new MemoryStateBackend());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\n\t\tenv.enableCheckpointing(500);\n\t\tenv.setParallelism(4);\n\t\tenv.setMaxParallelism(4);\n\n\t\tenv\n\t\t\t.addSource(new CheckingRestoringSource(NUM_SOURCE_ELEMENTS)).setMaxParallelism(1).uid(\"LegacyCheckpointedSource\")\n\t\t\t.flatMap(new CheckingRestoringFlatMap()).startNewChain().uid(\"LegacyCheckpointedFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingRestoringFlatMapWithKeyedState()).startNewChain().uid(\"LegacyCheckpointedFlatMapWithKeyedState\")\n\t\t\t.keyBy(0)\n\t\t\t.flatMap(new CheckingKeyedStateFlatMap()).startNewChain().uid(\"KeyedStateSettingFlatMap\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"custom_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingRestoringUdfOperator(new CheckingRestoringFlatMapWithKeyedStateInOperator())).uid(\"LegacyCheckpointedOperator\")\n\t\t\t.keyBy(0)\n\t\t\t.transform(\n\t\t\t\t\"timely_stateful_operator\",\n\t\t\t\tnew TypeHint<Tuple2<Long, Long>>() {}.getTypeInfo(),\n\t\t\t\tnew CheckingTimelyStatefulOperator()).uid(\"TimelyStatefulOperator\")\n\t\t\t.addSink(new AccumulatorCountingSink<Tuple2<Long, Long>>());\n\n\t\trestoreAndExecute(\n\t\t\tenv,\n\t\t\tgetResourceFilename(getSavepointPath(testMigrateVersion, testStateBackend)),\n\t\t\tnew Tuple2<>(CheckingRestoringSource.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, 1),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedState.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingKeyedStateFlatMap.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringUdfOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingRestoringFlatMapWithKeyedStateInOperator.SUCCESSFUL_RESTORE_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESS_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_EVENT_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(CheckingTimelyStatefulOperator.SUCCESSFUL_PROCESSING_TIME_CHECK_ACCUMULATOR, NUM_SOURCE_ELEMENTS),\n\t\t\tnew Tuple2<>(AccumulatorCountingSink.NUM_ELEMENTS_ACCUMULATOR, NUM_SOURCE_ELEMENTS));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/utils/LegacyStatefulJobSavepointMigrationITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
