[{"authorTime":"2017-05-31 03:40:47","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":1,"curCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1.join(ds2).where(0).equalTo(\"*\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","date":"2017-07-13 06:37:47","endLine":767,"groupId":"15919","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithAtomicType1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/adb62d0221a9f5dcc81829ee29dfe5afb882ae.src","preCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1.join(ds2).where(0).equalTo(\"*\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/JoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"B"},{"authorDate":"2017-05-31 03:40:47","commitOrder":1,"curCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1\n\t\t\t\t.fullOuterJoin(ds2)\n\t\t\t\t.where(0)\n\t\t\t\t.equalTo(\"*\")\n\t\t\t\t.with(new ProjectBothFunction<Tuple3<Integer, Long, String>, Integer>())\n\t\t\t\t.returns(\"Tuple2<java.lang.Object,java.lang.Object>\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\\n\" +\n\t\t\t\t\"(3,2,Hello world),null\\n\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","date":"2017-07-13 06:37:47","endLine":596,"groupId":"38829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinWithAtomicType1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/e50623ae8f95e30b4608f82e91fa3b5c31d64c.src","preCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1\n\t\t\t\t.fullOuterJoin(ds2)\n\t\t\t\t.where(0)\n\t\t\t\t.equalTo(\"*\")\n\t\t\t\t.with(new ProjectBothFunction<Tuple3<Integer, Long, String>, Integer>())\n\t\t\t\t.returns(\"Tuple2<java.lang.Object,java.lang.Object>\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\\n\" +\n\t\t\t\t\"(3,2,Hello world),null\\n\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/OuterJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"B"}],"commitId":"9bd491e05120915cbde36d4452e3982fe5d0975f","commitMessage":"@@@[FLINK-6731] [tests] Activate strict checkstyle for flink-tests\n\nThis closes #4295\n","date":"2017-07-13 06:37:47","modifiedFileCount":"185","status":"B","submitter":"Greg Hogan"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":2,"curCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1.join(ds2).where(0).equalTo(\"*\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","date":"2017-07-13 06:37:47","endLine":767,"groupId":"101299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithAtomicType1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/adb62d0221a9f5dcc81829ee29dfe5afb882ae.src","preCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1.join(ds2).where(0).equalTo(\"*\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/JoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"N"},{"authorDate":"2018-05-04 23:15:51","commitOrder":2,"curCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1\n\t\t\t\t.fullOuterJoin(ds2)\n\t\t\t\t.where(0)\n\t\t\t\t.equalTo(\"*\")\n\t\t\t\t.with(new ProjectBothFunction<Tuple3<Integer, Long, String>, Integer>())\n\t\t\t\t.returns(new GenericTypeInfo(Tuple2.class));\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\\n\" +\n\t\t\t\t\"(3,2,Hello world),null\\n\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","date":"2018-05-05 00:48:16","endLine":597,"groupId":"101299","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinWithAtomicType1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/06b4499c1eab1846f7f5d573268cfbbf2833e1.src","preCode":"\tpublic void testJoinWithAtomicType1() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds1 = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Integer> ds2 = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Tuple3<Integer, Long, String>, Integer>> joinDs = ds1\n\t\t\t\t.fullOuterJoin(ds2)\n\t\t\t\t.where(0)\n\t\t\t\t.equalTo(\"*\")\n\t\t\t\t.with(new ProjectBothFunction<Tuple3<Integer, Long, String>, Integer>())\n\t\t\t\t.returns(\"Tuple2<java.lang.Object,java.lang.Object>\");\n\n\t\tList<Tuple2<Tuple3<Integer, Long, String>, Integer>> result = joinDs.collect();\n\n\t\tString expected = \"(1,1,Hi),1\\n\" +\n\t\t\t\t\"(2,2,Hello),2\\n\" +\n\t\t\t\t\"(3,2,Hello world),null\\n\";\n\n\t\tcompareResultAsTuples(result, expected);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/OuterJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
