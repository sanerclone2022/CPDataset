[{"authorTime":"2017-05-03 20:40:46","codes":[{"authorDate":"2017-05-03 20:40:46","commitOrder":1,"curCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tverify(harness.getEnvironment(), timeout(timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","date":"2017-05-05 17:08:09","endLine":930,"groupId":"34983","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1d/832292e838e679df46dee0304b10303cf1af29.src","preCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tverify(harness.getEnvironment(), timeout(timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"B"},{"authorDate":"2017-05-03 20:40:46","commitOrder":1,"curCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockenvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockenvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tverify(harness.getEnvironment(), timeout(100L * timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","date":"2017-05-05 17:08:09","endLine":997,"groupId":"34983","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeoutExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1d/832292e838e679df46dee0304b10303cf1af29.src","preCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockenvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockenvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tverify(harness.getEnvironment(), timeout(100L * timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":967,"status":"B"}],"commitId":"93758082273618d9fdbb3a9b3ed916a4b637760f","commitMessage":"@@@[FLINK-6435] [async] React to exceptionally completed StreamElementQueueEntry\n\nThe AsyncWaitOperator should not only react to orderly completed\nStreamElementQueueEntries but also to those completed with a user exception\nor those which timed out.\n\nThis PR fixes the problem by calling the onComplete function passed to\nStreamElementQueueEntry#onComplete also in the exceptional case.\n\nThis closes #3814.\n","date":"2017-05-05 17:08:09","modifiedFileCount":"2","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2017-09-27 21:10:52","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":2,"curCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tAssert.assertNotNull(harness.getEnvironment().getFailExternallyCause());\n\t}\n","date":"2018-01-22 21:06:37","endLine":887,"groupId":"34983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/2330384fd302dbbcea11da4fce26bc80f2f298.src","preCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tverify(harness.getEnvironment(), timeout(timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"M"},{"authorDate":"2017-09-27 21:10:52","commitOrder":2,"curCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tAssert.assertNotNull(mockEnvironment.getFailExternallyCause());\n\t}\n","date":"2018-01-22 21:06:37","endLine":954,"groupId":"34983","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeoutExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/2330384fd302dbbcea11da4fce26bc80f2f298.src","preCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal Environment mockenvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockenvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tverify(harness.getEnvironment(), timeout(100L * timeout)).failExternally(any(Exception.class));\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"M"}],"commitId":"517b3f87214168a445b5751cda210ecf3a292fd6","commitMessage":"@@@[FLINK-7720] [checkpoints] Centralize creation of backends and state related resources\n\nThis closes #4745.\n","date":"2018-01-22 21:06:37","modifiedFileCount":"69","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-02-07 23:16:29","codes":[{"authorDate":"2018-02-07 23:16:29","commitOrder":3,"curCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\t\tmockEnvironment.setExpectedExternalFailureCause(Throwable.class);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tassertTrue(harness.getEnvironment().getActualExternalFailureCause().isPresent());\n\t}\n","date":"2018-02-19 19:21:24","endLine":881,"groupId":"42738","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/7ff0b497531a33180ca4d174cfbfb003862c68.src","preCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tAssert.assertNotNull(harness.getEnvironment().getFailExternallyCause());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"},{"authorDate":"2018-02-07 23:16:29","commitOrder":3,"curCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\t\tmockEnvironment.setExpectedExternalFailureCause(Throwable.class);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","date":"2018-02-19 19:21:24","endLine":947,"groupId":"42738","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeoutExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/7ff0b497531a33180ca4d174cfbfb003862c68.src","preCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tAssert.assertNotNull(mockEnvironment.getFailExternallyCause());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":918,"status":"M"}],"commitId":"0af22bf284967c8f7e658b8eef3a91d407dbd8eb","commitMessage":"@@@[hotfix][tests] Reduce mockito usage in StreamTaskTest\n","date":"2018-02-19 19:21:24","modifiedFileCount":"4","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2019-08-30 17:16:54","codes":[{"authorDate":"2019-08-30 17:16:54","commitOrder":4,"curCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tassertTrue(harness.getEnvironment().getActualExternalFailureCause().isPresent());\n\t}\n","date":"2019-09-17 19:48:52","endLine":867,"groupId":"14714","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/209f63321365b11ddd357b2e598f4534247f46.src","preCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\t\tmockEnvironment.setExpectedExternalFailureCause(Throwable.class);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tassertTrue(harness.getEnvironment().getActualExternalFailureCause().isPresent());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":840,"status":"M"},{"authorDate":"2019-08-30 17:16:54","commitOrder":4,"curCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","date":"2019-09-17 19:48:52","endLine":931,"groupId":"14714","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeoutExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/209f63321365b11ddd357b2e598f4534247f46.src","preCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tfinal MockEnvironment mockEnvironment = createMockEnvironment();\n\t\tmockEnvironment.setExpectedExternalFailureCause(Throwable.class);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE,\n\t\t\tmockEnvironment);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":904,"status":"M"}],"commitId":"8e5213c19667f23d6b9c63524e7216bcebf396a2","commitMessage":"@@@[hotfix][tests] AsyncWaitOperatorTest refactoring: use test harness' default mock environment\n","date":"2019-09-17 19:48:52","modifiedFileCount":"1","status":"M","submitter":"Aleksey Pak"},{"authorTime":"2019-08-30 17:06:09","codes":[{"authorDate":"2019-08-30 17:06:09","commitOrder":5,"curCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness =\n\t\t\tcreateTestHarness(new UserExceptionAsyncFunction(), TIMEOUT, 2, outputMode);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tassertTrue(harness.getEnvironment().getActualExternalFailureCause().isPresent());\n\t}\n","date":"2019-09-17 19:48:52","endLine":835,"groupId":"103129","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/cd9cf4dd75500c11a0a24799288c1decd26721.src","preCode":"\tprivate void testUserExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tUserExceptionAsyncFunction asyncWaitFunction = new UserExceptionAsyncFunction();\n\t\tlong timeout = 2000L;\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncWaitFunction,\n\t\t\tTIMEOUT,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\n\t\tassertTrue(harness.getEnvironment().getActualExternalFailureCause().isPresent());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"},{"authorDate":"2019-08-30 17:06:09","commitOrder":5,"curCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness =\n\t\t\tcreateTestHarness(new NoOpAsyncFunction<>(), 10L, 2, outputMode);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","date":"2019-09-17 19:48:52","endLine":888,"groupId":"103129","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeoutExceptionHandling","params":"(AsyncDataStream.OutputModeoutputMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/cd9cf4dd75500c11a0a24799288c1decd26721.src","preCode":"\tprivate void testTimeoutExceptionHandling(AsyncDataStream.OutputMode outputMode) throws Exception {\n\t\tAsyncFunction<Integer, Integer> asyncFunction = new NoOpAsyncFunction<>();\n\t\tlong timeout = 10L; \r\n\n\t\tAsyncWaitOperator<Integer, Integer> asyncWaitOperator = new AsyncWaitOperator<>(\n\t\t\tasyncFunction,\n\t\t\ttimeout,\n\t\t\t2,\n\t\t\toutputMode);\n\n\t\tOneInputStreamOperatorTestHarness<Integer, Integer> harness = new OneInputStreamOperatorTestHarness<>(\n\t\t\tasyncWaitOperator,\n\t\t\tIntSerializer.INSTANCE);\n\n\t\tharness.getEnvironment().setExpectedExternalFailureCause(Throwable.class);\n\n\t\tharness.open();\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.processElement(1, 1L);\n\t\t}\n\n\t\tharness.setProcessingTime(10L);\n\n\t\tsynchronized (harness.getCheckpointLock()) {\n\t\t\tharness.close();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"}],"commitId":"ffa44909bc3d129a0504da790da67af900c71923","commitMessage":"@@@[hotfix][tests] AsyncWaitOperatorTest refactoring: move common test harness creation to a dedicated method\n","date":"2019-09-17 19:48:52","modifiedFileCount":"1","status":"M","submitter":"Aleksey Pak"}]
