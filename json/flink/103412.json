[{"authorTime":"2020-02-06 22:34:46","codes":[{"authorDate":"2020-02-04 17:19:39","commitOrder":9,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<InputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tif (headOperator instanceof InputSelectable) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tnull,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new InputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-02-28 16:29:28","endLine":122,"groupId":"6933","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<InputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/980b1cf36e45766c0cfcb2956a39e015cf55e3.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<InputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tif (headOperator instanceof InputSelectable) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tnull,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new InputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2020-02-06 22:34:46","commitOrder":9,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<InputGate> inputGates1,\n\t\tCollection<InputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new InputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new InputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-02-28 16:29:28","endLine":83,"groupId":"9516","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<InputGate>inputGates1@Collection<InputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/8c484784c44a5380c629f054b5b1afabfb5c10.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<InputGate> inputGates1,\n\t\tCollection<InputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new InputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new InputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"NB"}],"commitId":"8becccb8dc4d00eb2c5f2e13827ad02c93331343","commitMessage":"@@@[FLINK-16060][task] Implemente working StreamMultipleInputProcessor\n\nThis doesn't fully support input selection.  watermarks.  latency markers and keyed contextes yet\n","date":"2020-02-28 16:29:28","modifiedFileCount":"5","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-02-06 22:34:46","codes":[{"authorDate":"2020-03-26 18:34:03","commitOrder":10,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<InputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new InputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-03-30 20:45:01","endLine":119,"groupId":"6933","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<InputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/9e495d640bbed3bc0928f6a5c99f947a5a23b4.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<InputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tif (headOperator instanceof InputSelectable) {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tnull,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new InputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-02-06 22:34:46","commitOrder":10,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<InputGate> inputGates1,\n\t\tCollection<InputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new InputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new InputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-02-28 16:29:28","endLine":83,"groupId":"9516","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<InputGate>inputGates1@Collection<InputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/8c484784c44a5380c629f054b5b1afabfb5c10.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<InputGate> inputGates1,\n\t\tCollection<InputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new InputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new InputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"f7c3d1bba21d6822d30488a73043c9266c5a0b39","commitMessage":"@@@[FLINK-16806][operators] Add support for InputSelection to MultipleInputStreamOperator\n","date":"2020-03-30 20:45:01","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-04-03 19:18:51","codes":[{"authorDate":"2020-04-03 19:18:51","commitOrder":11,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:20","endLine":120,"groupId":"6933","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/e031b622a70aa3d7cd720d0ffe8d9f758272ec.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<InputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new InputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-04-03 19:18:51","commitOrder":11,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:20","endLine":84,"groupId":"9516","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/753325ce6e50caa45d9f61ea2870e32ba5ac1f.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<InputGate> inputGates1,\n\t\tCollection<InputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new InputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new InputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"10072321716f9581a1e0b9a70c5f5b1a9ca69b78","commitMessage":"@@@[FLINK-16587][checkpointing] Introducing IndexedInputGate for abstracting single channel InputGates with a specific index.\n\nThis commit facilitates promoting the index of all non-union gates to first class citizens and allows them to be reliably referenced by their index.\n","date":"2020-04-17 15:30:20","modifiedFileCount":"20","status":"M","submitter":"Arvid Heise"},{"authorTime":"2020-03-19 17:23:56","codes":[{"authorDate":"2020-03-19 17:23:56","commitOrder":12,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:35","endLine":120,"groupId":"6933","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/5389252aa5f3fe880fe067e7b39323addce5ae.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-03-19 17:23:56","commitOrder":12,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:35","endLine":84,"groupId":"38376","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/78/078bca93433a859ceb9e701ef00d29e3c57906.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration().getCheckpointMode(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"aed6c1ade1a2bcc6047429d20e811db802e99e9f","commitMessage":"@@@[FLINK-16587][checkpointing] Adding unaligned checkpoint config flag.\n\nAlso passing the whole StreamConfig to InputProcessorUtil as there will be several additional unaligned configuration options in the future.\n","date":"2020-04-17 15:30:35","modifiedFileCount":"9","status":"M","submitter":"Arvid Heise"},{"authorTime":"2020-01-03 12:14:59","codes":[{"authorDate":"2020-01-03 12:14:59","commitOrder":13,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:58","endLine":121,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/afaafdce26e79720e1621ce71727ab7fe502da.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-01-03 12:14:59","commitOrder":13,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-17 15:30:58","endLine":85,"groupId":"38376","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/d550f34771e33aac7b2c809c48bb5d951850af.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"5cebfb76c717568ede8f7e8a82e9bbdf774c19ed","commitMessage":"@@@[FLINK-16587][checkpointing] Spill the in-flight input and output buffers during checkpointing.\n","date":"2020-04-17 15:30:58","modifiedFileCount":"18","status":"M","submitter":"Zhijiang"},{"authorTime":"2020-03-19 02:41:11","codes":[{"authorDate":"2020-03-19 02:41:11","commitOrder":14,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-27 14:00:52","endLine":120,"groupId":"2726","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/89135c6b4acb82a2478364e19905cf8f483c19.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-03-19 02:41:11","commitOrder":14,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-04-27 14:00:52","endLine":84,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/369f1e7f35fc2f644384f047e3d4de8c79b97b.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getTaskManagerInfo().getConfiguration(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"2e313f026cf3a9e8896cd2816ae5c847894c4fd7","commitMessage":"@@@[FLINK-16404][runtime] Avoid caching buffers for blocked input channels before barrier alignment\n\nThis commit is the first part of implementation to solve the dead lock problem when reducing the exclusive buffer of receiver side to 0.\n\nReducing the number of exclusive buffers of receiver side to 0 can bring several advantages (may at the cost of some performance regression). One is that memory can be saved from the reduced network buffer usage. Another important benefit is that the in-flight data can be reduced so we can speed up checkpoint in cases of back pressure. However.  for the current implementation.  reducing the exclusive buffer of receiver side can incur deadlock problem because all the floating buffers might be requested away by some blocked input channels and never recycled until barrier alignment.\n\nTo solve the problem.  this commit mainly makes the following changes:\n1. At sender side.  after sending a checkpoint barrier when aligned exactly-once checkpoint mode is used.  the outgoing channel will be blocked and no data will be sent out until the channel is unblocked.\n2. At receiver side.  no buffer will be stored in BufferStorage any more and after a checkpoint is completed or canceled.  the receiver side will resume data consumption and unblock the upstream by sending a special event to the sender side.\n\nNote that after this patch we still can't set the exclusive buffer of receiver side to 0 because there is still deadlock problem which will be totally solved in the following up patches.\n","date":"2020-04-27 14:00:52","modifiedFileCount":"128","status":"M","submitter":"kevin.cyj"},{"authorTime":"2020-05-13 21:31:10","codes":[{"authorDate":"2020-05-13 21:31:10","commitOrder":15,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-05-14 13:43:11","endLine":113,"groupId":"2726","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/c4bb943c108942706c24cb7cf04683eaa60d52.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tInputGate[] unionedInputGates = new InputGate[inputGates.length];\n\t\tfor (int i = 0; i < inputGates.length; i++) {\n\t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n\t\t}\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-05-13 21:31:10","commitOrder":15,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-05-14 13:43:11","endLine":79,"groupId":"30477","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/155d03e8e40b67182f35dafea209815985c635.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\tInputGate unionedInputGate1 = InputGateUtil.createInputGate(inputGates1.toArray(new IndexedInputGate[0]));\n\t\tInputGate unionedInputGate2 = InputGateUtil.createInputGate(inputGates2.toArray(new IndexedInputGate[0]));\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tunionedInputGate1,\n\t\t\tunionedInputGate2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"0ca918da02db714707afab8546aa7dc9c4e11ace","commitMessage":"@@@[FLINK-17663][network] Properly support UnionInputGates with unaligned checkpoints\n\nWithout this fix.  various tests.  like KeyedStateCheckpointingITCase.  are failing with unaligned checkpoints\nwith ArrayIndexOutOfBoundsException as CheckpointBarrierUnaligner#gateChannelOffsets would be incorrectly\ninitialized.\n","date":"2020-05-14 13:43:11","modifiedFileCount":"4","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-05-19 15:24:05","codes":[{"authorDate":"2020-05-19 15:24:05","commitOrder":16,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-05-22 03:08:18","endLine":113,"groupId":"2726","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/f620b81c6687d5e57cfdb6e595b263cc90b33e.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-05-19 15:24:05","commitOrder":16,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-05-22 03:08:18","endLine":79,"groupId":"30477","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/9d9e4bdd7a7d3b430f63db745aad51b1e2f232.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"2efa2ed2ad576528903727ba50debef35bdf5c6a","commitMessage":"@@@[FLINK-17805][hotfix][network] Fix/update/rename InputProcessorUtil.createCheckpointedInputGatePair method\n","date":"2020-05-22 03:08:18","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-06-09 16:58:46","codes":[{"authorDate":"2020-06-09 16:58:46","commitOrder":17,"curCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-06-09 16:58:46","endLine":113,"groupId":"18016","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/78323c897f71605c8901bbabbca7def4e9cca0.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-06-09 16:58:46","commitOrder":17,"curCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-06-09 16:58:46","endLine":79,"groupId":"4343","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(Collection<IndexedInputGate>inputGates1@Collection<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/88/d1246107040d738a35de01df2a7fa1a37287ea.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetChannelStateWriter(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"6dc624d931858e0ee5da14bc6b41b834c94cbba7","commitMessage":"@@@[FLINK-18136][checkpointing] Don't start channel state writer for savepoint\n\nChannelStateWriter#start should be only called for unaligned checkpoint. While source triggering\nsavepoint.  SubtaskCheckpointCoordinator#initCheckpoint is introduced to judge the condition\nwhether to start the internal writer or not. And this new method is also used in other places like\nCheckpointBarrierUnaligner.\n\nThis closes #12489.","date":"2020-06-09 16:58:46","modifiedFileCount":"14","status":"M","submitter":"Roman"},{"authorTime":"2020-06-16 03:19:36","codes":[{"authorDate":"2020-06-16 03:19:36","commitOrder":18,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-06-17 21:41:17","endLine":112,"groupId":"18016","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@TypeSerializer<?>[]inputDeserializers@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/b185d326f93194dd49db0828e1965149646e52.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tCollection<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-06-16 03:19:36","commitOrder":18,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-06-17 21:41:17","endLine":79,"groupId":"4343","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/5cf2a6b27a3c24d93e8ce3f7926820166f6c84.src","preCode":"\tprotected void createInputProcessor(\n\t\tCollection<IndexedInputGate> inputGates1,\n\t\tCollection<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"70e3c885d82ab6dedf4fb529d17662faa7af1fe0","commitMessage":"@@@[FLINK-18094][network] Using lists instead of collections of gates while creating checkpoint handlers.\n\nThe actual implementation have been lists all along and we assume ordering anyways.\n","date":"2020-06-17 21:41:17","modifiedFileCount":"6","status":"M","submitter":"Arvid Heise"},{"authorTime":"2020-06-16 03:19:36","codes":[{"authorDate":"2020-08-13 00:02:48","commitOrder":19,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-09-03 21:00:26","endLine":112,"groupId":"5714","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/cb2fffd60c73b8869849331a68674d02d2faeb.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tTypeSerializer<?>[] inputDeserializers,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputGates.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializers,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-06-16 03:19:36","commitOrder":19,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","date":"2020-06-17 21:41:17","endLine":79,"groupId":"4343","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/5cf2a6b27a3c24d93e8ce3f7926820166f6c84.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"69ae2e13f15caddc75c0c4fe9b01bb3eef58ef02","commitMessage":"@@@[FLINK-18904][task] Migrate input serializers to inputs in StreamConfig\n","date":"2020-09-03 21:00:26","modifiedFileCount":"4","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-08-14 22:34:29","codes":[{"authorDate":"2020-08-14 22:34:29","commitOrder":20,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-03 21:00:26","endLine":112,"groupId":"5714","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/cb3748aa97a669e6bd6ae2e68e0874ebe6f885.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-08-14 22:34:29","commitOrder":20,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-03 21:00:26","endLine":79,"groupId":"4343","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/02/8df023cd6a4488694046ac635f36f76e19ab78.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\theadOperator instanceof InputSelectable ? (InputSelectable) headOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\theadOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(headOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"2610905933998f73567f1c6b3a0aa872fb791eb3","commitMessage":"@@@[FLINK-18905][task] Rename headOperator to mainOperator\n\nmainOperator is driving the execution of the StreamTask.  by pulling\nthe records from network inputs and/or source inputs and pushing\nproduced records to the remaining chained operators.\n","date":"2020-09-03 21:00:26","modifiedFileCount":"18","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-08-24 17:19:57","codes":[{"authorDate":"2020-08-24 17:19:57","commitOrder":21,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-24 00:11:07","endLine":116,"groupId":"0","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6b/8853994dd3cc64c56484483e49122406f99157.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-08-24 17:19:57","commitOrder":21,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-24 00:11:07","endLine":80,"groupId":"30477","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/08/85246a99286f09c63669937584cf3bce08f778.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"38363a4cb24ab85ac2408c64dbd28e7e1ea2fa34","commitMessage":"@@@[FLINK-19026][network] Moving priority event handling from BufferReceivedListener to CheckpointedInputGate.\n\nThis commit renders BufferReceivedListener obsolete and will allow a following commit to remove it entirely.\nA side-effect of this commit is that all events are handed over from CheckpointedInputGate to StreamTaskNetworkInput and break up the poll loop. However.  since events are rare.  it should have no visible impact on the throughput.\n","date":"2020-09-24 00:11:07","modifiedFileCount":"19","status":"M","submitter":"Arvid Heise"},{"authorTime":"2020-09-18 22:28:48","codes":[{"authorDate":"2020-09-18 22:28:48","commitOrder":22,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-25 16:25:14","endLine":138,"groupId":"32131","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/3e374d0fa671d6e1fc4e31ad77b9f219bbd331.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates);\n\t\tcheckState(checkpointedInputGates.length == inputGates.length);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-09-18 22:28:48","commitOrder":22,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-25 16:25:14","endLine":81,"groupId":"50985","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/f6664b46a8afaf9736b1bd41d6d42a52cff7b1.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates1,\n\t\t\tinputGates2);\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"f547f4c05e21d227cb45db10dab0d86b2a1b8a80","commitMessage":"@@@[FLINK-18906][task] Support StreamTaskSourceInput as BlockabledInput\n\nThis commit adds support for StreamTaskSourceInput as BlockableInput passed to CheckpointBarrierHandlers.\nEffectively this enables checkpointing with chained sources for MultipleInputStreamTask.\n","date":"2020-09-25 16:25:14","modifiedFileCount":"11","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-09-21 20:24:23","codes":[{"authorDate":"2020-09-21 20:24:23","commitOrder":23,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","date":"2020-09-25 21:50:44","endLine":139,"groupId":"32131","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/bf045089d6fde2d70dff000265322152edb0fb.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-09-21 20:24:23","commitOrder":23,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-25 21:50:44","endLine":82,"groupId":"50985","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/a9d3f3d3025401d8841f6984d370a1848b2d4a.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"d3d491b42e6ecf391285aecf41bccfdc623b01c1","commitMessage":"@@@[FLINK-18907][task] Fix numRecordsIn metric with chained sources\n\nWith chained sources.  task's and main operator's number of input records\nare two different things. The first one should take into account only records\ncomming in from the network.  ignoring records produced inside the task itself\n(like via a chained source). Main operator should on the other hand report\nall records from all of the inputs (regardless if it's a network or chained input).\n","date":"2020-09-25 21:50:44","modifiedFileCount":"10","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-09-21 20:24:23","codes":[{"authorDate":"2020-09-30 20:26:40","commitOrder":24,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","date":"2020-10-12 23:39:50","endLine":158,"groupId":"32131","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/80/1f3b62fe1038ed6be31f930793db915a60ceab.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = new StreamMultipleInputProcessor(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-09-21 20:24:23","commitOrder":24,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-09-25 21:50:44","endLine":82,"groupId":"50985","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/a9d3f3d3025401d8841f6984d370a1848b2d4a.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"b1317fa2b09e7c97d959958b69833a9e735fbc71","commitMessage":"@@@[refactor] Extract StreamMultipleInputProcessor factory method\n","date":"2020-10-12 23:39:50","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-09-30 23:41:34","codes":[{"authorDate":"2020-09-30 20:26:40","commitOrder":25,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","date":"2020-10-12 23:39:50","endLine":158,"groupId":"32131","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/80/1f3b62fe1038ed6be31f930793db915a60ceab.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2020-09-30 23:41:34","commitOrder":25,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-10-12 23:41:04","endLine":82,"groupId":"32798","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@TypeSerializer<IN1>inputDeserializer1@TypeSerializer<IN2>inputDeserializer2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/627729e65fa197e28c5b86567ed5df6c9ec9d4.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = new StreamTwoInputProcessor<>(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"4ddf954f995d054fc71e99e4adce4d24dea37052","commitMessage":"@@@[refactor] Extract StreamTwoInputProcessor factory method\n","date":"2020-10-12 23:41:04","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-10-01 14:09:57","codes":[{"authorDate":"2020-09-30 20:26:40","commitOrder":26,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","date":"2020-10-12 23:39:50","endLine":158,"groupId":"32131","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/80/1f3b62fe1038ed6be31f930793db915a60ceab.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2020-10-01 14:09:57","commitOrder":26,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2) {\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-10-12 23:41:05","endLine":78,"groupId":"32798","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/a224f56fab252ca3cbcb5a2297f8003f473998.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2,\n\t\tTypeSerializer<IN1> inputDeserializer1,\n\t\tTypeSerializer<IN2> inputDeserializer2) {\n\n\t\tTwoInputSelectionHandler twoInputSelectionHandler = new TwoInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null);\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputDeserializer1,\n\t\t\tinputDeserializer2,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\ttwoInputSelectionHandler,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"574edb3674dcbcfb6971307a12fcc26d96ac621e","commitMessage":"@@@[FLINK-19473] Enable two input sorting in TwoInputStreamTask\n","date":"2020-10-12 23:41:05","modifiedFileCount":"4","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-10-01 14:09:57","codes":[{"authorDate":"2020-10-07 20:17:16","commitOrder":27,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinputWatermarkGauges,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\toperatorChain);\n\t}\n","date":"2020-10-12 23:41:25","endLine":153,"groupId":"34520","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/14/0e263dbe505d5f96ecec3f8f3051eed275bab0.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n\t\t\tmainOperator instanceof InputSelectable ? (InputSelectable) mainOperator : null,\n\t\t\tinputs.length);\n\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tselectionHandler,\n\t\t\tinputWatermarkGauges,\n\t\t\toperatorChain);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-10-01 14:09:57","commitOrder":27,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2) {\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-10-12 23:41:05","endLine":78,"groupId":"32798","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/a224f56fab252ca3cbcb5a2297f8003f473998.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2) {\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"77e4e3bfd85df59a6cc6dfd4a6cf48653afea8d7","commitMessage":"@@@[FLINK-19473] Enable sorting inputs in MultiInputTasks\n\nThis closes #13529\n","date":"2020-10-12 23:41:25","modifiedFileCount":"3","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-10-01 14:09:57","codes":[{"authorDate":"2020-10-26 20:58:13","commitOrder":28,"curCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler,\n\t\t\tconfiguration);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinputWatermarkGauges,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\toperatorChain);\n\t}\n","date":"2020-11-04 03:55:01","endLine":154,"groupId":"16791","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/9509283be46003c4da57a41524362ddcf258f6.src","preCode":"\tprotected void createInputProcessor(\n\t\t\tList<IndexedInputGate>[] inputGates,\n\t\t\tInputConfig[] inputs,\n\t\t\tWatermarkGauge[] inputWatermarkGauges) {\n\t\tcheckpointBarrierHandler = InputProcessorUtil.createCheckpointBarrierHandler(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tinputGates,\n\t\t\toperatorChain.getSourceTaskInputs());\n\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tmainMailboxExecutor,\n\t\t\tinputGates,\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tcheckpointBarrierHandler);\n\n\t\tinputProcessor = StreamMultipleInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tinputs,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tsetupNumRecordsInCounter(mainOperator),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinputWatermarkGauges,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\toperatorChain);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-10-01 14:09:57","commitOrder":28,"curCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2) {\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","date":"2020-10-12 23:41:05","endLine":78,"groupId":"32798","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/a224f56fab252ca3cbcb5a2297f8003f473998.src","preCode":"\tprotected void createInputProcessor(\n\t\tList<IndexedInputGate> inputGates1,\n\t\tList<IndexedInputGate> inputGates2) {\n\n\t\t\r\n\t\tCheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedMultipleInputGate(\n\t\t\tthis,\n\t\t\tgetConfiguration(),\n\t\t\tgetCheckpointCoordinator(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetTaskNameWithSubtaskAndId(),\n\t\t\tmainMailboxExecutor,\n\t\t\tnew List[]{ inputGates1, inputGates2 },\n\t\t\tCollections.emptyList());\n\t\tcheckState(checkpointedInputGates.length == 2);\n\n\t\tinputProcessor = StreamTwoInputProcessorFactory.create(\n\t\t\tthis,\n\t\t\tcheckpointedInputGates,\n\t\t\tgetEnvironment().getIOManager(),\n\t\t\tgetEnvironment().getMemoryManager(),\n\t\t\tgetEnvironment().getMetricGroup().getIOMetricGroup(),\n\t\t\tgetStreamStatusMaintainer(),\n\t\t\tmainOperator,\n\t\t\tinput1WatermarkGauge,\n\t\t\tinput2WatermarkGauge,\n\t\t\toperatorChain,\n\t\t\tgetConfiguration(),\n\t\t\tgetTaskConfiguration(),\n\t\t\tgetJobConfiguration(),\n\t\t\tgetExecutionConfig(),\n\t\t\tgetUserCodeClassLoader(),\n\t\t\tsetupNumRecordsInCounter(mainOperator));\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"3c613dd29a25d2d9302b63dfe79782bfb13ff847","commitMessage":"@@@[FLINK-19856][network] Emit EndOfChannelRecoveryEvent\n\nThis event would allow to tear down \"virtual channels\"\nused to read channel state on recovery with unaligned checkpoints and\nrescaling.\n","date":"2020-11-04 03:55:01","modifiedFileCount":"17","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-02-10 03:59:37","codes":[{"authorDate":"2021-02-10 03:59:37","commitOrder":29,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs());\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-03-12 02:16:01","endLine":172,"groupId":"16791","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ce/c599d430577800283358c37a5743c6dd91bacf.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs());\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-02-10 03:59:37","commitOrder":29,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList());\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-03-12 02:16:01","endLine":86,"groupId":"32798","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/e1f19c13244632661400b43dc2447fce6c3983.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1, List<IndexedInputGate> inputGates2) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList());\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator));\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"5f9665051b0cc36c8cb9ecf0704310f6a09ea363","commitMessage":"@@@[FLINK-19801][task] Implement virtual channel demultiplexing in RecoveringStreamTaskNetworkInput.\n\nThe demultiplexing works in two dimensions for the following cases.\n* Subtasks of the current operator have been collapsed in a round-robin fashion.\n* The connected output operator has been rescaled (up and down!) and there is an overlap of channels (mostly relevant to keyed exchanges).\nIn both cases.  records from multiple old channels are received over one new physical channel.  which need to demultiplex the record to correctly restore spanning records (similar to how StreamTaskNetworkInput works).\n\nFor performance reasons.  the virtual demultiplexing logic is implemented separately from StreamTaskNetworkInput.  such that on after recovery.  the network input is replaced with the non-recovery counter-part in all StreamInputProcessors.\n","date":"2021-03-12 02:16:01","modifiedFileCount":"15","status":"M","submitter":"Arvid Heise"},{"authorTime":"2021-03-05 21:05:36","codes":[{"authorDate":"2021-03-05 21:05:36","commitOrder":30,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-03-31 14:27:07","endLine":174,"groupId":"16791","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/37632f6b21900db9d389a453ac3c4f8226a8c6.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs());\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-03-05 21:05:36","commitOrder":30,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        systemTimerService);\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-03-31 14:27:07","endLine":87,"groupId":"33883","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1d/b4da66b8d3ae5e67af6f114ab73c0ff53db043.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList());\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"77bf1055a00a64b02e440355c993ffc9e221525c","commitMessage":"@@@[FLINK-19682][checkpoint] Actively timeout checkpoint barriers on inputs\n\nThis closes #15313\n","date":"2021-03-31 14:27:07","modifiedFileCount":"18","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-05-17 15:16:07","codes":[{"authorDate":"2021-05-17 15:16:07","commitOrder":31,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-05-25 14:39:24","endLine":176,"groupId":"38357","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/d775a258a0565bd1500ba3e78cf74b3640973f.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-05-17 15:16:07","commitOrder":31,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        systemTimerService);\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-05-25 14:39:24","endLine":86,"groupId":"33883","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/15b8bda2b61f6d5c3eebd0516a6b85f2d8630f.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        systemTimerService);\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getStreamStatusMaintainer(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"ee9f9b227a7703c2688924070c4746a70bff3fd8","commitMessage":"@@@[FLINK-18934][runtime] Drop StreamStatusMaintainer & StreamStatusProvider\n\nThe StreamStatus traverses the whole DAG and it's state should be kept on the operator level. Given those assumptions the maintainer & provider are no longer necessary.\n","date":"2021-05-25 14:39:24","modifiedFileCount":"32","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-05-31 20:40:25","codes":[{"authorDate":"2021-05-17 15:16:07","commitOrder":32,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-05-25 14:39:24","endLine":176,"groupId":"38357","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/d775a258a0565bd1500ba3e78cf74b3640973f.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"},{"authorDate":"2021-05-31 20:40:25","commitOrder":32,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        configuration,\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        mainMailboxExecutor,\n                        systemTimerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-06-19 03:40:29","endLine":106,"groupId":"43777","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/e9ee6c507d354e8e60a7a501eb368650abc829.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        getTaskNameWithSubtaskAndId(),\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        systemTimerService);\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"7281f2b73c50c2c6c90894e67f2b78e61986b4f7","commitMessage":"@@@[hotfix] Refactor the initialization of StreamTask to expose CheckpointBarrierHandler\n","date":"2021-06-19 03:40:29","modifiedFileCount":"6","status":"M","submitter":"Yun Gao"},{"authorTime":"2021-08-21 01:27:23","codes":[{"authorDate":"2021-08-21 01:27:23","commitOrder":33,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getEnvironment().getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-08-26 18:54:21","endLine":178,"groupId":"103412","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>[]inputGates@InputConfig[]inputs@WatermarkGauge[]inputWatermarkGauges@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/a65008c04b851befafe50298f82530752ddffe.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate>[] inputGates,\n            InputConfig[] inputs,\n            WatermarkGauge[] inputWatermarkGauges,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        getConfiguration(),\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        inputGates,\n                        operatorChain.getSourceTaskInputs(),\n                        mainMailboxExecutor,\n                        timerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        inputGates,\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        inputProcessor =\n                StreamMultipleInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        inputs,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        setupNumRecordsInCounter(mainOperator),\n                        mainOperator,\n                        inputWatermarkGauges,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        operatorChain,\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-08-21 01:27:23","commitOrder":33,"curCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        configuration,\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        mainMailboxExecutor,\n                        systemTimerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getEnvironment().getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","date":"2021-08-26 18:54:21","endLine":106,"groupId":"103412","id":50,"instanceNumber":2,"isCurCommit":1,"methodName":"createInputProcessor","params":"(List<IndexedInputGate>inputGates1@List<IndexedInputGate>inputGates2@Function<Integer@StreamPartitioner<?>>gatePartitioners)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/9bfcef0db810de949edd2598c5cea0c3a9e1a2.src","preCode":"    protected void createInputProcessor(\n            List<IndexedInputGate> inputGates1,\n            List<IndexedInputGate> inputGates2,\n            Function<Integer, StreamPartitioner<?>> gatePartitioners) {\n\n        \r\n        checkpointBarrierHandler =\n                InputProcessorUtil.createCheckpointBarrierHandler(\n                        this,\n                        configuration,\n                        getCheckpointCoordinator(),\n                        getTaskNameWithSubtaskAndId(),\n                        new List[] {inputGates1, inputGates2},\n                        Collections.emptyList(),\n                        mainMailboxExecutor,\n                        systemTimerService);\n\n        CheckpointedInputGate[] checkpointedInputGates =\n                InputProcessorUtil.createCheckpointedMultipleInputGate(\n                        mainMailboxExecutor,\n                        new List[] {inputGates1, inputGates2},\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        checkpointBarrierHandler,\n                        configuration);\n\n        checkState(checkpointedInputGates.length == 2);\n\n        inputProcessor =\n                StreamTwoInputProcessorFactory.create(\n                        this,\n                        checkpointedInputGates,\n                        getEnvironment().getIOManager(),\n                        getEnvironment().getMemoryManager(),\n                        getEnvironment().getMetricGroup().getIOMetricGroup(),\n                        mainOperator,\n                        input1WatermarkGauge,\n                        input2WatermarkGauge,\n                        operatorChain,\n                        getConfiguration(),\n                        getTaskConfiguration(),\n                        getJobConfiguration(),\n                        getExecutionConfig(),\n                        getUserCodeClassLoader(),\n                        setupNumRecordsInCounter(mainOperator),\n                        getEnvironment().getTaskStateManager().getInputRescalingDescriptor(),\n                        gatePartitioners,\n                        getEnvironment().getTaskInfo());\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"a8ea3c3e81517f9c38f90b82c043136d8b56bf8b","commitMessage":"@@@[FLINK-23862][runtime] Replace usages of AbstractInvokable with interface\n\nA follow-up step after introduction of task interfaces to:\n- accept TaskInvokable in place of AbstractInvokable\n- make StreamTask implement the interfaces directly\n","date":"2021-08-26 18:54:21","modifiedFileCount":"29","status":"M","submitter":"Roman Khachatryan"}]
