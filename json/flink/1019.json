[{"authorTime":"2016-10-07 06:21:42","codes":[{"authorDate":"2016-10-07 06:21:42","commitOrder":2,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","date":"2016-10-27 20:22:02","endLine":251,"groupId":"35838","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/11a208a36275137bfe88099bfd6873d33ca246.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","realPath":"flink-fs-tests/src/test/java/org/apache/flink/hdfstests/ContinuousFileProcessingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"},{"authorDate":"2016-10-07 06:21:42","commitOrder":2,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && !hasSuccessfulCheckpoints) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && hasSuccessfulCheckpoints && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","date":"2016-10-27 20:22:02","endLine":228,"groupId":"37550","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/9b054af64072175ff2bccd908abd7131293384.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && !hasSuccessfulCheckpoints) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && hasSuccessfulCheckpoints && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/ContinuousFileProcessingCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"MB"}],"commitId":"b410c393c960f55c09fadd4f22732d06f801b938","commitMessage":"@@@[FLINK-4800] Introduce the TimestampedFileInputSplit for Continuous File Processing\n\nThis commit mainly introduces the TimestampedFileInputSplit. \nwhich extends the class FileInputSplit and also contains:\ni) the modification time of the file it belongs to and also.  and\nii) when checkpointing.  the point the reader is currently reading\n    from in the split the reader.\n\nThis will be useful for rescaling. With this addition.  the\nContinuousFileMonitoringFunction sends TimestampedFileInputSplit\nto the Readers.  and the Readers' state now contain only\nTimestampedFileInputSplit.\n\nIn addition.  it refactors the code of the ContinuousFileMonitoringFunction\nand that of the ContinuousFileReaderOperator along with the related\ntests.\n\nThis closes #2618.\n","date":"2016-10-27 20:22:02","modifiedFileCount":"5","status":"M","submitter":"kl0u"},{"authorTime":"2016-11-03 18:21:08","codes":[{"authorDate":"2016-10-07 06:21:42","commitOrder":3,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","date":"2016-10-27 20:22:02","endLine":251,"groupId":"35838","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/11a208a36275137bfe88099bfd6873d33ca246.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","realPath":"flink-fs-tests/src/test/java/org/apache/flink/hdfstests/ContinuousFileProcessingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2016-11-03 18:21:08","commitOrder":3,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints < 2) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints >= 2 && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","date":"2016-11-11 21:05:58","endLine":228,"groupId":"37550","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/90/d88617f5efdf49e8ca4ad752ccdcb12aef4238.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && !hasSuccessfulCheckpoints) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasFailed && hasSuccessfulCheckpoints && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/ContinuousFileProcessingCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"b2e8792b8ef07f5e9f676fd83137b3ce4d72cdb0","commitMessage":"@@@[FLINK-5021] Make the ContinuousFileReaderOperator rescalable.\n\nThis is the last commit that completes the refactoring of the\nContinuousFileReaderOperator so that it can be rescalable.\nWith this.  the reader can restart from a savepoint with a\ndifferent parallelism without compromising the provided\nexactly-once guarantees.\n","date":"2016-11-11 21:05:58","modifiedFileCount":"3","status":"M","submitter":"kl0u"},{"authorTime":"2019-12-08 02:38:43","codes":[{"authorDate":"2016-10-07 06:21:42","commitOrder":4,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","date":"2016-10-27 20:22:02","endLine":251,"groupId":"1019","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/11a208a36275137bfe88099bfd6873d33ca246.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tAssert.fail(\"Duplicate line: \"+ value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\t\t\tif (elementCounter == NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\t\t}\n","realPath":"flink-fs-tests/src/test/java/org/apache/flink/hdfstests/ContinuousFileProcessingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2019-12-08 02:38:43","commitOrder":4,"curCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuppressRestartsException(new SuccessException());\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints < 2) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints >= 2 && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","date":"2019-12-17 18:44:09","endLine":239,"groupId":"1019","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"invoke","params":"(Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7f/b85dd1fb2cb9607735334bcba8e0e733d577e6.src","preCode":"\t\tpublic void invoke(String value) throws Exception {\n\t\t\tint fileIdx = getFileIdx(value);\n\n\t\t\tSet<String> content = actualContent.get(fileIdx);\n\t\t\tif (content == null) {\n\t\t\t\tcontent = new HashSet<>();\n\t\t\t\tactualContent.put(fileIdx, content);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!content.add(value + \"\\n\")) {\n\t\t\t\tfail(\"Duplicate line: \" + value);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\n\t\t\telementCounter++;\n\n\t\t\t\r\n\t\t\tif (elementCounter >= NO_OF_FILES * LINES_PER_FILE) {\n\t\t\t\tactualCollectedContent = actualContent;\n\t\t\t\tthrow new SuccessException();\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints < 2) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (!hasRestoredAfterFailure && successfulCheckpoints >= 2 && elementCounter >= elementsToFailure) {\n\t\t\t\tthrow new Exception(\"Task Failure @ elem: \" + elementCounter + \" / \" + elementsToFailure);\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/ContinuousFileProcessingCheckpointITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"8c78e1e6edeb60702b1fb6f810c3cbe6d5c95bb6","commitMessage":"@@@[FLINK-14929][tests] Harden ContinuousFileProcessingCheckpointITCase\n\nRemove limit on number of restarts.\nThrow SuppressRestartsException in TestingSinkFunction.\n","date":"2019-12-17 18:44:09","modifiedFileCount":"1","status":"M","submitter":"Gary Yao"}]
