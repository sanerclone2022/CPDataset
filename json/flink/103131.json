[{"authorTime":"2018-02-06 21:44:01","codes":[{"authorDate":"2018-02-06 21:44:01","commitOrder":1,"curCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.get();\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(iterator);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tAssert.assertTrue(iterator.hasNext());\n\t\t\tAssert.assertTrue(thirdNotUsedHandle == iterator.next().iterator().next());\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\t\t\tAssert.assertFalse(iterator.hasNext());\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","date":"2018-02-25 22:14:21","endLine":136,"groupId":"52189","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreProcedureOrderAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/26f707a621e56b280017e3af77de3b07b1bbc8.src","preCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.get();\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(iterator);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tAssert.assertTrue(iterator.hasNext());\n\t\t\tAssert.assertTrue(thirdNotUsedHandle == iterator.next().iterator().next());\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\t\t\tAssert.assertFalse(iterator.hasNext());\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2018-02-06 21:44:01","commitOrder":1,"curCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(iterator);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t\tAssert.assertFalse(iterator.hasNext());\n\t}\n","date":"2018-02-25 22:14:21","endLine":169,"groupId":"29021","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionThrownIfAllRestoresFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/26f707a621e56b280017e3af77de3b07b1bbc8.src","preCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(iterator);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t\tAssert.assertFalse(iterator.hasNext());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"df3e6bb7627db03635febd48eff4c10032b668ef","commitMessage":"@@@[FLINK-8360][checkpointing] Implement state storage for local recovery and integrate with task lifecycle\n","date":"2018-02-25 22:14:21","modifiedFileCount":"107","status":"B","submitter":"Stefan Richter"},{"authorTime":"2018-02-27 01:03:14","codes":[{"authorDate":"2018-02-27 01:03:14","commitOrder":2,"curCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.get();\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","date":"2018-02-27 22:28:11","endLine":132,"groupId":"52189","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreProcedureOrderAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/15d110280a9fd791c4184a751c75fe7989d87b.src","preCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.get();\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(iterator);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tAssert.assertTrue(iterator.hasNext());\n\t\t\tAssert.assertTrue(thirdNotUsedHandle == iterator.next().iterator().next());\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\t\t\tAssert.assertFalse(iterator.hasNext());\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-02-27 01:03:14","commitOrder":2,"curCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t}\n","date":"2018-02-27 22:28:11","endLine":163,"groupId":"29021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionThrownIfAllRestoresFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/15d110280a9fd791c4184a751c75fe7989d87b.src","preCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\t\tIterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator();\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry);\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(iterator);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t\tAssert.assertFalse(iterator.hasNext());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"56c756040fc4b3f224c4e7c12d208a3ccf5a7c5e","commitMessage":"@@@[hotfix] Improved logging for task local recovery\n","date":"2018-02-27 22:28:11","modifiedFileCount":"9","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-02-27 01:03:14","codes":[{"authorDate":"2019-02-23 03:16:41","commitOrder":3,"curCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.apply(null);\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","date":"2019-02-23 03:16:41","endLine":133,"groupId":"52189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreProcedureOrderAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/6d35e5e329d6f97005df9500ff818a11d4d581.src","preCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.get();\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-02-27 01:03:14","commitOrder":3,"curCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t}\n","date":"2018-02-27 22:28:11","endLine":163,"groupId":"29021","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionThrownIfAllRestoresFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/15d110280a9fd791c4184a751c75fe7989d87b.src","preCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"3bf06b9dd3dc66dcfdeccaaa591ace41ea51e343","commitMessage":"@@@[FLINK-10043] [State Backends] Refactor RocksDBKeyedStateBackend object construction/initialization/restore code\n\nThis closes #7674.\n","date":"2019-02-23 03:16:41","modifiedFileCount":"36","status":"M","submitter":"Yu Li"},{"authorTime":"2018-02-27 01:03:14","codes":[{"authorDate":"2019-03-02 18:19:21","commitOrder":4,"curCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.apply(Collections.emptyList());\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","date":"2019-03-05 21:52:36","endLine":135,"groupId":"103131","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreProcedureOrderAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/03481e36784d0ad323e48a6cf1e52b3a0f2a43.src","preCode":"\tpublic void testRestoreProcedureOrderAndFailure() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\t\tCheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024);\n\n\t\tListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>(\"test-state\", Integer.class);\n\t\tOperatorStateBackend originalBackend = backendSupplier.apply(null);\n\t\tSnapshotResult<OperatorStateHandle> snapshotResult;\n\n\t\ttry {\n\t\t\tListState<Integer> listState = originalBackend.getListState(stateDescriptor);\n\n\t\t\tlistState.add(0);\n\t\t\tlistState.add(1);\n\t\t\tlistState.add(2);\n\t\t\tlistState.add(3);\n\n\t\t\tRunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =\n\t\t\t\toriginalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation());\n\n\t\t\tsnapshot.run();\n\t\t\tsnapshotResult = snapshot.get();\n\n\t\t} finally {\n\t\t\toriginalBackend.close();\n\t\t\toriginalBackend.dispose();\n\t\t}\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot());\n\t\tOperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\tOperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\tAssert.assertNotNull(restoredBackend);\n\n\t\ttry {\n\t\t\tverify(firstFailHandle).openInputStream();\n\t\t\tverify(secondSuccessHandle).openInputStream();\n\t\t\tverifyZeroInteractions(thirdNotUsedHandle);\n\n\t\t\tListState<Integer> listState = restoredBackend.getListState(stateDescriptor);\n\n\t\t\tIterator<Integer> stateIterator = listState.get().iterator();\n\t\t\tAssert.assertEquals(0, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(1, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(2, (int) stateIterator.next());\n\t\t\tAssert.assertEquals(3, (int) stateIterator.next());\n\t\t\tAssert.assertFalse(stateIterator.hasNext());\n\n\t\t} finally {\n\t\t\trestoredBackend.close();\n\t\t\trestoredBackend.dispose();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2018-02-27 01:03:14","commitOrder":4,"curCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t}\n","date":"2018-02-27 22:28:11","endLine":163,"groupId":"103131","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionThrownIfAllRestoresFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/15d110280a9fd791c4184a751c75fe7989d87b.src","preCode":"\tpublic void testExceptionThrownIfAllRestoresFailed() throws Exception {\n\n\t\tCloseableRegistry closeableRegistry = new CloseableRegistry();\n\n\t\tOperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class);\n\t\tOperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class);\n\n\t\tList<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(firstFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(secondFailHandle)),\n\t\t\tnew StateObjectCollection<>(Collections.singletonList(thirdFailHandle)));\n\n\t\tBackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =\n\t\t\tnew BackendRestorerProcedure<>(backendSupplier, closeableRegistry, \"test op state backend\");\n\n\t\ttry {\n\t\t\trestorerProcedure.createAndRestore(sortedRestoreOptions);\n\t\t\tAssert.fail();\n\t\t} catch (Exception ignore) {\n\t\t}\n\n\t\tverify(firstFailHandle).openInputStream();\n\t\tverify(secondFailHandle).openInputStream();\n\t\tverify(thirdFailHandle).openInputStream();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/BackendRestorerProcedureTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"94f84a5c7b4876dee5b34e6a3725da7ee06a607f","commitMessage":"@@@[FLINK-11731] [State Backends] Make DefaultOperatorStateBackend follow the builder pattern\n\nThis closes #7899.\n","date":"2019-03-05 21:52:36","modifiedFileCount":"19","status":"M","submitter":"Yu Li"}]
