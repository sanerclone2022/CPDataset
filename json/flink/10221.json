[{"authorTime":"2021-03-30 22:40:31","codes":[{"authorDate":"2021-03-30 22:40:31","commitOrder":5,"curCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(FlinkKafkaProducer.class));\n    }\n","date":"2021-04-01 10:16:59","endLine":194,"groupId":"23198","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/e155d9d748f3c3f17bf0f88980ddf1cd07f1d4.src","preCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(FlinkKafkaProducer.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"},{"authorDate":"2021-03-30 22:40:31","commitOrder":5,"curCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(BufferedUpsertSinkFunction.class));\n    }\n","date":"2021-04-01 10:16:59","endLine":233,"groupId":"24572","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferedTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/e155d9d748f3c3f17bf0f88980ddf1cd07f1d4.src","preCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(BufferedUpsertSinkFunction.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"ec9b0c5b60290697769415eb3e1b1ed2052460ac","commitMessage":"@@@[FLINK-21191][upsert-kafka] Support buffered sink function for upsert-kafka\n\nThis closes #15434\n","date":"2021-04-01 10:16:59","modifiedFileCount":"7","status":"M","submitter":"Shengkai"},{"authorTime":"2021-08-10 19:34:26","codes":[{"authorDate":"2021-08-10 19:34:26","commitOrder":6,"curCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkProvider.class));\n        final SinkProvider sinkFunctionProvider = (SinkProvider) provider;\n        final Sink<RowData, ?, ?, ?> sink = sinkFunctionProvider.createSink();\n        assertThat(sink, instanceOf(KafkaSink.class));\n    }\n","date":"2021-08-14 00:05:49","endLine":198,"groupId":"23198","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/af65075c187f7df363d16e8961eff4fc05aa3c.src","preCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(FlinkKafkaProducer.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2021-08-10 19:34:26","commitOrder":6,"curCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(BufferedUpsertSinkFunction.class));\n    }\n","date":"2021-08-14 00:05:49","endLine":238,"groupId":"23201","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferedTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/af65075c187f7df363d16e8961eff4fc05aa3c.src","preCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(BufferedUpsertSinkFunction.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"1948446eeda0bcd93471b2aad61a953b6a2e36e3","commitMessage":"@@@[FLINK-23639][connectors/kafka] Migrate Table API Kafka connector to use FLIP-143 KafkaSink\n","date":"2021-08-14 00:05:49","modifiedFileCount":"9","status":"M","submitter":"Fabian Paul"},{"authorTime":"2021-08-12 19:57:12","codes":[{"authorDate":"2021-08-10 19:34:26","commitOrder":7,"curCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkProvider.class));\n        final SinkProvider sinkFunctionProvider = (SinkProvider) provider;\n        final Sink<RowData, ?, ?, ?> sink = sinkFunctionProvider.createSink();\n        assertThat(sink, instanceOf(KafkaSink.class));\n    }\n","date":"2021-08-14 00:05:49","endLine":198,"groupId":"10221","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/af65075c187f7df363d16e8961eff4fc05aa3c.src","preCode":"    public void testTableSink() {\n        \r\n        final DynamicTableSink actualSink = createTableSink(SINK_SCHEMA, getFullSinkOptions());\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        SinkBufferFlushMode.DISABLED,\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkProvider.class));\n        final SinkProvider sinkFunctionProvider = (SinkProvider) provider;\n        final Sink<RowData, ?, ?, ?> sink = sinkFunctionProvider.createSink();\n        assertThat(sink, instanceOf(KafkaSink.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"N"},{"authorDate":"2021-08-12 19:57:12","commitOrder":7,"curCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(DataStreamSinkProvider.class));\n        final DataStreamSinkProvider sinkProvider = (DataStreamSinkProvider) provider;\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        sinkProvider.consumeDataStream(env.fromElements(new BinaryRowData(1)));\n        final StreamOperatorFactory<?> sinkOperatorFactory =\n                env.getStreamGraph().getStreamNodes().stream()\n                        .filter(n -> n.getOperatorName().contains(\"Sink\"))\n                        .findFirst()\n                        .orElseThrow(\n                                () ->\n                                        new RuntimeException(\n                                                \"Expected operator with name Sink in stream graph.\"))\n                        .getOperatorFactory();\n        assertThat(sinkOperatorFactory, instanceOf(SinkOperatorFactory.class));\n        assertThat(\n                ((SinkOperatorFactory) sinkOperatorFactory).getSink(),\n                instanceOf(ReducingUpsertSink.class));\n    }\n","date":"2021-08-14 15:31:10","endLine":255,"groupId":"10221","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferedTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/38fd2e7ad1a433081dee7aef5cdf271a38dd5d.src","preCode":"    public void testBufferedTableSink() {\n        \r\n        final DynamicTableSink actualSink =\n                createTableSink(\n                        SINK_SCHEMA,\n                        getModifiedOptions(\n                                getFullSinkOptions(),\n                                options -> {\n                                    options.put(\"sink.buffer-flush.max-rows\", \"100\");\n                                    options.put(\"sink.buffer-flush.interval\", \"1s\");\n                                }));\n\n        final DynamicTableSink expectedSink =\n                createExpectedSink(\n                        SINK_SCHEMA.toPhysicalRowDataType(),\n                        keyEncodingFormat,\n                        valueEncodingFormat,\n                        SINK_KEY_FIELDS,\n                        SINK_VALUE_FIELDS,\n                        null,\n                        SINK_TOPIC,\n                        UPSERT_KAFKA_SINK_PROPERTIES,\n                        DeliveryGuarantee.AT_LEAST_ONCE,\n                        new SinkBufferFlushMode(100, 1000L),\n                        null);\n\n        \r\n        final KafkaDynamicSink actualUpsertKafkaSink = (KafkaDynamicSink) actualSink;\n        assertEquals(expectedSink, actualSink);\n\n        \r\n        DynamicTableSink.SinkRuntimeProvider provider =\n                actualUpsertKafkaSink.getSinkRuntimeProvider(new SinkRuntimeProviderContext(false));\n        assertThat(provider, instanceOf(SinkFunctionProvider.class));\n        final SinkFunctionProvider sinkFunctionProvider = (SinkFunctionProvider) provider;\n        final SinkFunction<RowData> sinkFunction = sinkFunctionProvider.createSinkFunction();\n        assertThat(sinkFunction, instanceOf(BufferedUpsertSinkFunction.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"c082a10d5d3087961184e520476363849e8b3a8a","commitMessage":"@@@[FLINK-23735][connectors/kafka] Migrate BufferedUpsertSinkFunction to FLIP-143 Sink API\n","date":"2021-08-14 15:31:10","modifiedFileCount":"3","status":"M","submitter":"Fabian Paul"}]
