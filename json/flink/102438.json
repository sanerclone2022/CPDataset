[{"authorTime":"2016-08-11 00:44:50","codes":[{"authorDate":"2016-08-11 00:44:50","commitOrder":1,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(backend.getKeyGroupAssigner().getKeyGroupIndex(key));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2016-09-01 01:10:01","endLine":155,"groupId":"42654","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/65c25ea2db6383e3c20cc8c680321d59554177.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(backend.getKeyGroupAssigner().getKeyGroupIndex(key));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2016-08-11 00:44:50","commitOrder":1,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(backend.getKeyGroupAssigner().getKeyGroupIndex(key));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","date":"2016-09-01 01:10:01","endLine":163,"groupId":"33579","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/63c93af9f8db8024f626768c05bd5cb5080de4.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(backend.getKeyGroupAssigner().getKeyGroupIndex(key));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"}],"commitId":"4809f5367b08a9734fc1bd4875be51a9f3bb65aa","commitMessage":"@@@[FLINK-3761] Refactor State Backends/Make Keyed State Key-Group Aware\n\nThe biggest change in this is that functionality that used to be in\nAbstractStateBackend is now moved to CheckpointStreamFactory and\nKeyedStateBackend. The former is responsible for providing streams that\ncan be used to checkpoint data while the latter is responsible for\nkeeping keyed state. A keyed backend can checkpoint the state that it\nkeeps by using a CheckpointStreamFactory.\n\nThis also refactors how asynchronous keyed state snapshots work. They\nare not implemented using a Future/RunnableFuture.\n\nAlso.  this changes the keyed state backends to be key-group aware and to\nsnapshot the state in key-groups with an index for restoring.\n","date":"2016-09-01 01:10:01","modifiedFileCount":"100","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2016-08-29 17:53:22","codes":[{"authorDate":"2016-08-29 17:53:22","commitOrder":2,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2016-09-01 01:10:01","endLine":156,"groupId":"42654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/5232574bbe2a97399fb3522004c78b1b143856.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"MB"},{"authorDate":"2016-08-29 17:53:22","commitOrder":2,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","date":"2016-09-01 01:10:01","endLine":163,"groupId":"33579","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/d1bc770cc5828e40ea977417e31d16e30173e3.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"MB"}],"commitId":"6d4306186e09be6f2557600ed7a853c33d3ae6bd","commitMessage":"@@@[FLINK-4380] Remove KeyGroupAssigner in favor of static method/Have default max. parallelism at 128\n","date":"2016-09-01 01:10:01","modifiedFileCount":"39","status":"M","submitter":"Stefan Richter"},{"authorTime":"2016-08-29 17:53:22","codes":[{"authorDate":"2017-02-14 13:39:30","commitOrder":3,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, List<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, List<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-02-15 19:21:07","endLine":162,"groupId":"42654","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/e8ea7e73bc0b189d657e65796e01409432f845.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2016-08-29 17:53:22","commitOrder":3,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","date":"2016-09-01 01:10:01","endLine":163,"groupId":"33579","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/d1bc770cc5828e40ea977417e31d16e30173e3.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"}],"commitId":"d47446cafffe0d34d89488f6eb860aa139ceb3f1","commitMessage":"@@@[FLINK-5790] [core] Use list types when ListStateDescriptor extends StateDescriptor\n\nThis closes #3305\n","date":"2017-02-15 19:21:07","modifiedFileCount":"14","status":"M","submitter":"xiaogang.sxg"},{"authorTime":"2016-08-29 17:53:22","codes":[{"authorDate":"2017-02-14 22:32:03","commitOrder":4,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-02-15 20:10:30","endLine":161,"groupId":"42654","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/02/c3067f3efd2d6f6c5cbdd42ee4aac7d8cbc0b0.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, List<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, List<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2016-08-29 17:53:22","commitOrder":4,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","date":"2016-09-01 01:10:01","endLine":163,"groupId":"33579","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/d1bc770cc5828e40ea977417e31d16e30173e3.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"}],"commitId":"2045cc5f84ab39f18f423154c5620a79ac6d44ba","commitMessage":"@@@[FLINK-5790] [core] Followups and tests for the StateDescriptor changes\n","date":"2017-02-15 20:10:30","modifiedFileCount":"8","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-03-03 17:51:15","codes":[{"authorDate":"2017-03-03 17:51:15","commitOrder":5,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-03-17 01:34:02","endLine":112,"groupId":"42654","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/f67f0a8263453f82a6560758ce8557321eb868.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, ArrayList<V>>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, ArrayList<V>> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tArrayList<V> result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2017-03-03 17:51:15","commitOrder":5,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","date":"2017-03-17 01:34:02","endLine":112,"groupId":"5423","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/1123d3be3921859ce44bd2b4aae32f4e865331.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tMap<N, Map<K, SV>> namespaceMap =\n\t\t\t\tstateTable.get(KeyGroupRangeAssignment.assignToKeyGroup(key, backend.getNumberOfKeyGroups()));\n\n\t\tif (namespaceMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tMap<K, SV> keyedMap = namespaceMap.get(currentNamespace);\n\n\t\tif (keyedMap == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tSV result = keyedMap.get(key);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"ab014ef94e0e9137ac6f8f41dae385ff71e8ba5b","commitMessage":"@@@[FLINK-5715] Asynchronous snapshots for heap-based keyed state backend\n","date":"2017-03-17 01:34:02","modifiedFileCount":"33","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-10-05 01:11:09","codes":[{"authorDate":"2017-03-03 17:51:15","commitOrder":6,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2017-03-17 01:34:02","endLine":112,"groupId":"42654","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/f67f0a8263453f82a6560758ce8557321eb868.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-10-05 01:11:09","commitOrder":6,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","date":"2017-10-11 21:33:30","endLine":112,"groupId":"5423","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/97/b6bcd2281bee90da47d5e51e71e98474dbc8a9.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateRequestSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"29a6e9952ebb2c7349d25d3696e2ec1d7e8e620a","commitMessage":"@@@[FLINK-7769][QS] Move queryable state outside the runtime.\n\nCreates a separate for the queryable state and  moves the client\ncode outside the runtime. The Task Manager is now instantiating\nthe KvStateServer using reflection.\n","date":"2017-10-11 21:33:30","modifiedFileCount":"14","status":"M","submitter":"kkloudas"},{"authorTime":"2017-10-05 01:11:09","codes":[{"authorDate":"2018-01-21 13:29:38","commitOrder":7,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2018-01-23 21:03:52","endLine":113,"groupId":"42654","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/858071ffaa75e5ced3616a9a71c6d17bb11c4b.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tArrayList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2017-10-05 01:11:09","commitOrder":7,"curCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","date":"2017-10-11 21:33:30","endLine":112,"groupId":"5423","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(Kkey@Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/97/b6bcd2281bee90da47d5e51e71e98474dbc8a9.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"e075da5d5eb0f5ae8c394ea0c549f9dbce28fcf3","commitMessage":"@@@[FLINK-8365] Relax List type in HeapListState and HeapKeyedStateBackend\n\nThis closes #5326.\n","date":"2018-01-23 21:03:52","modifiedFileCount":"3","status":"M","submitter":"Bowen Li"},{"authorTime":"2018-03-10 05:47:35","codes":[{"authorDate":"2018-03-10 05:47:35","commitOrder":8,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<List<V>> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tList<V> result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfinal TypeSerializer<V> dupSerializer = ((ListSerializer<V>) safeValueSerializer).getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tdupSerializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","date":"2018-03-29 23:35:39","endLine":137,"groupId":"102438","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<List<V>>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/68560cdc4f54e2f3a53c9138fdc15db94fa9a7.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tList<V> result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tTypeSerializer<V> serializer = stateDesc.getElementSerializer();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tDataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos);\n\n\t\t\r\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tserializer.serialize(result.get(i), view);\n\t\t\tif (i < result.size() -1) {\n\t\t\t\tview.writeByte(',');\n\t\t\t}\n\t\t}\n\t\tview.flush();\n\n\t\treturn baos.toByteArray();\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapListState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2018-03-10 05:47:35","commitOrder":8,"curCode":"\tpublic byte[] getSerializedValue(\n\t\t\tfinal byte[] serializedKeyAndNamespace,\n\t\t\tfinal TypeSerializer<K> safeKeySerializer,\n\t\t\tfinal TypeSerializer<N> safeNamespaceSerializer,\n\t\t\tfinal TypeSerializer<SV> safeValueSerializer) throws Exception {\n\n\t\tPreconditions.checkNotNull(serializedKeyAndNamespace);\n\t\tPreconditions.checkNotNull(safeKeySerializer);\n\t\tPreconditions.checkNotNull(safeNamespaceSerializer);\n\t\tPreconditions.checkNotNull(safeValueSerializer);\n\n\t\tTuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(\n\t\t\t\tserializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer);\n\n\t\tSV result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn KvStateSerializer.serializeValue(result, safeValueSerializer);\n\t}\n","date":"2018-03-29 23:35:39","endLine":108,"groupId":"102438","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getSerializedValue","params":"(finalbyte[]serializedKeyAndNamespace@finalTypeSerializer<K>safeKeySerializer@finalTypeSerializer<N>safeNamespaceSerializer@finalTypeSerializer<SV>safeValueSerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/89c53795dfcb8a78f1d734053d5695d40adbe4.src","preCode":"\tpublic byte[] getSerializedValue(K key, N namespace) throws Exception {\n\t\tPreconditions.checkState(namespace != null, \"No namespace given.\");\n\t\tPreconditions.checkState(key != null, \"No key given.\");\n\n\t\tSV result = stateTable.get(key, namespace);\n\n\t\tif (result == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked,rawtypes\")\n\t\tTypeSerializer serializer = stateDesc.getSerializer();\n\t\treturn KvStateSerializer.serializeValue(result, serializer);\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/AbstractHeapState.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"db8e1f09bd7dcd9f392bf987e96cddcb34665b6c","commitMessage":"@@@[FLINK-8802] [QS] Fix concurrent access to non-duplicated serializers.\n\nThis closes #5691.\n","date":"2018-03-29 23:35:39","modifiedFileCount":"42","status":"M","submitter":"kkloudas"}]
