[{"authorTime":"2020-05-04 11:03:38","codes":[{"authorDate":"2020-04-23 23:22:55","commitOrder":4,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-01 04:08:04","endLine":103,"groupId":"40384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/ec082c2dce668a2539da8f94a3d044e97bff15.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2020-05-04 11:03:38","commitOrder":4,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-14 05:00:06","endLine":85,"groupId":"40384","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/80b5426718f8ff2f0adbf966a13eef3f8eca44.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"c84e48cfe6c27cf738850e5d802322c3ca30b48f","commitMessage":"@@@[FLINK-10934][k8s] Support application mode for kubernetes\n\nThis closes #12003.\n","date":"2020-05-14 05:00:06","modifiedFileCount":"7","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-05-18 18:29:48","codes":[{"authorDate":"2020-05-18 18:29:48","commitOrder":5,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-19 00:36:39","endLine":106,"groupId":"40384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c8/b107cdf2e7a4d35af56014c209ef8e5ecbc2c0.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-05-18 18:29:48","commitOrder":5,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-19 00:36:39","endLine":83,"groupId":"40384","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/4902ffb556a1012ce7490ecd4dc9b2af8159fa.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"b591f906685ee1379d791d296bd0b305cc7e9bb7","commitMessage":"@@@[FLINK-17796] Respect user specified classpath for application mode\n\nThis closes #12222.\n","date":"2020-05-19 00:36:39","modifiedFileCount":"4","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-10-19 21:09:56","codes":[{"authorDate":"2020-10-19 21:09:56","commitOrder":6,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tYarnApplicationClusterEntryPoint.class);\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, dynamicParameters, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":112,"groupId":"102413","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/37ab0fea27a1301f473df6776a3de7f42317ff.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-19 21:09:56","commitOrder":6,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tKubernetesApplicationClusterEntrypoint.class);\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration(dynamicParameters);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":88,"groupId":"102413","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a1/c1fd594456d56c239b6beb0c9bca359e92af1e.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, KubernetesApplicationClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tfinal Configuration configuration = KubernetesEntrypointUtils.loadConfiguration();\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal KubernetesApplicationClusterEntrypoint kubernetesApplicationClusterEntrypoint =\n\t\t\tnew KubernetesApplicationClusterEntrypoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(kubernetesApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesApplicationClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"0a51d85255b9c7480eb5e939d88e9ccc5e98af69","commitMessage":"@@@[FLINK-19662][runtime][kubernetes][yarn][dist] Added dynamic parameters to BashJavaUtils' JobManager argument extraction. Additionally.  the Kubernetes and Yarn deployment were extended accordingly.\n\nThe parameters are returned using the newly introduced global environment variable DYNAMIC_PARAMETERS.\n","date":"2020-11-05 01:07:21","modifiedFileCount":"17","status":"M","submitter":"Matthias Pohl"}]
