[{"authorTime":"2015-10-11 17:37:29","codes":[{"authorDate":"2015-10-11 17:37:29","commitOrder":1,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-10-21 00:39:12","endLine":147,"groupId":"1528","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/33349260477036ffe599c6770e5900f9d6a72f.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2015-10-11 17:37:29","commitOrder":1,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-10-21 00:39:12","endLine":209,"groupId":"43880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/33349260477036ffe599c6770e5900f9d6a72f.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"444226970e31856787fbebdd7793805293faf13b","commitMessage":"@@@[FLINK-2864] Make State of General-Purpose Window Operators Fault-Tolerant\n\nThis adds method state() on Trigger context that should be used to\ncreate an OperatorState to deal with fault-tolerant state.\n\nWindowAssigner now has a method getWindowSerializer() that is used to\nget a TypeSerializer for the Windows that it assigns. The Serializer for\nthe Key is retrieved from the input KeyedStream and the serializer for\nthe input elements is already available.\n\nDuring checkpointing all currently in-flight windows (per key.  per\nwindow) are serialized using the TypeSerializers. The state that is\naccessible in Triggers using state() is kept in a\nHashMap<String.  Serializable>.  this is serialized using java\nserialization.\n","date":"2015-10-21 00:39:12","modifiedFileCount":"31","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2016-01-25 19:34:05","codes":[{"authorDate":"2016-01-25 19:34:05","commitOrder":2,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-04 03:27:51","endLine":146,"groupId":"40845","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/ca07477719d404a92b1be3eba67b49a7ecb306.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2016-01-25 19:34:05","commitOrder":2,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-04 03:27:51","endLine":208,"groupId":"33965","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/ca07477719d404a92b1be3eba67b49a7ecb306.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"67ca4a436daf8de1a6e0329b4b30342e77d26087","commitMessage":"@@@[FLINK-3200] Use Partitioned State in WindowOperator\n\nThis changes window operator to use the new partitioned state\nabstraction for keeping window contents instead of custom internal\nstate and the checkpointed interface.\n\nFor now.  timers are still kept as custom checkpointed state.  however.\n\nWindowOperator now expects a StateIdentifier for MergingState.  this can\neither be for ReducingState or ListState but WindowOperator is agnostic\nto the type of State. Also the signature of WindowFunction is changed to\ninclude the type of intermediate input. For example.  if a ReducingState\nis used the input of the WindowFunction is T (where T is the input\ntype). If using a ListState the input of the WindowFunction would be of\ntype Iterable[T].\n","date":"2016-02-04 03:27:51","modifiedFileCount":"40","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2015-12-17 20:49:10","codes":[{"authorDate":"2015-12-17 20:49:10","commitOrder":3,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-15 22:58:05","endLine":146,"groupId":"40845","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9d/2f06225b58eb9b23c1fefc741befa62a8bc7bc.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2015-12-17 20:49:10","commitOrder":3,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-15 22:58:05","endLine":208,"groupId":"33965","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9d/2f06225b58eb9b23c1fefc741befa62a8bc7bc.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setNumberOfExecutionRetries(3);\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"5eae47f5d381cd55729660f62c714b52d28413ed","commitMessage":"@@@[FLINK-3187] [restart] Introduce RestartStrategy to ExecutionGraph\n\nA RestartStrategy defines how the ExecutionGraph reacts in case of a restart. Different strategies\nare conceivable. For example.  no restart.  fixed delay restart.  exponential backoff restart.  scaling\nin/out restart.  etc.\n\nExpose RestartStrategy to user API\n\nThis removes the setNumberExecutionRetries and the setDelayBetweenRetries on the ExecutionEnvironment and\nthe ExecutionConfig. Instead the more general RestartStrategy can be set. In order to maintain the\nseparation between the runtime and api module.  one sets a RestartStrategyConfiguration which is transformed\ninto a RestartStrategy on the JobManager.\n\nReplace old execution-retries configuration parameters by restart-strategy.\n\nAdd FixedDelayRestartStrategy test case\n\nReintroduce old configuration values and API calls for the deprecated restart mechanism\n\nThe old configuration values and API calls will be respected if no explicit\nRestartStrategy has been set. The values.  if correct.  are used to instantiate\na FixedDelayRestartStrategy.\n\nAdd deprecation comments to the JavaDocs\n\nAdd logging statement for job recovery\n\nFix JobManagerProcessFailureBatchRecoveryITCase by introducing a job recovery timeout\n\nAdd proper annotations to RestartStrategies\n\nLet ExecutionGraphRestartTest extend TestLogger\n\nThis closes #1470.\n","date":"2016-02-15 22:58:05","modifiedFileCount":"53","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2016-02-26 22:19:50","codes":[{"authorDate":"2016-02-26 22:19:50","commitOrder":4,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-27 07:07:05","endLine":146,"groupId":"1528","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/8a45e9b63d6204500745df5b33eecb2c1a2b2f.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2016-02-26 22:19:50","commitOrder":4,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-27 07:07:05","endLine":208,"groupId":"43880","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/8a45e9b63d6204500745df5b33eecb2c1a2b2f.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Iterable<Tuple2<Long, IntType>>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"27b5c49e76f58992fd5575959a7dea7088505e12","commitMessage":"@@@[FLINK-3521] Make Iterable part of method signature for WindowFunction\n\nThis closes #1723\n","date":"2016-02-27 07:07:05","modifiedFileCount":"32","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-07-28 21:08:24","codes":[{"authorDate":"2016-02-26 22:19:50","commitOrder":5,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-27 07:07:05","endLine":146,"groupId":"1528","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/8a45e9b63d6204500745df5b33eecb2c1a2b2f.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2016-07-28 21:08:24","commitOrder":5,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-09-01 01:04:31","endLine":210,"groupId":"43880","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/3fb424a7c3036a1a4b201645fec34fb127c16e.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"ec975aaba79449bd93020f296b05ea509ea57bdc","commitMessage":"@@@[FLINK-4380] Introduce KeyGroupAssigner and Max-Parallelism Parameter\n\nThis introduces a new KeySelector that assigns keys to key groups and\nalso adds the max parallelism parameter throughout all API levels.\n\nThis also adds tests for the newly introduced features.\n","date":"2016-09-01 01:04:31","modifiedFileCount":"41","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2016-11-03 05:34:59","codes":[{"authorDate":"2016-02-26 22:19:50","commitOrder":6,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-02-27 07:07:05","endLine":146,"groupId":"1528","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/8a45e9b63d6204500745df5b33eecb2c1a2b2f.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2016-11-03 05:34:59","commitOrder":6,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-11-09 04:15:34","endLine":210,"groupId":"43880","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/873a3e4eb30270828555ca70e81d353f76e979.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"48a48139172e86f548f3b2f1564bdc948c3fe76a","commitMessage":"@@@[FLINK-4985] [checkpointing] Report canceled / declined checkpoints to the Checkpoint Coordinator\n","date":"2016-11-09 04:15:34","modifiedFileCount":"23","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-03-17 00:03:03","codes":[{"authorDate":"2017-03-17 00:03:03","commitOrder":7,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:06:07","endLine":152,"groupId":"1528","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/73be63deca2db67d93ebcf6bf72d69192b8244.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\t\t\t\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2017-03-17 00:03:03","commitOrder":7,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:06:07","endLine":211,"groupId":"43880","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/73be63deca2db67d93ebcf6bf72d69192b8244.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"ddd6a99a95b56c52ea5b5153b7270b578f5479bc","commitMessage":"@@@[FLINK-6078] Remove CuratorFramework#close calls from ZooKeeper based HA services\n\nRemove client less factory methods from ZooKeeperUtils\n\nIntroduce default job id\n\nThis closes #3781.\n","date":"2017-05-05 17:06:07","modifiedFileCount":"114","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2017-05-31 03:40:47","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":8,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys,\n\t\t\t\t\t\t\tnumElementsPerKey,\n\t\t\t\t\t\t\tnumElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSize)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-07-13 06:37:47","endLine":153,"groupId":"1528","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fd/4ecd4e59b5eefeb5ca50c477b9a5b753b76e67.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\t\t\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY,\n\t\t\t\t\t\t\tNUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SIZE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2017-05-31 03:40:47","commitOrder":8,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys, numElementsPerKey, numElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSlide)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-07-13 06:37:47","endLine":211,"groupId":"43880","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fd/4ecd4e59b5eefeb5ca50c477b9a5b753b76e67.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int NUM_ELEMENTS_PER_KEY = 3000;\n\t\tfinal int WINDOW_SIZE = 1000;\n\t\tfinal int WINDOW_SLIDE = 100;\n\t\tfinal int NUM_KEYS = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(NUM_KEYS, NUM_ELEMENTS_PER_KEY, NUM_ELEMENTS_PER_KEY / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(WINDOW_SIZE, MILLISECONDS), Time.of(WINDOW_SLIDE, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(NUM_KEYS, NUM_ELEMENTS_PER_KEY / WINDOW_SLIDE)).setParallelism(1);\n\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"9bd491e05120915cbde36d4452e3982fe5d0975f","commitMessage":"@@@[FLINK-6731] [tests] Activate strict checkstyle for flink-tests\n\nThis closes #4295\n","date":"2017-07-13 06:37:47","modifiedFileCount":"185","status":"M","submitter":"Greg Hogan"},{"authorTime":"2018-02-20 20:41:45","codes":[{"authorDate":"2018-02-20 20:41:45","commitOrder":9,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys,\n\t\t\t\t\t\t\tnumElementsPerKey,\n\t\t\t\t\t\t\tnumElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSize)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":142,"groupId":"1528","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/167a9fd6e3743aff48996aecd09273c533c69a.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys,\n\t\t\t\t\t\t\tnumElementsPerKey,\n\t\t\t\t\t\t\tnumElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSize)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-02-20 20:41:45","commitOrder":9,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys, numElementsPerKey, numElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSlide)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":201,"groupId":"43880","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/167a9fd6e3743aff48996aecd09273c533c69a.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys, numElementsPerKey, numElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSlide)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"cb08aca3585bde903bc879b2009c7abdcd225019","commitMessage":"@@@[FLINK-8703][tests] Migrate tests to MiniClusterResource (batch #1)\n\nThis closes #5535.\n","date":"2018-02-22 01:19:38","modifiedFileCount":"16","status":"M","submitter":"zentol"},{"authorTime":"2018-07-19 05:29:56","codes":[{"authorDate":"2018-07-19 05:29:56","commitOrder":10,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-07-20 21:57:49","endLine":136,"groupId":"20708","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/c2aa0e87f05160326cd708ce33f99db222ab18.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys,\n\t\t\t\t\t\t\tnumElementsPerKey,\n\t\t\t\t\t\t\tnumElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSize)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-07-19 05:29:56","commitOrder":10,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-07-20 21:57:49","endLine":197,"groupId":"20708","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/c2aa0e87f05160326cd708ce33f99db222ab18.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\t\tFailingSource.reset();\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(numKeys, numElementsPerKey, numElementsPerKey / 3))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.addSink(new ValidatingSink(numKeys, numElementsPerKey / windowSlide)).setParallelism(1);\n\n\t\t\ttryExecute(env, \"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"d309e61e2bae170872b43cf60bd2fd9fef77814c","commitMessage":"@@@[FLINK-9902][tests] Improve and refactor window checkpointing IT cases\n\nThis closes #6376.\n","date":"2018-07-20 21:57:49","modifiedFileCount":"4","status":"M","submitter":"Stefan Richter"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":11,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":135,"groupId":"20708","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/0926fa637514177709181cc84be0ef9c8a7d27.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":11,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":195,"groupId":"20708","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/0926fa637514177709181cc84be0ef9c8a7d27.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"},{"authorTime":"2020-09-21 18:40:06","codes":[{"authorDate":"2020-09-21 18:40:06","commitOrder":12,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.milliseconds(windowSize)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-10-01 23:03:44","endLine":136,"groupId":"20708","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/83046f277ea1e624e818bd85cb4b79f8d2c5b8.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-09-21 18:40:06","commitOrder":12,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(windowSize), Time.milliseconds(windowSlide)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-10-01 23:03:44","endLine":196,"groupId":"20710","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/83046f277ea1e624e818bd85cb4b79f8d2c5b8.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.timeWindowAll(Time.of(windowSize, MILLISECONDS), Time.of(windowSlide, MILLISECONDS))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"1175364cc9f5bc6018d4c3f231d24cb8ff5e6341","commitMessage":"@@@[FLINK-19317] Make EventTime the default TimeCharacteristic\n\nThis is part of the FLIP-134 (Batch execution for the DataStream API)\nwork.\n\nEvent time is the only sensible time characteristic for batch\nprocessing. We therefore change the default value of the\nTimeCharacteristic from ProcessingTime to EventTime. This means the\nDataStream API programs that were using event time before now just work\nwithout manually changing this setting. Processing-time programs will\nalso still work.  because using processing-time timers is not dependent\non the TimeCharacteristic. DataStream programs that don't set a\nTimestampAssigner or WatermarkStrategy will also still work if they\ndon't use operations that don't rely on (event-time) timestamps.  This\nis true for both BATCH and STREAMING execution mode.\n\nWith this change.  users don't need to call\nsetStreamTimeCharacteristic(EventTime) anymore. We will make sure they\nlearn of this by deprecating the method in a follow-up commit.\n\nThe only real user-visible change of this is that programs that used the\nKeyedStream.timeWindow()/DataStream.timeWindow() operation.  which is\ndependent on the TimeCharacteristic will now use event time by default.\nWe don't think this operation is useful because the behaviour can be\nsurprising. We recommend users always use an explicit processing-time\nwindow or event-time window.\n\nWe also change the default watermark interval from 0 (disabled) to 200\nto match the previous behaviour of calling\nsetStreamTimeCharacteristic(EventTime).\n","date":"2020-10-01 23:03:44","modifiedFileCount":"18","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":13,"curCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.milliseconds(windowSize)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-10-01 23:03:45","endLine":134,"groupId":"101634","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testTumblingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/53d4766cdcb437ac53eba77ba7d383495226ec.src","preCode":"\tpublic void testTumblingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSize), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.milliseconds(windowSize)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSize)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Tumbling Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":13,"curCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(windowSize), Time.milliseconds(windowSlide)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-10-01 23:03:45","endLine":193,"groupId":"101634","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlidingTimeWindow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/53d4766cdcb437ac53eba77ba7d383495226ec.src","preCode":"\tpublic void testSlidingTimeWindow() {\n\t\tfinal int numElementsPerKey = 3000;\n\t\tfinal int windowSize = 1000;\n\t\tfinal int windowSlide = 100;\n\t\tfinal int numKeys = 1;\n\n\t\ttry {\n\t\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\t\tenv.setParallelism(PARALLELISM);\n\t\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\t\tenv.enableCheckpointing(100);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n\n\t\t\tenv\n\t\t\t\t.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys, windowSlide), numElementsPerKey))\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(windowSize), Time.milliseconds(windowSlide)))\n\t\t\t\t\t.apply(new RichAllWindowFunction<Tuple2<Long, IntType>, Tuple4<Long, Long, Long, IntType>, TimeWindow>() {\n\n\t\t\t\t\t\tprivate boolean open = false;\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void open(Configuration parameters) {\n\t\t\t\t\t\t\tassertEquals(1, getRuntimeContext().getNumberOfParallelSubtasks());\n\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void apply(\n\t\t\t\t\t\t\t\tTimeWindow window,\n\t\t\t\t\t\t\t\tIterable<Tuple2<Long, IntType>> values,\n\t\t\t\t\t\t\t\tCollector<Tuple4<Long, Long, Long, IntType>> out) {\n\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tassertTrue(open);\n\n\t\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\t\tlong key = -1;\n\n\t\t\t\t\t\t\tfor (Tuple2<Long, IntType> value : values) {\n\t\t\t\t\t\t\t\tsum += value.f1.value;\n\t\t\t\t\t\t\t\tkey = value.f0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout.collect(new Tuple4<>(key, window.getStart(), window.getEnd(), new IntType(sum)));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t.addSink(new ValidatingSink<>(\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),\n\t\t\t\t\tnew EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys, numElementsPerKey, windowSlide)))\n\t\t\t\t.setParallelism(1);\n\n\t\t\tenv.execute(\"Sliding Window Test\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeAllWindowCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
