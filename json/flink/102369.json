[{"authorTime":"2020-03-07 21:33:17","codes":[{"authorDate":"2020-03-07 21:33:17","commitOrder":1,"curCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tassertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n\t\tfinal FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\t\tfinal List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n\t\tassertTrue(volumes.stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","date":"2020-03-23 15:03:16","endLine":69,"groupId":"48325","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistingHadoopConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/7517908e7bbcd69ffeb9a16067b435d8ec969f.src","preCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tassertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n\t\tfinal FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\t\tfinal List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n\t\tassertTrue(volumes.stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/HadoopConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2020-03-07 21:33:17","commitOrder":1,"curCode":"\tpublic void testExistingConfigMapPrecedeOverHadoopConfEnv() throws IOException {\n\t\t\r\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\n\t\t\r\n\t\tsetHadoopConfDirEnv();\n\t\tgenerateHadoopConfFileItems();\n\n\t\tassertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n\t\tfinal FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\t\tfinal List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n\t\tassertTrue(volumes.stream().anyMatch(volume ->\n\t\t\tvolume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t\tassertFalse(volumes.stream().anyMatch(volume ->\n\t\t\tvolume.getConfigMap().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","date":"2020-03-23 15:03:16","endLine":88,"groupId":"48325","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistingConfigMapPrecedeOverHadoopConfEnv","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/7517908e7bbcd69ffeb9a16067b435d8ec969f.src","preCode":"\tpublic void testExistingConfigMapPrecedeOverHadoopConfEnv() throws IOException {\n\t\t\r\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\n\t\t\r\n\t\tsetHadoopConfDirEnv();\n\t\tgenerateHadoopConfFileItems();\n\n\t\tassertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n\t\tfinal FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\t\tfinal List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n\t\tassertTrue(volumes.stream().anyMatch(volume ->\n\t\t\tvolume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t\tassertFalse(volumes.stream().anyMatch(volume ->\n\t\t\tvolume.getConfigMap().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/HadoopConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"f56a075aa029832b9cbacab51649c900498e18e9","commitMessage":"@@@[FLINK-15667][k8s] Support to mount custom Hadoop Configurations\n\nThis closes #11415 .\n","date":"2020-03-23 15:03:16","modifiedFileCount":"10","status":"B","submitter":"felixzheng"},{"authorTime":"2021-02-20 14:12:05","codes":[{"authorDate":"2021-02-20 14:12:05","commitOrder":2,"curCode":"    public void testExistingHadoopConfigMap() throws IOException {\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n        assertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n        final FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n        final List<Volume> volumes =\n                resultFlinkPod.getPodWithoutMainContainer().getSpec().getVolumes();\n        assertTrue(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n    }\n","date":"2021-03-01 17:38:17","endLine":76,"groupId":"102369","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testExistingHadoopConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/3a43113b1f63b66d71e2d269fd4ea0fdef753b.src","preCode":"    public void testExistingHadoopConfigMap() throws IOException {\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n        assertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n        final FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n        final List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n        assertTrue(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/HadoopConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-02-20 14:12:05","commitOrder":2,"curCode":"    public void testExistingConfigMapPrecedeOverHadoopConfEnv() throws IOException {\n        \r\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\n        \r\n        setHadoopConfDirEnv();\n        generateHadoopConfFileItems();\n\n        assertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n        final FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n        final List<Volume> volumes =\n                resultFlinkPod.getPodWithoutMainContainer().getSpec().getVolumes();\n        assertTrue(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n        assertFalse(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n    }\n","date":"2021-03-01 17:38:17","endLine":110,"groupId":"102369","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExistingConfigMapPrecedeOverHadoopConfEnv","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/3a43113b1f63b66d71e2d269fd4ea0fdef753b.src","preCode":"    public void testExistingConfigMapPrecedeOverHadoopConfEnv() throws IOException {\n        \r\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\n        \r\n        setHadoopConfDirEnv();\n        generateHadoopConfFileItems();\n\n        assertEquals(0, hadoopConfMountDecorator.buildAccompanyingKubernetesResources().size());\n\n        final FlinkPod resultFlinkPod = hadoopConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n        final List<Volume> volumes = resultFlinkPod.getPod().getSpec().getVolumes();\n        assertTrue(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n        assertFalse(\n                volumes.stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/HadoopConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"4fcc408a8e581b9c796fc59cfcda68a71213795f","commitMessage":"@@@[hotfix][k8s] Rename the implicit variable pod to podWithoutMainContainer\n","date":"2021-03-01 17:38:17","modifiedFileCount":"20","status":"M","submitter":"wangyang0918"}]
