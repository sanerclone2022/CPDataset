[{"authorTime":"2015-10-29 10:33:45","codes":[{"authorDate":"2015-09-04 23:34:44","commitOrder":5,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment(); \n\t\tenv.getConfig().disableSysoutLogging();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-09-23 01:55:46","endLine":54,"groupId":"52635","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/11/6c1e650989975936bb5e0b401dddf7b8217502.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment(); \n\t\tenv.getConfig().disableSysoutLogging();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"},{"authorDate":"2015-10-29 10:33:45","commitOrder":5,"curCode":"\tpublic void testGetExecutionPlanOfRangePartition() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Integer, Integer>> result = baseSet\n\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\treturn new Tuple2(value, value * 2);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.partitionByRange(0)\n\t\t\t.aggregate(Aggregations.MAX, 1);\n\t\tresult.output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-12-21 23:43:32","endLine":103,"groupId":"6102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlanOfRangePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/ffba95e2b1eba36e9e545a76f16543ecde8596.src","preCode":"\tpublic void testGetExecutionPlanOfRangePartition() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Integer, Integer>> result = baseSet\n\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\treturn new Tuple2(value, value * 2);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.partitionByRange(0)\n\t\t\t.aggregate(Aggregations.MAX, 1);\n\t\tresult.output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"f5957ce3b7d87d89052f0328e569b74ec8aaa3e0","commitMessage":"@@@[FLINK-7] Add range partitioning with automatic sampling of key distribution\n\nThis closes #1255\n","date":"2015-12-21 23:43:32","modifiedFileCount":"15","status":"M","submitter":"chengxiang li"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":6,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception {\n\t\t\t\treturn value * 2;\n\t\t\t}});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":63,"groupId":"101766","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/4372208cb286db42b6f15035efac2e03258bc9.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception {\n\t\t\t\treturn value * 2;\n\t\t\t}});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":6,"curCode":"\tpublic void testGetExecutionPlanOfRangePartition() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Integer, Integer>> result = baseSet\n\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\treturn new Tuple2(value, value * 2);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.partitionByRange(0)\n\t\t\t.aggregate(Aggregations.MAX, 1);\n\t\tresult.output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":111,"groupId":"101766","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlanOfRangePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/4372208cb286db42b6f15035efac2e03258bc9.src","preCode":"\tpublic void testGetExecutionPlanOfRangePartition() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Tuple2<Integer, Integer>> result = baseSet\n\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\treturn new Tuple2(value, value * 2);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.partitionByRange(0)\n\t\t\t.aggregate(Aggregations.MAX, 1);\n\t\tresult.output(new DiscardingOutputFormat<Tuple2<Integer, Integer>>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"}]
