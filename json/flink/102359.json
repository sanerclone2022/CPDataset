[{"authorTime":"2020-02-23 15:35:13","codes":[{"authorDate":"2020-02-23 15:35:13","commitOrder":1,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-03-05 09:17:40","endLine":149,"groupId":"16621","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4j","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/37ac3955d2d167f8c8d4e6089ec6bd4a7a50b4.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2020-02-23 15:35:13","commitOrder":1,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"logback.xml\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"logback.xml\")\n\t\t\t\t.withPath(\"logback.xml\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-03-05 09:17:40","endLine":206,"groupId":"16621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4jAndLogback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/37ac3955d2d167f8c8d4e6089ec6bd4a7a50b4.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"logback.xml\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"logback.xml\")\n\t\t\t\t.withPath(\"logback.xml\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"d29628ca6d64581f8627f81e81f05fa457a6b68d","commitMessage":"@@@[FLINK-16194][k8s] Introduce decorator for mounting configuration files such as flink-conf.yaml.  log4j.properties.  and logback.xml\n","date":"2020-03-05 09:17:40","modifiedFileCount":"1","status":"B","submitter":"felixzheng"},{"authorTime":"2020-06-05 16:33:37","codes":[{"authorDate":"2020-06-05 16:33:37","commitOrder":2,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-06-08 15:46:35","endLine":163,"groupId":"16621","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4j","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/dc9384449c730823ab60e269ce27e260524ea2.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-06-05 16:33:37","commitOrder":2,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"logback.xml\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"logback.xml\")\n\t\t\t\t.withPath(\"logback.xml\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-06-08 15:46:35","endLine":220,"groupId":"16621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4jAndLogback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/dc9384449c730823ab60e269ce27e260524ea2.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"logback.xml\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"logback.xml\")\n\t\t\t\t.withPath(\"logback.xml\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(flinkConfMountDecorator.getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"a4a99bac919d57387d54a2db80a249becf3ba680","commitMessage":"@@@[FLINK-18149][k8s] Do not add DeploymentOptionsInternal#CONF_DIR to config map\n\nDeploymentOptionsInternal#CONF_DIR is an internal option and stores the client config path. It should not be added to config map and used by JobManager pod. Instead.  KubernetesConfigOptions#FLINK_CONF_DIR will be used.\n\nThis closes #12501.\n","date":"2020-06-08 15:46:35","modifiedFileCount":"5","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-05-19 11:40:03","codes":[{"authorDate":"2020-05-19 11:40:03","commitOrder":3,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(CONFIG_FILE_LOG4J_NAME)\n\t\t\t\t.withPath(CONFIG_FILE_LOG4J_NAME)\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-08-07 14:07:59","endLine":165,"groupId":"25831","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4j","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/cf406aa57e9cb6164809ad10cb99268039173c.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4j() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-05-19 11:40:03","commitOrder":3,"curCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOGBACK_NAME);\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(CONFIG_FILE_LOGBACK_NAME)\n\t\t\t\t.withPath(CONFIG_FILE_LOGBACK_NAME)\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(CONFIG_FILE_LOG4J_NAME)\n\t\t\t\t.withPath(CONFIG_FILE_LOG4J_NAME)\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","date":"2020-08-07 14:07:59","endLine":222,"groupId":"25831","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4jAndLogback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/cf406aa57e9cb6164809ad10cb99268039173c.src","preCode":"\tpublic void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"log4j.properties\");\n\t\tKubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, \"logback.xml\");\n\n\t\tfinal FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n\t\tfinal List<KeyToPath> expectedKeyToPaths = Arrays.asList(\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"logback.xml\")\n\t\t\t\t.withPath(\"logback.xml\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(\"log4j.properties\")\n\t\t\t\t.withPath(\"log4j.properties\")\n\t\t\t\t.build(),\n\t\t\tnew KeyToPathBuilder()\n\t\t\t\t.withKey(FLINK_CONF_FILENAME)\n\t\t\t\t.withPath(FLINK_CONF_FILENAME)\n\t\t\t\t.build());\n\t\tfinal List<Volume> expectedVolumes = Collections.singletonList(\n\t\t\tnew VolumeBuilder()\n\t\t\t\t.withName(Constants.FLINK_CONF_VOLUME)\n\t\t\t\t.withNewConfigMap()\n\t\t\t\t.withName(getFlinkConfConfigMapName(CLUSTER_ID))\n\t\t\t\t.withItems(expectedKeyToPaths)\n\t\t\t\t.endConfigMap()\n\t\t\t\t.build());\n\t\tassertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"ab77a25a60aac10d650ba2d0819d349cf59aad38","commitMessage":"@@@[hotfix][k8s] Use constant logging variable to replace constant strings\n","date":"2020-08-07 14:07:59","modifiedFileCount":"7","status":"M","submitter":"wangyang0918"},{"authorTime":"2021-02-20 14:12:05","codes":[{"authorDate":"2021-02-20 14:12:05","commitOrder":4,"curCode":"    public void testDecoratedFlinkPodWithLog4j() throws IOException {\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n\n        final FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n        final List<KeyToPath> expectedKeyToPaths =\n                Arrays.asList(\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOG4J_NAME)\n                                .withPath(CONFIG_FILE_LOG4J_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(FLINK_CONF_FILENAME)\n                                .withPath(FLINK_CONF_FILENAME)\n                                .build());\n        final List<Volume> expectedVolumes =\n                Collections.singletonList(\n                        new VolumeBuilder()\n                                .withName(Constants.FLINK_CONF_VOLUME)\n                                .withNewConfigMap()\n                                .withName(getFlinkConfConfigMapName(CLUSTER_ID))\n                                .withItems(expectedKeyToPaths)\n                                .endConfigMap()\n                                .build());\n        assertEquals(\n                expectedVolumes,\n                resultFlinkPod.getPodWithoutMainContainer().getSpec().getVolumes());\n    }\n","date":"2021-03-01 17:38:17","endLine":179,"groupId":"102359","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4j","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/10/1555226e38ebe005815486228eb9052d19595f.src","preCode":"    public void testDecoratedFlinkPodWithLog4j() throws IOException {\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n\n        final FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n        final List<KeyToPath> expectedKeyToPaths =\n                Arrays.asList(\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOG4J_NAME)\n                                .withPath(CONFIG_FILE_LOG4J_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(FLINK_CONF_FILENAME)\n                                .withPath(FLINK_CONF_FILENAME)\n                                .build());\n        final List<Volume> expectedVolumes =\n                Collections.singletonList(\n                        new VolumeBuilder()\n                                .withName(Constants.FLINK_CONF_VOLUME)\n                                .withNewConfigMap()\n                                .withName(getFlinkConfConfigMapName(CLUSTER_ID))\n                                .withItems(expectedKeyToPaths)\n                                .endConfigMap()\n                                .build());\n        assertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2021-02-20 14:12:05","commitOrder":4,"curCode":"    public void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOGBACK_NAME);\n\n        final FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n        final List<KeyToPath> expectedKeyToPaths =\n                Arrays.asList(\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOGBACK_NAME)\n                                .withPath(CONFIG_FILE_LOGBACK_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOG4J_NAME)\n                                .withPath(CONFIG_FILE_LOG4J_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(FLINK_CONF_FILENAME)\n                                .withPath(FLINK_CONF_FILENAME)\n                                .build());\n        final List<Volume> expectedVolumes =\n                Collections.singletonList(\n                        new VolumeBuilder()\n                                .withName(Constants.FLINK_CONF_VOLUME)\n                                .withNewConfigMap()\n                                .withName(getFlinkConfConfigMapName(CLUSTER_ID))\n                                .withItems(expectedKeyToPaths)\n                                .endConfigMap()\n                                .build());\n        assertEquals(\n                expectedVolumes,\n                resultFlinkPod.getPodWithoutMainContainer().getSpec().getVolumes());\n    }\n","date":"2021-03-01 17:38:17","endLine":244,"groupId":"102359","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecoratedFlinkPodWithLog4jAndLogback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/10/1555226e38ebe005815486228eb9052d19595f.src","preCode":"    public void testDecoratedFlinkPodWithLog4jAndLogback() throws IOException {\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOG4J_NAME);\n        KubernetesTestUtils.createTemporyFile(\"some data\", flinkConfDir, CONFIG_FILE_LOGBACK_NAME);\n\n        final FlinkPod resultFlinkPod = flinkConfMountDecorator.decorateFlinkPod(baseFlinkPod);\n\n        final List<KeyToPath> expectedKeyToPaths =\n                Arrays.asList(\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOGBACK_NAME)\n                                .withPath(CONFIG_FILE_LOGBACK_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(CONFIG_FILE_LOG4J_NAME)\n                                .withPath(CONFIG_FILE_LOG4J_NAME)\n                                .build(),\n                        new KeyToPathBuilder()\n                                .withKey(FLINK_CONF_FILENAME)\n                                .withPath(FLINK_CONF_FILENAME)\n                                .build());\n        final List<Volume> expectedVolumes =\n                Collections.singletonList(\n                        new VolumeBuilder()\n                                .withName(Constants.FLINK_CONF_VOLUME)\n                                .withNewConfigMap()\n                                .withName(getFlinkConfConfigMapName(CLUSTER_ID))\n                                .withItems(expectedKeyToPaths)\n                                .endConfigMap()\n                                .build());\n        assertEquals(expectedVolumes, resultFlinkPod.getPod().getSpec().getVolumes());\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkConfMountDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"}],"commitId":"4fcc408a8e581b9c796fc59cfcda68a71213795f","commitMessage":"@@@[hotfix][k8s] Rename the implicit variable pod to podWithoutMainContainer\n","date":"2021-03-01 17:38:17","modifiedFileCount":"20","status":"M","submitter":"wangyang0918"}]
