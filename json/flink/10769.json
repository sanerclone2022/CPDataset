[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceSinkWithDDL() throws Exception {\n\t\tif (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\t\r\n\t\tString table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n\t\ttEnv.executeSql(table3DDL);\n\n\t\tString insertStatement = \"INSERT INTO \" + TEST_TABLE_3 +\n\t\t\t\" SELECT rowkey,\" +\n\t\t\t\" family1,\" +\n\t\t\t\" family2,\" +\n\t\t\t\" family3,\" +\n\t\t\t\" family4\" +\n\t\t\t\" from \" + TEST_TABLE_1;\n\t\ttEnv.executeSql(insertStatement).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table3DDL);\n\t\tString query = \"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3, \" +\n\t\t\t\t\"  h.family4.col1, \" +\n\t\t\t\t\"  h.family4.col2, \" +\n\t\t\t\t\"  h.family4.col3, \" +\n\t\t\t\t\"  h.family4.col4 \" +\n\t\t\t\t\" FROM \" + TEST_TABLE_3 + \" AS h\";\n\t\tIterator<Row> collected = tEnv.executeSql(query).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\n\t\tList<String> expected = new ArrayList<>();\n\t\texpected.add(\"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n\t\texpected.add(\"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n\t\texpected.add(\"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n\t\texpected.add(\"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n\t\texpected.add(\"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n\t\texpected.add(\"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n\t\texpected.add(\"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n\t\texpected.add(\"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-09-28 22:08:46","endLine":447,"groupId":"39246","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/95e053e619c5bf26b1781f718b867227e1e938.src","preCode":"\tpublic void testTableSourceSinkWithDDL() throws Exception {\n\t\tif (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\t\r\n\t\tString table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n\t\ttEnv.executeSql(table3DDL);\n\n\t\tString insertStatement = \"INSERT INTO \" + TEST_TABLE_3 +\n\t\t\t\" SELECT rowkey,\" +\n\t\t\t\" family1,\" +\n\t\t\t\" family2,\" +\n\t\t\t\" family3,\" +\n\t\t\t\" family4\" +\n\t\t\t\" from \" + TEST_TABLE_1;\n\t\ttEnv.executeSql(insertStatement).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table3DDL);\n\t\tString query = \"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3, \" +\n\t\t\t\t\"  h.family4.col1, \" +\n\t\t\t\t\"  h.family4.col2, \" +\n\t\t\t\t\"  h.family4.col3, \" +\n\t\t\t\t\"  h.family4.col4 \" +\n\t\t\t\t\" FROM \" + TEST_TABLE_3 + \" AS h\";\n\t\tIterator<Row> collected = tEnv.executeSql(query).collect();\n\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n\t\t\t.map(Row::toString)\n\t\t\t.sorted()\n\t\t\t.collect(Collectors.toList());\n\n\t\tList<String> expected = new ArrayList<>();\n\t\texpected.add(\"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n\t\texpected.add(\"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n\t\texpected.add(\"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n\t\texpected.add(\"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n\t\texpected.add(\"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n\t\texpected.add(\"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n\t\texpected.add(\"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n\t\texpected.add(\"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceSinkWithDDL() throws Exception {\n\t\tif (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\t\r\n\t\tString table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n\t\ttEnv.executeSql(table3DDL);\n\n\t\tString insertStatement = \"INSERT INTO \" + TEST_TABLE_3 +\n\t\t\t\t\" SELECT rowkey,\" +\n\t\t\t\t\" family1,\" +\n\t\t\t\t\" family2,\" +\n\t\t\t\t\" family3,\" +\n\t\t\t\t\" family4\" +\n\t\t\t\t\" from \" + TEST_TABLE_1;\n\t\t\r\n\t\ttEnv.executeSql(insertStatement).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table3DDL);\n\t\tString query = \"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3, \" +\n\t\t\t\t\"  h.family4.col1, \" +\n\t\t\t\t\"  h.family4.col2, \" +\n\t\t\t\t\"  h.family4.col3, \" +\n\t\t\t\t\"  h.family4.col4 \" +\n\t\t\t\t\" FROM \" + TEST_TABLE_3 + \" AS h\";\n\t\tIterator<Row> collected = tEnv.executeSql(query).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t\t.map(Row::toString)\n\t\t\t\t.sorted()\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tList<String> expected = new ArrayList<>();\n\t\texpected.add(\"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n\t\texpected.add(\"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n\t\texpected.add(\"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n\t\texpected.add(\"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n\t\texpected.add(\"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n\t\texpected.add(\"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n\t\texpected.add(\"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n\t\texpected.add(\"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n\t\tassertEquals(expected, result);\n\t}\n","date":"2020-09-28 22:08:46","endLine":450,"groupId":"15458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/fc1ee3d7be85cca2a8be09b35b18f7e490ab40.src","preCode":"\tpublic void testTableSourceSinkWithDDL() throws Exception {\n\t\tif (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\t\r\n\t\tString table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n\t\ttEnv.executeSql(table3DDL);\n\n\t\tString insertStatement = \"INSERT INTO \" + TEST_TABLE_3 +\n\t\t\t\t\" SELECT rowkey,\" +\n\t\t\t\t\" family1,\" +\n\t\t\t\t\" family2,\" +\n\t\t\t\t\" family3,\" +\n\t\t\t\t\" family4\" +\n\t\t\t\t\" from \" + TEST_TABLE_1;\n\t\t\r\n\t\ttEnv.executeSql(insertStatement).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table3DDL);\n\t\tString query = \"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3, \" +\n\t\t\t\t\"  h.family4.col1, \" +\n\t\t\t\t\"  h.family4.col2, \" +\n\t\t\t\t\"  h.family4.col3, \" +\n\t\t\t\t\"  h.family4.col4 \" +\n\t\t\t\t\" FROM \" + TEST_TABLE_3 + \" AS h\";\n\t\tIterator<Row> collected = tEnv.executeSql(query).collect();\n\t\tList<String> result = Lists.newArrayList(collected).stream()\n\t\t\t\t.map(Row::toString)\n\t\t\t\t.sorted()\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tList<String> expected = new ArrayList<>();\n\t\texpected.add(\"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n\t\texpected.add(\"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n\t\texpected.add(\"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n\t\texpected.add(\"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n\t\texpected.add(\"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n\t\texpected.add(\"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n\t\texpected.add(\"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n\t\texpected.add(\"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","date":"2021-01-08 00:17:30","endLine":503,"groupId":"39246","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/8a555806cf37812deea4e55d1eb923e508d909.src","preCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n        expected.add(\n                \"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n        expected.add(\n                \"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n        expected.add(\n                \"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n        expected.add(\n                \"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n        expected.add(\n                \"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n        expected.add(\n                \"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n        expected.add(\n                \"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        \r\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","date":"2021-01-08 00:17:30","endLine":507,"groupId":"15458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/b9fe68286edf0de3b2893f3d03baffea91cfc0.src","preCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        \r\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"1,10,Hello-1,100,1.01,false,Welt-1,2019-08-18T19:00,2019-08-18,19:00,12345678.0001\");\n        expected.add(\n                \"2,20,Hello-2,200,2.02,true,Welt-2,2019-08-18T19:01,2019-08-18,19:01,12345678.0002\");\n        expected.add(\n                \"3,30,Hello-3,300,3.03,false,Welt-3,2019-08-18T19:02,2019-08-18,19:02,12345678.0003\");\n        expected.add(\n                \"4,40,null,400,4.04,true,Welt-4,2019-08-18T19:03,2019-08-18,19:03,12345678.0004\");\n        expected.add(\n                \"5,50,Hello-5,500,5.05,false,Welt-5,2019-08-19T19:10,2019-08-19,19:10,12345678.0005\");\n        expected.add(\n                \"6,60,Hello-6,600,6.06,true,Welt-6,2019-08-19T19:20,2019-08-19,19:20,12345678.0006\");\n        expected.add(\n                \"7,70,Hello-7,700,7.07,false,Welt-7,2019-08-19T19:30,2019-08-19,19:30,12345678.0007\");\n        expected.add(\n                \"8,80,null,800,8.08,true,Welt-8,2019-08-19T19:40,2019-08-19,19:40,12345678.0008\");\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-05-11 23:29:15","codes":[{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = TableEnvironment.create(batchSettings);\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","date":"2021-05-18 19:59:43","endLine":352,"groupId":"10769","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1a/d2dd2d196495dada8ff95f9e5d245a82edfaa4.src","preCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                CollectionUtil.iteratorToList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        \r\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = TableEnvironment.create(batchSettings);\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","date":"2021-05-18 19:59:43","endLine":357,"groupId":"10769","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceSinkWithDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/633161cafadb4faec63a4d8e2e9e03f2c00381.src","preCode":"    public void testTableSourceSinkWithDDL() throws Exception {\n        if (OLD_PLANNER.equals(planner) || isLegacyConnector) {\n            \r\n            \r\n            \r\n            \r\n            return;\n        }\n\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, true);\n        tEnv.executeSql(table1DDL);\n\n        \r\n        String table3DDL = createHBaseTableDDL(TEST_TABLE_3, true);\n        tEnv.executeSql(table3DDL);\n\n        String insertStatement =\n                \"INSERT INTO \"\n                        + TEST_TABLE_3\n                        + \" SELECT rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3,\"\n                        + \" family4\"\n                        + \" from \"\n                        + TEST_TABLE_1;\n        \r\n        tEnv.executeSql(insertStatement).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table3DDL);\n        String query =\n                \"SELECT \"\n                        + \"  h.rowkey, \"\n                        + \"  h.family1.col1, \"\n                        + \"  h.family2.col1, \"\n                        + \"  h.family2.col2, \"\n                        + \"  h.family3.col1, \"\n                        + \"  h.family3.col2, \"\n                        + \"  h.family3.col3, \"\n                        + \"  h.family4.col1, \"\n                        + \"  h.family4.col2, \"\n                        + \"  h.family4.col3, \"\n                        + \"  h.family4.col4 \"\n                        + \" FROM \"\n                        + TEST_TABLE_3\n                        + \" AS h\";\n        Iterator<Row> collected = tEnv.executeSql(query).collect();\n        List<String> result =\n                Lists.newArrayList(collected).stream()\n                        .map(Row::toString)\n                        .sorted()\n                        .collect(Collectors.toList());\n\n        List<String> expected = new ArrayList<>();\n        expected.add(\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1, 2019-08-18T19:00, 2019-08-18, 19:00, 12345678.0001]\");\n        expected.add(\n                \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2, 2019-08-18T19:01, 2019-08-18, 19:01, 12345678.0002]\");\n        expected.add(\n                \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3, 2019-08-18T19:02, 2019-08-18, 19:02, 12345678.0003]\");\n        expected.add(\n                \"+I[4, 40, null, 400, 4.04, true, Welt-4, 2019-08-18T19:03, 2019-08-18, 19:03, 12345678.0004]\");\n        expected.add(\n                \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5, 2019-08-19T19:10, 2019-08-19, 19:10, 12345678.0005]\");\n        expected.add(\n                \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6, 2019-08-19T19:20, 2019-08-19, 19:20, 12345678.0006]\");\n        expected.add(\n                \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7, 2019-08-19T19:30, 2019-08-19, 19:30, 12345678.0007]\");\n        expected.add(\n                \"+I[8, 80, null, 800, 8.08, true, Welt-8, 2019-08-19T19:40, 2019-08-19, 19:40, 12345678.0008]\");\n        assertEquals(expected, result);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"97610190fbdf4899e7d9aa8888971a0423fb7d81","commitMessage":"@@@[FLINK-22623][hbase] Drop BatchTableSource/Sink HBaseTableSource/Sink and related classes\n\nThis removes the HBaseTableSource/Sink and related classes including various HBaseInputFormats and\nHBaseSinkFunction. It is possible to read via Table & SQL API and convert the Table to DataStream API\n(or vice versa) if necessary. DataSet API is not supported anymore.\n\nThis closes #15905.\n","date":"2021-05-18 19:59:43","modifiedFileCount":"5","status":"M","submitter":"Timo Walther"}]
