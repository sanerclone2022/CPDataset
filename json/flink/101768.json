[{"authorTime":"2015-09-04 23:34:44","codes":[{"authorDate":"2015-09-04 23:34:44","commitOrder":5,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-09-23 01:55:46","endLine":74,"groupId":"48561","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/2caaf3b507a7cc8e475ae1c0b7928d4aa6e09d.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"MB"},{"authorDate":"2015-09-04 23:34:44","commitOrder":5,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2015-09-23 01:55:46","endLine":230,"groupId":"17961","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/1ef631b206eafb4dc09d6d389599ca391a13b9.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"}],"commitId":"71bf2f570861daae53b24bfcf1d06aedb85311b9","commitMessage":"@@@[FLINK-2097][core] implement a job session management\n\nSessions make sure that the JobManager does not immediately discard a\nJobGraph after execution.  but keeps it around for further operations to\nbe attached to the graph. That is the basis for interactive sessions.\n\nThis pull request implements a rudimentary session management. Together\nwith the backtracking #640.  this will enable users to submit jobs to the\ncluster and access intermediate results. Session handling ensures that\nthe results are cleared eventually.\n\nExecutionGraphs are kept as long as\n  - no timeout occurred or\n  - the session has not been explicitly ended\n\nThe following changes have also been made in this pull request:\n\n- The Job ID is created through the ExecutionEnvironment and passed through\n\n- Sessions can be termined by the ExecutionEnvironment or directly\n  through the executor\n\n- The environments use reapers (local) and shutdown hooks (remote) to\n  ensure session termination when the environment runs out of scope\n\n- The Client manages only connections to the JobManager.  it is not job\n  specific\n\nThis closes #858.\n","date":"2015-09-23 01:55:46","modifiedFileCount":"52","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2016-04-23 01:52:54","codes":[{"authorDate":"2016-04-23 01:52:54","commitOrder":6,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-06-17 16:37:58","endLine":74,"groupId":"48561","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/91adaac454cf23b5bae76ed65ef7c278968923.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2016-04-23 01:52:54","commitOrder":6,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-06-17 16:37:58","endLine":305,"groupId":"17961","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/785f471d542b2aae7c62248b1e193c210e5656.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) Client.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"f9b52a3114a2114e6846091acf3abb294a49615b","commitMessage":"@@@[FLINK-3667] refactor client communication classes\n\n- ClusterDescriptor: base interface for cluster deployment descriptors\n- ClusterDescriptor: YarnClusterDescriptor\n\n- ClusterClient: base class for ClusterClients.  handles lifecycle of cluster\n- ClusterClient: shares configuration with the implementations\n- ClusterClient: StandaloneClusterClient.  YarnClusterClient\n- ClusterClient: remove run methods and enable detached mode via flag\n\n- CliFrontend: remove all Yarn specific logic\n- CliFrontend: remove all cluster setup logic\n\n- CustomCommandLine: interface for other cluster implementations\n- Customcommandline: enables creation of new cluster or resuming from existing\n\n- Yarn: move Yarn classes and functionality to the yarn module (yarn\n  properties.  yarn interfaces)\n- Yarn: improve reliability of cluster startup\n- Yarn Tests: only disable parallel execution of ITCases\n\nThis closes #1978\n","date":"2016-06-17 16:37:58","modifiedFileCount":"37","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2017-03-21 22:10:15","codes":[{"authorDate":"2016-04-23 01:52:54","commitOrder":7,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-06-17 16:37:58","endLine":74,"groupId":"48561","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/91adaac454cf23b5bae76ed65ef7c278968923.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\t\t\t\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\t\t\t\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\t\t\t\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2017-03-21 22:10:15","commitOrder":7,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(\n\t\t\t\tProps.create(FailureReturningActor.class),\n\t\t\t\tJobMaster.JOB_MANAGER_NAME);\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:05:55","endLine":305,"groupId":"17961","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/297d6041cdf01c59931972a1ce8f2395af1393.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(Props.create(FailureReturningActor.class), JobManager.JOB_MANAGER_NAME());\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"a0bb99c70703f6eaf0953b9ea6e70c5dbb9c1c77","commitMessage":"@@@[FLINK-6136] Separate EmbeddedHaServices and StandaloneHaServices\n\nThis PR introduces a standalone high availability services implementation which can be used\nin a distributed setting with no HA guarantees. Additionally.  it introduces a common base\nclass which is also used by the EmbeddedHaServices. This base class instantiates the\nstandalone variants of the checkpoint recovery factory.  submitted job graphs store.  running\njobs registry and blob store.\n\nThe StandaloneHaServices are instantiated with a fixed address for the Job- and\nResourceManager. This address and the HighAvailability.DEFAULT_LEADER_ID is returned by\nthe corresponding LeaderRetrievalServices when being started.\n\nThis closes #3622.\n","date":"2017-05-05 17:05:55","modifiedFileCount":"41","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2017-03-21 22:10:15","codes":[{"authorDate":"2017-07-07 14:24:31","commitOrder":8,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-07-10 18:41:37","endLine":80,"groupId":"48561","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/f5f4a588b28ce50037a66312b7c226bac52212.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-03-21 22:10:15","commitOrder":8,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(\n\t\t\t\tProps.create(FailureReturningActor.class),\n\t\t\t\tJobMaster.JOB_MANAGER_NAME);\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-05-05 17:05:55","endLine":305,"groupId":"17961","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/297d6041cdf01c59931972a1ce8f2395af1393.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(\n\t\t\t\tProps.create(FailureReturningActor.class),\n\t\t\t\tJobMaster.JOB_MANAGER_NAME);\n\t\t\t\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\t\t\t\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"N"}],"commitId":"fb48dc2fdeaa8f86c2a5ced3264beaf538a09d76","commitMessage":"@@@[FLINK-7099] Replace usages of deprecated JOB_MANAGER_IPC_PORT_KEY and JOB_MANAGER_IPC_ADDRESS_KEY\n\nThis closes #4278.\n","date":"2017-07-10 18:41:37","modifiedFileCount":"24","status":"M","submitter":"zjureel"},{"authorTime":"2019-02-06 22:44:02","codes":[{"authorDate":"2017-07-07 14:24:31","commitOrder":9,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-07-10 18:41:37","endLine":80,"groupId":"48561","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/f5f4a588b28ce50037a66312b7c226bac52212.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2019-02-06 22:44:02","commitOrder":9,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-02-08 18:32:25","endLine":237,"groupId":"17961","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/dddfc9ad6ef537ef5a6bf1e9fe492af012679d.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tjobManagerSystem.actorOf(\n\t\t\t\tProps.create(FailureReturningActor.class),\n\t\t\t\tJobMaster.JOB_MANAGER_NAME);\n\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"2de2a299056d4ce0d296cd2909b636db532034f8","commitMessage":"@@@[FLINK-11515][client] Port ClientTest\n","date":"2019-02-08 18:32:25","modifiedFileCount":"2","status":"M","submitter":"zentol"},{"authorTime":"2019-02-08 18:26:14","codes":[{"authorDate":"2017-07-07 14:24:31","commitOrder":10,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2017-07-10 18:41:37","endLine":80,"groupId":"48561","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/f5f4a588b28ce50037a66312b7c226bac52212.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2019-02-08 18:26:14","commitOrder":10,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2019-02-08 18:32:25","endLine":225,"groupId":"17961","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/89/a15c55e8e72145f5ebcc8c29a673ba6a1fab05.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"47234aabd570211ae82bbe3a5a9da99abfa3a740","commitMessage":"@@@[hotfix][tests] Remove unnecessary catch blocks\n","date":"2019-02-08 18:32:25","modifiedFileCount":"1","status":"M","submitter":"zentol"},{"authorTime":"2019-09-05 16:02:13","codes":[{"authorDate":"2019-09-05 16:02:13","commitOrder":11,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-09-17 15:30:08","endLine":79,"groupId":"48561","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d2/6b0d001071e38b5076678c180edea668fbca3f.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-09-05 16:02:13","commitOrder":11,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2019-09-17 15:30:08","endLine":206,"groupId":"17961","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/eec7f80862440e135aaa4eabf2ca4608c0f419.src","preCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\t\tassertNotNull(prg.getPreviewPlan());\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"081cb0ff899f200afcab2dc7efeaa41e92ae6b32","commitMessage":"@@@[FLINK-13972] Remove PackagedProgram#getPreviewPlan()\n","date":"2019-09-17 15:30:08","modifiedFileCount":"4","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-10-11 20:20:39","codes":[{"authorDate":"2019-10-11 20:20:39","commitOrder":12,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-10-16 20:06:03","endLine":81,"groupId":"47637","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/52f377c749763ccfb10be4243c247cf57a5228.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, -1);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-10-11 20:20:39","commitOrder":12,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2019-10-16 20:06:03","endLine":219,"groupId":"16971","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/4ebf0c284ffdbde7107f8ef9206c31df566977.src","preCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tOptimizedPlan op = (OptimizedPlan) ClusterClient.getOptimizedPlan(optimizer, prg, 1);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"59dd855628052c369b64c71edc1018ed378e8eec","commitMessage":"@@@[FLINK-14391] Remove FlinkPlan as common base class of OptimizerPlan and StreamGraph\n\nWe also need to change/simplify some translation logic because of this.\n","date":"2019-10-16 20:06:03","modifiedFileCount":"11","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2019-09-09 19:02:28","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":13,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t\t.build();\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2019-11-09 19:26:33","endLine":84,"groupId":"47637","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/43a2f22277fe21feb9eebb8d3261d19302a42a.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-09-09 19:02:28","commitOrder":13,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t.build();\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2019-11-09 19:26:33","endLine":216,"groupId":"16971","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/78/023d7cd2e0887a0a9729f0283dd47b90569885.src","preCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = new PackagedProgram(TestOptimizerPlan.class, \"/dev/random\", \"/tmp\");\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"c1e9aefc2449a4ea0ff3fa590cf1eb6c1cb484a2","commitMessage":"@@@[FLINK-14465] Let StandaloneJobClusterEntryPoint use the user code class loader\n\n[FLINK-14465] The PackageProgram's constructor does not throw excpetion\nany more when jarFile is null. Introducing this change is because there\nmay be no jarFile in perjob mode. All jars the user code depends on are\nin the classpaths.\n\n[FLINK-14465] ClassPathJobGraphRetriever creates PackagesProgram with user\nclass paths.\n\n[FLINK-14465] StandaloneJobClusterEntryPoint uses \"FLINK_HOME/usrlib\"\nas the job's class path. The environment variable FLINK_HOME is set\nat Dockerfile. Link the FLINK_JOB_ARTIFACTS_DIR to the FLINK_HOME/job. \nwhich makes the FlinkUserClassloader load the user class in the\nstandalone perjob mode.\n\nThis closes #10076.\n","date":"2019-11-09 19:26:33","modifiedFileCount":"22","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-01-09 19:23:03","codes":[{"authorDate":"2020-01-09 19:23:03","commitOrder":14,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t\t.build();\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1, true);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-01-11 01:07:57","endLine":84,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0c/258e41d74b4c414e8e182c64679d86acb48338.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t\t.build();\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-01-09 19:23:03","commitOrder":14,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t.build();\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1, true);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2020-01-11 01:07:57","endLine":249,"groupId":"11165","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/a88b2ef6dd041b47b3b1b6d720247daccd9270.src","preCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t.build();\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"4bb4a50c4ed6c909dc98788bc239ba77340d6fb7","commitMessage":"@@@[FLINK-15504] Allow output to stdout/stderr during execution of PackagedProgram\n\nWe suppress the output to stdout/stderr during plan extraction via\nPackagedProgram. This has unintended consequences for users who are looking into\ndebugging their Flink programs during JobGraph creation.\n\nThis change removes the suppression of output when we run the JARs. The plan\npreview still suppresses the output to avoid spaming the logs during plan\npreview.\n","date":"2020-01-11 01:07:57","modifiedFileCount":"13","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2020-04-01 23:36:49","codes":[{"authorDate":"2020-04-01 23:36:49","commitOrder":15,"curCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t\t.build();\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, config, -1, true);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2020-04-02 15:56:43","endLine":84,"groupId":"101768","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/7928d137c92620167f406cbe3a62d97e8c3397.src","preCode":"\tpublic void testGetExecutionPlan() {\n\t\ttry {\n\t\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t\t.build();\n\n\t\t\tInetAddress mockAddress = InetAddress.getLocalHost();\n\t\t\tInetSocketAddress mockJmAddress = new InetSocketAddress(mockAddress, 12345);\n\n\t\t\tConfiguration config = new Configuration();\n\n\t\t\tconfig.setString(JobManagerOptions.ADDRESS, mockJmAddress.getHostName());\n\t\t\tconfig.setInteger(JobManagerOptions.PORT, mockJmAddress.getPort());\n\n\t\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, -1, true);\n\t\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\t\tassertNotNull(op);\n\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\t\r\n\t\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\t\tdumper2.setEncodeForHTML(true);\n\t\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanCreationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-04-01 23:36:49","commitOrder":15,"curCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t.build();\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, new Configuration(), 1, true);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","date":"2020-04-02 15:56:43","endLine":250,"groupId":"101768","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/93/248a1b863d69d5eed5b9d3bb4cabd7cbd741cd.src","preCode":"\tpublic void testGetExecutionPlan() throws ProgramInvocationException {\n\t\tPackagedProgram prg = PackagedProgram.newBuilder()\n\t\t\t.setEntryPointClassName(TestOptimizerPlan.class.getName())\n\t\t\t.setArguments(\"/dev/random\", \"/tmp\")\n\t\t\t.build();\n\n\t\tOptimizer optimizer = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config);\n\t\tPlan plan = (Plan) PackagedProgramUtils.getPipelineFromProgram(prg, 1, true);\n\t\tOptimizedPlan op = optimizer.compile(plan);\n\t\tassertNotNull(op);\n\n\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\tassertNotNull(dumper.getOptimizerPlanAsJSON(op));\n\n\t\t\r\n\t\tPlanJSONDumpGenerator dumper2 = new PlanJSONDumpGenerator();\n\t\tdumper2.setEncodeForHTML(true);\n\t\tString htmlEscaped = dumper2.getOptimizerPlanAsJSON(op);\n\n\t\tassertEquals(-1, htmlEscaped.indexOf('\\\\'));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"a24734ea339872763306b44770678c4ace6a369f","commitMessage":"@@@[FLINK-16560] Forward Configuration in PackagedProgramUtils#getPipelineFromProgram\n\nBefore.  when using PackagedProgramUtils (for example in the standalone\ncluster entrypoint or the web ui) the Flink Configuration would not be\napplied to the execution environment.\n\nThis also adds a test that verifies that we forward configuration.\n","date":"2020-04-02 15:56:43","modifiedFileCount":"8","status":"M","submitter":"Aljoscha Krettek"}]
