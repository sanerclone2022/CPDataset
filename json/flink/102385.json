[{"authorTime":"2020-04-08 23:08:30","codes":[{"authorDate":"2020-04-08 23:08:30","commitOrder":1,"curCode":"\tpublic void testServiceLoadBalancerWithNoIP() {\n\t\tfinal String hostName = \"test-host-name\";\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithLoadBalancer(hostName, \"\"));\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getAddress(), is(hostName));\n\t\tassertThat(resultEndpoint.get().getPort(), is(REST_PORT));\n\t}\n","date":"2020-04-16 22:02:39","endLine":185,"groupId":"29377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testServiceLoadBalancerWithNoIP","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/7abcb1517ddccc2b2da27de863ffe552922ed3.src","preCode":"\tpublic void testServiceLoadBalancerWithNoIP() {\n\t\tfinal String hostName = \"test-host-name\";\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithLoadBalancer(hostName, \"\"));\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getAddress(), is(hostName));\n\t\tassertThat(resultEndpoint.get().getPort(), is(REST_PORT));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8FlinkKubeClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"},{"authorDate":"2020-04-08 23:08:30","commitOrder":1,"curCode":"\tpublic void testNodePortService() {\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithNodePort());\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getPort(), is(NODE_PORT));\n\t}\n","date":"2020-04-16 22:02:39","endLine":210,"groupId":"29377","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNodePortService","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/7abcb1517ddccc2b2da27de863ffe552922ed3.src","preCode":"\tpublic void testNodePortService() {\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithNodePort());\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getPort(), is(NODE_PORT));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8FlinkKubeClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"577abe7fe120adc039cd9f0450de3124d6b7a6a9","commitMessage":"@@@[FLINK-15790][k8s] Make some interfaces in FlinkKubeClient asynchronous which potentially blocks the execution of RpcEndpoint's main thread\n\nThe interfaces in FlinkKubeClient will be called both in Client and ResourceManager. To avoid potentially blocking the execution of RpcEndpoint's main thread.  these interfaces #createTaskManagerPod.  #stopPod should be implemented asynchronously.\n\nThis closes #11427.\n","date":"2020-04-16 22:02:39","modifiedFileCount":"10","status":"B","submitter":"wangyang0918"},{"authorTime":"2021-08-13 16:45:01","codes":[{"authorDate":"2020-04-08 23:08:30","commitOrder":2,"curCode":"\tpublic void testServiceLoadBalancerWithNoIP() {\n\t\tfinal String hostName = \"test-host-name\";\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithLoadBalancer(hostName, \"\"));\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getAddress(), is(hostName));\n\t\tassertThat(resultEndpoint.get().getPort(), is(REST_PORT));\n\t}\n","date":"2020-04-16 22:02:39","endLine":185,"groupId":"102385","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testServiceLoadBalancerWithNoIP","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/7abcb1517ddccc2b2da27de863ffe552922ed3.src","preCode":"\tpublic void testServiceLoadBalancerWithNoIP() {\n\t\tfinal String hostName = \"test-host-name\";\n\t\tmockExpectedServiceFromServerSide(buildExternalServiceWithLoadBalancer(hostName, \"\"));\n\n\t\tfinal Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n\n\t\tassertThat(resultEndpoint.isPresent(), is(true));\n\t\tassertThat(resultEndpoint.get().getAddress(), is(hostName));\n\t\tassertThat(resultEndpoint.get().getPort(), is(REST_PORT));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8FlinkKubeClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"},{"authorDate":"2021-08-13 16:45:01","commitOrder":2,"curCode":"    private void testNodePortService(KubernetesConfigOptions.NodePortAddressType addressType) {\n        flinkConfig.set(\n                KubernetesConfigOptions.REST_SERVICE_EXPOSED_NODE_PORT_ADDRESS_TYPE, addressType);\n        final List<String> internalAddresses =\n                Arrays.asList(\"InternalIP:10.0.0.1\", \"InternalIP:10.0.0.2\", \"InternalIP:10.0.0.3\");\n        final List<String> externalAddresses =\n                Arrays.asList(\"ExternalIP:7.7.7.7\", \"ExternalIP:8.8.8.8\", \"ExternalIP:9.9.9.9\");\n        final List<String> addresses = new ArrayList<>();\n        addresses.addAll(internalAddresses);\n        addresses.addAll(externalAddresses);\n        mockExpectedServiceFromServerSide(buildExternalServiceWithNodePort());\n        mockExpectedNodesFromServerSide(addresses);\n        try (final Fabric8FlinkKubeClient localClient =\n                new Fabric8FlinkKubeClient(\n                        flinkConfig,\n                        kubeClient,\n                        org.apache.flink.util.concurrent.Executors.newDirectExecutorService())) {\n            final Optional<Endpoint> resultEndpoint = localClient.getRestEndpoint(CLUSTER_ID);\n            assertThat(resultEndpoint.isPresent(), is(true));\n            final List<String> expectedIps;\n            switch (addressType) {\n                case InternalIP:\n                    expectedIps =\n                            internalAddresses.stream()\n                                    .map(s -> s.split(\":\")[1])\n                                    .collect(Collectors.toList());\n                    break;\n                case ExternalIP:\n                    expectedIps =\n                            externalAddresses.stream()\n                                    .map(s -> s.split(\":\")[1])\n                                    .collect(Collectors.toList());\n                    break;\n                default:\n                    throw new IllegalArgumentException(\n                            String.format(\"Unexpected address type %s.\", addressType));\n            }\n            assertThat(resultEndpoint.get().getAddress(), isIn(expectedIps));\n            assertThat(resultEndpoint.get().getPort(), is(NODE_PORT));\n        }\n    }\n","date":"2021-08-13 22:37:49","endLine":303,"groupId":"102385","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNodePortService","params":"(KubernetesConfigOptions.NodePortAddressTypeaddressType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5d/c320ab2d9b89fd92b46892774b8362c162df1b.src","preCode":"    public void testNodePortService() {\n        mockExpectedServiceFromServerSide(buildExternalServiceWithNodePort());\n\n        final Optional<Endpoint> resultEndpoint = flinkKubeClient.getRestEndpoint(CLUSTER_ID);\n        assertThat(resultEndpoint.isPresent(), is(true));\n        assertThat(resultEndpoint.get().getPort(), is(NODE_PORT));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8FlinkKubeClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"d9830ca3a9eae1d3bc7ff367f5f728b717971aaf","commitMessage":"@@@[FLINK-23507] Use IP address of a kubernetes node when constructing node port connection string for the REST gateway.\n\nThis closes #16720.\n","date":"2021-08-13 22:37:49","modifiedFileCount":"5","status":"M","submitter":"David Moravek"}]
