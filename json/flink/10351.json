[{"authorTime":"2021-08-16 18:08:31","codes":[{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void serializeAndDeserializePulsarPartitionSplit() throws Exception {\n        PulsarPartitionSplit split =\n                new PulsarPartitionSplit(\n                        new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor());\n\n        byte[] bytes = INSTANCE.serialize(split);\n        PulsarPartitionSplit split1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(split, split1);\n        assertNotSame(split, split1);\n    }\n","date":"2021-08-17 05:35:59","endLine":49,"groupId":"6381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeAndDeserializePulsarPartitionSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/0bb8a4c54e005c246f14e677e270b17a040e58.src","preCode":"    void serializeAndDeserializePulsarPartitionSplit() throws Exception {\n        PulsarPartitionSplit split =\n                new PulsarPartitionSplit(\n                        new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor());\n\n        byte[] bytes = INSTANCE.serialize(split);\n        PulsarPartitionSplit split1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(split, split1);\n        assertNotSame(split, split1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/split/PulsarPartitionSplitSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void serializeAndDeserializePulsarSourceEnumState() throws Exception {\n        Set<TopicPartition> partitions =\n                Sets.newHashSet(\n                        new TopicPartition(randomAlphabetic(10), 2, new TopicRange(1, 30)),\n                        new TopicPartition(randomAlphabetic(10), 1, createFullRange()));\n        Set<PulsarPartitionSplit> splits =\n                Collections.singleton(\n                        new PulsarPartitionSplit(\n                                new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                                StartCursor.defaultStartCursor(),\n                                StopCursor.defaultStopCursor()));\n        Map<Integer, Set<PulsarPartitionSplit>> shared = Collections.singletonMap(5, splits);\n        Map<Integer, Set<String>> mapping =\n                ImmutableMap.of(\n                        1, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)),\n                        2, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)));\n\n        PulsarSourceEnumState state =\n                new PulsarSourceEnumState(partitions, splits, shared, mapping, true);\n\n        byte[] bytes = INSTANCE.serialize(state);\n        PulsarSourceEnumState state1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(state.getAppendedPartitions(), state1.getAppendedPartitions());\n        assertEquals(state.getPendingPartitionSplits(), state1.getPendingPartitionSplits());\n        assertEquals(state.getReaderAssignedSplits(), state1.getReaderAssignedSplits());\n        assertEquals(state.isInitialized(), state1.isInitialized());\n\n        assertNotSame(state, state1);\n    }\n","date":"2021-08-17 05:35:59","endLine":75,"groupId":"6381","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeAndDeserializePulsarSourceEnumState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/7f5014082bd9afacb67bc2060b1cedc7b6e2ed.src","preCode":"    void serializeAndDeserializePulsarSourceEnumState() throws Exception {\n        Set<TopicPartition> partitions =\n                Sets.newHashSet(\n                        new TopicPartition(randomAlphabetic(10), 2, new TopicRange(1, 30)),\n                        new TopicPartition(randomAlphabetic(10), 1, createFullRange()));\n        Set<PulsarPartitionSplit> splits =\n                Collections.singleton(\n                        new PulsarPartitionSplit(\n                                new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                                StartCursor.defaultStartCursor(),\n                                StopCursor.defaultStopCursor()));\n        Map<Integer, Set<PulsarPartitionSplit>> shared = Collections.singletonMap(5, splits);\n        Map<Integer, Set<String>> mapping =\n                ImmutableMap.of(\n                        1, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)),\n                        2, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)));\n\n        PulsarSourceEnumState state =\n                new PulsarSourceEnumState(partitions, splits, shared, mapping, true);\n\n        byte[] bytes = INSTANCE.serialize(state);\n        PulsarSourceEnumState state1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(state.getAppendedPartitions(), state1.getAppendedPartitions());\n        assertEquals(state.getPendingPartitionSplits(), state1.getPendingPartitionSplits());\n        assertEquals(state.getReaderAssignedSplits(), state1.getReaderAssignedSplits());\n        assertEquals(state.isInitialized(), state1.isInitialized());\n\n        assertNotSame(state, state1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/PulsarSourceEnumStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"c675f786c51038801161e861826d1c54654f0dde","commitMessage":"@@@[FLINK-20731] Introduce new pulsar source connector for flink.\n","date":"2021-08-17 05:35:59","modifiedFileCount":"3","status":"B","submitter":"Yufan Sheng"},{"authorTime":"2021-09-03 15:45:04","codes":[{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    void serializeAndDeserializePulsarPartitionSplit() throws Exception {\n        PulsarPartitionSplit split =\n                new PulsarPartitionSplit(\n                        new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                        StopCursor.defaultStopCursor());\n\n        byte[] bytes = INSTANCE.serialize(split);\n        PulsarPartitionSplit split1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(split, split1);\n        assertNotSame(split, split1);\n    }\n","date":"2021-09-08 22:00:28","endLine":47,"groupId":"10351","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"serializeAndDeserializePulsarPartitionSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/63/350af1f91ff02ee1377e9b11095bdcd98709fc.src","preCode":"    void serializeAndDeserializePulsarPartitionSplit() throws Exception {\n        PulsarPartitionSplit split =\n                new PulsarPartitionSplit(\n                        new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor());\n\n        byte[] bytes = INSTANCE.serialize(split);\n        PulsarPartitionSplit split1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(split, split1);\n        assertNotSame(split, split1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/split/PulsarPartitionSplitSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    void serializeAndDeserializePulsarSourceEnumState() throws Exception {\n        Set<TopicPartition> partitions =\n                Sets.newHashSet(\n                        new TopicPartition(randomAlphabetic(10), 2, new TopicRange(1, 30)),\n                        new TopicPartition(randomAlphabetic(10), 1, createFullRange()));\n        Set<PulsarPartitionSplit> splits =\n                Collections.singleton(\n                        new PulsarPartitionSplit(\n                                new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                                StopCursor.defaultStopCursor()));\n        Map<Integer, Set<PulsarPartitionSplit>> shared = Collections.singletonMap(5, splits);\n        Map<Integer, Set<String>> mapping =\n                ImmutableMap.of(\n                        1, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)),\n                        2, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)));\n\n        PulsarSourceEnumState state =\n                new PulsarSourceEnumState(partitions, splits, shared, mapping, true);\n\n        byte[] bytes = INSTANCE.serialize(state);\n        PulsarSourceEnumState state1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(state.getAppendedPartitions(), state1.getAppendedPartitions());\n        assertEquals(state.getPendingPartitionSplits(), state1.getPendingPartitionSplits());\n        assertEquals(state.getReaderAssignedSplits(), state1.getReaderAssignedSplits());\n        assertEquals(state.isInitialized(), state1.isInitialized());\n\n        assertNotSame(state, state1);\n    }\n","date":"2021-09-08 22:00:28","endLine":73,"groupId":"10351","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"serializeAndDeserializePulsarSourceEnumState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/c40ed88ef7b8ba96e499edc71d3f80a63bf205.src","preCode":"    void serializeAndDeserializePulsarSourceEnumState() throws Exception {\n        Set<TopicPartition> partitions =\n                Sets.newHashSet(\n                        new TopicPartition(randomAlphabetic(10), 2, new TopicRange(1, 30)),\n                        new TopicPartition(randomAlphabetic(10), 1, createFullRange()));\n        Set<PulsarPartitionSplit> splits =\n                Collections.singleton(\n                        new PulsarPartitionSplit(\n                                new TopicPartition(randomAlphabetic(10), 10, createFullRange()),\n                                StartCursor.defaultStartCursor(),\n                                StopCursor.defaultStopCursor()));\n        Map<Integer, Set<PulsarPartitionSplit>> shared = Collections.singletonMap(5, splits);\n        Map<Integer, Set<String>> mapping =\n                ImmutableMap.of(\n                        1, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)),\n                        2, Sets.newHashSet(randomAlphabetic(10), randomAlphabetic(10)));\n\n        PulsarSourceEnumState state =\n                new PulsarSourceEnumState(partitions, splits, shared, mapping, true);\n\n        byte[] bytes = INSTANCE.serialize(state);\n        PulsarSourceEnumState state1 = INSTANCE.deserialize(INSTANCE.getVersion(), bytes);\n\n        assertEquals(state.getAppendedPartitions(), state1.getAppendedPartitions());\n        assertEquals(state.getPendingPartitionSplits(), state1.getPendingPartitionSplits());\n        assertEquals(state.getReaderAssignedSplits(), state1.getReaderAssignedSplits());\n        assertEquals(state.isInitialized(), state1.isInitialized());\n\n        assertNotSame(state, state1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/PulsarSourceEnumStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"1ca7353b8f91cee62bd78e24fd5af346fe5220ec","commitMessage":"@@@[FLINK-23848][connector/pulsar] Fix the consumer not found.\n","date":"2021-09-08 22:00:28","modifiedFileCount":"23","status":"M","submitter":"Yufan Sheng"}]
