[{"authorTime":"2016-06-11 08:14:07","codes":[{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\t\t\t\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tDataStream<Tuple3<String, String, Integer>> source2 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"u\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"w\", 1));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"i\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"k\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\t\t\t\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\n\t\tsource1.join(source2)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,u,0)\",\n\t\t\t\t\"(a,x,0):(a,w,1)\",\n\t\t\t\t\"(a,y,1):(a,u,0)\",\n\t\t\t\t\"(a,y,1):(a,w,1)\",\n\t\t\t\t\"(a,z,2):(a,u,0)\",\n\t\t\t\t\"(a,z,2):(a,w,1)\",\n\t\t\t\t\"(b,u,3):(b,i,3)\",\n\t\t\t\t\"(b,u,3):(b,k,5)\",\n\t\t\t\t\"(b,w,5):(b,i,3)\",\n\t\t\t\t\"(b,w,5):(b,k,5)\",\n\t\t\t\t\"(a,i,6):(a,x,6)\",\n\t\t\t\t\"(a,i,6):(a,z,8)\",\n\t\t\t\t\"(a,j,7):(a,x,6)\",\n\t\t\t\t\"(a,j,7):(a,z,8)\",\n\t\t\t\t\"(a,k,8):(a,x,6)\",\n\t\t\t\t\"(a,k,8):(a,z,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","date":"2016-07-05 21:51:06","endLine":243,"groupId":"12301","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/3de3d4127f6070f56c0bb10279e9ea9c4a5c1d.src","preCode":"\tpublic void testJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\t\t\t\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tDataStream<Tuple3<String, String, Integer>> source2 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"u\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"w\", 1));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"i\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"k\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\t\t\t\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\n\t\tsource1.join(source2)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,u,0)\",\n\t\t\t\t\"(a,x,0):(a,w,1)\",\n\t\t\t\t\"(a,y,1):(a,u,0)\",\n\t\t\t\t\"(a,y,1):(a,w,1)\",\n\t\t\t\t\"(a,z,2):(a,u,0)\",\n\t\t\t\t\"(a,z,2):(a,w,1)\",\n\t\t\t\t\"(b,u,3):(b,i,3)\",\n\t\t\t\t\"(b,u,3):(b,k,5)\",\n\t\t\t\t\"(b,w,5):(b,i,3)\",\n\t\t\t\t\"(b,w,5):(b,k,5)\",\n\t\t\t\t\"(a,i,6):(a,x,6)\",\n\t\t\t\t\"(a,i,6):(a,z,8)\",\n\t\t\t\t\"(a,j,7):(a,x,6)\",\n\t\t\t\t\"(a,j,7):(a,z,8)\",\n\t\t\t\t\"(a,k,8):(a,x,6)\",\n\t\t\t\t\"(a,k,8):(a,z,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/CoGroupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testSelfJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {\n\t\t\t}\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source1)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Self-Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,x,0)\",\n\t\t\t\t\"(a,x,0):(a,y,1)\",\n\t\t\t\t\"(a,x,0):(a,z,2)\",\n\t\t\t\t\"(a,y,1):(a,x,0)\",\n\t\t\t\t\"(a,y,1):(a,y,1)\",\n\t\t\t\t\"(a,y,1):(a,z,2)\",\n\t\t\t\t\"(a,z,2):(a,x,0)\",\n\t\t\t\t\"(a,z,2):(a,y,1)\",\n\t\t\t\t\"(a,z,2):(a,z,2)\",\n\t\t\t\t\"(b,u,3):(b,u,3)\",\n\t\t\t\t\"(b,u,3):(b,w,5)\",\n\t\t\t\t\"(b,w,5):(b,u,3)\",\n\t\t\t\t\"(b,w,5):(b,w,5)\",\n\t\t\t\t\"(a,i,6):(a,i,6)\",\n\t\t\t\t\"(a,i,6):(a,j,7)\",\n\t\t\t\t\"(a,i,6):(a,k,8)\",\n\t\t\t\t\"(a,j,7):(a,i,6)\",\n\t\t\t\t\"(a,j,7):(a,j,7)\",\n\t\t\t\t\"(a,j,7):(a,k,8)\",\n\t\t\t\t\"(a,k,8):(a,i,6)\",\n\t\t\t\t\"(a,k,8):(a,j,7)\",\n\t\t\t\t\"(a,k,8):(a,k,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","date":"2016-07-05 21:51:06","endLine":325,"groupId":"12301","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelfJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/da/3de3d4127f6070f56c0bb10279e9ea9c4a5c1d.src","preCode":"\tpublic void testSelfJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {\n\t\t\t}\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source1)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Self-Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,x,0)\",\n\t\t\t\t\"(a,x,0):(a,y,1)\",\n\t\t\t\t\"(a,x,0):(a,z,2)\",\n\t\t\t\t\"(a,y,1):(a,x,0)\",\n\t\t\t\t\"(a,y,1):(a,y,1)\",\n\t\t\t\t\"(a,y,1):(a,z,2)\",\n\t\t\t\t\"(a,z,2):(a,x,0)\",\n\t\t\t\t\"(a,z,2):(a,y,1)\",\n\t\t\t\t\"(a,z,2):(a,z,2)\",\n\t\t\t\t\"(b,u,3):(b,u,3)\",\n\t\t\t\t\"(b,u,3):(b,w,5)\",\n\t\t\t\t\"(b,w,5):(b,u,3)\",\n\t\t\t\t\"(b,w,5):(b,w,5)\",\n\t\t\t\t\"(a,i,6):(a,i,6)\",\n\t\t\t\t\"(a,i,6):(a,j,7)\",\n\t\t\t\t\"(a,i,6):(a,k,8)\",\n\t\t\t\t\"(a,j,7):(a,i,6)\",\n\t\t\t\t\"(a,j,7):(a,j,7)\",\n\t\t\t\t\"(a,j,7):(a,k,8)\",\n\t\t\t\t\"(a,k,8):(a,i,6)\",\n\t\t\t\t\"(a,k,8):(a,j,7)\",\n\t\t\t\t\"(a,k,8):(a,k,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/CoGroupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"b9f42e91c9415dd6063079df00c142334b74e636","commitMessage":"@@@[FLINK-3995] [build] flink-test-utils also contains the streaming test utilities.\n\nTest utilities include the StreamingMultipleProgramsTestBase and StreamingTestEnvironment.\n\nThis moves the ITCases for streaming into 'flink-tests' to achieve that.\n\nThis closes #2092\n","date":"2016-07-05 21:51:06","modifiedFileCount":"12","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tDataStream<Tuple3<String, String, Integer>> source2 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"u\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"w\", 1));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"i\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"k\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source2)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,u,0)\",\n\t\t\t\t\"(a,x,0):(a,w,1)\",\n\t\t\t\t\"(a,y,1):(a,u,0)\",\n\t\t\t\t\"(a,y,1):(a,w,1)\",\n\t\t\t\t\"(a,z,2):(a,u,0)\",\n\t\t\t\t\"(a,z,2):(a,w,1)\",\n\t\t\t\t\"(b,u,3):(b,i,3)\",\n\t\t\t\t\"(b,u,3):(b,k,5)\",\n\t\t\t\t\"(b,w,5):(b,i,3)\",\n\t\t\t\t\"(b,w,5):(b,k,5)\",\n\t\t\t\t\"(a,i,6):(a,x,6)\",\n\t\t\t\t\"(a,i,6):(a,z,8)\",\n\t\t\t\t\"(a,j,7):(a,x,6)\",\n\t\t\t\t\"(a,j,7):(a,z,8)\",\n\t\t\t\t\"(a,k,8):(a,x,6)\",\n\t\t\t\t\"(a,k,8):(a,z,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","date":"2020-10-01 23:03:45","endLine":248,"groupId":"101532","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c7/cf9218ce812f2a3e75a316b93a7a9995027f0c.src","preCode":"\tpublic void testJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tDataStream<Tuple3<String, String, Integer>> source2 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"u\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"w\", 1));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"i\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"k\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {}\n\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source2)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,u,0)\",\n\t\t\t\t\"(a,x,0):(a,w,1)\",\n\t\t\t\t\"(a,y,1):(a,u,0)\",\n\t\t\t\t\"(a,y,1):(a,w,1)\",\n\t\t\t\t\"(a,z,2):(a,u,0)\",\n\t\t\t\t\"(a,z,2):(a,w,1)\",\n\t\t\t\t\"(b,u,3):(b,i,3)\",\n\t\t\t\t\"(b,u,3):(b,k,5)\",\n\t\t\t\t\"(b,w,5):(b,i,3)\",\n\t\t\t\t\"(b,w,5):(b,k,5)\",\n\t\t\t\t\"(a,i,6):(a,x,6)\",\n\t\t\t\t\"(a,i,6):(a,z,8)\",\n\t\t\t\t\"(a,j,7):(a,x,6)\",\n\t\t\t\t\"(a,j,7):(a,z,8)\",\n\t\t\t\t\"(a,k,8):(a,x,6)\",\n\t\t\t\t\"(a,k,8):(a,z,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/CoGroupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testSelfJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {\n\t\t\t}\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source1)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Self-Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,x,0)\",\n\t\t\t\t\"(a,x,0):(a,y,1)\",\n\t\t\t\t\"(a,x,0):(a,z,2)\",\n\t\t\t\t\"(a,y,1):(a,x,0)\",\n\t\t\t\t\"(a,y,1):(a,y,1)\",\n\t\t\t\t\"(a,y,1):(a,z,2)\",\n\t\t\t\t\"(a,z,2):(a,x,0)\",\n\t\t\t\t\"(a,z,2):(a,y,1)\",\n\t\t\t\t\"(a,z,2):(a,z,2)\",\n\t\t\t\t\"(b,u,3):(b,u,3)\",\n\t\t\t\t\"(b,u,3):(b,w,5)\",\n\t\t\t\t\"(b,w,5):(b,u,3)\",\n\t\t\t\t\"(b,w,5):(b,w,5)\",\n\t\t\t\t\"(a,i,6):(a,i,6)\",\n\t\t\t\t\"(a,i,6):(a,j,7)\",\n\t\t\t\t\"(a,i,6):(a,k,8)\",\n\t\t\t\t\"(a,j,7):(a,i,6)\",\n\t\t\t\t\"(a,j,7):(a,j,7)\",\n\t\t\t\t\"(a,j,7):(a,k,8)\",\n\t\t\t\t\"(a,k,8):(a,i,6)\",\n\t\t\t\t\"(a,k,8):(a,j,7)\",\n\t\t\t\t\"(a,k,8):(a,k,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","date":"2020-10-01 23:03:45","endLine":329,"groupId":"101532","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelfJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c7/cf9218ce812f2a3e75a316b93a7a9995027f0c.src","preCode":"\tpublic void testSelfJoin() throws Exception {\n\n\t\ttestResults = new ArrayList<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source1 = env.addSource(new SourceFunction<Tuple3<String, String, Integer>>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void run(SourceContext<Tuple3<String, String, Integer>> ctx) throws Exception {\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"x\", 0));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"y\", 1));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"z\", 2));\n\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"u\", 3));\n\t\t\t\tctx.collect(Tuple3.of(\"b\", \"w\", 5));\n\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"i\", 6));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"j\", 7));\n\t\t\t\tctx.collect(Tuple3.of(\"a\", \"k\", 8));\n\n\t\t\t\t\r\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void cancel() {\n\t\t\t}\n\t\t}).assignTimestampsAndWatermarks(new Tuple3TimestampExtractor());\n\n\t\tsource1.join(source1)\n\t\t\t\t.where(new Tuple3KeyExtractor())\n\t\t\t\t.equalTo(new Tuple3KeyExtractor())\n\t\t\t\t.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))\n\t\t\t\t.apply(new JoinFunction<Tuple3<String, String, Integer>, Tuple3<String, String, Integer>, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String join(Tuple3<String, String, Integer> first, Tuple3<String, String, Integer> second) throws Exception {\n\t\t\t\t\t\treturn first + \":\" + second;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.addSink(new SinkFunction<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void invoke(String value) throws Exception {\n\t\t\t\t\t\ttestResults.add(value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tenv.execute(\"Self-Join Test\");\n\n\t\tList<String> expectedResult = Arrays.asList(\n\t\t\t\t\"(a,x,0):(a,x,0)\",\n\t\t\t\t\"(a,x,0):(a,y,1)\",\n\t\t\t\t\"(a,x,0):(a,z,2)\",\n\t\t\t\t\"(a,y,1):(a,x,0)\",\n\t\t\t\t\"(a,y,1):(a,y,1)\",\n\t\t\t\t\"(a,y,1):(a,z,2)\",\n\t\t\t\t\"(a,z,2):(a,x,0)\",\n\t\t\t\t\"(a,z,2):(a,y,1)\",\n\t\t\t\t\"(a,z,2):(a,z,2)\",\n\t\t\t\t\"(b,u,3):(b,u,3)\",\n\t\t\t\t\"(b,u,3):(b,w,5)\",\n\t\t\t\t\"(b,w,5):(b,u,3)\",\n\t\t\t\t\"(b,w,5):(b,w,5)\",\n\t\t\t\t\"(a,i,6):(a,i,6)\",\n\t\t\t\t\"(a,i,6):(a,j,7)\",\n\t\t\t\t\"(a,i,6):(a,k,8)\",\n\t\t\t\t\"(a,j,7):(a,i,6)\",\n\t\t\t\t\"(a,j,7):(a,j,7)\",\n\t\t\t\t\"(a,j,7):(a,k,8)\",\n\t\t\t\t\"(a,k,8):(a,i,6)\",\n\t\t\t\t\"(a,k,8):(a,j,7)\",\n\t\t\t\t\"(a,k,8):(a,k,8)\");\n\n\t\tCollections.sort(expectedResult);\n\t\tCollections.sort(testResults);\n\n\t\tAssert.assertEquals(expectedResult, testResults);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/CoGroupJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
