[{"authorTime":"2018-07-09 18:02:24","codes":[{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testCanJoinOverSameKey() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tstreamOne\n\t\t\t.intervalJoin(streamTwo)\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(0))\n\t\t\t.process(new ProcessJoinFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement(Tuple2<String, Integer> left,\n\t\t\t\t\tTuple2<String, Integer> right, Context ctx,\n\t\t\t\t\tCollector<String> out) throws Exception {\n\t\t\t\t\tout.collect(left + \":\" + right);\n\t\t\t\t}\n\t\t\t}).addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,2):(key,2)\",\n\t\t\t\"(key,3):(key,3)\",\n\t\t\t\"(key,4):(key,4)\",\n\t\t\t\"(key,5):(key,5)\"\n\t\t);\n\t}\n","date":"2018-07-13 03:03:26","endLine":108,"groupId":"6612","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCanJoinOverSameKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/9fe7ba90d4697ee1dfecfc59b4b607642ed285.src","preCode":"\tpublic void testCanJoinOverSameKey() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tstreamOne\n\t\t\t.intervalJoin(streamTwo)\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(0))\n\t\t\t.process(new ProcessJoinFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement(Tuple2<String, Integer> left,\n\t\t\t\t\tTuple2<String, Integer> right, Context ctx,\n\t\t\t\t\tCollector<String> out) throws Exception {\n\t\t\t\t\tout.collect(left + \":\" + right);\n\t\t\t\t}\n\t\t\t}).addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,2):(key,2)\",\n\t\t\t\"(key,3):(key,3)\",\n\t\t\t\"(key,4):(key,4)\",\n\t\t\t\"(key,5):(key,5)\"\n\t\t);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2018-07-09 18:02:24","commitOrder":1,"curCode":"\tpublic void testBoundsAreInclusiveByDefault() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tstreamOne.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(2))\n\t\t\t.process(new CombineToStringJoinFunction())\n\t\t\t.addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,0):(key,1)\",\n\t\t\t\"(key,0):(key,2)\",\n\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,1):(key,2)\",\n\n\t\t\t\"(key,2):(key,2)\"\n\t\t);\n\t}\n","date":"2018-07-13 03:03:26","endLine":391,"groupId":"51060","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundsAreInclusiveByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/9fe7ba90d4697ee1dfecfc59b4b607642ed285.src","preCode":"\tpublic void testBoundsAreInclusiveByDefault() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tstreamOne.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(2))\n\t\t\t.process(new CombineToStringJoinFunction())\n\t\t\t.addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,0):(key,1)\",\n\t\t\t\"(key,0):(key,2)\",\n\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,1):(key,2)\",\n\n\t\t\t\"(key,2):(key,2)\"\n\t\t);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"B"}],"commitId":"42ada8ad9ca28f94d0a0355658330198bbc2b577","commitMessage":"@@@[FLINK-8480][DataStream] Add APIs for Interval Joins.\n\nThis adds the Java and Scala API for performing an IntervalJoin.\nIn jave this will look like:\n\nExample:\n\n```java\nkeyedStream.intervalJoin(otherKeyedStream)\n    .between(Time.milliseconds(-2).  Time.milliseconds(2)) // lower and upper bound\n    .upperBoundExclusive(true) // optional\n    .lowerBoundExclusive(true) // optional\n    .process(new IntervalJoinFunction() {...});\n```\n\nThis closes #5482.\n","date":"2018-07-13 03:03:26","modifiedFileCount":"1","status":"B","submitter":"Florian Schmidt"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testCanJoinOverSameKey() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tstreamOne\n\t\t\t.intervalJoin(streamTwo)\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(0))\n\t\t\t.process(new ProcessJoinFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement(Tuple2<String, Integer> left,\n\t\t\t\t\tTuple2<String, Integer> right, Context ctx,\n\t\t\t\t\tCollector<String> out) throws Exception {\n\t\t\t\t\tout.collect(left + \":\" + right);\n\t\t\t\t}\n\t\t\t}).addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,2):(key,2)\",\n\t\t\t\"(key,3):(key,3)\",\n\t\t\t\"(key,4):(key,4)\",\n\t\t\t\"(key,5):(key,5)\"\n\t\t);\n\t}\n","date":"2020-10-01 23:03:45","endLine":107,"groupId":"101470","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCanJoinOverSameKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/a01068df6b8f947d6e8025ea838674eb3137fe.src","preCode":"\tpublic void testCanJoinOverSameKey() throws Exception {\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tKeyedStream<Tuple2<String, Integer>, String> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2),\n\t\t\tTuple2.of(\"key\", 3),\n\t\t\tTuple2.of(\"key\", 4),\n\t\t\tTuple2.of(\"key\", 5)\n\t\t)\n\t\t\t.assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor())\n\t\t\t.keyBy(new Tuple2KeyExtractor());\n\n\t\tstreamOne\n\t\t\t.intervalJoin(streamTwo)\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(0))\n\t\t\t.process(new ProcessJoinFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processElement(Tuple2<String, Integer> left,\n\t\t\t\t\tTuple2<String, Integer> right, Context ctx,\n\t\t\t\t\tCollector<String> out) throws Exception {\n\t\t\t\t\tout.collect(left + \":\" + right);\n\t\t\t\t}\n\t\t\t}).addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,2):(key,2)\",\n\t\t\t\"(key,3):(key,3)\",\n\t\t\t\"(key,4):(key,4)\",\n\t\t\t\"(key,5):(key,5)\"\n\t\t);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testBoundsAreInclusiveByDefault() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tstreamOne.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(2))\n\t\t\t.process(new CombineToStringJoinFunction())\n\t\t\t.addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,0):(key,1)\",\n\t\t\t\"(key,0):(key,2)\",\n\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,1):(key,2)\",\n\n\t\t\t\"(key,2):(key,2)\"\n\t\t);\n\t}\n","date":"2020-10-01 23:03:45","endLine":383,"groupId":"101470","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundsAreInclusiveByDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/a01068df6b8f947d6e8025ea838674eb3137fe.src","preCode":"\tpublic void testBoundsAreInclusiveByDefault() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Tuple2<String, Integer>> streamOne = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tDataStream<Tuple2<String, Integer>> streamTwo = env.fromElements(\n\t\t\tTuple2.of(\"key\", 0),\n\t\t\tTuple2.of(\"key\", 1),\n\t\t\tTuple2.of(\"key\", 2)\n\t\t).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor());\n\n\t\tstreamOne.keyBy(new Tuple2KeyExtractor())\n\t\t\t.intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor()))\n\t\t\t.between(Time.milliseconds(0), Time.milliseconds(2))\n\t\t\t.process(new CombineToStringJoinFunction())\n\t\t\t.addSink(new ResultSink());\n\n\t\tenv.execute();\n\n\t\texpectInAnyOrder(\n\t\t\t\"(key,0):(key,0)\",\n\t\t\t\"(key,0):(key,1)\",\n\t\t\t\"(key,0):(key,2)\",\n\n\t\t\t\"(key,1):(key,1)\",\n\t\t\t\"(key,1):(key,2)\",\n\n\t\t\t\"(key,2):(key,2)\"\n\t\t);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IntervalJoinITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
