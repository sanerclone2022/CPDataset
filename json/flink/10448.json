[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '3',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-05-18 12:30:38","endLine":275,"groupId":"45983","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/f7f77f21bbf1dd474c1b2e328edd470463cd2a.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '3',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":2,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":262,"groupId":"45279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"NB"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-06-08 18:48:37","commitOrder":3,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '300ms',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-06-11 17:02:19","endLine":275,"groupId":"45983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/d3cf6ad02c215658e6741dab124690c006efc7.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '3',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2020-05-13 20:55:49","commitOrder":3,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":262,"groupId":"45279","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"N"}],"commitId":"6c2ff9753802b02586f21faff3c997b19482cc5d","commitMessage":"@@@[FLINK-16497][jdbc][table] Improve default flush strategy for new JDBC sink for better out-of-box\n\nThe default flush strategy for old JDBC sink is no flush interval and 5000 buffered rows.\nThe new default flush strategy for new JDBC sink is '1s' flush interval and '100' buffered rows.\n\nThis closes #12536\n","date":"2020-06-11 17:02:19","modifiedFileCount":"5","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-17 14:23:46","codes":[{"authorDate":"2020-06-17 14:23:46","commitOrder":4,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '300ms',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\ttableResult.await();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":283,"groupId":"51384","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f9/353ed3385ac36eae9dbc15e36f2540b8a9ae2a.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector' = 'jdbc',\" +\n\t\t\t\t\"'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'table-name' = '\" + OUTPUT_TABLE3 + \"',\" +\n\t\t\t\t\"'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"'sink.buffer-flush.interval' = '300ms',\" +\n\t\t\t\t\"'sink.max-retries' = '4'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\"SELECT user_name, score \" +\n\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\tRow.of(\"Bob\", 1),\n\t\t\tRow.of(\"Tom\", 22),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Kim\", 42),\n\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2020-06-17 14:23:46","commitOrder":4,"curCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\").await();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":252,"groupId":"42271","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/2705f2a28cad6a6d0b3aa3970eab2e4fd93893.src","preCode":"\tpublic void testBatchSink() throws Exception {\n\t\tEnvironmentSettings bsSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner().inBatchMode().build();\n\t\tTableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE USER_RESULT(\" +\n\t\t\t\t\"NAME VARCHAR,\" +\n\t\t\t\t\"SCORE BIGINT\" +\n\t\t\t\t\") WITH ( \" +\n\t\t\t\t\"'connector.type' = 'jdbc',\" +\n\t\t\t\t\"'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"'connector.table' = '\" + OUTPUT_TABLE3 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult  = tEnv.executeSql(\"INSERT INTO USER_RESULT\\n\" +\n\t\t\t\t\"SELECT user_name, score \" +\n\t\t\t\t\"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \" +\n\t\t\t\t\"(42, 'Kim'), (1, 'Bob')) \" +\n\t\t\t\t\"AS UserCountTable(score, user_name)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(\"Bob\", 1),\n\t\t\t\tRow.of(\"Tom\", 22),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Kim\", 42),\n\t\t\t\tRow.of(\"Bob\", 1)\n\t\t}, DB_URL, OUTPUT_TABLE3, new String[]{\"NAME\", \"SCORE\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"6f2a0412c0eb00adeb494fcc1d68481bdf2dd7b8","commitMessage":"@@@[FLINK-18337][table] Introduce TableResult#await method to block until data is ready or job finished\n\nThis closes #12688.\n","date":"2020-09-07 17:35:17","modifiedFileCount":"26","status":"M","submitter":"godfreyhe"},{"authorTime":"2021-06-07 23:37:43","codes":[{"authorDate":"2021-06-07 23:37:43","commitOrder":5,"curCode":"    public void testBatchSink() throws Exception {\n        TableEnvironment tEnv = TableEnvironment.create(EnvironmentSettings.inBatchMode());\n\n        tEnv.executeSql(\n                \"CREATE TABLE USER_RESULT(\"\n                        + \"NAME VARCHAR,\"\n                        + \"SCORE BIGINT\"\n                        + \") WITH ( \"\n                        + \"'connector' = 'jdbc',\"\n                        + \"'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"'table-name' = '\"\n                        + OUTPUT_TABLE3\n                        + \"',\"\n                        + \"'sink.buffer-flush.max-rows' = '2',\"\n                        + \"'sink.buffer-flush.interval' = '300ms',\"\n                        + \"'sink.max-retries' = '4'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO USER_RESULT\\n\"\n                                + \"SELECT user_name, score \"\n                                + \"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \"\n                                + \"(42, 'Kim'), (1, 'Bob')) \"\n                                + \"AS UserCountTable(score, user_name)\");\n        tableResult.await();\n\n        check(\n                new Row[] {\n                    Row.of(\"Bob\", 1),\n                    Row.of(\"Tom\", 22),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Bob\", 1)\n                },\n                DB_URL,\n                OUTPUT_TABLE3,\n                new String[] {\"NAME\", \"SCORE\"});\n    }\n","date":"2021-06-11 15:34:45","endLine":355,"groupId":"10448","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/783032359b382ca000e4959c233d4cefe6ca99.src","preCode":"    public void testBatchSink() throws Exception {\n        EnvironmentSettings bsSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build();\n        TableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE USER_RESULT(\"\n                        + \"NAME VARCHAR,\"\n                        + \"SCORE BIGINT\"\n                        + \") WITH ( \"\n                        + \"'connector' = 'jdbc',\"\n                        + \"'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"'table-name' = '\"\n                        + OUTPUT_TABLE3\n                        + \"',\"\n                        + \"'sink.buffer-flush.max-rows' = '2',\"\n                        + \"'sink.buffer-flush.interval' = '300ms',\"\n                        + \"'sink.max-retries' = '4'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO USER_RESULT\\n\"\n                                + \"SELECT user_name, score \"\n                                + \"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \"\n                                + \"(42, 'Kim'), (1, 'Bob')) \"\n                                + \"AS UserCountTable(score, user_name)\");\n        tableResult.await();\n\n        check(\n                new Row[] {\n                    Row.of(\"Bob\", 1),\n                    Row.of(\"Tom\", 22),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Bob\", 1)\n                },\n                DB_URL,\n                OUTPUT_TABLE3,\n                new String[] {\"NAME\", \"SCORE\"});\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2021-06-07 23:37:43","commitOrder":5,"curCode":"    public void testBatchSink() throws Exception {\n        TableEnvironment tEnv = TableEnvironment.create(EnvironmentSettings.inBatchMode());\n\n        tEnv.executeSql(\n                \"CREATE TABLE USER_RESULT(\"\n                        + \"NAME VARCHAR,\"\n                        + \"SCORE BIGINT\"\n                        + \") WITH ( \"\n                        + \"'connector.type' = 'jdbc',\"\n                        + \"'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"'connector.table' = '\"\n                        + OUTPUT_TABLE3\n                        + \"'\"\n                        + \")\");\n\n        tEnv.executeSql(\n                        \"INSERT INTO USER_RESULT\\n\"\n                                + \"SELECT user_name, score \"\n                                + \"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \"\n                                + \"(42, 'Kim'), (1, 'Bob')) \"\n                                + \"AS UserCountTable(score, user_name)\")\n                .await();\n\n        check(\n                new Row[] {\n                    Row.of(\"Bob\", 1),\n                    Row.of(\"Tom\", 22),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Bob\", 1)\n                },\n                DB_URL,\n                OUTPUT_TABLE3,\n                new String[] {\"NAME\", \"SCORE\"});\n    }\n","date":"2021-06-11 15:34:45","endLine":304,"groupId":"10448","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testBatchSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/8b9d0157d5077da40b027865b4ae4f6408573e.src","preCode":"    public void testBatchSink() throws Exception {\n        EnvironmentSettings bsSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build();\n        TableEnvironment tEnv = TableEnvironment.create(bsSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE USER_RESULT(\"\n                        + \"NAME VARCHAR,\"\n                        + \"SCORE BIGINT\"\n                        + \") WITH ( \"\n                        + \"'connector.type' = 'jdbc',\"\n                        + \"'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"'connector.table' = '\"\n                        + OUTPUT_TABLE3\n                        + \"'\"\n                        + \")\");\n\n        tEnv.executeSql(\n                        \"INSERT INTO USER_RESULT\\n\"\n                                + \"SELECT user_name, score \"\n                                + \"FROM (VALUES (1, 'Bob'), (22, 'Tom'), (42, 'Kim'), \"\n                                + \"(42, 'Kim'), (1, 'Bob')) \"\n                                + \"AS UserCountTable(score, user_name)\")\n                .await();\n\n        check(\n                new Row[] {\n                    Row.of(\"Bob\", 1),\n                    Row.of(\"Tom\", 22),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Kim\", 42),\n                    Row.of(\"Bob\", 1)\n                },\n                DB_URL,\n                OUTPUT_TABLE3,\n                new String[] {\"NAME\", \"SCORE\"});\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"bd27a2e2846186f59556c38b7bf562a9b04d14ac","commitMessage":"@@@[FLINK-22744][table] Update and simplify EnvironmentSettings\n","date":"2021-06-11 15:34:45","modifiedFileCount":"33","status":"M","submitter":"Timo Walther"}]
