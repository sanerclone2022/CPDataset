[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-13 20:55:49","commitOrder":1,"curCode":"\tpublic void testJdbcInputFormatWithParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal int fetchSize = 1;\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - fetchSize].id;\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(TEST_DATA.length, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","date":"2020-05-13 20:55:49","endLine":278,"groupId":"33284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcInputFormatWithParallelismAndNumericColumnSplitting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/0f6c82371dcc314597cab0f63e663f7345aca3.src","preCode":"\tpublic void testJdbcInputFormatWithParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal int fetchSize = 1;\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - fetchSize].id;\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(TEST_DATA.length, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":1,"curCode":"\tpublic void testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - 1].id;\n\t\tfinal long fetchSize = max + 1; \r\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(1, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","date":"2020-05-13 20:55:49","endLine":316,"groupId":"33286","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/0f6c82371dcc314597cab0f63e663f7345aca3.src","preCode":"\tpublic void testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - 1].id;\n\t\tfinal long fetchSize = max + 1; \r\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(1, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"B"}],"commitId":"6a6a439517b99d939758ef9275d40f88f5700c4a","commitMessage":"@@@[FLINK-17537][jdbc] Refactor flink-jdbc connector structure\n\n(1) Use Jdbc instead of JDBC.\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc.\n(3) Keep ancient JDBCOutputFormat.  JDBCInputFormat and ParameterValuesProvider in old package.\n(4) Add tests/ITCase for ancient Classes and new classes.\n(5) rename flink-jdbc module to flink-connector-jdbc.\n(6) update docs.\n\nThis closes #12036","date":"2020-05-13 20:55:49","modifiedFileCount":"0","status":"B","submitter":"Leonard Xu"},{"authorTime":"2020-05-15 21:49:36","codes":[{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testJdbcInputFormatWithParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal int fetchSize = 1;\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - fetchSize].id;\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(TEST_DATA.length, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","date":"2020-05-18 12:30:38","endLine":262,"groupId":"10493","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcInputFormatWithParallelismAndNumericColumnSplitting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/34c1231469051444d2685c5cd92e53207557a0.src","preCode":"\tpublic void testJdbcInputFormatWithParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal int fetchSize = 1;\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - fetchSize].id;\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(TEST_DATA.length, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - 1].id;\n\t\tfinal long fetchSize = max + 1; \r\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(1, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","date":"2020-05-18 12:30:38","endLine":298,"groupId":"10493","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/34c1231469051444d2685c5cd92e53207557a0.src","preCode":"\tpublic void testJdbcInputFormatWithoutParallelismAndNumericColumnSplitting() throws IOException {\n\t\tfinal long min = TEST_DATA[0].id;\n\t\tfinal long max = TEST_DATA[TEST_DATA.length - 1].id;\n\t\tfinal long fetchSize = max + 1; \r\n\t\tJdbcParameterValuesProvider pramProvider = new JdbcNumericBetweenParametersProvider(min, max).ofBatchSize(fetchSize);\n\t\tjdbcInputFormat = JdbcInputFormat.buildJdbcInputFormat()\n\t\t\t.setDrivername(DERBY_EBOOKSHOP_DB.getDriverClass())\n\t\t\t.setDBUrl(DERBY_EBOOKSHOP_DB.getUrl())\n\t\t\t.setQuery(SELECT_ALL_BOOKS_SPLIT_BY_ID)\n\t\t\t.setRowTypeInfo(ROW_TYPE_INFO)\n\t\t\t.setParametersProvider(pramProvider)\n\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t.setRowConverter(\n\t\t\t\tJdbcDialects.get(DERBY_EBOOKSHOP_DB.getUrl()).get().getRowConverter(ROW_TYPE))\n\t\t\t.finish();\n\n\t\tjdbcInputFormat.openInputFormat();\n\t\tInputSplit[] splits = jdbcInputFormat.createInputSplits(1);\n\t\t\r\n\t\tAssert.assertEquals(1, splits.length);\n\t\tint recordCount = 0;\n\t\tRow row = new Row(5);\n\t\tfor (InputSplit split : splits) {\n\t\t\tjdbcInputFormat.open(split);\n\t\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\t\tRow next = jdbcInputFormat.nextRecord(row);\n\n\t\t\t\tassertEquals(TEST_DATA[recordCount], next);\n\n\t\t\t\trecordCount++;\n\t\t\t}\n\t\t\tjdbcInputFormat.close();\n\t\t}\n\t\tjdbcInputFormat.closeInputFormat();\n\t\tAssert.assertEquals(TEST_DATA.length, recordCount);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"}]
