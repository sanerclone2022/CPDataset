[{"authorTime":"2016-06-11 08:14:07","codes":[{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t}\n","date":"2016-07-05 21:51:06","endLine":97,"groupId":"26265","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoubleClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/bebd0c4aa96504514cb4b58a742e68f802575d.src","preCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(NoOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(sourceSinkPair.f0.getOutEdges().get(0).getTargetVertex(), sourceSinkPair.f1.getInEdges().get(0).getSourceVertex());\n\t\t}\n\t}\n","date":"2016-07-05 21:51:06","endLine":206,"groupId":"26265","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testImmutabilityWithCoiteration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/bebd0c4aa96504514cb4b58a742e68f802575d.src","preCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(NoOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(sourceSinkPair.f0.getOutEdges().get(0).getTargetVertex(), sourceSinkPair.f1.getInEdges().get(0).getSourceVertex());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"b9f42e91c9415dd6063079df00c142334b74e636","commitMessage":"@@@[FLINK-3995] [build] flink-test-utils also contains the streaming test utilities.\n\nTest utilities include the StreamingMultipleProgramsTestBase and StreamingTestEnvironment.\n\nThis moves the ITCases for streaming into 'flink-tests' to achieve that.\n\nThis closes #2092\n","date":"2016-07-05 21:51:06","modifiedFileCount":"12","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2017-05-31 03:40:47","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":2,"curCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t}\n","date":"2017-07-13 06:37:47","endLine":99,"groupId":"26265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoubleClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/6b2bcb7bca5793e4f5f8547c1801c1fe816774.src","preCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t\titer1.closeWith(iter1.map(NoOpIntMap));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2017-05-31 03:40:47","commitOrder":2,"curCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(noOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(noOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(sourceSinkPair.f0.getOutEdges().get(0).getTargetVertex(), sourceSinkPair.f1.getInEdges().get(0).getSourceVertex());\n\t\t}\n\t}\n","date":"2017-07-13 06:37:47","endLine":202,"groupId":"26265","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testImmutabilityWithCoiteration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/6b2bcb7bca5793e4f5f8547c1801c1fe816774.src","preCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(NoOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(NoOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(NoOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(sourceSinkPair.f0.getOutEdges().get(0).getTargetVertex(), sourceSinkPair.f1.getInEdges().get(0).getSourceVertex());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"9bd491e05120915cbde36d4452e3982fe5d0975f","commitMessage":"@@@[FLINK-6731] [tests] Activate strict checkstyle for flink-tests\n\nThis closes #4295\n","date":"2017-07-13 06:37:47","modifiedFileCount":"185","status":"M","submitter":"Greg Hogan"},{"authorTime":"2019-01-03 16:37:21","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":3,"curCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t}\n","date":"2017-07-13 06:37:47","endLine":99,"groupId":"101501","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoubleClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/6b2bcb7bca5793e4f5f8547c1801c1fe816774.src","preCode":"\tpublic void testDoubleClosing() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\r\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap);\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t\titer1.closeWith(iter1.map(noOpIntMap));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2019-01-03 16:37:21","commitOrder":3,"curCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(noOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(noOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(graph.getTargetVertex(sourceSinkPair.f0.getOutEdges().get(0)),\n\t\t\t\tgraph.getSourceVertex(sourceSinkPair.f1.getInEdges().get(0)));\n\t\t}\n\t}\n","date":"2019-01-19 21:51:26","endLine":206,"groupId":"101501","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testImmutabilityWithCoiteration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/2584de0389376ff3a142b67a940439083656fe.src","preCode":"\tpublic void testImmutabilityWithCoiteration() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Integer> source = env.fromElements(1, 10).map(noOpIntMap); \r\n\n\t\tIterativeStream<Integer> iter1 = source.iterate();\n\t\t\r\n\t\tConnectedIterativeStreams<Integer, String> iter2 = iter1.withFeedbackType(String.class);\n\n\t\titer1.closeWith(iter1.map(noOpIntMap)).print();\n\t\titer2.closeWith(iter2.map(noOpCoMap)).print();\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tassertEquals(2, graph.getIterationSourceSinkPairs().size());\n\n\t\tfor (Tuple2<StreamNode, StreamNode> sourceSinkPair: graph.getIterationSourceSinkPairs()) {\n\t\t\tassertEquals(sourceSinkPair.f0.getOutEdges().get(0).getTargetVertex(), sourceSinkPair.f1.getInEdges().get(0).getSourceVertex());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/IterateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"a7eb845e812ab0355854d3cf26843179a5a8b597","commitMessage":"@@@[FLINK-11256][Streaming] Improve StreamEdge to reduce the sizes of JobGraph\n\nThis closes #7403\n","date":"2019-01-19 21:51:26","modifiedFileCount":"6","status":"M","submitter":"sunhaibotb"}]
