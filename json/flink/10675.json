[{"authorTime":"2020-10-06 04:01:47","codes":[{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic DynamicTableSource createDynamicTableSource(Context context) {\n\t\tFactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\t\tReadableConfig tableOptions = helper.getOptions();\n\t\tCatalogTable catalogTable = context.getCatalogTable();\n\t\tProperties properties = KinesisOptions.getConsumerProperties(catalogTable.getOptions());\n\n\t\t\r\n\t\t\r\n\t\tDecodingFormat<DeserializationSchema<RowData>> decodingFormat = helper\n\t\t\t.discoverDecodingFormat(DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n\t\t\r\n\t\thelper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n\t\t\r\n\t\tvalidateConsumerProperties(tableOptions.get(KinesisOptions.STREAM), properties);\n\n\t\treturn new KinesisDynamicSource(\n\t\t\tcatalogTable.getSchema().toPhysicalRowDataType(),\n\t\t\ttableOptions.get(KinesisOptions.STREAM),\n\t\t\tproperties,\n\t\t\tdecodingFormat\n\t\t);\n\t}\n","date":"2020-11-08 06:08:34","endLine":82,"groupId":"19313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSource","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/01b2280ebdbf134ed5fbc80b75d9ed76629894.src","preCode":"\tpublic DynamicTableSource createDynamicTableSource(Context context) {\n\t\tFactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\t\tReadableConfig tableOptions = helper.getOptions();\n\t\tCatalogTable catalogTable = context.getCatalogTable();\n\t\tProperties properties = KinesisOptions.getConsumerProperties(catalogTable.getOptions());\n\n\t\t\r\n\t\t\r\n\t\tDecodingFormat<DeserializationSchema<RowData>> decodingFormat = helper\n\t\t\t.discoverDecodingFormat(DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n\t\t\r\n\t\thelper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n\t\t\r\n\t\tvalidateConsumerProperties(tableOptions.get(KinesisOptions.STREAM), properties);\n\n\t\treturn new KinesisDynamicSource(\n\t\t\tcatalogTable.getSchema().toPhysicalRowDataType(),\n\t\t\ttableOptions.get(KinesisOptions.STREAM),\n\t\t\tproperties,\n\t\t\tdecodingFormat\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2020-10-06 04:01:47","commitOrder":1,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tFactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\t\tReadableConfig tableOptions = helper.getOptions();\n\t\tCatalogTable catalogTable = context.getCatalogTable();\n\t\tProperties properties = KinesisOptions.getProducerProperties(catalogTable.getOptions());\n\n\t\t\r\n\t\t\r\n\t\tEncodingFormat<SerializationSchema<RowData>> encodingFormat = helper\n\t\t\t.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n\t\t\r\n\t\thelper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n\t\t\r\n\t\tvalidateKinesisPartitioner(tableOptions, catalogTable);\n\t\tvalidateProducerProperties(properties);\n\n\t\treturn new KinesisDynamicSink(\n\t\t\tcatalogTable.getSchema().toPhysicalRowDataType(),\n\t\t\ttableOptions.get(KinesisOptions.STREAM),\n\t\t\tproperties,\n\t\t\tencodingFormat,\n\t\t\tKinesisOptions.getKinesisPartitioner(\n\t\t\t\ttableOptions,\n\t\t\t\tcatalogTable,\n\t\t\t\tcontext.getClassLoader()));\n\t}\n","date":"2020-11-08 06:08:34","endLine":115,"groupId":"19314","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/01b2280ebdbf134ed5fbc80b75d9ed76629894.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tFactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\t\tReadableConfig tableOptions = helper.getOptions();\n\t\tCatalogTable catalogTable = context.getCatalogTable();\n\t\tProperties properties = KinesisOptions.getProducerProperties(catalogTable.getOptions());\n\n\t\t\r\n\t\t\r\n\t\tEncodingFormat<SerializationSchema<RowData>> encodingFormat = helper\n\t\t\t.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n\t\t\r\n\t\thelper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n\t\t\r\n\t\tvalidateKinesisPartitioner(tableOptions, catalogTable);\n\t\tvalidateProducerProperties(properties);\n\n\t\treturn new KinesisDynamicSink(\n\t\t\tcatalogTable.getSchema().toPhysicalRowDataType(),\n\t\t\ttableOptions.get(KinesisOptions.STREAM),\n\t\t\tproperties,\n\t\t\tencodingFormat,\n\t\t\tKinesisOptions.getKinesisPartitioner(\n\t\t\t\ttableOptions,\n\t\t\t\tcatalogTable,\n\t\t\t\tcontext.getClassLoader()));\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"322a357f96bf60d3a89fd39ab4ae972bb272a758","commitMessage":"@@@[FLINK-18858][connector-kinesis] Add Kinesis sources and sinks\n\nThis adds an implementation.  unit-tests.  and docs for the following factories:\n\n- KinesisDynamicSource - produces FlinkKinesisConsumer instances.\n- KinesisDynamicSink - produces FlinkKinesisProducer instances.\n- KinesisDynamicTableFactory - produces instances of the above two factories.\n\nThe following ability interfaces are supported:\n\n- KinesisDynamicSink implements SupportsPartitioning through a specialized KinesisPartitioner class.\n- KinesisDynamicSource implements SupportsReadingMetadata through a specialized KinesisDeserializationSchema class.\n\nThis closes #13770.\n","date":"2020-11-08 06:08:34","modifiedFileCount":"1","status":"B","submitter":"Alexander Alexandrov"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public DynamicTableSource createDynamicTableSource(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getConsumerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        DecodingFormat<DeserializationSchema<RowData>> decodingFormat =\n                helper.discoverDecodingFormat(\n                        DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateConsumerProperties(tableOptions.get(KinesisOptions.STREAM), properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSource(\n                physicalDataType,\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                decodingFormat);\n    }\n","date":"2021-03-24 04:35:35","endLine":84,"groupId":"19313","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSource","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7f/727584059253c933e3674a8eae95c03edf1270.src","preCode":"    public DynamicTableSource createDynamicTableSource(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        CatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getConsumerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        DecodingFormat<DeserializationSchema<RowData>> decodingFormat =\n                helper.discoverDecodingFormat(\n                        DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateConsumerProperties(tableOptions.get(KinesisOptions.STREAM), properties);\n\n        return new KinesisDynamicSource(\n                catalogTable.getSchema().toPhysicalRowDataType(),\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                decodingFormat);\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getProducerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        EncodingFormat<SerializationSchema<RowData>> encodingFormat =\n                helper.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateKinesisPartitioner(tableOptions, catalogTable);\n        validateProducerProperties(properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSink(\n                physicalDataType,\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                encodingFormat,\n                KinesisOptions.getKinesisPartitioner(\n                        tableOptions,\n                        (RowType) physicalDataType.getLogicalType(),\n                        catalogTable.getPartitionKeys(),\n                        context.getClassLoader()));\n    }\n","date":"2021-03-24 04:35:35","endLine":120,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7f/727584059253c933e3674a8eae95c03edf1270.src","preCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        CatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getProducerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        EncodingFormat<SerializationSchema<RowData>> encodingFormat =\n                helper.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateKinesisPartitioner(tableOptions, catalogTable);\n        validateProducerProperties(properties);\n\n        return new KinesisDynamicSink(\n                catalogTable.getSchema().toPhysicalRowDataType(),\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                encodingFormat,\n                KinesisOptions.getKinesisPartitioner(\n                        tableOptions, catalogTable, context.getClassLoader()));\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-06-30 17:00:16","codes":[{"authorDate":"2021-06-30 17:00:16","commitOrder":3,"curCode":"    public DynamicTableSource createDynamicTableSource(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties =\n                KinesisConnectorOptionsUtil.getConsumerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        DecodingFormat<DeserializationSchema<RowData>> decodingFormat =\n                helper.discoverDecodingFormat(\n                        DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisConnectorOptionsUtil.NON_VALIDATED_PREFIXES);\n        \r\n        validateConsumerProperties(tableOptions.get(KinesisConnectorOptions.STREAM), properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSource(\n                physicalDataType,\n                tableOptions.get(KinesisConnectorOptions.STREAM),\n                properties,\n                decodingFormat);\n    }\n","date":"2021-07-12 18:56:17","endLine":85,"groupId":"10675","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"createDynamicTableSource","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/02/640581725ae98f771c0ca9cc4e62da5f81b385.src","preCode":"    public DynamicTableSource createDynamicTableSource(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getConsumerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        DecodingFormat<DeserializationSchema<RowData>> decodingFormat =\n                helper.discoverDecodingFormat(\n                        DeserializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateConsumerProperties(tableOptions.get(KinesisOptions.STREAM), properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSource(\n                physicalDataType,\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                decodingFormat);\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-06-30 17:00:16","commitOrder":3,"curCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties =\n                KinesisConnectorOptionsUtil.getProducerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        EncodingFormat<SerializationSchema<RowData>> encodingFormat =\n                helper.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisConnectorOptionsUtil.NON_VALIDATED_PREFIXES);\n        \r\n        validateKinesisPartitioner(tableOptions, catalogTable);\n        validateProducerProperties(properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSink(\n                physicalDataType,\n                tableOptions.get(KinesisConnectorOptions.STREAM),\n                properties,\n                encodingFormat,\n                KinesisConnectorOptionsUtil.getKinesisPartitioner(\n                        tableOptions,\n                        (RowType) physicalDataType.getLogicalType(),\n                        catalogTable.getPartitionKeys(),\n                        context.getClassLoader()));\n    }\n","date":"2021-07-12 18:56:17","endLine":122,"groupId":"10675","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/02/640581725ae98f771c0ca9cc4e62da5f81b385.src","preCode":"    public DynamicTableSink createDynamicTableSink(Context context) {\n        FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n        ReadableConfig tableOptions = helper.getOptions();\n        ResolvedCatalogTable catalogTable = context.getCatalogTable();\n        Properties properties = KinesisOptions.getProducerProperties(catalogTable.getOptions());\n\n        \r\n        \r\n        EncodingFormat<SerializationSchema<RowData>> encodingFormat =\n                helper.discoverEncodingFormat(SerializationFormatFactory.class, FactoryUtil.FORMAT);\n\n        \r\n        helper.validateExcept(KinesisOptions.NON_VALIDATED_PREFIXES);\n        \r\n        validateKinesisPartitioner(tableOptions, catalogTable);\n        validateProducerProperties(properties);\n\n        DataType physicalDataType = catalogTable.getResolvedSchema().toPhysicalRowDataType();\n\n        return new KinesisDynamicSink(\n                physicalDataType,\n                tableOptions.get(KinesisOptions.STREAM),\n                properties,\n                encodingFormat,\n                KinesisOptions.getKinesisPartitioner(\n                        tableOptions,\n                        (RowType) physicalDataType.getLogicalType(),\n                        catalogTable.getPartitionKeys(),\n                        context.getClassLoader()));\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/table/KinesisDynamicTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"faa854467bd621911c791604922fa1050b618c98","commitMessage":"@@@[FLINK-23064][connector-kinesis] Make connector options PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"3","status":"M","submitter":"Ingo B?rk"}]
