[{"authorTime":"2017-03-02 13:51:39","codes":[{"authorDate":"2017-03-02 13:51:39","commitOrder":1,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResource1 = new ResourceSpec(2.0, 200);\n\n\t\tResourceSpec minResource2 = new ResourceSpec(1.0, 200);\n\t\tResourceSpec preferredResource2 = new ResourceSpec(2.0, 300);\n\n\t\tResourceSpec minResource3 = new ResourceSpec(1.0, 300);\n\t\tResourceSpec preferredResource3 = new ResourceSpec(2.0, 400);\n\n\t\tResourceSpec minResource4 = new ResourceSpec(1.0, 400);\n\t\tResourceSpec preferredResource4 = new ResourceSpec(2.0, 500);\n\n\t\tResourceSpec minResource5 = new ResourceSpec(1.0, 500);\n\t\tResourceSpec preferredResource5 = new ResourceSpec(2.0, 600);\n\n\t\tResourceSpec minResource6 = new ResourceSpec(1.0, 600);\n\t\tResourceSpec preferredResource6 = new ResourceSpec(2.0, 700);\n\n\t\tResourceSpec minResource7 = new ResourceSpec(1.0, 700);\n\t\tResourceSpec preferredResource7 = new ResourceSpec(2.0, 800);\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2017-03-16 21:43:27","endLine":623,"groupId":"41718","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/6065594ab0acd013dfa8ba044f18de4f8c0197.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResource1 = new ResourceSpec(2.0, 200);\n\n\t\tResourceSpec minResource2 = new ResourceSpec(1.0, 200);\n\t\tResourceSpec preferredResource2 = new ResourceSpec(2.0, 300);\n\n\t\tResourceSpec minResource3 = new ResourceSpec(1.0, 300);\n\t\tResourceSpec preferredResource3 = new ResourceSpec(2.0, 400);\n\n\t\tResourceSpec minResource4 = new ResourceSpec(1.0, 400);\n\t\tResourceSpec preferredResource4 = new ResourceSpec(2.0, 500);\n\n\t\tResourceSpec minResource5 = new ResourceSpec(1.0, 500);\n\t\tResourceSpec preferredResource5 = new ResourceSpec(2.0, 600);\n\n\t\tResourceSpec minResource6 = new ResourceSpec(1.0, 600);\n\t\tResourceSpec preferredResource6 = new ResourceSpec(2.0, 700);\n\n\t\tResourceSpec minResource7 = new ResourceSpec(1.0, 700);\n\t\tResourceSpec preferredResource7 = new ResourceSpec(2.0, 800);\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"B"},{"authorDate":"2017-03-02 13:51:39","commitOrder":1,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResources = new ResourceSpec(2.0, 200);\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2017-03-16 21:43:27","endLine":65,"groupId":"24946","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/e254bcc1f188fbfa4103af55035bf51ba17231.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResources = new ResourceSpec(2.0, 200);\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"980d072fa2546dbc10cf878cf29532b2d8bbca8a","commitMessage":"@@@[FLINK-5134] [runtime] Aggregate ResourceSpec for chained operators when generating job graph\n\nThis closes #3455\n","date":"2017-03-16 21:43:27","modifiedFileCount":"18","status":"B","submitter":"??"},{"authorTime":"2017-10-25 14:56:35","codes":[{"authorDate":"2017-10-25 14:56:35","commitOrder":2,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2017-12-14 22:31:40","endLine":631,"groupId":"41718","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/738ba8eb69e4aae23ee9e486f5f9f444c5d1b7.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResource1 = new ResourceSpec(2.0, 200);\n\n\t\tResourceSpec minResource2 = new ResourceSpec(1.0, 200);\n\t\tResourceSpec preferredResource2 = new ResourceSpec(2.0, 300);\n\n\t\tResourceSpec minResource3 = new ResourceSpec(1.0, 300);\n\t\tResourceSpec preferredResource3 = new ResourceSpec(2.0, 400);\n\n\t\tResourceSpec minResource4 = new ResourceSpec(1.0, 400);\n\t\tResourceSpec preferredResource4 = new ResourceSpec(2.0, 500);\n\n\t\tResourceSpec minResource5 = new ResourceSpec(1.0, 500);\n\t\tResourceSpec preferredResource5 = new ResourceSpec(2.0, 600);\n\n\t\tResourceSpec minResource6 = new ResourceSpec(1.0, 600);\n\t\tResourceSpec preferredResource6 = new ResourceSpec(2.0, 700);\n\n\t\tResourceSpec minResource7 = new ResourceSpec(1.0, 700);\n\t\tResourceSpec preferredResource7 = new ResourceSpec(2.0, 800);\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"},{"authorDate":"2017-10-25 14:56:35","commitOrder":2,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2017-12-14 22:31:40","endLine":69,"groupId":"42881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d2/31a8cdcfc608d23cbe541956cf7bec7f906cf5.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = new ResourceSpec(1.0, 100);\n\t\tResourceSpec preferredResources = new ResourceSpec(2.0, 200);\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"5b9ac9508b5d16f85b76a6de940458d385e23f0d","commitMessage":"@@@[FLINK-7878] [api] make resource type extendible in ResourceSpec\n\nSummary:\nNow.  flink only support user define CPU and MEM. \nbut some user need to specify the GPU.  FPGA and so on resources.\nSo it need to make the resouce type extendible in the ResourceSpec.\nAdd a extend field for new resources.\n\nTest Plan: UnitTest\n\nReviewers: haitao.w\n\nDifferential Revision: https://aone.alibaba-inc.com/code/D327427\n\nmake Resource abstract and add GPUResource FPGAResource\n\nThis closes #4911.\n\nAdd a resource spec builder and remove FPGAResource\n","date":"2017-12-14 22:31:40","modifiedFileCount":"5","status":"M","submitter":"shuai.xus"},{"authorTime":"2019-11-11 22:29:00","codes":[{"authorDate":"2019-11-11 22:29:00","commitOrder":3,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":647,"groupId":"41718","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/3e933388b6264551c4b7971e6d3aeb9428ef19.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"},{"authorDate":"2019-11-11 22:29:00","commitOrder":3,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":69,"groupId":"42881","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/1f1babec7c55eaca9ecf9422849c17df15599a.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"2c81c3f58cb27b4a4358a57b8a3c15329bd34008","commitMessage":"@@@[FLINK-14405][runtime] Update ResourceSpec to align with FLIP-49 resource types\n","date":"2019-11-12 20:50:17","modifiedFileCount":"9","status":"M","submitter":"Xintong Song"},{"authorTime":"2019-10-18 12:24:41","codes":[{"authorDate":"2019-10-18 12:24:41","commitOrder":4,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder(2.0, 200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder(1.0, 200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder(2.0, 300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder(1.0, 300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder(2.0, 400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder(1.0, 400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder(2.0, 500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder(1.0, 500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder(2.0, 600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder(1.0, 600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder(2.0, 700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder(1.0, 700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder(2.0, 800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":647,"groupId":"41718","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/b7be1fe416f54f0cac10b059087e8c3ff8246e.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"},{"authorDate":"2019-10-18 12:24:41","commitOrder":4,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder(2.0, 200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":69,"groupId":"42881","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/c7e979f357c036a50524b475fb4a82d9aa118b.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder().setCpuCores(1.0).setTaskHeapMemoryMB(100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder().setCpuCores(2.0).setTaskHeapMemoryMB(200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"001733b411a1e8cad8c61cb6bc90f9afcfed42d1","commitMessage":"@@@[FLINK-14495][core] Limit ResourceSpec to always specify cpu cores and task heap memory size.  unless it UNKNOWN.\n","date":"2019-11-12 20:50:17","modifiedFileCount":"9","status":"M","submitter":"Xintong Song"},{"authorTime":"2019-10-18 12:24:41","codes":[{"authorDate":"2019-12-10 09:06:31","commitOrder":5,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder(2.0, 200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder(1.0, 200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder(2.0, 300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder(1.0, 300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder(2.0, 400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder(1.0, 400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder(2.0, 500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder(1.0, 500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder(2.0, 600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder(1.0, 600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder(2.0, 700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder(1.0, 700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder(2.0, 800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, getStreamGraph(env).getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, getStreamGraph(env).getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, getStreamGraph(env).getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, getStreamGraph(env).getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, getStreamGraph(env).getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, getStreamGraph(env).getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, getStreamGraph(env).getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, getStreamGraph(env).getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, getStreamGraph(env).getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, getStreamGraph(env).getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2019-12-10 22:34:49","endLine":647,"groupId":"53401","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/226bed8f081a3eda2465677e735d51cceca4f3.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder(2.0, 200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder(1.0, 200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder(2.0, 300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder(1.0, 300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder(2.0, 400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder(1.0, 400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder(2.0, 500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder(1.0, 500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder(2.0, 600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder(1.0, 600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder(2.0, 700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder(1.0, 700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder(2.0, 800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"},{"authorDate":"2019-10-18 12:24:41","commitOrder":5,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder(2.0, 200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":69,"groupId":"42881","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/c7e979f357c036a50524b475fb4a82d9aa118b.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder(2.0, 200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"9c44413a805d6d0d809fe2d497c84a3f653f4337","commitMessage":"@@@[FLINK-15093][streaming-java] StreamExecutionEnvironment#getStreamGraph should clear transformations\n\n* Add internal interface StreamExecutionEnvironment#getStreamGraph(String.  boolean) with the ability to clean existing transformations;\n* Add tests for this new interface;\n* Keep StreamExecutionEnvironment#getExecutionPlan semantic unchanged\n","date":"2019-12-10 22:34:49","modifiedFileCount":"10","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2019-10-18 12:24:41","codes":[{"authorDate":"2020-08-17 15:31:24","commitOrder":6,"curCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder(2.0, 200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder(1.0, 200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder(2.0, 300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder(1.0, 300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder(2.0, 400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder(1.0, 400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder(2.0, 500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder(1.0, 500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder(2.0, 600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder(1.0, 600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder(2.0, 700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder(1.0, 700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder(2.0, 800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long reduce(Long value1, Long value2) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, getStreamGraph(env).getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, getStreamGraph(env).getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, getStreamGraph(env).getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, getStreamGraph(env).getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, getStreamGraph(env).getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, getStreamGraph(env).getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, getStreamGraph(env).getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, getStreamGraph(env).getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, getStreamGraph(env).getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, getStreamGraph(env).getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","date":"2020-09-07 15:33:16","endLine":674,"groupId":"103118","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4a/e32188a02b5584c5027b7773b934057614c2cb.src","preCode":"\tpublic void testResources() throws Exception{\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tResourceSpec minResource1 = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResource1 = ResourceSpec.newBuilder(2.0, 200).build();\n\n\t\tResourceSpec minResource2 = ResourceSpec.newBuilder(1.0, 200).build();\n\t\tResourceSpec preferredResource2 = ResourceSpec.newBuilder(2.0, 300).build();\n\n\t\tResourceSpec minResource3 = ResourceSpec.newBuilder(1.0, 300).build();\n\t\tResourceSpec preferredResource3 = ResourceSpec.newBuilder(2.0, 400).build();\n\n\t\tResourceSpec minResource4 = ResourceSpec.newBuilder(1.0, 400).build();\n\t\tResourceSpec preferredResource4 = ResourceSpec.newBuilder(2.0, 500).build();\n\n\t\tResourceSpec minResource5 = ResourceSpec.newBuilder(1.0, 500).build();\n\t\tResourceSpec preferredResource5 = ResourceSpec.newBuilder(2.0, 600).build();\n\n\t\tResourceSpec minResource6 = ResourceSpec.newBuilder(1.0, 600).build();\n\t\tResourceSpec preferredResource6 = ResourceSpec.newBuilder(2.0, 700).build();\n\n\t\tResourceSpec minResource7 = ResourceSpec.newBuilder(1.0, 700).build();\n\t\tResourceSpec preferredResource7 = ResourceSpec.newBuilder(2.0, 800).build();\n\n\t\tMethod opMethod = SingleOutputStreamOperator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\tMethod sinkMethod = DataStreamSink.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\tsinkMethod.setAccessible(true);\n\n\t\tDataStream<Long> source1 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source1, minResource1, preferredResource1);\n\n\t\tDataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map1, minResource2, preferredResource2);\n\n\t\tDataStream<Long> source2 = env.generateSequence(0, 0);\n\t\topMethod.invoke(source2, minResource3, preferredResource3);\n\n\t\tDataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Long value) throws Exception {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\topMethod.invoke(map2, minResource4, preferredResource4);\n\n\t\tDataStream<Long> connected = map1.connect(map2)\n\t\t\t\t.flatMap(new CoFlatMapFunction<Long, Long, Long>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap1(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void flatMap2(Long value, Collector<Long> out) throws Exception {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(connected, minResource5, preferredResource5);\n\n\t\tDataStream<Long> windowed = connected\n\t\t\t\t.windowAll(GlobalWindows.create())\n\t\t\t\t.trigger(PurgingTrigger.of(CountTrigger.of(10)))\n\t\t\t\t.fold(0L, new FoldFunction<Long, Long>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Long fold(Long accumulator, Long value) throws Exception {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\topMethod.invoke(windowed, minResource6, preferredResource6);\n\n\t\tDataStreamSink<Long> sink = windowed.print();\n\t\tsinkMethod.invoke(sink, minResource7, preferredResource7);\n\n\t\tassertEquals(minResource1, getStreamGraph(env).getStreamNode(source1.getId()).getMinResources());\n\t\tassertEquals(preferredResource1, getStreamGraph(env).getStreamNode(source1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource2, getStreamGraph(env).getStreamNode(map1.getId()).getMinResources());\n\t\tassertEquals(preferredResource2, getStreamGraph(env).getStreamNode(map1.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource3, getStreamGraph(env).getStreamNode(source2.getId()).getMinResources());\n\t\tassertEquals(preferredResource3, getStreamGraph(env).getStreamNode(source2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource4, getStreamGraph(env).getStreamNode(map2.getId()).getMinResources());\n\t\tassertEquals(preferredResource4, getStreamGraph(env).getStreamNode(map2.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource5, getStreamGraph(env).getStreamNode(connected.getId()).getMinResources());\n\t\tassertEquals(preferredResource5, getStreamGraph(env).getStreamNode(connected.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getMinResources());\n\t\tassertEquals(preferredResource6, getStreamGraph(env).getStreamNode(windowed.getId()).getPreferredResources());\n\n\t\tassertEquals(minResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getMinResources());\n\t\tassertEquals(preferredResource7, getStreamGraph(env).getStreamNode(sink.getTransformation().getId()).getPreferredResources());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"},{"authorDate":"2019-10-18 12:24:41","commitOrder":6,"curCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder(2.0, 200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","date":"2019-11-12 20:50:17","endLine":69,"groupId":"103118","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testConfigurationOfResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/c7e979f357c036a50524b475fb4a82d9aa118b.src","preCode":"\tpublic void testConfigurationOfResource() throws Exception{\n\t\tOperator operator = new MockOperator();\n\n\t\tMethod opMethod = Operator.class.getDeclaredMethod(\"setResources\", ResourceSpec.class, ResourceSpec.class);\n\t\topMethod.setAccessible(true);\n\n\t\t\r\n\t\tResourceSpec minResources = ResourceSpec.newBuilder(1.0, 100).build();\n\t\tResourceSpec preferredResources = ResourceSpec.newBuilder(2.0, 200).build();\n\t\topMethod.invoke(operator, minResources, preferredResources);\n\n\t\tassertEquals(minResources, operator.getMinResources());\n\t\tassertEquals(preferredResources, operator.getPreferredResources());\n\t}\n","realPath":"flink-java/src/test/java/org/apache/flink/api/java/operator/OperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"c99e206b8dc2db374c1fac76b9a6171eea5e22d3","commitMessage":"@@@[FLINK-19035] Remove fold from DataStream API\n","date":"2020-09-07 15:33:16","modifiedFileCount":"30","status":"M","submitter":"Dawid Wysakowicz"}]
