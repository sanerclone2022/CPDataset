[{"authorTime":"2020-03-07 21:33:17","codes":[{"authorDate":"2020-03-07 21:33:17","commitOrder":1,"curCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\n\t\tfinal PodSpec podSpec = kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\t\tassertTrue(podSpec.getVolumes().stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","date":"2020-03-23 15:03:16","endLine":221,"groupId":"9614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistingHadoopConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/79ddc61adebfb9c95090e44fd2829dfed79c93.src","preCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\n\t\tfinal PodSpec podSpec = kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\t\tassertTrue(podSpec.getVolumes().stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2020-03-07 21:33:17","commitOrder":1,"curCode":"\tpublic void testEmptyHadoopConfDirectory() throws IOException {\n\t\tsetHadoopConfDirEnv();\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","date":"2020-03-23 15:03:16","endLine":251,"groupId":"9614","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyHadoopConfDirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/79ddc61adebfb9c95090e44fd2829dfed79c93.src","preCode":"\tpublic void testEmptyHadoopConfDirectory() throws IOException {\n\t\tsetHadoopConfDirEnv();\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"f56a075aa029832b9cbacab51649c900498e18e9","commitMessage":"@@@[FLINK-15667][k8s] Support to mount custom Hadoop Configurations\n\nThis closes #11415 .\n","date":"2020-03-23 15:03:16","modifiedFileCount":"10","status":"B","submitter":"felixzheng"},{"authorTime":"2020-04-17 15:14:13","codes":[{"authorDate":"2020-04-17 15:14:13","commitOrder":2,"curCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\n\t\tfinal PodSpec podSpec = kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\t\tassertTrue(podSpec.getVolumes().stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","date":"2020-04-25 21:31:26","endLine":225,"groupId":"9614","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistingHadoopConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/ebb5fafb1144be42c0ecca391cf2502f3917b5.src","preCode":"\tpublic void testExistingHadoopConfigMap() throws IOException {\n\t\tflinkConfig.set(KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\n\t\tfinal PodSpec podSpec = kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n\t\tassertTrue(podSpec.getVolumes().stream().anyMatch(volume -> volume.getConfigMap().getName().equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2020-04-17 15:14:13","commitOrder":2,"curCode":"\tpublic void testEmptyHadoopConfDirectory() throws IOException {\n\t\tsetHadoopConfDirEnv();\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","date":"2020-04-25 21:31:26","endLine":255,"groupId":"9614","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyHadoopConfDirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/ebb5fafb1144be42c0ecca391cf2502f3917b5.src","preCode":"\tpublic void testEmptyHadoopConfDirectory() throws IOException {\n\t\tsetHadoopConfDirEnv();\n\t\tkubernetesJobManagerSpecification = KubernetesJobManagerFactory.createJobManagerComponent(kubernetesJobManagerParameters);\n\n\t\tassertFalse(kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n\t\t\t.anyMatch(resource -> resource.getMetadata().getName().equals(HadoopConfMountDecorator.getHadoopConfConfigMapName(CLUSTER_ID))));\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"8882b86566c51dc0161757b951f3af711e76c6d3","commitMessage":"@@@[hotfix][runtime][k8s] Renaming methods for better code readability.\n","date":"2020-04-25 21:31:26","modifiedFileCount":"9","status":"M","submitter":"Xintong Song"},{"authorTime":"2021-02-20 11:30:39","codes":[{"authorDate":"2021-02-20 11:30:39","commitOrder":3,"curCode":"    public void testExistingHadoopConfigMap() throws IOException {\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        assertFalse(\n                kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                        .anyMatch(\n                                resource ->\n                                        resource.getMetadata()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n\n        final PodSpec podSpec =\n                kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n        assertTrue(\n                podSpec.getVolumes().stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n    }\n","date":"2021-03-01 17:38:17","endLine":411,"groupId":"102383","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExistingHadoopConfigMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testExistingHadoopConfigMap() throws IOException {\n        flinkConfig.set(\n                KubernetesConfigOptions.HADOOP_CONF_CONFIG_MAP, EXISTING_HADOOP_CONF_CONFIG_MAP);\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        assertFalse(\n                kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                        .anyMatch(\n                                resource ->\n                                        resource.getMetadata()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n\n        final PodSpec podSpec =\n                kubernetesJobManagerSpecification.getDeployment().getSpec().getTemplate().getSpec();\n        assertTrue(\n                podSpec.getVolumes().stream()\n                        .anyMatch(\n                                volume ->\n                                        volume.getConfigMap()\n                                                .getName()\n                                                .equals(EXISTING_HADOOP_CONF_CONFIG_MAP)));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2021-02-20 11:30:39","commitOrder":3,"curCode":"    public void testEmptyHadoopConfDirectory() throws IOException {\n        setHadoopConfDirEnv();\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        flinkPod, kubernetesJobManagerParameters);\n\n        assertFalse(\n                kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                        .anyMatch(\n                                resource ->\n                                        resource.getMetadata()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n    }\n","date":"2021-03-01 17:38:17","endLine":461,"groupId":"102383","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyHadoopConfDirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/25/869c66e5ad22bcac02e10f2d06c3a9aaa83e66.src","preCode":"    public void testEmptyHadoopConfDirectory() throws IOException {\n        setHadoopConfDirEnv();\n        kubernetesJobManagerSpecification =\n                KubernetesJobManagerFactory.buildKubernetesJobManagerSpecification(\n                        kubernetesJobManagerParameters);\n\n        assertFalse(\n                kubernetesJobManagerSpecification.getAccompanyingResources().stream()\n                        .anyMatch(\n                                resource ->\n                                        resource.getMetadata()\n                                                .getName()\n                                                .equals(\n                                                        HadoopConfMountDecorator\n                                                                .getHadoopConfConfigMapName(\n                                                                        CLUSTER_ID))));\n    }\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"4957736f9d00f6a2e7185fcea9965efd5aea9da0","commitMessage":"@@@[FLINK-15656][k8s] Support pod template for native kubernetes integration\n\nBenifit from flexibility of pod template.  we could support init container.  sidecar container.  volume mount.  pod security context.  etc.\n","date":"2021-03-01 17:38:17","modifiedFileCount":"17","status":"M","submitter":"wangyang0918"}]
