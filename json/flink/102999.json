[{"authorTime":"2016-07-28 21:08:24","codes":[{"authorDate":"2016-07-28 21:08:24","commitOrder":1,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2016-09-01 01:04:31","endLine":319,"groupId":"13032","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/d381f2850206338c4ac0b865ca3c6c2d652ff3.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"B"},{"authorDate":"2016-07-28 21:08:24","commitOrder":1,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(globalParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(mapParallelism, keyedResult2Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2016-09-01 01:04:31","endLine":384,"groupId":"48505","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/d381f2850206338c4ac0b865ca3c6c2d652ff3.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(globalParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(mapParallelism, keyedResult2Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"ec975aaba79449bd93020f296b05ea509ea57bdc","commitMessage":"@@@[FLINK-4380] Introduce KeyGroupAssigner and Max-Parallelism Parameter\n\nThis introduces a new KeySelector that assigns keys to key groups and\nalso adds the max parallelism parameter throughout all API levels.\n\nThis also adds tests for the newly introduced features.\n","date":"2016-09-01 01:04:31","modifiedFileCount":"41","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2016-08-29 22:10:15","codes":[{"authorDate":"2016-07-28 21:08:24","commitOrder":2,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2016-09-01 01:04:31","endLine":319,"groupId":"13032","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/d381f2850206338c4ac0b865ca3c6c2d652ff3.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"N"},{"authorDate":"2016-08-29 22:10:15","commitOrder":2,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult2Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2016-09-01 01:10:02","endLine":379,"groupId":"48505","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/3a439d85be91e3a4258857a37b6da49ad0a167.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(globalParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(mapParallelism, keyedResult2Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"f44b57ccf8f088f2ad4c1f10f479ed62be17eb8b","commitMessage":"@@@[FLINK-3755] Fix variety of test problems cause by Keyed-State Refactoring\n","date":"2016-09-01 01:10:02","modifiedFileCount":"10","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-01-16 21:31:22","codes":[{"authorDate":"2016-07-28 21:08:24","commitOrder":3,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2016-09-01 01:04:31","endLine":319,"groupId":"13032","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/d381f2850206338c4ac0b865ca3c6c2d652ff3.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"N"},{"authorDate":"2017-01-16 21:31:22","commitOrder":3,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2017-01-24 22:51:35","endLine":373,"groupId":"48505","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/dacd471568f408961c3423d91809a3b17dcccb.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM, keyedResult2Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"acfeeaf5e337e56300d10a3a991e79edc827ac7a","commitMessage":"@@@[FLINK-5473] Limit max parallelism to 1 for non-parallel operators\n\n[FLINK-5473] Better default behaviours for unspecified maximum parallelism\n\nThis closes #3182.\n","date":"2017-01-24 22:51:35","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-01-16 21:31:22","codes":[{"authorDate":"2017-03-10 21:35:37","commitOrder":4,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setParallelism(12);\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2017-03-18 04:34:54","endLine":314,"groupId":"13032","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/bb5d23146457066c18fe43399de2ca2122c60f.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2017-01-16 21:31:22","commitOrder":4,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2017-01-24 22:51:35","endLine":373,"groupId":"48505","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/dacd471568f408961c3423d91809a3b17dcccb.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"N"}],"commitId":"f31a55e08ddb7b4bc9e47577a187bac31ad42f4b","commitMessage":"@@@[FLINK-5808] Add proper checks in setParallelism()/setMaxParallelism()\n\nBefore.  there where some checks in\nStreamExecutionEnvironment.set(Max)Parallelism() but a user would\ncircumvent these if using the ExecutionConfig directly. Now.  all checks\nare moved to the ExecutionConfig.\n","date":"2017-03-18 04:34:54","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-01-16 21:31:22","codes":[{"authorDate":"2017-04-04 20:02:37","commitOrder":5,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2017-04-18 23:42:10","endLine":312,"groupId":"13032","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/dacd471568f408961c3423d91809a3b17dcccb.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setParallelism(12);\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2017-01-16 21:31:22","commitOrder":5,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2017-01-24 22:51:35","endLine":373,"groupId":"48505","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/dacd471568f408961c3423d91809a3b17dcccb.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"N"}],"commitId":"5b4dd4117d111514590dfb1bd0a1f4bba3db2b9e","commitMessage":"@@@Revert \"[FLINK-5808] Add proper checks in setParallelism()/setMaxParallelism()\"\n\nThis reverts commit f31a55e08ddb7b4bc9e47577a187bac31ad42f4b.\n\nThe fixes around FLINK-5808 introduced follow-up issues.\n","date":"2017-04-18 23:42:10","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2018-05-18 00:56:25","codes":[{"authorDate":"2018-05-18 00:56:25","commitOrder":6,"curCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1\n\t\t\t\t.keyBy(value -> value)\n\t\t\t\t.map(new NoOpIntMap())\n\t\t\t\t\t.setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","date":"2018-05-18 16:05:38","endLine":292,"groupId":"102999","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxParallelismForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/db4f879a26d5e1d24242e324b35876e014b6ec.src","preCode":"\tpublic void testMaxParallelismForwarding() {\n\t\tint globalMaxParallelism = 42;\n\t\tint keyedResult2MaxParallelism = 17;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().setMaxParallelism(globalMaxParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(keyedResult2MaxParallelism);\n\n\t\tkeyedResult2.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult1Node = graph.getStreamNode(keyedResult1.getId());\n\t\tStreamNode keyedResult2Node = graph.getStreamNode(keyedResult2.getId());\n\n\t\tassertEquals(globalMaxParallelism, keyedResult1Node.getMaxParallelism());\n\t\tassertEquals(keyedResult2MaxParallelism, keyedResult2Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2018-05-18 00:56:25","commitOrder":6,"curCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(value -> value).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(value -> value).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(value -> value).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","date":"2018-05-18 16:05:38","endLine":325,"groupId":"102999","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoMaxParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/db4f879a26d5e1d24242e324b35876e014b6ec.src","preCode":"\tpublic void testAutoMaxParallelism() {\n\t\tint globalParallelism = 42;\n\t\tint mapParallelism = 17;\n\t\tint maxParallelism = 21;\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(globalParallelism);\n\n\t\tDataStream<Integer> source = env.fromElements(1, 2, 3);\n\n\t\tDataStream<Integer> keyedResult1 = source.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 9205556348021992189L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap());\n\n\t\tDataStream<Integer> keyedResult2 = keyedResult1.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setParallelism(mapParallelism);\n\n\t\tDataStream<Integer> keyedResult3 = keyedResult2.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism);\n\n\t\tDataStream<Integer> keyedResult4 = keyedResult3.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1250168178707154838L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}).map(new NoOpIntMap()).setMaxParallelism(maxParallelism).setParallelism(mapParallelism);\n\n\t\tkeyedResult4.addSink(new DiscardingSink<Integer>());\n\n\t\tStreamGraph graph = env.getStreamGraph();\n\n\t\tStreamNode keyedResult3Node = graph.getStreamNode(keyedResult3.getId());\n\t\tStreamNode keyedResult4Node = graph.getStreamNode(keyedResult4.getId());\n\n\t\tassertEquals(maxParallelism, keyedResult3Node.getMaxParallelism());\n\t\tassertEquals(maxParallelism, keyedResult4Node.getMaxParallelism());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"0931e80aa09f93abf9bc02e37c708977d693ec1c","commitMessage":"@@@[hotfix] [tests] Minor cleanup and lambda-ification for the StreamGraphGeneratorTest\n","date":"2018-05-18 16:05:38","modifiedFileCount":"1","status":"M","submitter":"Stephan Ewen"}]
