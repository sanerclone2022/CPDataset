[{"authorTime":"2017-08-16 18:17:00","codes":[{"authorDate":"2017-08-16 18:17:00","commitOrder":1,"curCode":"\tpublic void testWithAvroGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceAvro();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","date":"2017-11-03 23:40:34","endLine":180,"groupId":"40902","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithAvroGenericSer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/410313e522717e125c0f87c73d03b938e5ef62.src","preCode":"\tpublic void testWithAvroGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceAvro();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/typeutils/AvroTypeExtractionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2017-08-16 18:17:00","commitOrder":1,"curCode":"\tpublic void testWithKryoGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceKryo();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","date":"2017-11-03 23:40:34","endLine":209,"groupId":"40902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithKryoGenericSer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/410313e522717e125c0f87c73d03b938e5ef62.src","preCode":"\tpublic void testWithKryoGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceKryo();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/typeutils/AvroTypeExtractionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"}],"commitId":"537a10ea2ff6a2d8507483c66f413f77884e77c4","commitMessage":"@@@[FLINK-7420] [avro] Move all Avro code to flink-avro\n","date":"2017-11-03 23:40:34","modifiedFileCount":"10","status":"B","submitter":"twalthr"},{"authorTime":"2018-06-26 17:46:06","codes":[{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic void testWithAvroGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceAvro();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS\n\t\t\t.groupBy((KeySelector<User, String>) value -> String.valueOf(value.getName()))\n\t\t\t.reduceGroup((GroupReduceFunction<User, Tuple2<String, Integer>>) (values, out) -> {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.returns(Types.TUPLE(Types.STRING, Types.INT));\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","date":"2018-07-03 21:40:44","endLine":186,"groupId":"101909","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithAvroGenericSer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/ba0a5ebac86f03717c43fb948a36d46e3a068e.src","preCode":"\tpublic void testWithAvroGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceAvro();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/typeutils/AvroTypeExtractionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic void testWithKryoGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceKryo();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS\n\t\t\t.groupBy((KeySelector<User, String>) value -> String.valueOf(value.getName()))\n\t\t\t.reduceGroup((GroupReduceFunction<User, Tuple2<String, Integer>>) (values, out) -> {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.returns(Types.TUPLE(Types.STRING, Types.INT));\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","date":"2018-07-03 21:40:44","endLine":210,"groupId":"101909","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithKryoGenericSer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/ba0a5ebac86f03717c43fb948a36d46e3a068e.src","preCode":"\tpublic void testWithKryoGenericSer() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableForceKryo();\n\t\tPath in = new Path(inFile.getAbsoluteFile().toURI());\n\n\t\tAvroInputFormat<User> users = new AvroInputFormat<User>(in, User.class);\n\t\tDataSet<User> usersDS = env.createInput(users);\n\n\t\tDataSet<Tuple2<String, Integer>> res = usersDS.groupBy(new KeySelector<User, String>() {\n\t\t\t@Override\n\t\t\tpublic String getKey(User value) throws Exception {\n\t\t\t\treturn String.valueOf(value.getName());\n\t\t\t}\n\t\t}).reduceGroup(new GroupReduceFunction<User, Tuple2<String, Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void reduce(Iterable<User> values, Collector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\tfor (User u : values) {\n\t\t\t\t\tout.collect(new Tuple2<String, Integer>(u.getName().toString(), 1));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tres.writeAsText(resultPath);\n\t\tenv.execute(\"Avro Key selection\");\n\n\t\texpected = \"(Charlie,1)\\n(Alyssa,1)\\n\";\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/typeutils/AvroTypeExtractionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"c34c7e4127c8947d68e2b960cd84206e59d479b3","commitMessage":"@@@[FLINK-9444] [formats] Add full SQL support for Avro formats\n\nThis PR adds full support of Apache Avro records for the Table API & SQL. It adds (de)serialization schemas to the row type for both specific and generic records. It converts all Avro types to Flink types and vice versa. It supports both physical and logical Avro types. Both an Avro class or a Avro schema string can be used for format initialization.\n\nThis closes #6218.\nThis closes #6082.\n","date":"2018-07-03 21:40:44","modifiedFileCount":"24","status":"M","submitter":"Timo Walther"}]
