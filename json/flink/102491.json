[{"authorTime":"2019-06-20 23:08:52","codes":[{"authorDate":"2019-06-20 23:08:52","commitOrder":1,"curCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshot(OperatorSnapshotFutures operatorSnapshotResult) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenReturn(operatorSnapshotResult);\n\n\t\treturn operator;\n\t}\n","date":"2019-06-28 15:56:29","endLine":720,"groupId":"1808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"streamOperatorWithSnapshot","params":"(OperatorSnapshotFuturesoperatorSnapshotResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/b5389a6cb674accf58e6c808bd6a4d0ae91be5.src","preCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshot(OperatorSnapshotFutures operatorSnapshotResult) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenReturn(operatorSnapshotResult);\n\n\t\treturn operator;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"B"},{"authorDate":"2019-06-20 23:08:52","commitOrder":1,"curCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshotException(Exception exception) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenThrow(exception);\n\n\t\treturn operator;\n\t}\n","date":"2019-06-28 15:56:29","endLine":730,"groupId":"1808","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"streamOperatorWithSnapshotException","params":"(Exceptionexception)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/b5389a6cb674accf58e6c808bd6a4d0ae91be5.src","preCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshotException(Exception exception) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenThrow(exception);\n\n\t\treturn operator;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"B"}],"commitId":"db53a04cdec88a9b74e17b028a3a6922e14e45d4","commitMessage":"@@@[hotfix][tests] Rewrite StreamTaskTest without reflection based fields setting\n","date":"2019-06-28 15:56:29","modifiedFileCount":"1","status":"B","submitter":"Aleksey Pak"},{"authorTime":"2020-02-12 10:36:47","codes":[{"authorDate":"2020-02-12 10:36:47","commitOrder":2,"curCode":"\tprivate static <T> OneInputStreamOperator<T, T> streamOperatorWithSnapshot(OperatorSnapshotFutures operatorSnapshotResult) throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tOneInputStreamOperator<T, T> operator = mock(OneInputStreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenReturn(operatorSnapshotResult);\n\n\t\treturn operator;\n\t}\n","date":"2020-02-21 18:59:32","endLine":1045,"groupId":"102491","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"streamOperatorWithSnapshot","params":"(OperatorSnapshotFuturesoperatorSnapshotResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ecf8557d27a56923979fe3c2b70f37945bffb3.src","preCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshot(OperatorSnapshotFutures operatorSnapshotResult) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenReturn(operatorSnapshotResult);\n\n\t\treturn operator;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1036,"status":"M"},{"authorDate":"2020-02-12 10:36:47","commitOrder":2,"curCode":"\tprivate static <T> OneInputStreamOperator<T, T> streamOperatorWithSnapshotException(Exception exception) throws Exception {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tOneInputStreamOperator<T, T> operator = mock(OneInputStreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenThrow(exception);\n\n\t\treturn operator;\n\t}\n","date":"2020-02-21 18:59:32","endLine":1056,"groupId":"102491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"streamOperatorWithSnapshotException","params":"(Exceptionexception)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/ecf8557d27a56923979fe3c2b70f37945bffb3.src","preCode":"\tprivate static StreamOperator<?> streamOperatorWithSnapshotException(Exception exception) throws Exception {\n\t\tStreamOperator<?> operator = mock(StreamOperator.class);\n\t\twhen(operator.getOperatorID()).thenReturn(new OperatorID());\n\n\t\twhen(operator.snapshotState(anyLong(), anyLong(), any(CheckpointOptions.class), any(CheckpointStreamFactory.class)))\n\t\t\t.thenThrow(exception);\n\n\t\treturn operator;\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1047,"status":"M"}],"commitId":"56ce696009f19098ce9db17a3f8c5aae816a2f86","commitMessage":"@@@[FLINK-14231][task] Add StreamOperatorWrapper that handles the close.  endInput and other related logic of an operator\n\nFor each operator in the operator chain.  its inputs must end completely before executing the \"endInput()\" method. For\nthe operator chain in a task.  such as \"OP1 - > OP2 - > ...\".  after the (source/network) input of OP1 are finished. \nthe operators on the chain are closed in the following order:\n\n1. quiesce ProcessingTimeService of OP1 to prevent the pending timers from firing.  but wait the timers in running\n   to finish.\n2. call OP1#close()\n3. call OP2#endInput()\n4. quiesce ProcessingTimeService of OP2 to prevent the pending timers from firing.  but wait the timers in running\n   to finish.\n5. call OP2#close()\n...\n","date":"2020-02-21 18:59:32","modifiedFileCount":"10","status":"M","submitter":"sunhaibotb"}]
