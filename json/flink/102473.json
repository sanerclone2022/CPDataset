[{"authorTime":"2021-02-01 16:52:30","codes":[{"authorDate":"2021-02-01 16:52:30","commitOrder":5,"curCode":"    private void testAsyncCheckpointException(boolean isTaskRunning) {\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        ExceptionallyDoneFuture.of(\n                                new RuntimeException(\"Async Checkpoint Exception\")),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, isTaskRunning);\n        runnable.run();\n\n        if (isTaskRunning) {\n            Assert.assertSame(\n                    environment.getCause().getCheckpointFailureReason(),\n                    CheckpointFailureReason.CHECKPOINT_ASYNC_EXCEPTION);\n        } else {\n            Assert.assertNull(environment.getCause());\n        }\n    }\n","date":"2021-02-02 01:06:27","endLine":79,"groupId":"31591","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncCheckpointException","params":"(booleanisTaskRunning)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/4642ecfa153f66a047b9c6f54cba0bb97d6a44.src","preCode":"    private void testAsyncCheckpointException(boolean isTaskRunning) {\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        ExceptionallyDoneFuture.of(\n                                new RuntimeException(\"Async Checkpoint Exception\")),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, isTaskRunning);\n        runnable.run();\n\n        if (isTaskRunning) {\n            Assert.assertSame(\n                    environment.getCause().getCheckpointFailureReason(),\n                    CheckpointFailureReason.CHECKPOINT_ASYNC_EXCEPTION);\n        } else {\n            Assert.assertNull(environment.getCause());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnableTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"},{"authorDate":"2021-02-01 16:52:30","commitOrder":5,"curCode":"    public void testDeclineAsyncCheckpoint() {\n        CheckpointFailureReason originalReason =\n                CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        ExceptionallyDoneFuture.of(new CheckpointException(originalReason)),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, true);\n        runnable.run();\n\n        Assert.assertSame(environment.getCause().getCheckpointFailureReason(), originalReason);\n    }\n","date":"2021-02-02 01:06:27","endLine":103,"groupId":"31591","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineAsyncCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/4642ecfa153f66a047b9c6f54cba0bb97d6a44.src","preCode":"    public void testDeclineAsyncCheckpoint() {\n        CheckpointFailureReason originalReason =\n                CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        ExceptionallyDoneFuture.of(new CheckpointException(originalReason)),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, true);\n        runnable.run();\n\n        Assert.assertSame(environment.getCause().getCheckpointFailureReason(), originalReason);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnableTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"}],"commitId":"37a6e514d3c7653a8dd799a1f633f29501931169","commitMessage":"@@@[FLINK-21215][task] Do not overwrite the original CheckpointFailureReason in AsyncCheckpointRunnable\n\nBefore this change.  original failure reason would be hidden and replaced with CHECKPOINT_ASYNC_EXCEPTION\n","date":"2021-02-02 01:06:27","modifiedFileCount":"2","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-07-13 17:33:11","codes":[{"authorDate":"2021-07-13 17:33:11","commitOrder":6,"curCode":"    private void testAsyncCheckpointException(boolean isTaskRunning) {\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        ExceptionallyDoneFuture.of(\n                                new RuntimeException(\"Async Checkpoint Exception\")),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, false, isTaskRunning);\n        runnable.run();\n\n        if (isTaskRunning) {\n            Assert.assertSame(\n                    environment.getCause().getCheckpointFailureReason(),\n                    CheckpointFailureReason.CHECKPOINT_ASYNC_EXCEPTION);\n        } else {\n            Assert.assertNull(environment.getCause());\n        }\n    }\n","date":"2021-07-19 14:44:28","endLine":104,"groupId":"102473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncCheckpointException","params":"(booleanisTaskRunning)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/36dbc612dcf538f0d05dee00439336808ce6e7.src","preCode":"    private void testAsyncCheckpointException(boolean isTaskRunning) {\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        ExceptionallyDoneFuture.of(\n                                new RuntimeException(\"Async Checkpoint Exception\")),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, isTaskRunning);\n        runnable.run();\n\n        if (isTaskRunning) {\n            Assert.assertSame(\n                    environment.getCause().getCheckpointFailureReason(),\n                    CheckpointFailureReason.CHECKPOINT_ASYNC_EXCEPTION);\n        } else {\n            Assert.assertNull(environment.getCause());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnableTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-07-13 17:33:11","commitOrder":6,"curCode":"    public void testDeclineAsyncCheckpoint() {\n        CheckpointFailureReason originalReason =\n                CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        ExceptionallyDoneFuture.of(new CheckpointException(originalReason)),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, false, true);\n        runnable.run();\n\n        Assert.assertSame(environment.getCause().getCheckpointFailureReason(), originalReason);\n    }\n","date":"2021-07-19 14:44:28","endLine":128,"groupId":"102473","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeclineAsyncCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/36dbc612dcf538f0d05dee00439336808ce6e7.src","preCode":"    public void testDeclineAsyncCheckpoint() {\n        CheckpointFailureReason originalReason =\n                CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n\n        final Map<OperatorID, OperatorSnapshotFutures> snapshotsInProgress = new HashMap<>();\n        snapshotsInProgress.put(\n                new OperatorID(),\n                new OperatorSnapshotFutures(\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        DoneFuture.of(SnapshotResult.empty()),\n                        ExceptionallyDoneFuture.of(new CheckpointException(originalReason)),\n                        DoneFuture.of(SnapshotResult.empty())));\n\n        final TestEnvironment environment = new TestEnvironment();\n        final AsyncCheckpointRunnable runnable =\n                createAsyncRunnable(snapshotsInProgress, environment, true);\n        runnable.run();\n\n        Assert.assertSame(environment.getCause().getCheckpointFailureReason(), originalReason);\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnableTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"d9cc268be61c1789e5cb32d0897d962721be9c01","commitMessage":"@@@[FLINK-21084][runtime][checkpoint] Task reports finished snapshot on checkpoint if it is finished on restore\n","date":"2021-07-19 14:44:28","modifiedFileCount":"5","status":"M","submitter":"Yun Gao"}]
