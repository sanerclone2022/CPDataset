[{"authorTime":"2020-05-20 02:37:31","codes":[{"authorDate":"2020-05-20 02:37:31","commitOrder":1,"curCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t.<Integer>forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>())\n\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","date":"2020-05-28 00:08:40","endLine":117,"groupId":"21955","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerSplitOutputPeriodicWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/7975c688662c655ba8e7fc85642c72382b55a3.src","preCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t.<Integer>forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>())\n\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-05-20 02:37:31","commitOrder":1,"curCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t\t.<Integer>forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>())\n\t\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","date":"2020-05-28 00:08:40","endLine":142,"groupId":"21960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerSplitOutputEventWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/7975c688662c655ba8e7fc85642c72382b55a3.src","preCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t\t.<Integer>forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>())\n\t\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"54f1a4c8071a6d71111185449e795b2f00fa49e9","commitMessage":"@@@[FLINK-17899][runtime] Integrate FLIP-126 Watermarks with FLIP-27 Sources\n","date":"2020-05-28 00:08:40","modifiedFileCount":"8","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2020-05-28 04:45:26","codes":[{"authorDate":"2020-05-28 04:45:26","commitOrder":2,"curCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","date":"2020-06-03 23:19:22","endLine":116,"groupId":"21955","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerSplitOutputPeriodicWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/053363361efb85d339c6546bc5b8b01bea1d8d.src","preCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t.<Integer>forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>())\n\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-05-28 04:45:26","commitOrder":2,"curCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","date":"2020-06-03 23:19:22","endLine":141,"groupId":"21960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerSplitOutputEventWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/053363361efb85d339c6546bc5b8b01bea1d8d.src","preCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy = WatermarkStrategies\n\t\t\t\t.<Integer>forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>())\n\t\t\t\t.build();\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"12a895aef63f17036d1b5234b6ebab1f0cb3e96d","commitMessage":"@@@[FLINK-18011] Make WatermarkStrategy/WatermarkStrategies more ergonomic\n\nThis removes WatermarkStrategies and instead moves the convenience\nentrypoint methods for strategies directly to WatermarmStrategy.\n\nWatermarkStrategy is now also itself the builder for more complex\nstrategies instead of WatermarkStrategies.\n","date":"2020-06-03 23:19:22","modifiedFileCount":"11","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-08-05 13:00:36","codes":[{"authorDate":"2020-08-05 13:00:36","commitOrder":3,"curCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L),\n\t\t\tWatermark.MAX_WATERMARK\n\t\t));\n\t}\n","date":"2020-10-29 22:20:58","endLine":119,"groupId":"21955","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerSplitOutputPeriodicWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/890019bdd710597ab6cf50be025ef47b61a230.src","preCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-08-05 13:00:36","commitOrder":3,"curCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L),\n\t\t\tWatermark.MAX_WATERMARK\n\t\t));\n\t}\n","date":"2020-10-29 22:20:58","endLine":145,"groupId":"21960","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerSplitOutputEventWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/890019bdd710597ab6cf50be025ef47b61a230.src","preCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"fada6fb6ac9fd7f6510f1f2d77b6baa06563e222","commitMessage":"@@@[FLINK-18820] Emit MAX_WATERMARK at the end in SourceOperator\n\nStarting from this commit we emit a MAX_WATERMARK when all records are\nproduced in SourceOperator or a stop with savepoint was triggered.\n\nThis closes #13073\n","date":"2020-10-29 22:20:58","modifiedFileCount":"5","status":"M","submitter":"sxnan"},{"authorTime":"2020-10-27 21:55:00","codes":[{"authorDate":"2020-10-27 21:55:00","commitOrder":4,"curCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(\n\t\t\temitProgressiveWatermarks,\n\t\t\twatermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertWatermarksOrEmpty(\n\t\t\t\tresult,\n\t\t\t\tnew Watermark(100L),\n\t\t\t\tnew Watermark(150L),\n\t\t\t\tnew Watermark(200L));\n\t}\n","date":"2020-10-30 19:38:25","endLine":140,"groupId":"103150","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerSplitOutputPeriodicWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/1b0e39ab108516295c5bcf96b53f0fbcf7b837.src","preCode":"\tpublic void testPerSplitOutputPeriodicWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnPeriodicTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"A\");\n\t\t\t\toutput.createOutputForSplit(\"B\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"A\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"A\"),\n\t\t\t(output) -> output.createOutputForSplit(\"B\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L),\n\t\t\tWatermark.MAX_WATERMARK\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2020-10-27 21:55:00","commitOrder":4,"curCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(\n\t\t\temitProgressiveWatermarks,\n\t\t\twatermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertWatermarksOrEmpty(\n\t\t\t\tresult,\n\t\t\t\tnew Watermark(100L),\n\t\t\t\tnew Watermark(150L),\n\t\t\t\tnew Watermark(200L));\n\t}\n","date":"2020-10-30 19:38:25","endLine":167,"groupId":"103150","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerSplitOutputEventWatermarks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/1b0e39ab108516295c5bcf96b53f0fbcf7b837.src","preCode":"\tpublic void testPerSplitOutputEventWatermarks() throws Exception {\n\t\tfinal WatermarkStrategy<Integer> watermarkStrategy =\n\t\t\t\tWatermarkStrategy\n\t\t\t\t\t\t.forGenerator((ctx) -> new OnEventTestWatermarkGenerator<>());\n\n\t\tfinal List<Watermark> result = testSequenceOfWatermarks(watermarkStrategy,\n\t\t\t(output) -> {\n\t\t\t\toutput.createOutputForSplit(\"one\");\n\t\t\t\toutput.createOutputForSplit(\"two\");\n\t\t\t},\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 100L),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L),\n\t\t\t(output) -> output.createOutputForSplit(\"one\").collect(0, 150L),\n\t\t\t(output) -> output.releaseOutputForSplit(\"one\"),\n\t\t\t(output) -> output.createOutputForSplit(\"two\").collect(0, 200L)\n\t\t);\n\n\t\tassertThat(result, contains(\n\t\t\tnew Watermark(100L),\n\t\t\tnew Watermark(150L),\n\t\t\tnew Watermark(200L),\n\t\t\tWatermark.MAX_WATERMARK\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/SourceOperatorEventTimeTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"16e40b6239d41dd33db1b7bcc4fa1618fc4acb66","commitMessage":"@@@[FLINK-19835] Make SourceOperator aware of BATCH/STREAMING execution mode\n","date":"2020-10-30 19:38:25","modifiedFileCount":"7","status":"M","submitter":"Aljoscha Krettek"}]
