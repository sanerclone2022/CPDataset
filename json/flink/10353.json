[{"authorTime":"2021-08-16 18:08:31","codes":[{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void assignSplitsForSharedSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Shared));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(5)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(4));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n\n        \r\n        state1.putSplitsBackToPendingList(assignment1.get().assignment().get(3), 3);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment3 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 4));\n        assertThat(assignment3).isNotPresent();\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment4 =\n                state1.assignSplits(singletonList(3));\n        assertThat(assignment4)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(1);\n    }\n","date":"2021-08-17 05:35:59","endLine":95,"groupId":"41377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assignSplitsForSharedSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/fea0f17e7f914dc6e850f2cd575eeaf72452d1.src","preCode":"    void assignSplitsForSharedSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Shared));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(5)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(4));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n\n        \r\n        state1.putSplitsBackToPendingList(assignment1.get().assignment().get(3), 3);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment3 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 4));\n        assertThat(assignment3).isNotPresent();\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment4 =\n                state1.assignSplits(singletonList(3));\n        assertThat(assignment4)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/SplitsAssignmentStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void assignSplitsForExclusiveSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Exclusive));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1).isPresent();\n        assertThat(assignment1.get().assignment())\n                .hasSize(4)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(1));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n    }\n","date":"2021-08-17 05:35:59","endLine":116,"groupId":"41376","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assignSplitsForExclusiveSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/fea0f17e7f914dc6e850f2cd575eeaf72452d1.src","preCode":"    void assignSplitsForExclusiveSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Exclusive));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1).isPresent();\n        assertThat(assignment1.get().assignment())\n                .hasSize(4)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(1));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/SplitsAssignmentStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"c675f786c51038801161e861826d1c54654f0dde","commitMessage":"@@@[FLINK-20731] Introduce new pulsar source connector for flink.\n","date":"2021-08-17 05:35:59","modifiedFileCount":"3","status":"B","submitter":"Yufan Sheng"},{"authorTime":"2021-09-03 15:45:04","codes":[{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    void assignSplitsForSharedSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StopCursor.defaultStopCursor(), createConfig(SubscriptionType.Shared));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(5)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(4));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n\n        \r\n        state1.putSplitsBackToPendingList(assignment1.get().assignment().get(3), 3);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment3 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 4));\n        assertThat(assignment3).isNotPresent();\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment4 =\n                state1.assignSplits(singletonList(3));\n        assertThat(assignment4)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(1);\n    }\n","date":"2021-09-08 22:00:28","endLine":92,"groupId":"10353","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assignSplitsForSharedSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/811c3dddbfea29b845d8de02a26dd10cafeaf7.src","preCode":"    void assignSplitsForSharedSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Shared));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(5)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(4));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n\n        \r\n        state1.putSplitsBackToPendingList(assignment1.get().assignment().get(3), 3);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment3 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 4));\n        assertThat(assignment3).isNotPresent();\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment4 =\n                state1.assignSplits(singletonList(3));\n        assertThat(assignment4)\n                .isPresent()\n                .get()\n                .extracting(SplitsAssignment::assignment)\n                .asInstanceOf(map(Integer.class, List.class))\n                .hasSize(1);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/SplitsAssignmentStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    void assignSplitsForExclusiveSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StopCursor.defaultStopCursor(), createConfig(SubscriptionType.Exclusive));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1).isPresent();\n        assertThat(assignment1.get().assignment())\n                .hasSize(4)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(1));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n    }\n","date":"2021-09-08 22:00:28","endLine":111,"groupId":"10353","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assignSplitsForExclusiveSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/811c3dddbfea29b845d8de02a26dd10cafeaf7.src","preCode":"    void assignSplitsForExclusiveSubscription() {\n        SplitsAssignmentState state1 =\n                new SplitsAssignmentState(\n                        StartCursor.defaultStartCursor(),\n                        StopCursor.defaultStopCursor(),\n                        createConfig(SubscriptionType.Exclusive));\n        state1.appendTopicPartitions(partitions);\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment1 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n\n        assertThat(assignment1).isPresent();\n        assertThat(assignment1.get().assignment())\n                .hasSize(4)\n                .allSatisfy((idx, list) -> assertThat(list).hasSize(1));\n\n        Optional<SplitsAssignment<PulsarPartitionSplit>> assignment2 =\n                state1.assignSplits(Lists.newArrayList(0, 1, 2, 3, 4));\n        assertThat(assignment2).isNotPresent();\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/SplitsAssignmentStateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"1ca7353b8f91cee62bd78e24fd5af346fe5220ec","commitMessage":"@@@[FLINK-23848][connector/pulsar] Fix the consumer not found.\n","date":"2021-09-08 22:00:28","modifiedFileCount":"23","status":"M","submitter":"Yufan Sheng"}]
