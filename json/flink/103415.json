[{"authorTime":"2020-10-20 22:57:46","codes":[{"authorDate":"2020-11-23 23:52:22","commitOrder":11,"curCode":"\tprivate void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\tconfiguration.getAlignmentTimeout());\n\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\tfinal CheckpointMetaData checkpointMetaData =\n\t\t\tnew CheckpointMetaData(checkpointId, timestamp);\n\n\t\tsuper.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false);\n\t}\n","date":"2020-11-24 17:47:35","endLine":139,"groupId":"45492","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/8b0711f792d370dc51c75bd45174556ba0a5d6.src","preCode":"\tprivate void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\tconfiguration.getAlignmentTimeout());\n\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\tfinal CheckpointMetaData checkpointMetaData =\n\t\t\tnew CheckpointMetaData(checkpointId, timestamp);\n\n\t\tsuper.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2020-10-20 22:57:46","commitOrder":11,"curCode":"\tprotected void init() {\n\t\t\r\n\t\t\r\n\t\tSourceFunction<?> source = mainOperator.getUserFunction();\n\t\tif (source instanceof ExternallyInducedSource) {\n\t\t\texternallyInducedCheckpoints = true;\n\n\t\t\tExternallyInducedSource.CheckpointTrigger triggerHook = new ExternallyInducedSource.CheckpointTrigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void triggerCheckpoint(long checkpointId) throws FlinkException {\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\t\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\t\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\t\t\t\tconfiguration.getAlignmentTimeout());\n\t\t\t\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\t\t\t\tfinal CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, timestamp);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSourceStreamTask.super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false)\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tthrow new FlinkException(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n\t\t}\n\t\tgetEnvironment().getMetricGroup().getIOMetricGroup().gauge(MetricNames.CHECKPOINT_START_DELAY_TIME, this::getAsyncCheckpointStartDelayNanos);\n\t}\n","date":"2020-10-29 19:30:41","endLine":117,"groupId":"45492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/af/d67f3dd72a8bff36c367f7f0afece473cf1f8f.src","preCode":"\tprotected void init() {\n\t\t\r\n\t\t\r\n\t\tSourceFunction<?> source = mainOperator.getUserFunction();\n\t\tif (source instanceof ExternallyInducedSource) {\n\t\t\texternallyInducedCheckpoints = true;\n\n\t\t\tExternallyInducedSource.CheckpointTrigger triggerHook = new ExternallyInducedSource.CheckpointTrigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void triggerCheckpoint(long checkpointId) throws FlinkException {\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\t\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\t\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\t\t\t\tconfiguration.getAlignmentTimeout());\n\t\t\t\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\t\t\t\tfinal CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, timestamp);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSourceStreamTask.super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false)\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tthrow new FlinkException(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n\t\t}\n\t\tgetEnvironment().getMetricGroup().getIOMetricGroup().gauge(MetricNames.CHECKPOINT_START_DELAY_TIME, this::getAsyncCheckpointStartDelayNanos);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"NB"}],"commitId":"4c5fd598d01b7843d9d44439480274a1ca31e87d","commitMessage":"@@@[FLINK-20270][runtime] Add support for ExternallyInducedSource based on FLIP-27 to SourceOperatorStreamTask.\n","date":"2020-11-24 17:47:35","modifiedFileCount":"3","status":"M","submitter":"Jiangjie (Becket) Qin"},{"authorTime":"2020-12-02 21:20:26","codes":[{"authorDate":"2020-12-02 21:20:26","commitOrder":12,"curCode":"\tprivate void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forConfig(\n\t\t\tCheckpointType.CHECKPOINT,\n\t\t\tCheckpointStorageLocationReference.getDefault(),\n\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\tconfiguration.getAlignmentTimeout());\n\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\tfinal CheckpointMetaData checkpointMetaData =\n\t\t\tnew CheckpointMetaData(checkpointId, timestamp);\n\n\t\tsuper.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false);\n\t}\n","date":"2020-12-21 22:24:58","endLine":148,"groupId":"45492","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/20fdf3df26126f3bb8aa9f9ebff6a56b837776.src","preCode":"\tprivate void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\tconfiguration.getAlignmentTimeout());\n\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\tfinal CheckpointMetaData checkpointMetaData =\n\t\t\tnew CheckpointMetaData(checkpointId, timestamp);\n\n\t\tsuper.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-12-02 21:20:26","commitOrder":12,"curCode":"\tprotected void init() {\n\t\t\r\n\t\t\r\n\t\tSourceFunction<?> source = mainOperator.getUserFunction();\n\t\tif (source instanceof ExternallyInducedSource) {\n\t\t\texternallyInducedCheckpoints = true;\n\n\t\t\tExternallyInducedSource.CheckpointTrigger triggerHook = new ExternallyInducedSource.CheckpointTrigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void triggerCheckpoint(long checkpointId) throws FlinkException {\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forConfig(\n\t\t\t\t\t\tCheckpointType.CHECKPOINT,\n\t\t\t\t\t\tCheckpointStorageLocationReference.getDefault(),\n\t\t\t\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\t\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\t\t\t\tconfiguration.getAlignmentTimeout());\n\t\t\t\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\t\t\t\tfinal CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, timestamp);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSourceStreamTask.super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false)\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tthrow new FlinkException(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n\t\t}\n\t\tgetEnvironment().getMetricGroup().getIOMetricGroup().gauge(MetricNames.CHECKPOINT_START_DELAY_TIME, this::getAsyncCheckpointStartDelayNanos);\n\t}\n","date":"2020-12-21 22:24:58","endLine":121,"groupId":"45492","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5b/10df5e0ca649963cc4400a2413b8ba1855a28d.src","preCode":"\tprotected void init() {\n\t\t\r\n\t\t\r\n\t\tSourceFunction<?> source = mainOperator.getUserFunction();\n\t\tif (source instanceof ExternallyInducedSource) {\n\t\t\texternallyInducedCheckpoints = true;\n\n\t\t\tExternallyInducedSource.CheckpointTrigger triggerHook = new ExternallyInducedSource.CheckpointTrigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void triggerCheckpoint(long checkpointId) throws FlinkException {\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation(\n\t\t\t\t\t\tconfiguration.isExactlyOnceCheckpointMode(),\n\t\t\t\t\t\tconfiguration.isUnalignedCheckpointsEnabled(),\n\t\t\t\t\t\tconfiguration.getAlignmentTimeout());\n\t\t\t\t\tfinal long timestamp = System.currentTimeMillis();\n\n\t\t\t\t\tfinal CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, timestamp);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tSourceStreamTask.super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false)\n\t\t\t\t\t\t\t.get();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tthrow new FlinkException(e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n\t\t}\n\t\tgetEnvironment().getMetricGroup().getIOMetricGroup().gauge(MetricNames.CHECKPOINT_START_DELAY_TIME, this::getAsyncCheckpointStartDelayNanos);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"26ca3f6d8af862f30d71ebcf9d0b22eab149ba85","commitMessage":"@@@[hotfix][checkpointing] Explicit creation of CheckpointOptions\n\nThe motivation is to eliminate subtle bugs when changing checkpoint\ntype on the fly.\n1. Only guess options when creating a new barrier from configuration\n2. For other cases provide explicit factory methods\n2. Carry the current checkpoint/barrier requirements instead of the\ninitial configuration.\n","date":"2020-12-21 22:24:58","modifiedFileCount":"18","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-02-24 03:34:00","codes":[{"authorDate":"2021-02-24 03:34:00","commitOrder":13,"curCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","date":"2021-02-25 01:57:36","endLine":139,"groupId":"45492","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/22dba70ce14d26b0ece7dcb7deb0ad7c345588.src","preCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, false);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-02-24 03:34:00","commitOrder":13,"curCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","date":"2021-02-25 01:57:36","endLine":139,"groupId":"22253","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/2edfc50d5b4614efe0bc25e0654c31809c4fda.src","preCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions, false)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"44e962715b9411b8a00a420d3043e0cc32a0f565","commitMessage":"@@@[FLINK-21453][checkpointing][refactor] Replace advanceToEndOfTime with new CheckpointType.SAVEPOINT_TERMINATE\n","date":"2021-02-25 01:57:36","modifiedFileCount":"63","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-04-15 21:05:58","codes":[{"authorDate":"2021-04-15 21:05:58","commitOrder":14,"curCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout().toMillis());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","date":"2021-04-17 00:37:52","endLine":154,"groupId":"48642","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/b1c639ef0866513b6fbfe386edbf3268560839.src","preCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-04-15 21:05:58","commitOrder":14,"curCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout().toMillis());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","date":"2021-04-17 00:37:52","endLine":139,"groupId":"48642","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/eeafaa1e9f2d15036603ca12ea50a97e03ffce.src","preCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"52b400f717dc9a5c903a9b834d02b0cbf609897b","commitMessage":"@@@[FLINK-22290][checkpointing] Use duration for alignment timeout.\n","date":"2021-04-17 00:37:52","modifiedFileCount":"9","status":"M","submitter":"Arvid Heise"},{"authorTime":"2021-04-15 18:58:14","codes":[{"authorDate":"2021-04-15 18:58:14","commitOrder":15,"curCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout().toMillis());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","date":"2021-04-21 03:59:48","endLine":154,"groupId":"48642","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/f0761fdde85ac2404d006827574c72415b3275.src","preCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout().toMillis());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-04-15 18:58:14","commitOrder":15,"curCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout().toMillis());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","date":"2021-04-21 03:59:48","endLine":139,"groupId":"48642","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/3e6637bc063c7d72166b9da73b73ca674d6ace.src","preCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout().toMillis());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"a6c20cfed89b58b11fedf52a9bd0dbc26977c243","commitMessage":"@@@[hotfix][runtime] Log checkpoint processing delay if above threshold\n","date":"2021-04-21 03:59:48","modifiedFileCount":"6","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-06-23 01:18:07","codes":[{"authorDate":"2021-06-23 01:18:07","commitOrder":16,"curCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignedCheckpointTimeout().toMillis());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","date":"2021-06-29 15:26:35","endLine":158,"groupId":"103415","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"triggerCheckpointForExternallyInducedSource","params":"(longcheckpointId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5b/a8321856814e04990f1234a87be306a241ca65.src","preCode":"    private void triggerCheckpointForExternallyInducedSource(long checkpointId) {\n        final CheckpointOptions checkpointOptions =\n                CheckpointOptions.forConfig(\n                        CheckpointType.CHECKPOINT,\n                        CheckpointStorageLocationReference.getDefault(),\n                        configuration.isExactlyOnceCheckpointMode(),\n                        configuration.isUnalignedCheckpointsEnabled(),\n                        configuration.getAlignmentTimeout().toMillis());\n        final long timestamp = System.currentTimeMillis();\n\n        final CheckpointMetaData checkpointMetaData =\n                new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n        super.triggerCheckpointAsync(checkpointMetaData, checkpointOptions);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2021-06-23 01:18:07","commitOrder":16,"curCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignedCheckpointTimeout().toMillis());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","date":"2021-06-29 15:26:35","endLine":139,"groupId":"103415","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1d/132e1a0139af7325d5aa9b6f2f4542571bef79.src","preCode":"    protected void init() {\n        \r\n        \r\n        SourceFunction<?> source = mainOperator.getUserFunction();\n        if (source instanceof ExternallyInducedSource) {\n            externallyInducedCheckpoints = true;\n\n            ExternallyInducedSource.CheckpointTrigger triggerHook =\n                    new ExternallyInducedSource.CheckpointTrigger() {\n\n                        @Override\n                        public void triggerCheckpoint(long checkpointId) throws FlinkException {\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            \r\n                            final CheckpointOptions checkpointOptions =\n                                    CheckpointOptions.forConfig(\n                                            CheckpointType.CHECKPOINT,\n                                            CheckpointStorageLocationReference.getDefault(),\n                                            configuration.isExactlyOnceCheckpointMode(),\n                                            configuration.isUnalignedCheckpointsEnabled(),\n                                            configuration.getAlignmentTimeout().toMillis());\n                            final long timestamp = System.currentTimeMillis();\n\n                            final CheckpointMetaData checkpointMetaData =\n                                    new CheckpointMetaData(checkpointId, timestamp, timestamp);\n\n                            try {\n                                SourceStreamTask.super\n                                        .triggerCheckpointAsync(\n                                                checkpointMetaData, checkpointOptions)\n                                        .get();\n                            } catch (RuntimeException e) {\n                                throw e;\n                            } catch (Exception e) {\n                                throw new FlinkException(e.getMessage(), e);\n                            }\n                        }\n                    };\n\n            ((ExternallyInducedSource<?, ?>) source).setCheckpointTrigger(triggerHook);\n        }\n        getEnvironment()\n                .getMetricGroup()\n                .getIOMetricGroup()\n                .gauge(\n                        MetricNames.CHECKPOINT_START_DELAY_TIME,\n                        this::getAsyncCheckpointStartDelayNanos);\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"5040eaa877e59e1399cee1cf37ad1d33f62d01da","commitMessage":"@@@[FLINK-23041][runtime] Added new well defined checkpoint configuration aligned-checkpoint-timeout instead of alignment-timeout\n","date":"2021-06-29 15:26:35","modifiedFileCount":"17","status":"M","submitter":"Anton Kalashnikov"}]
