[{"authorTime":"2016-11-11 17:57:25","codes":[{"authorDate":"2016-11-11 17:57:25","commitOrder":1,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<String, Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\toperator,\n\t\t\t\t\t\tnew IntToStringKeySelector<>(),\n\t\t\t\t\t\tnew IdentityKeySelector<String>(),\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-11-29 01:38:29","endLine":113,"groupId":"3826","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/493597c3317089eb8b8fe808bfa1045c937276.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<String, Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\toperator,\n\t\t\t\t\t\tnew IntToStringKeySelector<>(),\n\t\t\t\t\t\tnew IdentityKeySelector<String>(),\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2016-11-11 17:57:25","commitOrder":1,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingFlatMapFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-11-29 01:38:29","endLine":103,"groupId":"9595","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/fd04494d8ff913e6da6aef753987b430886717.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingFlatMapFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/ProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"910f733f5ec52d2dd1e9dcc4ec6a4844cae2f2b4","commitMessage":"@@@[FLINK-5026] Rename TimelyFlatMap to Process\n","date":"2016-11-29 01:38:29","modifiedFileCount":"3","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-01 18:41:02","codes":[{"authorDate":"2016-11-11 17:57:25","commitOrder":2,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<String, Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\toperator,\n\t\t\t\t\t\tnew IntToStringKeySelector<>(),\n\t\t\t\t\t\tnew IdentityKeySelector<String>(),\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-11-29 01:38:29","endLine":113,"groupId":"3826","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/493597c3317089eb8b8fe808bfa1045c937276.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<String, Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\toperator,\n\t\t\t\t\t\tnew IntToStringKeySelector<>(),\n\t\t\t\t\t\tnew IdentityKeySelector<String>(),\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"},{"authorDate":"2017-03-01 18:41:02","commitOrder":2,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingProcessFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-06 19:26:16","endLine":94,"groupId":"9595","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/7fe483d7a9cea904273ff1e2c27742d7a53cd0.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingFlatMapFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new IdentityKeySelector<Integer>(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/ProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"0228676d689b04accf1ba7d7c7f8064e121c6d88","commitMessage":"@@@[FLINK-4660] Allow ProcessFunction on DataStream\n\nIntroduce new ProcessOperator for this. Rename the pre-existing\nProcessOperator to KeyedProcessOperator.\n","date":"2017-03-06 19:26:16","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-01 18:41:02","codes":[{"authorDate":"2017-03-01 19:02:34","commitOrder":3,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew TwoInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-06 19:26:16","endLine":98,"groupId":"103212","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c1/9eb3791189615c60d22bb7d1a46c4185f46fb3.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tCoProcessOperator<String, Integer, String, String> operator =\n\t\t\t\tnew CoProcessOperator<>(new ProcessingTimeQueryingProcessFunction());\n\n\t\tTwoInputStreamOperatorTestHarness<Integer, String, String> testHarness =\n\t\t\t\tnew KeyedTwoInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\toperator,\n\t\t\t\t\t\tnew IntToStringKeySelector<>(),\n\t\t\t\t\t\tnew IdentityKeySelector<String>(),\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement1(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement2(new StreamRecord<>(\"6\"));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5PT:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6PT:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2017-03-01 18:41:02","commitOrder":3,"curCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingProcessFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-06 19:26:16","endLine":94,"groupId":"103212","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimestampAndProcessingTimeQuerying","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/7fe483d7a9cea904273ff1e2c27742d7a53cd0.src","preCode":"\tpublic void testTimestampAndProcessingTimeQuerying() throws Exception {\n\n\t\tProcessOperator<Integer, String> operator =\n\t\t\t\tnew ProcessOperator<>(new QueryingProcessFunction(TimeDomain.PROCESSING_TIME));\n\n\t\tOneInputStreamOperatorTestHarness<Integer, String> testHarness =\n\t\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(17);\n\t\ttestHarness.processElement(new StreamRecord<>(5));\n\n\t\ttestHarness.setProcessingTime(42);\n\t\ttestHarness.processElement(new StreamRecord<>(6));\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\texpectedOutput.add(new StreamRecord<>(\"5TIME:17 TS:null\"));\n\t\texpectedOutput.add(new StreamRecord<>(\"6TIME:42 TS:null\"));\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/ProcessOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"06740fb28d3f3269d040d68cbfefc5201203b60d","commitMessage":"@@@[FLINK-4660] Allow CoProcessFunction on non-keyed ConnectedStreams\n\nIntroduce new CoProcessOperator for this. Rename the pre-existing\nCoProcessOperator to KeyedCoProcessOperator.\n","date":"2017-03-06 19:26:16","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"}]
