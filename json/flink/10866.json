[{"authorTime":"2017-08-14 20:57:06","codes":[{"authorDate":"2017-08-14 20:57:06","commitOrder":1,"curCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-11-10 18:09:13","endLine":178,"groupId":"49144","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/2b3679c95743dd662671386c2bf016ab930eac.src","preCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2017-08-14 20:57:06","commitOrder":1,"curCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.close();\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t}\n","date":"2017-11-10 18:09:13","endLine":210,"groupId":"49144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8c/2b3679c95743dd662671386c2bf016ab930eac.src","preCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.close();\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"775d7fed1ac8230c92997ead3c702004679614a4","commitMessage":"@@@[FLINK-4500] CassandraSinkBase implements CheckpointedFunction\n\nThis closes #4605.\n","date":"2017-11-10 18:09:13","modifiedFileCount":"1","status":"B","submitter":"Michael Fong"},{"authorTime":"2018-12-19 21:52:20","codes":[{"authorDate":"2018-12-19 21:52:20","commitOrder":2,"curCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t\t}\n\t}\n","date":"2018-12-20 17:56:36","endLine":183,"groupId":"46691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/4b0df2cb5366e9aea7489912dda7143032bedb.src","preCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2018-12-19 21:52:20","commitOrder":2,"curCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.close();\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t\t}\n\t}\n","date":"2018-12-20 17:56:36","endLine":216,"groupId":"46691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/4b0df2cb5366e9aea7489912dda7143032bedb.src","preCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\tOneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(casSinkFunc));\n\n\t\ttestHarness.open();\n\n\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\tcasSinkFunc.invoke(\"hello\");\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t@Override\n\t\t\tpublic void go() throws Exception {\n\t\t\t\ttestHarness.close();\n\t\t\t}\n\t\t};\n\t\tt.start();\n\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\tThread.sleep(5);\n\t\t}\n\n\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\tcompletableFuture.complete(null);\n\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"cb9c4fcde2555e7970afdc5f641f4bde8e6b5d08","commitMessage":"@@@[FLINK-9083][cassandra] Refactor CassandraSinkBaseTest\n\n- ensure sinks are closed in failing tests (by introducing try-with-resource blocks)\n- introduce CountDownLatch in tests that wait for pending updates.  o ensure that close/snapshot was actually executed\n- add utility methods for creating sinks\n","date":"2018-12-20 17:56:36","modifiedFileCount":"1","status":"M","submitter":"jparkie"},{"authorTime":"2018-12-19 21:42:28","codes":[{"authorDate":"2018-12-19 21:42:28","commitOrder":3,"curCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tfinal TestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","date":"2018-12-20 17:56:36","endLine":192,"groupId":"20049","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/705a56e7b32c6d9c80f3052e6164b778380798.src","preCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2018-12-19 21:42:28","commitOrder":3,"curCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.close();\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","date":"2018-12-20 17:56:36","endLine":224,"groupId":"20051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/705a56e7b32c6d9c80f3052e6164b778380798.src","preCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tResultSetFuture resultSetFuture = ResultSetFutures.fromCompletableFuture(completableFuture);\n\t\t\tcasSinkFunc.setResultFuture(resultSetFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.close();\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getNumOfPendingRecords());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getNumOfPendingRecords());\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"42f5f778468097151e1e7bf75854b3f592b84357","commitMessage":"@@@[FLINK-9083][cassandra] Add async backpressure support\n","date":"2018-12-20 17:56:36","modifiedFileCount":"8","status":"M","submitter":"jparkie"},{"authorTime":"2019-09-03 17:49:10","codes":[{"authorDate":"2019-09-03 17:49:10","commitOrder":4,"curCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tfinal TestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.TIMED_WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","date":"2019-09-03 17:49:10","endLine":193,"groupId":"10866","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/406ab4d17774070751508a392998ed90d91a46.src","preCode":"\tpublic void testWaitForPendingUpdatesOnSnapshot() throws Exception {\n\t\tfinal TestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.snapshot(123L, 123L);\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-09-03 17:49:10","commitOrder":4,"curCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.close();\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.TIMED_WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","date":"2019-09-03 17:49:10","endLine":225,"groupId":"10866","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWaitForPendingUpdatesOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/406ab4d17774070751508a392998ed90d91a46.src","preCode":"\tpublic void testWaitForPendingUpdatesOnClose() throws Exception {\n\t\tTestCassandraSink casSinkFunc = new TestCassandraSink();\n\n\t\ttry (OneInputStreamOperatorTestHarness<String, Object> testHarness = createOpenedTestHarness(casSinkFunc)) {\n\n\t\t\tCompletableFuture<ResultSet> completableFuture = new CompletableFuture<>();\n\t\t\tcasSinkFunc.enqueueCompletableFuture(completableFuture);\n\n\t\t\tcasSinkFunc.invoke(\"hello\");\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n\t\t\tThread t = new CheckedThread(\"Flink-CassandraSinkBaseTest\") {\n\t\t\t\t@Override\n\t\t\t\tpublic void go() throws Exception {\n\t\t\t\t\ttestHarness.close();\n\t\t\t\t\tlatch.countDown();\n\t\t\t\t}\n\t\t\t};\n\t\t\tt.start();\n\t\t\twhile (t.getState() != Thread.State.WAITING) {\n\t\t\t\tThread.sleep(5);\n\t\t\t}\n\n\t\t\tAssert.assertEquals(1, casSinkFunc.getAcquiredPermits());\n\t\t\tcompletableFuture.complete(null);\n\t\t\tlatch.await();\n\t\t\tAssert.assertEquals(0, casSinkFunc.getAcquiredPermits());\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"fbb4837a4d274d19eddbcc0a9ab96724ad8ef972","commitMessage":"@@@[FLINK-13059][cassandra] Release semaphore on exception in send()\n\n","date":"2019-09-03 17:49:10","modifiedFileCount":"2","status":"M","submitter":"Mads Chr. Olesen"}]
