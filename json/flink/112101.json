[{"authorTime":"2021-01-08 22:31:32","codes":[{"authorDate":"2020-12-31 10:34:00","commitOrder":2,"curCode":"    public void testDeserializationWithMetadata() throws Exception {\n        testDeserializationWithMetadata(\n                \"canal-data.txt\",\n                null,\n                null,\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"inventory\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"products2\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1589373515477L));\n                });\n        testDeserializationWithMetadata(\n                \"canal-data-filter-table.txt\",\n                \"mydb\",\n                \"product\",\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"mydb\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"product\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1598944146308L));\n                });\n    }\n","date":"2020-12-31 10:34:00","endLine":116,"groupId":"32177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeserializationWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fb/fd1544f2ca8214108ea1ff1f9cead18cd2b21a.src","preCode":"    public void testDeserializationWithMetadata() throws Exception {\n        testDeserializationWithMetadata(\n                \"canal-data.txt\",\n                null,\n                null,\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"inventory\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"products2\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1589373515477L));\n                });\n        testDeserializationWithMetadata(\n                \"canal-data-filter-table.txt\",\n                \"mydb\",\n                \"product\",\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"mydb\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"product\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1598944146308L));\n                });\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"},{"authorDate":"2021-01-08 22:31:32","commitOrder":2,"curCode":"    private void testDeserializationWithMetadata(\n            String resourceFile, String database, String table, Consumer<RowData> testConsumer)\n            throws Exception {\n        \r\n        final String firstLine = readLines(resourceFile).get(0);\n        final List<ReadableMetadata> requestedMetadata = Arrays.asList(ReadableMetadata.values());\n        final CanalJsonDeserializationSchema deserializationSchema =\n                createCanalJsonDeserializationSchema(database, table, requestedMetadata);\n        final SimpleCollector collector = new SimpleCollector();\n\n        deserializationSchema.deserialize(firstLine.getBytes(StandardCharsets.UTF_8), collector);\n        assertEquals(9, collector.list.size());\n        testConsumer.accept(collector.list.get(0));\n    }\n","date":"2021-01-08 22:31:32","endLine":273,"groupId":"32183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeserializationWithMetadata","params":"(StringresourceFile@Stringdatabase@Stringtable@Consumer<RowData>testConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/5b90bf0994c17541fff77171b8d40d707e5f73.src","preCode":"    private void testDeserializationWithMetadata(\n            String resourceFile, String database, String table, Consumer<RowData> testConsumer)\n            throws Exception {\n        \r\n        final String firstLine = readLines(resourceFile).get(0);\n        final List<ReadableMetadata> requestedMetadata = Arrays.asList(ReadableMetadata.values());\n        final CanalJsonDeserializationSchema deserializationSchema =\n                createCanalJsonDeserializationSchema(database, table, requestedMetadata);\n        final SimpleCollector collector = new SimpleCollector();\n\n        deserializationSchema.deserialize(firstLine.getBytes(StandardCharsets.UTF_8), collector);\n        assertEquals(9, collector.list.size());\n        testConsumer.accept(collector.list.get(0));\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"MB"}],"commitId":"241185a40118cfe3087eb4f7fc14203afe4073cc","commitMessage":"@@@[FLINK-20321][formats] Fix NPE when using Avro/Json/Csv formats to deserialize null input (#14539)\n\nThis closes #14539\n\nCo-authored-by: Alex Wang <alex.wang.dev@gmail.com>","date":"2021-01-08 22:31:32","modifiedFileCount":"12","status":"M","submitter":"Xue Wang"},{"authorTime":"2021-01-08 22:31:32","codes":[{"authorDate":"2021-02-02 11:51:18","commitOrder":3,"curCode":"    public void testDeserializationWithMetadata() throws Exception {\n        testDeserializationWithMetadata(\n                \"canal-data.txt\",\n                null,\n                null,\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"inventory\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"products2\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1589373515477L));\n                    assertThat(row.getTimestamp(9, 3).getMillisecond(), equalTo(1589373515000L));\n                });\n        testDeserializationWithMetadata(\n                \"canal-data-filter-table.txt\",\n                \"mydb\",\n                \"product\",\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"mydb\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"product\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1598944146308L));\n                    assertThat(row.getTimestamp(9, 3).getMillisecond(), equalTo(1598944132000L));\n                });\n    }\n","date":"2021-02-02 11:51:18","endLine":130,"groupId":"112101","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeserializationWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/193841ac4bfae30ec6d2983ed13906e54f44c1.src","preCode":"    public void testDeserializationWithMetadata() throws Exception {\n        testDeserializationWithMetadata(\n                \"canal-data.txt\",\n                null,\n                null,\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"inventory\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"products2\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1589373515477L));\n                });\n        testDeserializationWithMetadata(\n                \"canal-data-filter-table.txt\",\n                \"mydb\",\n                \"product\",\n                row -> {\n                    assertThat(row.getInt(0), equalTo(101));\n                    assertThat(row.getString(1).toString(), equalTo(\"scooter\"));\n                    assertThat(row.getString(2).toString(), equalTo(\"Small 2-wheel scooter\"));\n                    assertThat(row.getFloat(3), equalTo(3.14f));\n                    assertThat(row.getString(4).toString(), equalTo(\"mydb\"));\n                    assertThat(row.getString(5).toString(), equalTo(\"product\"));\n                    assertThat(row.getMap(6).size(), equalTo(4));\n                    assertThat(row.getArray(7).getString(0).toString(), equalTo(\"id\"));\n                    assertThat(row.getTimestamp(8, 3).getMillisecond(), equalTo(1598944146308L));\n                });\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-01-08 22:31:32","commitOrder":3,"curCode":"    private void testDeserializationWithMetadata(\n            String resourceFile, String database, String table, Consumer<RowData> testConsumer)\n            throws Exception {\n        \r\n        final String firstLine = readLines(resourceFile).get(0);\n        final List<ReadableMetadata> requestedMetadata = Arrays.asList(ReadableMetadata.values());\n        final CanalJsonDeserializationSchema deserializationSchema =\n                createCanalJsonDeserializationSchema(database, table, requestedMetadata);\n        final SimpleCollector collector = new SimpleCollector();\n\n        deserializationSchema.deserialize(firstLine.getBytes(StandardCharsets.UTF_8), collector);\n        assertEquals(9, collector.list.size());\n        testConsumer.accept(collector.list.get(0));\n    }\n","date":"2021-01-08 22:31:32","endLine":273,"groupId":"112101","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeserializationWithMetadata","params":"(StringresourceFile@Stringdatabase@Stringtable@Consumer<RowData>testConsumer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/5b90bf0994c17541fff77171b8d40d707e5f73.src","preCode":"    private void testDeserializationWithMetadata(\n            String resourceFile, String database, String table, Consumer<RowData> testConsumer)\n            throws Exception {\n        \r\n        final String firstLine = readLines(resourceFile).get(0);\n        final List<ReadableMetadata> requestedMetadata = Arrays.asList(ReadableMetadata.values());\n        final CanalJsonDeserializationSchema deserializationSchema =\n                createCanalJsonDeserializationSchema(database, table, requestedMetadata);\n        final SimpleCollector collector = new SimpleCollector();\n\n        deserializationSchema.deserialize(firstLine.getBytes(StandardCharsets.UTF_8), collector);\n        assertEquals(9, collector.list.size());\n        testConsumer.accept(collector.list.get(0));\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/canal/CanalJsonSerDeSchemaTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"N"}],"commitId":"195056b11f5266599260832e3e216330b58c5eaf","commitMessage":"@@@[FLINK-21172][canal][json] Support 'event-timestampcanal-json format include es field (#14792)\n\n","date":"2021-02-02 11:51:18","modifiedFileCount":"3","status":"M","submitter":"SteNicholas"}]
