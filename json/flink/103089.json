[{"authorTime":"2020-05-18 02:17:58","codes":[{"authorDate":"2020-05-13 21:15:03","commitOrder":7,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWisePartWriter.Factory<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","date":"2020-05-18 00:48:47","endLine":417,"groupId":"14251","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyInProgressPart","params":"(finalBaseStubWriterwriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/47837e387b40b863005f8bd988120275364e0d.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWisePartWriter.Factory<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"NB"},{"authorDate":"2020-05-18 02:17:58","commitOrder":7,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<RecoverableWriter.CommitRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\"test\", new Path(), 12345L, null, completePartsPerCheckpoint);\n\t\treturn Bucket.restore(writer, 0, 1L, partFileFactory, rollingPolicy, initStateWithOnlyInProgressFile, OutputFileConfig.builder().build());\n\t}\n","date":"2020-05-18 03:32:11","endLine":416,"groupId":"48988","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyPendingParts","params":"(finalBaseStubWriterwriter@finalintnumberOfPendingParts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/85e556f535808a6ee426282141d30e418c479c.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<RecoverableWriter.CommitRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\"test\", new Path(), 12345L, null, completePartsPerCheckpoint);\n\t\treturn Bucket.restore(writer, 0, 1L, partFileFactory, rollingPolicy, initStateWithOnlyInProgressFile, OutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"MB"}],"commitId":"c3a4a1241164d43476d6c96959dfaffc848e5754","commitMessage":"@@@Revert \"[FLINK-17593][fs-connector] Support arbitrary recovery mechanism for PartFileWriter\"\n\nThis reverts commit 339f5d84d0b7e9fe64534ea4e2adf7e35dee8398.\n\nI'm reverting these three related commits because it is important to\nhave confidence in our testing and to clearly separate the addition of\nthe Bucket State upgrade test from changing the serializer.\n","date":"2020-05-18 03:32:11","modifiedFileCount":"19","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-05-13 21:15:03","codes":[{"authorDate":"2020-05-13 21:15:03","commitOrder":8,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","date":"2020-05-18 22:09:50","endLine":417,"groupId":"14251","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyInProgressPart","params":"(finalBaseStubWriterwriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/d9a09e43e62f04999db4e04d288b2501baed47.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWisePartWriter.Factory<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2020-05-13 21:15:03","commitOrder":8,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnull,\n\t\t\t\t\tcompletePartsPerCheckpoint);\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tinitStateWithOnlyInProgressFile, OutputFileConfig.builder().build());\n\t}\n","date":"2020-05-18 22:09:50","endLine":436,"groupId":"48988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyPendingParts","params":"(finalBaseStubWriterwriter@finalintnumberOfPendingParts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/d9a09e43e62f04999db4e04d288b2501baed47.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<RecoverableWriter.CommitRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\"test\", new Path(), 12345L, null, completePartsPerCheckpoint);\n\t\treturn Bucket.restore(writer, 0, 1L, partFileFactory, rollingPolicy, initStateWithOnlyInProgressFile, OutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"220f7dabf24fc1e6fe77b83a00a7de47d75d5b18","commitMessage":"@@@[FLINK-17593][Connectors/FileSystem] Support arbitrary recovery mechanism for PartFileWriter\n\nThis change includes two things:\n\n1. Make the PartFileWriter generic and decouple the PartFileWriter and\nRecoverableStream. According to different pre-commit / commit methods. \nthis change allows us to extend different types of PartFileWriter.\n\n2. Make the Bucket/Buckets depends on the PartFileFactory instead of\nRecoverableWriter.\n","date":"2020-05-18 22:09:50","modifiedFileCount":"19","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-10-20 15:39:58","codes":[{"authorDate":"2020-10-20 15:39:58","commitOrder":9,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tnull,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","date":"2020-10-30 10:03:58","endLine":420,"groupId":"103089","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyInProgressPart","params":"(finalBaseStubWriterwriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/5d85987cb5466c66c599bb3d512d6d85a6d53c.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyInProgressPart(final BaseStubWriter writer) throws IOException {\n\t\tfinal BucketState<String> stateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(new NoOpRecoverable()),\n\t\t\t\t\tnew HashMap<>());\n\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tstateWithOnlyInProgressFile,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"},{"authorDate":"2020-10-20 15:39:58","commitOrder":9,"curCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnull,\n\t\t\t\t\tcompletePartsPerCheckpoint);\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tinitStateWithOnlyInProgressFile,\n\t\t\tnull,\n\t\t\tOutputFileConfig.builder().build());\n\t}\n","date":"2020-10-30 10:03:58","endLine":441,"groupId":"103089","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getRestoredBucketWithOnlyPendingParts","params":"(finalBaseStubWriterwriter@finalintnumberOfPendingParts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/5d85987cb5466c66c599bb3d512d6d85a6d53c.src","preCode":"\tprivate Bucket<String, String> getRestoredBucketWithOnlyPendingParts(final BaseStubWriter writer, final int numberOfPendingParts) throws IOException {\n\t\tfinal Map<Long, List<InProgressFileWriter.PendingFileRecoverable>> completePartsPerCheckpoint =\n\t\t\t\tcreatePendingPartsPerCheckpoint(numberOfPendingParts);\n\n\t\tfinal BucketState<String> initStateWithOnlyInProgressFile =\n\t\t\t\tnew BucketState<>(\n\t\t\t\t\t\"test\",\n\t\t\t\t\tnew Path(),\n\t\t\t\t\t12345L,\n\t\t\t\t\tnull,\n\t\t\t\t\tcompletePartsPerCheckpoint);\n\t\treturn Bucket.restore(\n\t\t\t0,\n\t\t\t1L,\n\t\t\tnew RowWiseBucketWriter<>(writer, ENCODER),\n\t\t\trollingPolicy,\n\t\t\tinitStateWithOnlyInProgressFile, OutputFileConfig.builder().build());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"79bb3ab192fa8af54fbb29e4d54b3bed27028929","commitMessage":"@@@[FLINK-19357][fs-connector] Introduce FileLifeCycleListener to Buckets\n\nThis closes #13697\n","date":"2020-10-30 10:03:58","modifiedFileCount":"7","status":"M","submitter":"JingsongLi"}]
