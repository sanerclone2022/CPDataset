[{"authorTime":"2020-05-16 02:06:40","codes":[{"authorDate":"2020-05-16 02:06:40","commitOrder":1,"curCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.back-off.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","date":"2020-05-17 22:34:39","endLine":170,"groupId":"11590","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateWrongBackoffDelay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/30fa30d4eb2b9302a7e421f7237a25390dd277.src","preCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.back-off.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2020-05-16 02:06:40","commitOrder":1,"curCode":"\tpublic void validatePrimaryKeyOnIllegalColumn() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"The table has a primary key on columns of illegal types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\" +\n\t\t\t\t\" Elasticsearch sink does not support primary keys on columns of types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.BIGINT().notNull())\n\t\t\t\t\t.field(\"b\", DataTypes.ARRAY(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"c\", DataTypes.MAP(DataTypes.BIGINT(), DataTypes.STRING()).notNull())\n\t\t\t\t\t.field(\"d\", DataTypes.MULTISET(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"e\", DataTypes.ROW(DataTypes.FIELD(\"a\", DataTypes.BIGINT())).notNull())\n\t\t\t\t\t.field(\"f\", DataTypes.RAW(Types.BIG_INT).notNull())\n\t\t\t\t\t.field(\"g\", DataTypes.BYTES().notNull())\n\t\t\t\t\t.primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","date":"2020-05-17 22:34:39","endLine":199,"groupId":"8837","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validatePrimaryKeyOnIllegalColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/30fa30d4eb2b9302a7e421f7237a25390dd277.src","preCode":"\tpublic void validatePrimaryKeyOnIllegalColumn() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"The table has a primary key on columns of illegal types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\" +\n\t\t\t\t\" Elasticsearch sink does not support primary keys on columns of types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.BIGINT().notNull())\n\t\t\t\t\t.field(\"b\", DataTypes.ARRAY(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"c\", DataTypes.MAP(DataTypes.BIGINT(), DataTypes.STRING()).notNull())\n\t\t\t\t\t.field(\"d\", DataTypes.MULTISET(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"e\", DataTypes.ROW(DataTypes.FIELD(\"a\", DataTypes.BIGINT())).notNull())\n\t\t\t\t\t.field(\"f\", DataTypes.RAW(Types.BIG_INT).notNull())\n\t\t\t\t\t.field(\"g\", DataTypes.BYTES().notNull())\n\t\t\t\t\t.primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"0ce2af04963b51397d9b0e210475e69e36d60f36","commitMessage":"@@@[FLINK-17027] Introduce a new Elasticsearch 7 connector with new property keys\n","date":"2020-05-17 22:34:39","modifiedFileCount":"2","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-05-16 02:06:40","codes":[{"authorDate":"2020-05-19 15:30:25","commitOrder":2,"curCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","date":"2020-05-19 17:07:11","endLine":170,"groupId":"11590","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateWrongBackoffDelay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/e321421288620c92ac566dc3e9c68fed23b7c2.src","preCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.back-off.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2020-05-16 02:06:40","commitOrder":2,"curCode":"\tpublic void validatePrimaryKeyOnIllegalColumn() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"The table has a primary key on columns of illegal types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\" +\n\t\t\t\t\" Elasticsearch sink does not support primary keys on columns of types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.BIGINT().notNull())\n\t\t\t\t\t.field(\"b\", DataTypes.ARRAY(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"c\", DataTypes.MAP(DataTypes.BIGINT(), DataTypes.STRING()).notNull())\n\t\t\t\t\t.field(\"d\", DataTypes.MULTISET(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"e\", DataTypes.ROW(DataTypes.FIELD(\"a\", DataTypes.BIGINT())).notNull())\n\t\t\t\t\t.field(\"f\", DataTypes.RAW(Types.BIG_INT).notNull())\n\t\t\t\t\t.field(\"g\", DataTypes.BYTES().notNull())\n\t\t\t\t\t.primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","date":"2020-05-17 22:34:39","endLine":199,"groupId":"8837","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validatePrimaryKeyOnIllegalColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/30fa30d4eb2b9302a7e421f7237a25390dd277.src","preCode":"\tpublic void validatePrimaryKeyOnIllegalColumn() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"The table has a primary key on columns of illegal types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\" +\n\t\t\t\t\" Elasticsearch sink does not support primary keys on columns of types: \" +\n\t\t\t\t\"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.BIGINT().notNull())\n\t\t\t\t\t.field(\"b\", DataTypes.ARRAY(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"c\", DataTypes.MAP(DataTypes.BIGINT(), DataTypes.STRING()).notNull())\n\t\t\t\t\t.field(\"d\", DataTypes.MULTISET(DataTypes.BIGINT().notNull()).notNull())\n\t\t\t\t\t.field(\"e\", DataTypes.ROW(DataTypes.FIELD(\"a\", DataTypes.BIGINT())).notNull())\n\t\t\t\t\t.field(\"f\", DataTypes.RAW(Types.BIG_INT).notNull())\n\t\t\t\t\t.field(\"g\", DataTypes.BYTES().notNull())\n\t\t\t\t\t.primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"}],"commitId":"a47c611591204d95ae89d1f6ec44cedf4791fd42","commitMessage":"@@@[FLINK-17027][hotfix] Rename back-off infix to backoff in new Elasticsearch properties\n","date":"2020-05-19 17:07:11","modifiedFileCount":"3","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-01-12 17:13:24","codes":[{"authorDate":"2020-05-19 15:30:25","commitOrder":3,"curCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","date":"2020-05-19 17:07:11","endLine":170,"groupId":"11590","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateWrongBackoffDelay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/e321421288620c92ac566dc3e9c68fed23b7c2.src","preCode":"\tpublic void validateWrongBackoffDelay() {\n\t\tElasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n\t\tthrown.expect(ValidationException.class);\n\t\tthrown.expectMessage(\n\t\t\t\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n\t\tsinkFactory.createDynamicTableSink(\n\t\t\tcontext()\n\t\t\t\t.withSchema(TableSchema.builder()\n\t\t\t\t\t.field(\"a\", DataTypes.TIME())\n\t\t\t\t\t.build())\n\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n\t\t\t\t.withOption(ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n\t\t\t\t.build()\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"},{"authorDate":"2021-01-12 17:13:24","commitOrder":3,"curCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                TableSchema.builder()\n                                        .field(\"a\", DataTypes.BIGINT().notNull())\n                                        .field(\n                                                \"b\",\n                                                DataTypes.ARRAY(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"c\",\n                                                DataTypes.MAP(\n                                                                DataTypes.BIGINT(),\n                                                                DataTypes.STRING())\n                                                        .notNull())\n                                        .field(\n                                                \"d\",\n                                                DataTypes.MULTISET(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"e\",\n                                                DataTypes.ROW(\n                                                                DataTypes.FIELD(\n                                                                        \"a\", DataTypes.BIGINT()))\n                                                        .notNull())\n                                        .field(\n                                                \"f\",\n                                                DataTypes.RAW(Void.class, VoidSerializer.INSTANCE)\n                                                        .notNull())\n                                        .field(\"g\", DataTypes.BYTES().notNull())\n                                        .primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n                                        .build())\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n                        .build());\n    }\n","date":"2021-01-18 21:32:17","endLine":199,"groupId":"44853","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validatePrimaryKeyOnIllegalColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/1b5ee4bb7c6ec45c6bd6e62ca7a4751c2bc89e.src","preCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                TableSchema.builder()\n                                        .field(\"a\", DataTypes.BIGINT().notNull())\n                                        .field(\n                                                \"b\",\n                                                DataTypes.ARRAY(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"c\",\n                                                DataTypes.MAP(\n                                                                DataTypes.BIGINT(),\n                                                                DataTypes.STRING())\n                                                        .notNull())\n                                        .field(\n                                                \"d\",\n                                                DataTypes.MULTISET(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"e\",\n                                                DataTypes.ROW(\n                                                                DataTypes.FIELD(\n                                                                        \"a\", DataTypes.BIGINT()))\n                                                        .notNull())\n                                        .field(\"f\", DataTypes.RAW(Types.BIG_INT).notNull())\n                                        .field(\"g\", DataTypes.BYTES().notNull())\n                                        .primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n                                        .build())\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n                        .build());\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"2e8b6eab19df6e53b6031dc4535988b3254e19dc","commitMessage":"@@@[FLINK-20862] Make raw types of TypeInformation resolvable\n\nThis closes #14619.\n","date":"2021-01-18 21:32:17","modifiedFileCount":"13","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":4,"curCode":"    public void validateWrongBackoffDelay() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n                        .build());\n    }\n","date":"2021-03-24 04:35:35","endLine":142,"groupId":"49771","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateWrongBackoffDelay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/80254cf259aff2ac17add9f72a89eaf42e267c.src","preCode":"    public void validateWrongBackoffDelay() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(TableSchema.builder().field(\"a\", DataTypes.TIME()).build())\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n                        .build());\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":4,"curCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                new ResolvedSchema(\n                                        Arrays.asList(\n                                                Column.physical(\"a\", DataTypes.BIGINT().notNull()),\n                                                Column.physical(\n                                                        \"b\",\n                                                        DataTypes.ARRAY(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"c\",\n                                                        DataTypes.MAP(\n                                                                        DataTypes.BIGINT(),\n                                                                        DataTypes.STRING())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"d\",\n                                                        DataTypes.MULTISET(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"e\",\n                                                        DataTypes.ROW(\n                                                                        DataTypes.FIELD(\n                                                                                \"a\",\n                                                                                DataTypes.BIGINT()))\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"f\",\n                                                        DataTypes.RAW(\n                                                                        Void.class,\n                                                                        VoidSerializer.INSTANCE)\n                                                                .notNull()),\n                                                Column.physical(\"g\", DataTypes.BYTES().notNull())),\n                                        Collections.emptyList(),\n                                        UniqueConstraint.primaryKey(\n                                                \"name\",\n                                                Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"))))\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n                        .build());\n    }\n","date":"2021-03-24 04:35:35","endLine":202,"groupId":"49770","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validatePrimaryKeyOnIllegalColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/80254cf259aff2ac17add9f72a89eaf42e267c.src","preCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                TableSchema.builder()\n                                        .field(\"a\", DataTypes.BIGINT().notNull())\n                                        .field(\n                                                \"b\",\n                                                DataTypes.ARRAY(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"c\",\n                                                DataTypes.MAP(\n                                                                DataTypes.BIGINT(),\n                                                                DataTypes.STRING())\n                                                        .notNull())\n                                        .field(\n                                                \"d\",\n                                                DataTypes.MULTISET(DataTypes.BIGINT().notNull())\n                                                        .notNull())\n                                        .field(\n                                                \"e\",\n                                                DataTypes.ROW(\n                                                                DataTypes.FIELD(\n                                                                        \"a\", DataTypes.BIGINT()))\n                                                        .notNull())\n                                        .field(\n                                                \"f\",\n                                                DataTypes.RAW(Void.class, VoidSerializer.INSTANCE)\n                                                        .notNull())\n                                        .field(\"g\", DataTypes.BYTES().notNull())\n                                        .primaryKey(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n                                        .build())\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n                        .build());\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-06-30 16:32:46","codes":[{"authorDate":"2021-06-30 16:32:46","commitOrder":5,"curCode":"    public void validateWrongBackoffDelay() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withOption(ElasticsearchConnectorOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                                \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchConnectorOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(),\n                                \"-1s\")\n                        .build());\n    }\n","date":"2021-07-12 18:56:17","endLine":152,"groupId":"10821","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"validateWrongBackoffDelay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/37dbc5bd7c3a30f3eae1d681cf2c97bb83c5fa.src","preCode":"    public void validateWrongBackoffDelay() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\"Invalid value for option 'sink.bulk-flush.backoff.delay'.\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"-1s\")\n                        .build());\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2021-06-30 16:32:46","commitOrder":5,"curCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                new ResolvedSchema(\n                                        Arrays.asList(\n                                                Column.physical(\"a\", DataTypes.BIGINT().notNull()),\n                                                Column.physical(\n                                                        \"b\",\n                                                        DataTypes.ARRAY(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"c\",\n                                                        DataTypes.MAP(\n                                                                        DataTypes.BIGINT(),\n                                                                        DataTypes.STRING())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"d\",\n                                                        DataTypes.MULTISET(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"e\",\n                                                        DataTypes.ROW(\n                                                                        DataTypes.FIELD(\n                                                                                \"a\",\n                                                                                DataTypes.BIGINT()))\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"f\",\n                                                        DataTypes.RAW(\n                                                                        Void.class,\n                                                                        VoidSerializer.INSTANCE)\n                                                                .notNull()),\n                                                Column.physical(\"g\", DataTypes.BYTES().notNull())),\n                                        Collections.emptyList(),\n                                        UniqueConstraint.primaryKey(\n                                                \"name\",\n                                                Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"))))\n                        .withOption(ElasticsearchConnectorOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                                \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchConnectorOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(),\n                                \"1s\")\n                        .build());\n    }\n","date":"2021-07-12 18:56:17","endLine":214,"groupId":"10821","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"validatePrimaryKeyOnIllegalColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/37dbc5bd7c3a30f3eae1d681cf2c97bb83c5fa.src","preCode":"    public void validatePrimaryKeyOnIllegalColumn() {\n        Elasticsearch7DynamicSinkFactory sinkFactory = new Elasticsearch7DynamicSinkFactory();\n\n        thrown.expect(ValidationException.class);\n        thrown.expectMessage(\n                \"The table has a primary key on columns of illegal types: \"\n                        + \"[ARRAY, MAP, MULTISET, ROW, RAW, VARBINARY].\\n\"\n                        + \" Elasticsearch sink does not support primary keys on columns of types: \"\n                        + \"[ARRAY, MAP, MULTISET, STRUCTURED_TYPE, ROW, RAW, BINARY, VARBINARY].\");\n        sinkFactory.createDynamicTableSink(\n                context()\n                        .withSchema(\n                                new ResolvedSchema(\n                                        Arrays.asList(\n                                                Column.physical(\"a\", DataTypes.BIGINT().notNull()),\n                                                Column.physical(\n                                                        \"b\",\n                                                        DataTypes.ARRAY(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"c\",\n                                                        DataTypes.MAP(\n                                                                        DataTypes.BIGINT(),\n                                                                        DataTypes.STRING())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"d\",\n                                                        DataTypes.MULTISET(\n                                                                        DataTypes.BIGINT()\n                                                                                .notNull())\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"e\",\n                                                        DataTypes.ROW(\n                                                                        DataTypes.FIELD(\n                                                                                \"a\",\n                                                                                DataTypes.BIGINT()))\n                                                                .notNull()),\n                                                Column.physical(\n                                                        \"f\",\n                                                        DataTypes.RAW(\n                                                                        Void.class,\n                                                                        VoidSerializer.INSTANCE)\n                                                                .notNull()),\n                                                Column.physical(\"g\", DataTypes.BYTES().notNull())),\n                                        Collections.emptyList(),\n                                        UniqueConstraint.primaryKey(\n                                                \"name\",\n                                                Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"))))\n                        .withOption(ElasticsearchOptions.INDEX_OPTION.key(), \"MyIndex\")\n                        .withOption(\n                                ElasticsearchOptions.HOSTS_OPTION.key(), \"http://localhost:1234\")\n                        .withOption(\n                                ElasticsearchOptions.BULK_FLUSH_BACKOFF_DELAY_OPTION.key(), \"1s\")\n                        .build());\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"2dbb3de221339edf120dac3fbbd6e13c3e54af11","commitMessage":"@@@[FLINK-23064][connector-elasticsearch] Make connector options PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"11","status":"M","submitter":"Ingo B?rk"}]
