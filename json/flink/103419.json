[{"authorTime":"2016-09-26 22:21:51","codes":[{"authorDate":"2016-09-26 22:21:51","commitOrder":1,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(\n\t\t\t\t\tcontext.window,\n\t\t\t\t\twindowSerializer,\n\t\t\t\t\twindowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","date":"2016-10-22 01:03:05","endLine":246,"groupId":"49305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/4dbde046f3a4b493abd7df6ba12cea549a599d.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(\n\t\t\t\t\tcontext.window,\n\t\t\t\t\twindowSerializer,\n\t\t\t\t\twindowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2016-09-26 22:21:51","commitOrder":1,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(context.window, windowSerializer, windowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","date":"2016-10-22 01:03:05","endLine":284,"groupId":"49305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/4dbde046f3a4b493abd7df6ba12cea549a599d.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(context.window, windowSerializer, windowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"}],"commitId":"81b19e5323edd384e00f77eaa4a5c543db7e2499","commitMessage":"@@@[FLINK-3674] Add an interface for Time aware User Functions\n\nThis moves the event-time/processing-time trigger code from\nWindowOperator behind a well defined interface that can be used by\noperators (and user functions).\n\nInternalTimerService is the new interface that has the same\nfunctionality that WindowOperator used to have. TimerService is the user\nfacing interface that does not allow dealing with namespaces/payloads\nand also does not allow deleting timers. There is a default\nimplementation in HeapInternalTimerService that can checkpoint timers to\na stream and also restore from a stream. Right now.  this is managed in\nAbstractStreamOperator and operators can ask for an\nInternalTimerService.\n\nThis also adds tests for HeapInternalTimerService.\n\nThis adds two new user functions:\n - TimelyFlatMapFunction: an extension of FlatMapFunction that also\n   allows querying time and setting timers\n - TimelyCoFlatMapFunction: the same.  but for CoFlatMapFunction\n\nThere are two new StreamOperator implementations for these that use the\nInternalTimerService interface.\n\nThis also adds tests for the two new operators.\n\nThis also adds the new interface KeyContext that is used for\nsetting/querying the current key context for state and timers. Timers\nare always scoped to a key.  for now.\n\nAlso.  this moves the handling of watermarks for both one-input and\ntwo-input operators to AbstractStreamOperators so that we have a central\nground-truth.\n","date":"2016-10-22 01:03:05","modifiedFileCount":"29","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2016-11-01 07:21:04","codes":[{"authorDate":"2016-11-01 07:21:04","commitOrder":2,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(\n\t\t\t\t\tcontext.window,\n\t\t\t\t\twindowSerializer,\n\t\t\t\t\twindowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, windowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","date":"2016-11-15 17:05:24","endLine":256,"groupId":"49305","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/e3f5a5032e8f7277a1788e8b8f96c21e71ffed.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(\n\t\t\t\t\tcontext.window,\n\t\t\t\t\twindowSerializer,\n\t\t\t\t\twindowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2016-11-01 07:21:04","commitOrder":2,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(context.window, windowSerializer, windowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, windowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","date":"2016-11-15 17:05:24","endLine":296,"groupId":"49305","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/e3f5a5032e8f7277a1788e8b8f96c21e71ffed.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(context.window, windowSerializer, windowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"74bb7bb63919ce6de5736d52e4e5a254cf9b6509","commitMessage":"@@@[FLINK-4174] Enhance evictor functionality\n","date":"2016-11-15 17:05:24","modifiedFileCount":"7","status":"M","submitter":"Vishnu Viswanath"},{"authorTime":"2017-01-13 22:17:09","codes":[{"authorDate":"2017-01-13 22:17:09","commitOrder":3,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, evictingWindowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\t}\n","date":"2017-01-23 04:53:39","endLine":253,"groupId":"44588","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/c977a6ad1ef14e883f2dc1bac9bff0a0e62336.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(\n\t\t\t\t\tcontext.window,\n\t\t\t\t\twindowSerializer,\n\t\t\t\t\twindowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, windowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2017-01-13 22:17:09","commitOrder":3,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, evictingWindowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\t}\n","date":"2017-01-23 04:53:39","endLine":293,"groupId":"44588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/c977a6ad1ef14e883f2dc1bac9bff0a0e62336.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twindowState = getPartitionedState(stateWindow, windowSerializer, windowStateDescriptor);\n\t\t} else {\n\t\t\twindowState = getPartitionedState(context.window, windowSerializer, windowStateDescriptor);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = windowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, windowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, windowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"3b97128f05bacfb80afe4a2a49741c31ff306cd2","commitMessage":"@@@[FLINK-5590] [runtime] Add proper internal state hierarchy\n\nThis introduces an internal state hierarchy that mirrors the external state hierarchy. \nbut gives the runtime access to methods that should not be part of the user facing API. \nsuch as:\n  - setting namespaces\n  - accessing raw values\n  - merging namespaces\n","date":"2017-01-23 04:53:39","modifiedFileCount":"38","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2016-11-02 18:51:07","codes":[{"authorDate":"2016-11-02 18:51:07","commitOrder":4,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(context.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp())) {\n\t\t\tclearAllState(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2017-01-24 17:42:34","endLine":256,"groupId":"22428","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/fea14a2237b3e46af1a80dc0d7748c868c21fd.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, evictingWindowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2016-11-02 18:51:07","commitOrder":4,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(context.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp())) {\n\t\t\tclearAllState(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2017-01-24 17:42:34","endLine":302,"groupId":"22428","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/fea14a2237b3e46af1a80dc0d7748c868c21fd.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tListState<StreamRecord<IN>> windowState;\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\tif (contents == null) {\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\tif (triggerResult.isFire()) {\n\t\t\tfire(context.window, contents, evictingWindowState);\n\t\t}\n\n\t\tif (triggerResult.isPurge() || (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp()))) {\n\t\t\tcleanup(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"0b331a421267a541d91e94f2713534704ed32bed","commitMessage":"@@@[FLINK-4994] Don't Clear Trigger State and Merging Window Set When Purging\n\nBefore.  when a Trigger returns TriggerResult.PURGE from any of the\non*() methods the WindowOperator will clear all state of that window\n(window contents.  merging window set) and call Trigger.clear() so that the\nTrigger can clean up its state/timers.\n\nThis was problematic in some cases. For example.  with merging windows (session\nwindows) this means that a late-arriving element will not be put into the\nsession that was previously built up but will be put into a completely new\nsession that only contains this one element.\n\nThe new behaviour is this:\n * Only clean window contents on PURGE\n * Register cleanup timer for any window.  don't delete this on PURGE\n * When the cleanup timer fires: clean window state.  clean merging window set. \ncall Trigger.clear() to allow it to clean state/timers\n","date":"2017-01-24 17:42:34","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-06 12:07:18","codes":[{"authorDate":"2017-03-06 12:07:18","commitOrder":5,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = triggerContext.onEventTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2017-03-25 23:59:17","endLine":281,"groupId":"22428","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/85/451a52f3d39ef941c50bb00a6b29eb8aafb43d.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = context.onEventTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(context.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp())) {\n\t\t\tclearAllState(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2017-03-06 12:07:18","commitOrder":5,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = triggerContext.onProcessingTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (!windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2017-03-25 23:59:17","endLine":327,"groupId":"22428","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/85/451a52f3d39ef941c50bb00a6b29eb8aafb43d.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\tcontext.key = timer.getKey();\n\t\tcontext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(context.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(context.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = context.onProcessingTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(context.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (!windowAssigner.isEventTime() && isCleanupTime(context.window, timer.getTimestamp())) {\n\t\t\tclearAllState(context.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"fad201bfb0b1f2757f68f7b3ffaf97a486eb93e8","commitMessage":"@@@[FLINK-5929] Allow Access to Per-Window State in ProcessWindowFunction\n","date":"2017-03-25 23:59:17","modifiedFileCount":"24","status":"M","submitter":"Seth Wiesman"},{"authorTime":"2018-06-28 17:54:56","codes":[{"authorDate":"2018-06-28 17:54:56","commitOrder":6,"curCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tTriggerResult triggerResult = triggerContext.onEventTime(timer.getTimestamp());\n\n\t\tif (triggerResult.isFire()) {\n\t\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\t\tif (contents != null) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t}\n\n\t\tif (triggerResult.isPurge()) {\n\t\t\tevictingWindowState.clear();\n\t\t}\n\n\t\tif (windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2018-07-11 19:35:46","endLine":287,"groupId":"103419","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"onEventTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/0b28071acaec76dff5386745a382bd0fca7ab6.src","preCode":"\tpublic void onEventTime(InternalTimer<K, W> timer) throws Exception {\n\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = triggerContext.onEventTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2018-06-28 17:54:56","commitOrder":6,"curCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tTriggerResult triggerResult = triggerContext.onProcessingTime(timer.getTimestamp());\n\n\t\tif (triggerResult.isFire()) {\n\t\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\t\t\tif (contents != null) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t}\n\n\t\tif (triggerResult.isPurge()) {\n\t\t\tevictingWindowState.clear();\n\t\t}\n\n\t\tif (!windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","date":"2018-07-11 19:35:46","endLine":334,"groupId":"103419","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"onProcessingTime","params":"(InternalTimer<K@W>timer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/0b28071acaec76dff5386745a382bd0fca7ab6.src","preCode":"\tpublic void onProcessingTime(InternalTimer<K, W> timer) throws Exception {\n\t\ttriggerContext.key = timer.getKey();\n\t\ttriggerContext.window = timer.getNamespace();\n\t\tevictorContext.key = timer.getKey();\n\t\tevictorContext.window = timer.getNamespace();\n\n\t\tMergingWindowSet<W> mergingWindows = null;\n\n\t\tif (windowAssigner instanceof MergingWindowAssigner) {\n\t\t\tmergingWindows = getMergingWindowSet();\n\t\t\tW stateWindow = mergingWindows.getStateWindow(triggerContext.window);\n\t\t\tif (stateWindow == null) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tevictingWindowState.setCurrentNamespace(stateWindow);\n\t\t\t}\n\t\t} else {\n\t\t\tevictingWindowState.setCurrentNamespace(triggerContext.window);\n\t\t}\n\n\t\tIterable<StreamRecord<IN>> contents = evictingWindowState.get();\n\n\t\tif (contents != null) {\n\t\t\tTriggerResult triggerResult = triggerContext.onProcessingTime(timer.getTimestamp());\n\t\t\tif (triggerResult.isFire()) {\n\t\t\t\temitWindowContents(triggerContext.window, contents, evictingWindowState);\n\t\t\t}\n\t\t\tif (triggerResult.isPurge()) {\n\t\t\t\tevictingWindowState.clear();\n\t\t\t}\n\t\t}\n\n\t\tif (!windowAssigner.isEventTime() && isCleanupTime(triggerContext.window, timer.getTimestamp())) {\n\t\t\tclearAllState(triggerContext.window, evictingWindowState, mergingWindows);\n\t\t}\n\n\t\tif (mergingWindows != null) {\n\t\t\t\r\n\t\t\tmergingWindows.persist();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"fdce4b2ee0b4127c296f2d1e27fe9ecbbedc1676","commitMessage":"@@@[FLINK-5363] Fire timers when window state is currently empty\n\nBefore.  a window Trigger would not be invoked if the window is empty at\nthe time of the timer firing. Now the Trigger is always invoked.\n\nAs a side effect.  this resolves FLINK-9687.\n","date":"2018-07-11 19:35:46","modifiedFileCount":"4","status":"M","submitter":"minwenjun"}]
