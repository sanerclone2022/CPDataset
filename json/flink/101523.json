[{"authorTime":"2016-06-11 08:14:07","codes":[{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void differentDataStreamSameChain() throws Exception {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5);\n\n\t\tDataStream<String> stringMap = src.map(new MapFunction<Integer, String>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map(Integer value) throws Exception {\n\t\t\t\treturn \"x \" + value;\n\t\t\t}\n\t\t});\n\n\t\tstringMap.connect(src).map(new CoMapFunction<String, Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Integer value) {\n\t\t\t\treturn String.valueOf(value + 1);\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\tenv.execute();\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","date":"2016-07-05 21:51:06","endLine":87,"groupId":"20738","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"differentDataStreamSameChain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/3a2b1845d51aa4f94e9dc16e4e0e166795412d.src","preCode":"\tpublic void differentDataStreamSameChain() throws Exception {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5);\n\n\t\tDataStream<String> stringMap = src.map(new MapFunction<Integer, String>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map(Integer value) throws Exception {\n\t\t\t\treturn \"x \" + value;\n\t\t\t}\n\t\t});\n\n\t\tstringMap.connect(src).map(new CoMapFunction<String, Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Integer value) {\n\t\t\t\treturn String.valueOf(value + 1);\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\tenv.execute();\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SelfConnectionITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void differentDataStreamDifferentChain() {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(3);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5).disableChaining();\n\n\t\tDataStream<String> stringMap = src.flatMap(new FlatMapFunction<Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void flatMap(Integer value, Collector<String> out) throws Exception {\n\t\t\t\tout.collect(\"x \" + value);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<String, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(String value) throws Exception {\n\t\t\t\treturn value.length();\n\t\t\t}\n\t\t});\n\n\t\tDataStream<Long> longMap = src.map(new MapFunction<Integer, Long>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Long map(Integer value) throws Exception {\n\t\t\t\treturn (long) (value + 1);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<Long, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Long value) throws Exception {\n\t\t\t\treturn value.intValue();\n\t\t\t}\n\t\t});\n\n\n\t\tstringMap.connect(longMap).map(new CoMapFunction<String, Long, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Long value) {\n\t\t\t\treturn value.toString();\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\ttry {\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","date":"2016-07-05 21:51:06","endLine":168,"groupId":"8597","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"differentDataStreamDifferentChain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/3a2b1845d51aa4f94e9dc16e4e0e166795412d.src","preCode":"\tpublic void differentDataStreamDifferentChain() {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(3);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5).disableChaining();\n\n\t\tDataStream<String> stringMap = src.flatMap(new FlatMapFunction<Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void flatMap(Integer value, Collector<String> out) throws Exception {\n\t\t\t\tout.collect(\"x \" + value);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<String, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(String value) throws Exception {\n\t\t\t\treturn value.length();\n\t\t\t}\n\t\t});\n\n\t\tDataStream<Long> longMap = src.map(new MapFunction<Integer, Long>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Long map(Integer value) throws Exception {\n\t\t\t\treturn (long) (value + 1);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<Long, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Long value) throws Exception {\n\t\t\t\treturn value.intValue();\n\t\t\t}\n\t\t});\n\n\n\t\tstringMap.connect(longMap).map(new CoMapFunction<String, Long, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Long value) {\n\t\t\t\treturn value.toString();\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\ttry {\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SelfConnectionITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"b9f42e91c9415dd6063079df00c142334b74e636","commitMessage":"@@@[FLINK-3995] [build] flink-test-utils also contains the streaming test utilities.\n\nTest utilities include the StreamingMultipleProgramsTestBase and StreamingTestEnvironment.\n\nThis moves the ITCases for streaming into 'flink-tests' to achieve that.\n\nThis closes #2092\n","date":"2016-07-05 21:51:06","modifiedFileCount":"12","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2018-02-28 19:15:30","codes":[{"authorDate":"2018-02-28 19:15:30","commitOrder":2,"curCode":"\tpublic void differentDataStreamSameChain() throws Exception {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5);\n\n\t\tDataStream<String> stringMap = src.map(value -> \"x \" + value);\n\n\t\tstringMap.connect(src).map(new CoMapFunction<String, Integer, String>() {\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Integer value) {\n\t\t\t\treturn String.valueOf(value + 1);\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\tenv.execute();\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","date":"2018-03-01 00:48:32","endLine":80,"groupId":"101523","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"differentDataStreamSameChain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/023a01a594bcc68f9441a8adb0d8ad47a33393.src","preCode":"\tpublic void differentDataStreamSameChain() throws Exception {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5);\n\n\t\tDataStream<String> stringMap = src.map(new MapFunction<Integer, String>() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map(Integer value) throws Exception {\n\t\t\t\treturn \"x \" + value;\n\t\t\t}\n\t\t});\n\n\t\tstringMap.connect(src).map(new CoMapFunction<String, Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Integer value) {\n\t\t\t\treturn String.valueOf(value + 1);\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\tenv.execute();\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SelfConnectionITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-02-28 19:15:30","commitOrder":2,"curCode":"\tpublic void differentDataStreamDifferentChain() throws Exception {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(3);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5).disableChaining();\n\n\t\tDataStream<String> stringMap = src\n\t\t\t\t.flatMap(new FlatMapFunction<Integer, String>() {\n\n\t\t\t@Override\n\t\t\tpublic void flatMap(Integer value, Collector<String> out) throws Exception {\n\t\t\t\tout.collect(\"x \" + value);\n\t\t\t}\n\t\t}).keyBy(String::length);\n\n\t\tDataStream<Long> longMap = src\n\t\t\t\t.map(value -> (long) (value + 1))\n\t\t\t\t.keyBy(Long::intValue);\n\n\t\tstringMap.connect(longMap).map(new CoMapFunction<String, Long, String>() {\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Long value) {\n\t\t\t\treturn value.toString();\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\tenv.execute();\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","date":"2018-03-01 00:48:32","endLine":131,"groupId":"101523","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"differentDataStreamDifferentChain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/023a01a594bcc68f9441a8adb0d8ad47a33393.src","preCode":"\tpublic void differentDataStreamDifferentChain() {\n\n\t\tTestListResultSink<String> resultSink = new TestListResultSink<String>();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(3);\n\n\t\tDataStream<Integer> src = env.fromElements(1, 3, 5).disableChaining();\n\n\t\tDataStream<String> stringMap = src.flatMap(new FlatMapFunction<Integer, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void flatMap(Integer value, Collector<String> out) throws Exception {\n\t\t\t\tout.collect(\"x \" + value);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<String, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(String value) throws Exception {\n\t\t\t\treturn value.length();\n\t\t\t}\n\t\t});\n\n\t\tDataStream<Long> longMap = src.map(new MapFunction<Integer, Long>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Long map(Integer value) throws Exception {\n\t\t\t\treturn (long) (value + 1);\n\t\t\t}\n\t\t}).keyBy(new KeySelector<Long, Integer>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Long value) throws Exception {\n\t\t\t\treturn value.intValue();\n\t\t\t}\n\t\t});\n\n\t\tstringMap.connect(longMap).map(new CoMapFunction<String, Long, String>() {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic String map1(String value) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String map2(Long value) {\n\t\t\t\treturn value.toString();\n\t\t\t}\n\t\t}).addSink(resultSink);\n\n\t\ttry {\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tList<String> expected = Arrays.asList(\"x 1\", \"x 3\", \"x 5\", \"2\", \"4\", \"6\");\n\t\tList<String> result = resultSink.getResult();\n\n\t\tCollections.sort(expected);\n\t\tCollections.sort(result);\n\n\t\tassertEquals(expected, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SelfConnectionITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"273fea4aa36123c0501845e4bc3f8777f203e596","commitMessage":"@@@[hotfix] [tests] Fix SelfConnectionITCase\n\nThe test previously did not fail on failed execution.  and thus evaluated incomplete results\nfrom a failed execution with th expected results.\n\nThis cleans up serialization warnings and uses lambdas where possible.  to make the code\nmore readable.\n","date":"2018-03-01 00:48:32","modifiedFileCount":"1","status":"M","submitter":"Stephan Ewen"}]
