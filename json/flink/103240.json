[{"authorTime":"2017-02-17 11:19:18","codes":[{"authorDate":"2017-02-14 13:39:30","commitOrder":4,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-02-15 19:21:07","endLine":175,"groupId":"30808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/29/4b8da74b7c33619918a0d756ec7d1a8f229c1e.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"NB"},{"authorDate":"2017-02-17 11:19:18","commitOrder":4,"curCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2017-02-23 23:56:29","endLine":220,"groupId":"30810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/496f2e0e41d44f2829fe7b58083a06b865c819.src","preCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"30c9e2b683bf7f4776ffc23b6a860946a4429ae5","commitMessage":"@@@[FLINK-4856] Add MapState for keyed state\n","date":"2017-02-23 23:56:29","modifiedFileCount":"22","status":"M","submitter":"xiaogang.sxg"},{"authorTime":"2020-03-12 00:53:38","codes":[{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":207,"groupId":"103240","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testListStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testListStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tListStateDescriptor<TaskInfo> descr = new ListStateDescriptor<>(\"name\", TaskInfo.class);\n\t\tcontext.getListState(descr);\n\n\t\tListStateDescriptor<?> descrIntercepted = (ListStateDescriptor<?>) descriptorCapture.get();\n\t\tTypeSerializer<?> serializer = descrIntercepted.getSerializer();\n\n\t\t\r\n\t\tassertTrue(serializer instanceof ListSerializer);\n\n\t\tTypeSerializer<?> elementSerializer = descrIntercepted.getElementSerializer();\n\t\tassertTrue(elementSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) elementSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-03-12 00:53:38","commitOrder":5,"curCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = createRuntimeContext(descriptorCapture, config);\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","date":"2020-03-25 22:06:35","endLine":242,"groupId":"103240","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMapStateInstantiation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1c/2390c90ed7a07329142bf552dbf26ec0a85aca.src","preCode":"\tpublic void testMapStateInstantiation() throws Exception {\n\n\t\tfinal ExecutionConfig config = new ExecutionConfig();\n\t\tconfig.registerKryoType(Path.class);\n\n\t\tfinal AtomicReference<Object> descriptorCapture = new AtomicReference<>();\n\n\t\tStreamingRuntimeContext context = new StreamingRuntimeContext(\n\t\t\t\tcreateDescriptorCapturingMockOp(descriptorCapture, config),\n\t\t\t\tcreateMockEnvironment(),\n\t\t\t\tCollections.<String, Accumulator<?, ?>>emptyMap());\n\n\t\tMapStateDescriptor<String, TaskInfo> descr =\n\t\t\t\tnew MapStateDescriptor<>(\"name\", String.class, TaskInfo.class);\n\n\t\tcontext.getMapState(descr);\n\n\t\tMapStateDescriptor<?, ?> descrIntercepted = (MapStateDescriptor<?, ?>) descriptorCapture.get();\n\t\tTypeSerializer<?> valueSerializer = descrIntercepted.getValueSerializer();\n\n\t\t\r\n\t\tassertTrue(valueSerializer instanceof KryoSerializer);\n\t\tassertTrue(((KryoSerializer<?>) valueSerializer).getKryo().getRegistration(Path.class).getId() > 0);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StreamingRuntimeContextTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"239088e603baede4fbbd05f75655c54bb3750fcb","commitMessage":"@@@[FLINK-16316][operators] Cut dependency between StreamingRuntimeContext and AbstractStreamOperator\n\nThis simplifies dependencies between those two classes and will allow for StreamingRuntimeContext\nto be re-used in new replacement for AbstractStreamOperator.\n","date":"2020-03-25 22:06:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"}]
