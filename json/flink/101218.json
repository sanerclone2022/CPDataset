[{"authorTime":"2016-10-05 19:49:20","codes":[{"authorDate":"2016-10-05 19:49:20","commitOrder":2,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2016-10-21 18:33:50","endLine":134,"groupId":"26080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/ade80b3728bc301fb724bd7a28d324524fb563.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"MB"},{"authorDate":"2016-10-05 19:49:20","commitOrder":2,"curCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2016-10-21 18:33:50","endLine":169,"groupId":"26081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeltaConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/ade80b3728bc301fb724bd7a28d324524fb563.src","preCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"}],"commitId":"8085aa98333a052553f1155f65b5cc2728eb5ff8","commitMessage":"@@@[FLINK-3888] allow registering a custom convergence criterion in delta iterations\n\n- cleanups in iterations and aggregators code\n- add delta convergence criterion in the CollectionExecutor\n- add ITCases for delta custom convergence\n\nThis closes #2606\n","date":"2016-10-21 18:33:50","modifiedFileCount":"8","status":"M","submitter":"vasia"},{"authorTime":"2017-05-25 03:10:33","codes":[{"authorDate":"2017-05-25 03:10:33","commitOrder":3,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-05-26 17:28:57","endLine":134,"groupId":"26080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/ced254cf0d68aba3e8e5819437d7bc29992c71.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2017-05-25 03:10:33","commitOrder":3,"curCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-05-26 17:28:57","endLine":169,"groupId":"26081","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeltaConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/ced254cf0d68aba3e8e5819437d7bc29992c71.src","preCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\t\tCollections.sort(result, new JavaProgramTestBase.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"ae2c6be5da9d491480d36975280f46b8c107a85c","commitMessage":"@@@[FLINK-6688] Activate strict checkstyle for flink-test-utils\n\nThis closes #3983.\n","date":"2017-05-26 17:28:57","modifiedFileCount":"30","status":"M","submitter":"zentol"},{"authorTime":"2017-05-31 03:40:47","codes":[{"authorDate":"2017-05-31 03:40:47","commitOrder":4,"curCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\r\n\t\tfinal String updatedElements = \"updated.elements.aggr\";\n\n\t\t\r\n\t\tfinal long convergenceThreshold = 3;\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\r\n\t\titeration.registerAggregationConvergenceCriterion(updatedElements,\n\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergenceThreshold));\n\n\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t.groupBy(0).min(1);\n\n\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t.flatMap(new MinimumIdFilter(updatedElements));\n\n\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-07-13 06:37:47","endLine":134,"groupId":"101218","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/03cd9cc3b16212b207a0d03e7d93014cad041a.src","preCode":"\tpublic void testConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tIterativeDataSet<Tuple2<Long, Long>> iteration = initialSolutionSet.iterate(10);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\t\t\t\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2017-05-31 03:40:47","commitOrder":4,"curCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\r\n\t\tfinal String updatedElements = \"updated.elements.aggr\";\n\n\t\t\r\n\t\tfinal long convergenceThreshold = 3;\n\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\r\n\t\titeration.registerAggregationConvergenceCriterion(updatedElements,\n\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergenceThreshold));\n\n\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t.groupBy(0).min(1);\n\n\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t.flatMap(new MinimumIdFilter(updatedElements));\n\n\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\tassertEquals(expectedResult, result);\n\t}\n","date":"2017-07-13 06:37:47","endLine":169,"groupId":"101218","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeltaConnectedComponentsWithParametrizableConvergence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/03cd9cc3b16212b207a0d03e7d93014cad041a.src","preCode":"\tpublic void testDeltaConnectedComponentsWithParametrizableConvergence() throws Exception {\n\n\t\t\t\r\n\t\t\tfinal String UPDATED_ELEMENTS = \"updated.elements.aggr\";\n\n\t\t\t\r\n\t\t\tfinal long convergence_threshold = 3;\n\n\t\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tDataSet<Tuple2<Long, Long>> initialSolutionSet = env.fromCollection(verticesInput);\n\t\t\tDataSet<Tuple2<Long, Long>> edges = env.fromCollection(edgesInput);\n\n\t\t\tDeltaIteration<Tuple2<Long, Long>, Tuple2<Long, Long>> iteration =\n\t\t\t\t\tinitialSolutionSet.iterateDelta(initialSolutionSet, 10, 0);\n\n\t\t\t\r\n\t\t\titeration.registerAggregationConvergenceCriterion(UPDATED_ELEMENTS,\n\t\t\t\t\tnew LongSumAggregator(), new UpdatedElementsConvergenceCriterion(convergence_threshold));\n\n\t\t\tDataSet<Tuple2<Long, Long>> verticesWithNewComponents = iteration.getWorkset().join(edges).where(0).equalTo(0)\n\t\t\t\t\t.with(new NeighborWithComponentIDJoin())\n\t\t\t\t\t.groupBy(0).min(1);\n\n\t\t\tDataSet<Tuple2<Long, Long>> updatedComponentId =\n\t\t\t\t\tverticesWithNewComponents.join(iteration.getSolutionSet()).where(0).equalTo(0)\n\t\t\t\t\t\t\t.flatMap(new MinimumIdFilter(UPDATED_ELEMENTS));\n\n\t\t\tList<Tuple2<Long, Long>> result = iteration.closeWith(updatedComponentId, updatedComponentId).collect();\n\t\t\tCollections.sort(result, new TestBaseUtils.TupleComparator<Tuple2<Long, Long>>());\n\n\t\t\tassertEquals(expectedResult, result);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/iterative/aggregators/AggregatorConvergenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"9bd491e05120915cbde36d4452e3982fe5d0975f","commitMessage":"@@@[FLINK-6731] [tests] Activate strict checkstyle for flink-tests\n\nThis closes #4295\n","date":"2017-07-13 06:37:47","modifiedFileCount":"185","status":"M","submitter":"Greg Hogan"}]
