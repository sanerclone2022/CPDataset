[{"authorTime":"2021-05-17 15:14:21","codes":[{"authorDate":"2021-05-17 15:14:21","commitOrder":1,"curCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.emitStreamStatus2(StreamStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-05-25 14:39:24","endLine":515,"groupId":"42295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdleWatermarkHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/ebd1063bc74013b40273e340a428a6438f9876.src","preCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.emitStreamStatus2(StreamStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"B"},{"authorDate":"2021-05-17 15:14:21","commitOrder":1,"curCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.emitStreamStatus1(StreamStatus.IDLE);\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(StreamStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-05-25 14:39:24","endLine":537,"groupId":"42295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdlenessForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/ebd1063bc74013b40273e340a428a6438f9876.src","preCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.emitStreamStatus1(StreamStatus.IDLE);\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(StreamStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"B"}],"commitId":"18a2a8ac70cb66389c6b56acedc40887f6c48667","commitMessage":"@@@[FLINK-18934][runtime] Idle stream does not advance watermark in connected stream\n\nWatermark in the two and multi input operators is computed in operators. So far operators were unaware of the StreamStatus.  therefore even if a whole input was IDLE it could still block increasing the Watermark.\n\nThis commit makes operators aware of the StreamStatus. The contract of the StreamStatus is that if a stream is IDLE it should not emit records nor watermarks.\n","date":"2021-05-25 14:39:24","modifiedFileCount":"41","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-06-10 18:30:24","codes":[{"authorDate":"2021-06-10 18:30:24","commitOrder":2,"curCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.processStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processStreamStatus2(StreamStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-06-17 15:33:40","endLine":515,"groupId":"42295","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdleWatermarkHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/c251aa4b7ffdf4011b4569401df1d629875f37.src","preCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.emitStreamStatus2(StreamStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"},{"authorDate":"2021-06-10 18:30:24","commitOrder":2,"curCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.processStreamStatus1(StreamStatus.IDLE);\n            testHarness.processStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(StreamStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-06-17 15:33:40","endLine":537,"groupId":"42295","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdlenessForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/c251aa4b7ffdf4011b4569401df1d629875f37.src","preCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.emitStreamStatus1(StreamStatus.IDLE);\n            testHarness.emitStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(StreamStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"2b2f943fa05b616b343d437aec7685f6aac33752","commitMessage":"@@@[hotfix] Rename Input#emitStreamStatus to processStreamStatus\n\nThis closes #16145\n","date":"2021-06-17 15:33:40","modifiedFileCount":"23","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-08-13 20:11:51","codes":[{"authorDate":"2021-08-13 20:11:51","commitOrder":3,"curCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.processWatermarkStatus2(WatermarkStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermarkStatus2(WatermarkStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-08-17 01:05:54","endLine":515,"groupId":"103281","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testIdleWatermarkHandling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5ce9ed9b535018ed4c7fb7b94c5b13e6cc4e5e.src","preCode":"    public void testIdleWatermarkHandling() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n            testHarness.processElement1(1L, 1L);\n            testHarness.processElement1(3L, 3L);\n            testHarness.processElement1(4L, 4L);\n            testHarness.processWatermark1(new Watermark(1L));\n            assertThat(testHarness.getOutput(), empty());\n\n            testHarness.processStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(new StreamRecord<>(1L));\n            expectedOutput.add(new Watermark(1L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processWatermark1(new Watermark(3L));\n            expectedOutput.add(new StreamRecord<>(3L));\n            expectedOutput.add(new Watermark(3L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n\n            testHarness.processStreamStatus2(StreamStatus.ACTIVE);\n            \r\n            testHarness.processWatermark1(new Watermark(4L));\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"},{"authorDate":"2021-08-13 20:11:51","commitOrder":3,"curCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.processWatermarkStatus1(WatermarkStatus.IDLE);\n            testHarness.processWatermarkStatus2(WatermarkStatus.IDLE);\n            expectedOutput.add(WatermarkStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","date":"2021-08-17 01:05:54","endLine":537,"groupId":"103281","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testIdlenessForwarding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5ce9ed9b535018ed4c7fb7b94c5b13e6cc4e5e.src","preCode":"    public void testIdlenessForwarding() throws Exception {\n        final WatermarkTestingOperator testOperator = new WatermarkTestingOperator();\n        ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n        KeySelector<Long, Integer> dummyKeySelector = l -> 0;\n        try (KeyedTwoInputStreamOperatorTestHarness<Integer, Long, Long, Long> testHarness =\n                new KeyedTwoInputStreamOperatorTestHarness<>(\n                        testOperator,\n                        dummyKeySelector,\n                        dummyKeySelector,\n                        BasicTypeInfo.INT_TYPE_INFO)) {\n            testHarness.setup();\n            testHarness.open();\n\n            testHarness.processStreamStatus1(StreamStatus.IDLE);\n            testHarness.processStreamStatus2(StreamStatus.IDLE);\n            expectedOutput.add(StreamStatus.IDLE);\n            TestHarnessUtil.assertOutputEquals(\n                    \"Output was not correct\", expectedOutput, testHarness.getOutput());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"474808d5833398247aa27a5544abf09d6bd17ee4","commitMessage":"@@@[FLINK-23767][streaming] Rename StreamStatus to WatermarkStatus.\n\ngit grep -l 'streamStatus' | xargs sed -i '' -e 's/streamStatus/watermarkStatus/g'\ngit grep -l 'StreamStatus' | xargs sed -i '' -e 's/StreamStatus/WatermarkStatus/g'\ngit grep -l 'streamstatus' | xargs sed -i '' -e 's/streamstatus/watermarkstatus/g'\ngit grep -l 'Stream Status' | xargs sed -i '' -e 's/Stream Status/Watermark Status/g'\ngit grep -l 'Stream status' | xargs sed -i '' -e 's/Stream status/Watermark status/g'\ngit grep -l 'stream status' | xargs sed -i '' -e 's/stream status/watermark status/g'\nRenamed class StreamStatus(Test) -> WatermarkStatus(Test)\nRenamed package streamstatus -> watermarkstatus\nReverted Kinesis as it does have a real StreamStatus\nmvn spotless:apply\n","date":"2021-08-17 01:05:54","modifiedFileCount":"66","status":"M","submitter":"Arvid Heise"}]
