[{"authorTime":"2016-11-24 01:00:23","codes":[{"authorDate":"2016-10-21 02:26:24","commitOrder":10,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2016-10-27 05:26:28","endLine":501,"groupId":"8365","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2a/132942d369ee684821c2ab50c56bc03de19d49.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"NB"},{"authorDate":"2016-11-24 01:00:23","commitOrder":10,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-02-18 00:15:51","endLine":646,"groupId":"8365","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a9/c3ef65aa31ef01123e1fb5b04ae96664f2b8e7.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"B"}],"commitId":"1dcb2dcd8969941988a4fc7e5488e9272dfd507e","commitMessage":"@@@[FLINK-4997] [streaming] Introduce ProcessWindowFunction\n","date":"2017-02-18 00:15:51","modifiedFileCount":"8","status":"M","submitter":"Ventura Del Monte"},{"authorTime":"2017-03-01 22:36:17","codes":[{"authorDate":"2017-03-01 22:36:17","commitOrder":11,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":587,"groupId":"8365","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"M"},{"authorDate":"2017-03-01 22:36:17","commitOrder":11,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-03-18 14:44:17","endLine":658,"groupId":"8365","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/8cb2e5ab2d2a952536d4a8fcb6d0fb155beb81.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0);\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"07a15d0e1647c79ae010ca6df5b1830a4087dd56","commitMessage":"@@@[FLINK-4460] Provide late-data output for window operations\n\nWe use side outputs to emit dropped late data.\n","date":"2017-03-18 14:44:17","modifiedFileCount":"8","status":"M","submitter":"Chen Qin"},{"authorTime":"2017-05-17 20:01:04","codes":[{"authorDate":"2017-05-17 20:01:04","commitOrder":12,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":582,"groupId":"8365","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"},{"authorDate":"2017-05-17 20:01:04","commitOrder":12,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-05-23 04:22:24","endLine":653,"groupId":"8365","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/c6c6f9aeb78646d1c634a18d5b21eaf608a346.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int SESSION_SIZE = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"}],"commitId":"12b4185c6c09101b64e12a84c33dc4d28f95cff9","commitMessage":"@@@[FLINK-6603] [streaming] Enable checkstyle on test sources\n\nUpdates / reverts the import order by sections:\n- org.apache.flink.*\n- all other imports\n- javax.*\n- java.*\n- static imports\n\nAdds EmptyLineSeparator to enforce an extra newline (not enforced\nbetween field or local variable declarations).\n\nThis closes #3941\n","date":"2017-05-23 04:22:24","modifiedFileCount":"395","status":"M","submitter":"Greg Hogan"},{"authorTime":"2017-12-20 19:27:56","codes":[{"authorDate":"2017-12-20 19:27:56","commitOrder":13,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":587,"groupId":"39638","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"},{"authorDate":"2017-12-20 19:27:56","commitOrder":13,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-01-06 12:30:12","endLine":660,"groupId":"39638","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c0/3207e7f1634926b7c5327931ad5fb6f82d91d2.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"091a37052b7045b3ed28c68bfea109024a5d1871","commitMessage":"@@@[FLINK-8298][tests] Properly shutdown MockEnvironment to release resources\n\nThis closes #5193.\n","date":"2018-01-06 12:30:12","modifiedFileCount":"9","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":14,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":593,"groupId":"48213","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/264808dbe43c1dfa5ed97618ebb8e0debe21ec.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"},{"authorDate":"2018-02-23 17:36:09","commitOrder":14,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":666,"groupId":"48213","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/264808dbe43c1dfa5ed97618ebb8e0debe21ec.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":15,"curCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":579,"groupId":"102611","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testReduceSessionWindows() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"},{"authorDate":"2018-05-04 23:15:51","commitOrder":15,"curCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":650,"groupId":"102611","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceSessionWindowsWithProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/28e4057503dad900453e1a33a86d3f5303b660.src","preCode":"\tpublic void testReduceSessionWindowsWithProcessFunction() throws Exception {\n\t\tcloseCalled.set(0);\n\n\t\tfinal int sessionSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\n\t\t\t\t\"window-contents\", new SumReducer(), inputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tEventTimeSessionWindows.withGap(Time.seconds(sessionSize)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueProcessWindowFunction<>(new ReducedProcessSessionWindowFunction()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =\n\t\t\t\tcreateTestHarness(operator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 3), 2500));\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L);\n\t\ttestHarness.close();\n\n\t\ttestHarness = createTestHarness(operator);\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(snapshot);\n\t\ttestHarness.open();\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 10));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 2), 1000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 3), 2500));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 4), 5501));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 5), 6000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 6), 6050));\n\n\t\ttestHarness.processWatermark(new Watermark(12000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key1-6\", 10L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-6\", 0L, 5500L), 5499));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-20\", 5501L, 9050L), 9049));\n\t\texpectedOutput.add(new Watermark(12000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 10), 15000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 20), 15000));\n\n\t\ttestHarness.processWatermark(new Watermark(17999));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple3<>(\"key2-30\", 15000L, 18000L), 17999));\n\t\texpectedOutput.add(new Watermark(17999));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator());\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
