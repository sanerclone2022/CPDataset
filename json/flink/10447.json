[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","date":"2020-05-18 12:30:38","endLine":239,"groupId":"45277","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAppend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/f7f77f21bbf1dd474c1b2e328edd470463cd2a.src","preCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":2,"curCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":229,"groupId":"45277","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"NB"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-06-17 14:23:46","codes":[{"authorDate":"2020-06-17 14:23:46","commitOrder":3,"curCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":248,"groupId":"10447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAppend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f9/353ed3385ac36eae9dbc15e36f2540b8a9ae2a.src","preCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2020-06-17 14:23:46","commitOrder":3,"curCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":221,"groupId":"10447","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/2705f2a28cad6a6d0b3aa3970eab2e4fd93893.src","preCode":"\tpublic void testAppend() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.getConfig().setParallelism(1);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.registerTable(\"T\", t);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  id INT,\" +\n\t\t\t\t\"  num BIGINT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE2 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\n\t\t\t\t\"INSERT INTO upsertSink SELECT id, num, ts FROM T WHERE id IN (2, 10, 20)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(2, 2, Timestamp.valueOf(\"1970-01-01 00:00:00.002\")),\n\t\t\t\tRow.of(10, 4, Timestamp.valueOf(\"1970-01-01 00:00:00.01\")),\n\t\t\t\tRow.of(20, 6, Timestamp.valueOf(\"1970-01-01 00:00:00.02\"))\n\t\t}, DB_URL, OUTPUT_TABLE2, new String[]{\"id\", \"num\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"6f2a0412c0eb00adeb494fcc1d68481bdf2dd7b8","commitMessage":"@@@[FLINK-18337][table] Introduce TableResult#await method to block until data is ready or job finished\n\nThis closes #12688.\n","date":"2020-09-07 17:35:17","modifiedFileCount":"26","status":"M","submitter":"godfreyhe"}]
