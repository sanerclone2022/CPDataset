[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(FAMILY1, ROW(FIELD(COL1, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL2, BIGINT())))\n\t\t\t.field(ROWKEY, BIGINT())\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSource source = createTableSource(schema, getAllOptions());\n\t\tassertTrue(source instanceof HBaseDynamicTableSource);\n\t\tHBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n\t\tint[][] lookupKey = {{2}};\n\t\tLookupTableSource.LookupRuntimeProvider lookupProvider = hbaseSource\n\t\t\t.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n\t\tassertTrue(lookupProvider instanceof TableFunctionProvider);\n\n\t\tTableFunction tableFunction = ((TableFunctionProvider) lookupProvider).createTableFunction();\n\t\tassertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n\t\tassertEquals(\"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n\t\tassertEquals(2, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(new DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\t}\n","date":"2020-09-28 22:08:46","endLine":132,"groupId":"35539","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSourceFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/901c3d05395f562737a683b679f849a884387d.src","preCode":"\tpublic void testTableSourceFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(FAMILY1, ROW(FIELD(COL1, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL2, BIGINT())))\n\t\t\t.field(ROWKEY, BIGINT())\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSource source = createTableSource(schema, getAllOptions());\n\t\tassertTrue(source instanceof HBaseDynamicTableSource);\n\t\tHBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n\t\tint[][] lookupKey = {{2}};\n\t\tLookupTableSource.LookupRuntimeProvider lookupProvider = hbaseSource\n\t\t\t.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n\t\tassertTrue(lookupProvider instanceof TableFunctionProvider);\n\n\t\tTableFunction tableFunction = ((TableFunctionProvider) lookupProvider).createTableFunction();\n\t\tassertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n\t\tassertEquals(\"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n\t\tassertEquals(2, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(new DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(FAMILY1, ROW(FIELD(COL1, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL2, BIGINT())))\n\t\t\t.field(ROWKEY, BIGINT())\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSource source = createTableSource(schema, getAllOptions());\n\t\tassertTrue(source instanceof HBaseDynamicTableSource);\n\t\tHBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n\t\tint[][] lookupKey = {{2}};\n\t\tLookupTableSource.LookupRuntimeProvider lookupProvider = hbaseSource\n\t\t\t.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n\t\tassertTrue(lookupProvider instanceof TableFunctionProvider);\n\n\t\tTableFunction tableFunction = ((TableFunctionProvider) lookupProvider).createTableFunction();\n\t\tassertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n\t\tassertEquals(\"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n\t\tassertEquals(2, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(new DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\t}\n","date":"2020-09-28 22:08:46","endLine":131,"groupId":"35539","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/530b5007173ea1185e43fbaa19f41ce2bb880b.src","preCode":"\tpublic void testTableSourceFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(FAMILY1, ROW(FIELD(COL1, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL2, BIGINT())))\n\t\t\t.field(ROWKEY, BIGINT())\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSource source = createTableSource(schema, getAllOptions());\n\t\tassertTrue(source instanceof HBaseDynamicTableSource);\n\t\tHBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n\t\tint[][] lookupKey = {{2}};\n\t\tLookupTableSource.LookupRuntimeProvider lookupProvider = hbaseSource\n\t\t\t.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n\t\tassertTrue(lookupProvider instanceof TableFunctionProvider);\n\n\t\tTableFunction tableFunction = ((TableFunctionProvider) lookupProvider).createTableFunction();\n\t\tassertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n\t\tassertEquals(\"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n\t\tassertEquals(2, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(new DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testTableSourceFactory() {\n        ResolvedSchema schema =\n                ResolvedSchema.of(\n                        Column.physical(FAMILY1, ROW(FIELD(COL1, INT()))),\n                        Column.physical(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL2, BIGINT()))),\n                        Column.physical(ROWKEY, BIGINT()),\n                        Column.physical(\n                                FAMILY3,\n                                ROW(\n                                        FIELD(COL1, DOUBLE()),\n                                        FIELD(COL2, BOOLEAN()),\n                                        FIELD(COL3, STRING()))),\n                        Column.physical(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME()))));\n\n        DynamicTableSource source = createTableSource(schema, getAllOptions());\n        assertTrue(source instanceof HBaseDynamicTableSource);\n        HBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n        int[][] lookupKey = {{2}};\n        LookupTableSource.LookupRuntimeProvider lookupProvider =\n                hbaseSource.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n        assertTrue(lookupProvider instanceof TableFunctionProvider);\n\n        TableFunction tableFunction =\n                ((TableFunctionProvider) lookupProvider).createTableFunction();\n        assertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n        assertEquals(\n                \"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n        HBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n        assertEquals(2, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(new DataType[] {INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), BOOLEAN(), STRING()},\n                hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n    }\n","date":"2021-03-24 04:35:35","endLine":142,"groupId":"10755","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testTableSourceFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/e30b0ef9f731868cb04af619ced127647ee4a9.src","preCode":"    public void testTableSourceFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(FAMILY1, ROW(FIELD(COL1, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL2, BIGINT())))\n                        .field(ROWKEY, BIGINT())\n                        .field(\n                                FAMILY3,\n                                ROW(\n                                        FIELD(COL1, DOUBLE()),\n                                        FIELD(COL2, BOOLEAN()),\n                                        FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSource source = createTableSource(schema, getAllOptions());\n        assertTrue(source instanceof HBaseDynamicTableSource);\n        HBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n        int[][] lookupKey = {{2}};\n        LookupTableSource.LookupRuntimeProvider lookupProvider =\n                hbaseSource.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n        assertTrue(lookupProvider instanceof TableFunctionProvider);\n\n        TableFunction tableFunction =\n                ((TableFunctionProvider) lookupProvider).createTableFunction();\n        assertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n        assertEquals(\n                \"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n        HBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n        assertEquals(2, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(new DataType[] {INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), BOOLEAN(), STRING()},\n                hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":2,"curCode":"    public void testTableSourceFactory() {\n        ResolvedSchema schema =\n                ResolvedSchema.of(\n                        Column.physical(FAMILY1, ROW(FIELD(COL1, INT()))),\n                        Column.physical(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL2, BIGINT()))),\n                        Column.physical(ROWKEY, BIGINT()),\n                        Column.physical(\n                                FAMILY3,\n                                ROW(\n                                        FIELD(COL1, DOUBLE()),\n                                        FIELD(COL2, BOOLEAN()),\n                                        FIELD(COL3, STRING()))),\n                        Column.physical(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME()))));\n\n        DynamicTableSource source = createTableSource(schema, getAllOptions());\n        assertTrue(source instanceof HBaseDynamicTableSource);\n        HBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n        int[][] lookupKey = {{2}};\n        LookupTableSource.LookupRuntimeProvider lookupProvider =\n                hbaseSource.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n        assertTrue(lookupProvider instanceof TableFunctionProvider);\n\n        TableFunction tableFunction =\n                ((TableFunctionProvider) lookupProvider).createTableFunction();\n        assertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n        assertEquals(\n                \"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n        HBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n        assertEquals(2, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(new DataType[] {INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), BOOLEAN(), STRING()},\n                hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n    }\n","date":"2021-03-24 04:35:35","endLine":145,"groupId":"10755","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTableSourceFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/0f900ab3c93f31c066c5e1f6e33610e2919d10.src","preCode":"    public void testTableSourceFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(FAMILY1, ROW(FIELD(COL1, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL2, BIGINT())))\n                        .field(ROWKEY, BIGINT())\n                        .field(\n                                FAMILY3,\n                                ROW(\n                                        FIELD(COL1, DOUBLE()),\n                                        FIELD(COL2, BOOLEAN()),\n                                        FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSource source = createTableSource(schema, getAllOptions());\n        assertTrue(source instanceof HBaseDynamicTableSource);\n        HBaseDynamicTableSource hbaseSource = (HBaseDynamicTableSource) source;\n\n        int[][] lookupKey = {{2}};\n        LookupTableSource.LookupRuntimeProvider lookupProvider =\n                hbaseSource.getLookupRuntimeProvider(new LookupRuntimeProviderContext(lookupKey));\n        assertTrue(lookupProvider instanceof TableFunctionProvider);\n\n        TableFunction tableFunction =\n                ((TableFunctionProvider) lookupProvider).createTableFunction();\n        assertTrue(tableFunction instanceof HBaseRowDataLookupFunction);\n        assertEquals(\n                \"testHBastTable\", ((HBaseRowDataLookupFunction) tableFunction).getHTableName());\n\n        HBaseTableSchema hbaseSchema = hbaseSource.getHBaseTableSchema();\n        assertEquals(2, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(Types.LONG), hbaseSchema.getRowKeyTypeInfo());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c1\", \"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(new DataType[] {INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), BOOLEAN(), STRING()},\n                hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"}]
