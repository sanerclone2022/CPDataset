[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceReadAsByteArray() throws Exception {\n\t\tTableEnvironment tEnv = createBatchTableEnv();\n\n\t\tif (isLegacyConnector) {\n\t\t\t\r\n\t\t\tHBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n\t\t\thbaseTable.setRowKey(ROW_KEY, Integer.class);\n\t\t\t((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n\t\t} else {\n\t\t\ttEnv.executeSql(\n\t\t\t\t\t\"CREATE TABLE hTable (\" +\n\t\t\t\t\t\" family2 ROW<col1 BYTES, col2 BYTES>,\" +\n\t\t\t\t\t\" rowkey INT\" + \r\n\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\" 'connector' = 'hbase-1.4',\" +\n\t\t\t\t\t\" 'table-name' = '\" + TEST_TABLE_1 + \"',\" +\n\t\t\t\t\t\" 'zookeeper.quorum' = '\" + getZookeeperQuorum() + \"'\" +\n\t\t\t\t\t\")\");\n\t\t}\n\t\ttEnv.registerFunction(\"toUTF8\", new ToUTF8());\n\t\ttEnv.registerFunction(\"toLong\", new ToLong());\n\n\t\tTable table = tEnv.sqlQuery(\n\t\t\t\"SELECT \" +\n\t\t\t\t\"  toUTF8(h.family2.col1), \" +\n\t\t\t\t\"  toLong(h.family2.col2) \" +\n\t\t\t\t\"FROM hTable AS h\"\n\t\t);\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\"Hello-1,100\\n\" +\n\t\t\t\t\"Hello-2,200\\n\" +\n\t\t\t\t\"Hello-3,300\\n\" +\n\t\t\t\t\"null,400\\n\" +\n\t\t\t\t\"Hello-5,500\\n\" +\n\t\t\t\t\"Hello-6,600\\n\" +\n\t\t\t\t\"Hello-7,700\\n\" +\n\t\t\t\t\"null,800\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","date":"2020-09-28 22:08:46","endLine":321,"groupId":"45159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/95e053e619c5bf26b1781f718b867227e1e938.src","preCode":"\tpublic void testTableSourceReadAsByteArray() throws Exception {\n\t\tTableEnvironment tEnv = createBatchTableEnv();\n\n\t\tif (isLegacyConnector) {\n\t\t\t\r\n\t\t\tHBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n\t\t\thbaseTable.setRowKey(ROW_KEY, Integer.class);\n\t\t\t((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n\t\t} else {\n\t\t\ttEnv.executeSql(\n\t\t\t\t\t\"CREATE TABLE hTable (\" +\n\t\t\t\t\t\" family2 ROW<col1 BYTES, col2 BYTES>,\" +\n\t\t\t\t\t\" rowkey INT\" + \r\n\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\" 'connector' = 'hbase-1.4',\" +\n\t\t\t\t\t\" 'table-name' = '\" + TEST_TABLE_1 + \"',\" +\n\t\t\t\t\t\" 'zookeeper.quorum' = '\" + getZookeeperQuorum() + \"'\" +\n\t\t\t\t\t\")\");\n\t\t}\n\t\ttEnv.registerFunction(\"toUTF8\", new ToUTF8());\n\t\ttEnv.registerFunction(\"toLong\", new ToLong());\n\n\t\tTable table = tEnv.sqlQuery(\n\t\t\t\"SELECT \" +\n\t\t\t\t\"  toUTF8(h.family2.col1), \" +\n\t\t\t\t\"  toLong(h.family2.col2) \" +\n\t\t\t\t\"FROM hTable AS h\"\n\t\t);\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\"Hello-1,100\\n\" +\n\t\t\t\t\"Hello-2,200\\n\" +\n\t\t\t\t\"Hello-3,300\\n\" +\n\t\t\t\t\"null,400\\n\" +\n\t\t\t\t\"Hello-5,500\\n\" +\n\t\t\t\t\"Hello-6,600\\n\" +\n\t\t\t\t\"Hello-7,700\\n\" +\n\t\t\t\t\"null,800\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSourceReadAsByteArray() throws Exception {\n\t\tTableEnvironment tEnv = createBatchTableEnv();\n\n\t\tif (isLegacyConnector) {\n\t\t\t\r\n\t\t\tHBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n\t\t\thbaseTable.setRowKey(ROW_KEY, Integer.class);\n\t\t\t((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n\t\t} else {\n\t\t\ttEnv.executeSql(\n\t\t\t\t\t\"CREATE TABLE hTable (\" +\n\t\t\t\t\t\t\t\" family2 ROW<col1 BYTES, col2 BYTES>,\" +\n\t\t\t\t\t\t\t\" rowkey INT\" + \r\n\t\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\t\" 'connector' = 'hbase-2.2',\" +\n\t\t\t\t\t\t\t\" 'table-name' = '\" + TEST_TABLE_1 + \"',\" +\n\t\t\t\t\t\t\t\" 'zookeeper.quorum' = '\" + getZookeeperQuorum() + \"'\" +\n\t\t\t\t\t\")\");\n\t\t}\n\t\ttEnv.registerFunction(\"toUTF8\", new ToUTF8());\n\t\ttEnv.registerFunction(\"toLong\", new ToLong());\n\n\t\tTable table = tEnv.sqlQuery(\n\t\t\t\t\"SELECT \" +\n\t\t\t\t\t\t\"  toUTF8(h.family2.col1), \" +\n\t\t\t\t\t\t\"  toLong(h.family2.col2) \" +\n\t\t\t\t\t\t\"FROM hTable AS h\"\n\t\t\t\t);\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"Hello-1,100\\n\" +\n\t\t\t\t\t\t\"Hello-2,200\\n\" +\n\t\t\t\t\t\t\"Hello-3,300\\n\" +\n\t\t\t\t\t\t\"null,400\\n\" +\n\t\t\t\t\t\t\"Hello-5,500\\n\" +\n\t\t\t\t\t\t\"Hello-6,600\\n\" +\n\t\t\t\t\t\t\"Hello-7,700\\n\" +\n\t\t\t\t\t\t\"null,800\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","date":"2020-09-28 22:08:46","endLine":322,"groupId":"45159","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/fc1ee3d7be85cca2a8be09b35b18f7e490ab40.src","preCode":"\tpublic void testTableSourceReadAsByteArray() throws Exception {\n\t\tTableEnvironment tEnv = createBatchTableEnv();\n\n\t\tif (isLegacyConnector) {\n\t\t\t\r\n\t\t\tHBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n\t\t\thbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n\t\t\thbaseTable.setRowKey(ROW_KEY, Integer.class);\n\t\t\t((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n\t\t} else {\n\t\t\ttEnv.executeSql(\n\t\t\t\t\t\"CREATE TABLE hTable (\" +\n\t\t\t\t\t\t\t\" family2 ROW<col1 BYTES, col2 BYTES>,\" +\n\t\t\t\t\t\t\t\" rowkey INT\" + \r\n\t\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\t\" 'connector' = 'hbase-2.2',\" +\n\t\t\t\t\t\t\t\" 'table-name' = '\" + TEST_TABLE_1 + \"',\" +\n\t\t\t\t\t\t\t\" 'zookeeper.quorum' = '\" + getZookeeperQuorum() + \"'\" +\n\t\t\t\t\t\")\");\n\t\t}\n\t\ttEnv.registerFunction(\"toUTF8\", new ToUTF8());\n\t\ttEnv.registerFunction(\"toLong\", new ToLong());\n\n\t\tTable table = tEnv.sqlQuery(\n\t\t\t\t\"SELECT \" +\n\t\t\t\t\t\t\"  toUTF8(h.family2.col1), \" +\n\t\t\t\t\t\t\"  toLong(h.family2.col2) \" +\n\t\t\t\t\t\t\"FROM hTable AS h\"\n\t\t\t\t);\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"Hello-1,100\\n\" +\n\t\t\t\t\t\t\"Hello-2,200\\n\" +\n\t\t\t\t\t\t\"Hello-3,300\\n\" +\n\t\t\t\t\t\t\"null,400\\n\" +\n\t\t\t\t\t\t\"Hello-5,500\\n\" +\n\t\t\t\t\t\t\"Hello-6,600\\n\" +\n\t\t\t\t\t\t\"Hello-7,700\\n\" +\n\t\t\t\t\t\t\"null,800\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-1.4',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-01-08 00:17:30","endLine":352,"groupId":"45159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/8a555806cf37812deea4e55d1eb923e508d909.src","preCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-1.4',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"Hello-1,100\\n\"\n                        + \"Hello-2,200\\n\"\n                        + \"Hello-3,300\\n\"\n                        + \"null,400\\n\"\n                        + \"Hello-5,500\\n\"\n                        + \"Hello-6,600\\n\"\n                        + \"Hello-7,700\\n\"\n                        + \"null,800\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-2.2',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-01-08 00:17:30","endLine":354,"groupId":"45159","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/b9fe68286edf0de3b2893f3d03baffea91cfc0.src","preCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-2.2',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"Hello-1,100\\n\"\n                        + \"Hello-2,200\\n\"\n                        + \"Hello-3,300\\n\"\n                        + \"null,400\\n\"\n                        + \"Hello-5,500\\n\"\n                        + \"Hello-6,600\\n\"\n                        + \"Hello-7,700\\n\"\n                        + \"null,800\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-05-11 23:29:15","codes":[{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSourceReadAsByteArray() {\n        TableEnvironment tEnv = TableEnvironment.create(batchSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE hTable (\"\n                        + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                        + \" rowkey INT\"\n                        + \r\n                        \") WITH (\"\n                        + \" 'connector' = 'hbase-1.4',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-05-18 19:59:43","endLine":225,"groupId":"10767","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1a/d2dd2d196495dada8ff95f9e5d245a82edfaa4.src","preCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-1.4',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSourceReadAsByteArray() {\n        TableEnvironment tEnv = TableEnvironment.create(batchSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE hTable (\"\n                        + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                        + \" rowkey INT\"\n                        + \r\n                        \") WITH (\"\n                        + \" 'connector' = 'hbase-2.2',\"\n                        + \" 'table-name' = '\"\n                        + TEST_TABLE_1\n                        + \"',\"\n                        + \" 'zookeeper.quorum' = '\"\n                        + getZookeeperQuorum()\n                        + \"'\"\n                        + \")\");\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-05-18 19:59:43","endLine":228,"groupId":"10767","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSourceReadAsByteArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/633161cafadb4faec63a4d8e2e9e03f2c00381.src","preCode":"    public void testTableSourceReadAsByteArray() throws Exception {\n        TableEnvironment tEnv = createBatchTableEnv();\n\n        if (isLegacyConnector) {\n            \r\n            HBaseTableSource hbaseTable = new HBaseTableSource(getConf(), TEST_TABLE_1);\n            hbaseTable.addColumn(FAMILY2, F2COL1, byte[].class);\n            hbaseTable.addColumn(FAMILY2, F2COL2, byte[].class);\n            hbaseTable.setRowKey(ROW_KEY, Integer.class);\n            ((TableEnvironmentInternal) tEnv).registerTableSourceInternal(\"hTable\", hbaseTable);\n        } else {\n            tEnv.executeSql(\n                    \"CREATE TABLE hTable (\"\n                            + \" family2 ROW<col1 BYTES, col2 BYTES>,\"\n                            + \" rowkey INT\"\n                            + \r\n                            \") WITH (\"\n                            + \" 'connector' = 'hbase-2.2',\"\n                            + \" 'table-name' = '\"\n                            + TEST_TABLE_1\n                            + \"',\"\n                            + \" 'zookeeper.quorum' = '\"\n                            + getZookeeperQuorum()\n                            + \"'\"\n                            + \")\");\n        }\n        tEnv.registerFunction(\"toUTF8\", new ToUTF8());\n        tEnv.registerFunction(\"toLong\", new ToLong());\n\n        Table table =\n                tEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  toUTF8(h.family2.col1), \"\n                                + \"  toLong(h.family2.col2) \"\n                                + \"FROM hTable AS h\");\n\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[Hello-1, 100]\\n\"\n                        + \"+I[Hello-2, 200]\\n\"\n                        + \"+I[Hello-3, 300]\\n\"\n                        + \"+I[null, 400]\\n\"\n                        + \"+I[Hello-5, 500]\\n\"\n                        + \"+I[Hello-6, 600]\\n\"\n                        + \"+I[Hello-7, 700]\\n\"\n                        + \"+I[null, 800]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"97610190fbdf4899e7d9aa8888971a0423fb7d81","commitMessage":"@@@[FLINK-22623][hbase] Drop BatchTableSource/Sink HBaseTableSource/Sink and related classes\n\nThis removes the HBaseTableSource/Sink and related classes including various HBaseInputFormats and\nHBaseSinkFunction. It is possible to read via Table & SQL API and convert the Table to DataStream API\n(or vice versa) if necessary. DataSet API is not supported anymore.\n\nThis closes #15905.\n","date":"2021-05-18 19:59:43","modifiedFileCount":"5","status":"M","submitter":"Timo Walther"}]
