[{"authorTime":"2015-08-18 17:11:13","codes":[{"authorDate":"2015-08-18 17:11:13","commitOrder":1,"curCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup();\n\n\t\tPlan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),\n\t\t\t\tIN_FILE, IN_FILE, OUT_FILE, String.valueOf(100));\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","date":"2015-08-18 22:37:41","endLine":136,"groupId":"29073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorksetConnectedComponents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/de/5fde0bbc667f3771683da394d2c5c067ba4f17.src","preCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup();\n\n\t\tPlan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),\n\t\t\t\tIN_FILE, IN_FILE, OUT_FILE, String.valueOf(100));\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/iterations/ConnectedComponentsCoGroupTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2015-08-18 17:11:13","commitOrder":1,"curCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","date":"2015-08-18 22:37:41","endLine":327,"groupId":"11858","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBroadcastMergeJoin","params":"(DualInputPlanNodejoin@SingleInputPlanNodereducer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/8486bb48e286248c456e97f631ad02d0bc43e1.src","preCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/examples/RelationalQueryCompilerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"}],"commitId":"09fdfda7f25cf95426bc43ca33ed7bb39c7d353a","commitMessage":"@@@[tests] Rename 'compiler' tests to 'optimizer' tests for consistent naming\n","date":"2015-08-18 22:37:41","modifiedFileCount":"1","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2015-08-12 03:40:21","codes":[{"authorDate":"2015-08-12 03:40:21","commitOrder":2,"curCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup();\n\n\t\tPlan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),\n\t\t\t\tIN_FILE, IN_FILE, OUT_FILE, String.valueOf(100));\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.INNER_MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","date":"2015-09-08 22:57:51","endLine":136,"groupId":"29073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorksetConnectedComponents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/402a5545c7b56e3544737c93b81e507669001e.src","preCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup();\n\n\t\tPlan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),\n\t\t\t\tIN_FILE, IN_FILE, OUT_FILE, String.valueOf(100));\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/iterations/ConnectedComponentsCoGroupTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2015-08-12 03:40:21","commitOrder":2,"curCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.INNER_MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","date":"2015-09-08 22:57:51","endLine":327,"groupId":"11858","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBroadcastMergeJoin","params":"(DualInputPlanNodejoin@SingleInputPlanNodereducer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f4/efb8a9abbed14b53419a9380aba79b86bf9bdc.src","preCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/examples/RelationalQueryCompilerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"2da82f9154f9563e3fe8454e153d372b4bf18996","commitMessage":"@@@[FLINK-2106] [runtime] Rename DriverStrategy.MERGE to DriverStrategy.INNER_MERGE\n\nThis closes #1052\n","date":"2015-09-08 22:57:51","modifiedFileCount":"10","status":"M","submitter":"r-pogalz"},{"authorTime":"2015-08-12 03:40:21","codes":[{"authorDate":"2015-10-28 04:22:38","commitOrder":3,"curCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tPlan plan = getConnectedComponentsCoGroupPlan();\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.INNER_MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","date":"2015-11-25 01:16:51","endLine":146,"groupId":"29073","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorksetConnectedComponents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e1/34c7abff3dbec4035e9a729607e9bcfa909802.src","preCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tConnectedComponentsWithCoGroup cc = new ConnectedComponentsWithCoGroup();\n\n\t\tPlan plan = cc.getPlan(String.valueOf(DEFAULT_PARALLELISM),\n\t\t\t\tIN_FILE, IN_FILE, OUT_FILE, String.valueOf(100));\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\t\t\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\t\t\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\t\t\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\t\t\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.INNER_MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\t\t\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\t\t\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\t\t\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\t\t\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\t\t\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\t\t\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/iterations/ConnectedComponentsCoGroupTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2015-08-12 03:40:21","commitOrder":3,"curCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.INNER_MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","date":"2015-09-08 22:57:51","endLine":327,"groupId":"11858","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBroadcastMergeJoin","params":"(DualInputPlanNodejoin@SingleInputPlanNodereducer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f4/efb8a9abbed14b53419a9380aba79b86bf9bdc.src","preCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.INNER_MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/examples/RelationalQueryCompilerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"8abae2c2f2a0a7b6a39880b90467b5209e65117d","commitMessage":"@@@[FLINK-2901] Remove Record API dependencies from flink-tests #1\n","date":"2015-11-25 01:16:51","modifiedFileCount":"19","status":"M","submitter":"zentol"},{"authorTime":"2015-08-12 03:40:21","codes":[{"authorDate":"2019-12-19 20:15:41","commitOrder":4,"curCode":"\tpublic void testWorksetConnectedComponents() throws Exception {\n\t\tPlan plan = getConnectedComponentsCoGroupPlan();\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\n\t\tAssert.assertEquals(DriverStrategy.INNER_MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","date":"2019-12-19 20:15:41","endLine":144,"groupId":"101548","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorksetConnectedComponents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/c19161b1f3d9af1bf90c99a7961254d3eea9a8.src","preCode":"\tpublic void testWorksetConnectedComponents() {\n\t\tPlan plan = getConnectedComponentsCoGroupPlan();\n\t\tplan.setExecutionConfig(new ExecutionConfig());\n\t\tOptimizedPlan optPlan = compileNoStats(plan);\n\t\tOptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(optPlan);\n\n\t\tif (PRINT_PLAN) {\n\t\t\tPlanJSONDumpGenerator dumper = new PlanJSONDumpGenerator();\n\t\t\tString json = dumper.getOptimizerPlanAsJSON(optPlan);\n\t\t\tSystem.out.println(json);\n\t\t}\n\n\t\tSourcePlanNode vertexSource = or.getNode(VERTEX_SOURCE);\n\t\tSourcePlanNode edgesSource = or.getNode(EDGES_SOURCE);\n\t\tSinkPlanNode sink = or.getNode(SINK);\n\t\tWorksetIterationPlanNode iter = or.getNode(ITERATION_NAME);\n\n\t\tDualInputPlanNode neighborsJoin = or.getNode(JOIN_NEIGHBORS_MATCH);\n\t\tDualInputPlanNode cogroup = or.getNode(MIN_ID_AND_UPDATE);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\t\r\n\t\tAssert.assertEquals(DriverStrategy.NONE, sink.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, vertexSource.getDriverStrategy());\n\t\tAssert.assertEquals(DriverStrategy.NONE, edgesSource.getDriverStrategy());\n\n\t\tAssert.assertEquals(DriverStrategy.INNER_MERGE, neighborsJoin.getDriverStrategy());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput1());\n\t\tAssert.assertEquals(set0, neighborsJoin.getKeysForInput2());\n\n\t\tAssert.assertEquals(DriverStrategy.CO_GROUP, cogroup.getDriverStrategy());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput1());\n\t\tAssert.assertEquals(set0, cogroup.getKeysForInput2());\n\n\t\t\r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, sink.getInput().getShipStrategy());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialSolutionSetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialSolutionSetInput().getShipStrategyKeys());\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, iter.getInitialWorksetInput().getShipStrategy());\n\t\tAssert.assertEquals(set0, iter.getInitialWorksetInput().getShipStrategyKeys());\n\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, neighborsJoin.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, neighborsJoin.getInput2().getShipStrategy()); \r\n\t\tAssert.assertEquals(set0, neighborsJoin.getInput2().getShipStrategyKeys());\n\t\tAssert.assertTrue(neighborsJoin.getInput2().getTempMode().isCached());\n\n\t\tAssert.assertEquals(ShipStrategyType.PARTITION_HASH, cogroup.getInput1().getShipStrategy()); \r\n\t\tAssert.assertEquals(ShipStrategyType.FORWARD, cogroup.getInput2().getShipStrategy()); \r\n\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.NONE, sink.getInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, iter.getInitialSolutionSetInput().getLocalStrategy());\n\n\t\t\r\n\t\tAssert.assertEquals(LocalStrategy.SORT, iter.getInitialWorksetInput().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, neighborsJoin.getInput1().getLocalStrategy()); \r\n\t\tAssert.assertEquals(LocalStrategy.SORT, neighborsJoin.getInput2().getLocalStrategy()); \r\n\n\t\tAssert.assertEquals(LocalStrategy.SORT, cogroup.getInput1().getLocalStrategy());\n\t\tAssert.assertEquals(LocalStrategy.NONE, cogroup.getInput2().getLocalStrategy()); \r\n\n\t\t\r\n\t\tAssert.assertTrue(TempMode.CACHED == neighborsJoin.getInput2().getTempMode());\n\n\t\tJobGraphGenerator jgg = new JobGraphGenerator();\n\t\tjgg.compileJobGraph(optPlan);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/iterations/ConnectedComponentsCoGroupTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2015-08-12 03:40:21","commitOrder":4,"curCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.INNER_MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","date":"2015-09-08 22:57:51","endLine":327,"groupId":"101548","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBroadcastMergeJoin","params":"(DualInputPlanNodejoin@SingleInputPlanNodereducer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f4/efb8a9abbed14b53419a9380aba79b86bf9bdc.src","preCode":"\tprivate boolean checkBroadcastMergeJoin(DualInputPlanNode join, SingleInputPlanNode reducer) {\n\t\tif (DriverStrategy.INNER_MERGE == join.getDriverStrategy()) {\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput1());\n\t\t\tAssert.assertEquals(set0, join.getKeysForInput2());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput1().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.SORT, join.getInput2().getLocalStrategy());\n\t\t\tAssert.assertEquals(LocalStrategy.COMBININGSORT, reducer.getInput().getLocalStrategy());\n\t\t\t\n\t\t\t\r\n\t\t\tAssert.assertEquals(set0, join.getInput1().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set0, join.getInput2().getLocalStrategyKeys());\n\t\t\tAssert.assertTrue(Arrays.equals(join.getInput1().getLocalStrategySortOrder(), join.getInput2().getLocalStrategySortOrder()));\n\t\t\tAssert.assertEquals(set01, reducer.getInput().getLocalStrategyKeys());\n\t\t\tAssert.assertEquals(set01, reducer.getKeys(0));\n\t\t\tAssert.assertTrue(Arrays.equals(reducer.getInput().getLocalStrategySortOrder(), reducer.getSortOrders(0)));\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/optimizer/examples/RelationalQueryCompilerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"e7dab6f27323c98f3e117573ced6f4dec86f93ef","commitMessage":"@@@[FLINK-15312][tests] Remove PlanExposingEnvironment\n\n","date":"2019-12-19 20:15:41","modifiedFileCount":"6","status":"M","submitter":"tison"}]
