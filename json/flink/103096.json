[{"authorTime":"2015-10-20 23:04:21","codes":[{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testSocketSourceOutputWithRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', 10, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","date":"2015-10-21 17:01:43","endLine":147,"groupId":"50606","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSocketSourceOutputWithRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/984516dd19eecfa95aa496f45efe0916a4705e.src","preCode":"\tpublic void testSocketSourceOutputWithRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', 10, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/SocketTextStreamFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testSocketSourceOutputInfiniteRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', -1, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","date":"2015-10-21 17:01:43","endLine":191,"groupId":"50606","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSocketSourceOutputInfiniteRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/984516dd19eecfa95aa496f45efe0916a4705e.src","preCode":"\tpublic void testSocketSourceOutputInfiniteRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', -1, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/SocketTextStreamFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"06f6ac5d3edbc8dd20baf6e1b30900c189a68876","commitMessage":"@@@[FLINK-2877] Move Streaming API out of Staging package\n","date":"2015-10-21 17:01:43","modifiedFileCount":"0","status":"B","submitter":"Rufus Refactor"},{"authorTime":"2016-07-13 11:29:34","codes":[{"authorDate":"2016-07-13 11:29:34","commitOrder":2,"curCode":"\tpublic void testSocketSourceOutputWithRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), \"\\n\", 10, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","date":"2016-07-25 23:37:44","endLine":147,"groupId":"103096","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSocketSourceOutputWithRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/274cf782608bf74c97183edc34efd1b69cc614.src","preCode":"\tpublic void testSocketSourceOutputWithRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', 10, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/SocketTextStreamFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2016-07-13 11:29:34","commitOrder":2,"curCode":"\tpublic void testSocketSourceOutputInfiniteRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), \"\\n\", -1, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","date":"2016-07-25 23:37:44","endLine":191,"groupId":"103096","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSocketSourceOutputInfiniteRetries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/274cf782608bf74c97183edc34efd1b69cc614.src","preCode":"\tpublic void testSocketSourceOutputInfiniteRetries() throws Exception {\n\t\tServerSocket server = new ServerSocket(0);\n\t\tSocket channel = null;\n\n\t\ttry {\n\t\t\tSocketTextStreamFunction source = new SocketTextStreamFunction(LOCALHOST, server.getLocalPort(), '\\n', -1, 100);\n\n\t\t\tSocketSourceThread runner = new SocketSourceThread(source, \"test1\", \"check\");\n\t\t\trunner.start();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"test1\\n\");\n\t\t\twriter.close();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\tchannel.close();\n\n\t\t\t\r\n\t\t\tchannel = server.accept();\n\t\t\twriter = new OutputStreamWriter(channel.getOutputStream());\n\t\t\twriter.write(\"check\\n\");\n\t\t\twriter.flush();\n\n\t\t\trunner.waitForNumElements(2);\n\t\t\trunner.cancel();\n\t\t\trunner.waitUntilDone();\n\t\t}\n\t\tfinally {\n\t\t\tif (channel != null) {\n\t\t\t\tIOUtils.closeQuietly(channel);\n\t\t\t}\n\t\t\tIOUtils.closeQuietly(server);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/SocketTextStreamFunctionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"177168b2fdefc3ca961e9615ffe04d5fe08eca08","commitMessage":"@@@[FLINK-2125][streaming] Delimiter change from char to string\n\nThis closes #2233\n","date":"2016-07-25 23:37:44","modifiedFileCount":"4","status":"M","submitter":"erli ding"}]
