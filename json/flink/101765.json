[{"authorTime":"2014-11-18 02:04:13","codes":[{"authorDate":"2014-11-18 02:04:13","commitOrder":2,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2014-11-18 05:07:48","endLine":50,"groupId":"52635","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2d/d514837ccba0d4c37a1883fb503470bdea5604.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"MB"},{"authorDate":"2014-11-18 02:04:13","commitOrder":2,"curCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2014-11-18 05:07:48","endLine":69,"groupId":"52635","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePlanAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2d/d514837ccba0d4c37a1883fb503470bdea5604.src","preCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"83d02563ea4a1c7d05540849bf3bf033d968b021","commitMessage":"@@@[FLINK-1207] Context environments are realized through factories\n  - local execution blocking is reset after each run\n","date":"2014-11-18 05:07:48","modifiedFileCount":"8","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2015-01-27 01:52:27","codes":[{"authorDate":"2015-01-27 01:52:27","commitOrder":3,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-01-28 09:25:23","endLine":50,"groupId":"52635","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/129bb80755044c26e36890f556d3362fb291ee.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2015-01-27 01:52:27","commitOrder":3,"curCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-01-28 09:25:23","endLine":69,"groupId":"52635","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePlanAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/129bb80755044c26e36890f556d3362fb291ee.src","preCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOuputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"9671c2f734bfa30ab8049ed4f26e90cfe7e195a7","commitMessage":"@@@[Typo] Delete DiscardingOuputFormat\n\nThis closes #343\n","date":"2015-01-28 09:25:23","modifiedFileCount":"11","status":"M","submitter":"Robert Metzger"},{"authorTime":"2015-03-13 22:53:51","codes":[{"authorDate":"2015-01-27 01:52:27","commitOrder":4,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-01-28 09:25:23","endLine":50,"groupId":"52635","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/53/129bb80755044c26e36890f556d3362fb291ee.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2015-03-13 22:53:51","commitOrder":4,"curCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute. Message: \"+e.getMessage());\n\t\t}\n\t}\n","date":"2015-03-31 14:56:39","endLine":77,"groupId":"52635","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePlanAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/56f77c68286fba3739737d8bef5d7b4b2beeb1.src","preCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"6b0d40764da9dce2e2d21882e9a03a21c6783ff0","commitMessage":"@@@[FLINK-1771] Add support for submitting single jobs to a detached YARN session\n\nWith this change.  users can submit a Flink job to a YARN cluster without having a local client monitoring the Application Master or job. You can basically fire and forget a Flink job to YARN.\nFor supporting this.  the ApplicationMaster can now monitor the status of a job and shutdown itself once it is in a terminal state.\n\nThe change also verifies that various ways of setting the parallelism on YARN are passed through the system correctly (per job.  session).\n\nThere was a bug in YARN container creation which made the configuration values for the heap offset useless. This change fixes this error.\n\nAll mentioned features and bugs are covered by the flink-yarn-tests.\n\nThis closes #542\n","date":"2015-03-31 14:56:39","modifiedFileCount":"162","status":"M","submitter":"Robert Metzger"},{"authorTime":"2015-03-13 22:53:51","codes":[{"authorDate":"2015-09-04 23:34:44","commitOrder":5,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment(); \n\t\tenv.getConfig().disableSysoutLogging();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2015-09-23 01:55:46","endLine":54,"groupId":"52635","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/11/6c1e650989975936bb5e0b401dddf7b8217502.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2015-03-13 22:53:51","commitOrder":5,"curCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute. Message: \"+e.getMessage());\n\t\t}\n\t}\n","date":"2015-03-31 14:56:39","endLine":77,"groupId":"52635","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePlanAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/56f77c68286fba3739737d8bef5d7b4b2beeb1.src","preCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute. Message: \"+e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"71bf2f570861daae53b24bfcf1d06aedb85311b9","commitMessage":"@@@[FLINK-2097][core] implement a job session management\n\nSessions make sure that the JobManager does not immediately discard a\nJobGraph after execution.  but keeps it around for further operations to\nbe attached to the graph. That is the basis for interactive sessions.\n\nThis pull request implements a rudimentary session management. Together\nwith the backtracking #640.  this will enable users to submit jobs to the\ncluster and access intermediate results. Session handling ensures that\nthe results are cleared eventually.\n\nExecutionGraphs are kept as long as\n  - no timeout occurred or\n  - the session has not been explicitly ended\n\nThe following changes have also been made in this pull request:\n\n- The Job ID is created through the ExecutionEnvironment and passed through\n\n- Sessions can be termined by the ExecutionEnvironment or directly\n  through the executor\n\n- The environments use reapers (local) and shutdown hooks (remote) to\n  ensure session termination when the environment runs out of scope\n\n- The Client manages only connections to the JobManager.  it is not job\n  specific\n\nThis closes #858.\n","date":"2015-09-23 01:55:46","modifiedFileCount":"52","status":"M","submitter":"Maximilian Michels"},{"authorTime":"2015-03-13 22:53:51","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":6,"curCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception {\n\t\t\t\treturn value * 2;\n\t\t\t}});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":63,"groupId":"101765","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/4372208cb286db42b6f15035efac2e03258bc9.src","preCode":"\tpublic void testExecuteAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception {\n\t\t\t\treturn value * 2;\n\t\t\t}});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.execute();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute.\");\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2015-03-13 22:53:51","commitOrder":6,"curCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute. Message: \"+e.getMessage());\n\t\t}\n\t}\n","date":"2015-03-31 14:56:39","endLine":77,"groupId":"101765","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePlanAfterGetExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/56f77c68286fba3739737d8bef5d7b4b2beeb1.src","preCode":"\tpublic void testCreatePlanAfterGetExecutionPlan() {\n\t\tExecutionEnvironment env = new LocalEnvironment();\n\t\t\n\t\tDataSet<Integer> baseSet = env.fromElements(1, 2);\n\n\t\tDataSet<Integer> result = baseSet.map(new MapFunction<Integer, Integer>() {\n\t\t\t@Override public Integer map(Integer value) throws Exception { return value * 2; }\n\t\t});\n\t\tresult.output(new DiscardingOutputFormat<Integer>());\n\n\t\ttry {\n\t\t\tenv.getExecutionPlan();\n\t\t\tenv.createProgramPlan();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Cannot run both #getExecutionPlan and #execute. Message: \"+e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ExecutionPlanAfterExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"}]
