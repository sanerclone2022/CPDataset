[{"authorTime":"2020-10-30 19:01:44","codes":[{"authorDate":"2020-10-30 19:01:44","commitOrder":1,"curCode":"\tpublic void testRecoverableErrorThrownToConsumer() throws Exception {\n\t\tthrown.expect(FanOutShardSubscriber.RecoverableFanOutSubscriberException.class);\n\t\tthrown.expectMessage(\"io.netty.handler.timeout.ReadTimeoutException\");\n\n\t\tSubscriptionErrorKinesisV2 errorKinesisV2 = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(ReadTimeoutException.INSTANCE);\n\n\t\tFanOutShardSubscriber subscriber = new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n\t\tsoftware.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition = software.amazon.awssdk.services.kinesis.model.StartingPosition\n\t\t\t.builder().build();\n\t\tsubscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> { });\n\t}\n","date":"2020-11-04 18:40:44","endLine":49,"groupId":"23514","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverableErrorThrownToConsumer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/97a8344bba36c75ba6605ffe4a71a95ae19620.src","preCode":"\tpublic void testRecoverableErrorThrownToConsumer() throws Exception {\n\t\tthrown.expect(FanOutShardSubscriber.RecoverableFanOutSubscriberException.class);\n\t\tthrown.expectMessage(\"io.netty.handler.timeout.ReadTimeoutException\");\n\n\t\tSubscriptionErrorKinesisV2 errorKinesisV2 = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(ReadTimeoutException.INSTANCE);\n\n\t\tFanOutShardSubscriber subscriber = new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n\t\tsoftware.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition = software.amazon.awssdk.services.kinesis.model.StartingPosition\n\t\t\t.builder().build();\n\t\tsubscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> { });\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutShardSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2020-10-30 19:01:44","commitOrder":1,"curCode":"\tpublic void testRetryableErrorThrownToConsumer() throws Exception {\n\t\tthrown.expect(FanOutShardSubscriber.RetryableFanOutSubscriberException.class);\n\t\tthrown.expectMessage(\"Error!\");\n\n\t\tRuntimeException error = new RuntimeException(\"Error!\");\n\t\tSubscriptionErrorKinesisV2 errorKinesisV2 = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(error);\n\n\t\tFanOutShardSubscriber subscriber = new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n\t\tsoftware.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition = software.amazon.awssdk.services.kinesis.model.StartingPosition\n\t\t\t.builder().build();\n\t\tsubscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> { });\n\t}\n","date":"2020-11-04 18:40:44","endLine":64,"groupId":"23514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryableErrorThrownToConsumer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/97a8344bba36c75ba6605ffe4a71a95ae19620.src","preCode":"\tpublic void testRetryableErrorThrownToConsumer() throws Exception {\n\t\tthrown.expect(FanOutShardSubscriber.RetryableFanOutSubscriberException.class);\n\t\tthrown.expectMessage(\"Error!\");\n\n\t\tRuntimeException error = new RuntimeException(\"Error!\");\n\t\tSubscriptionErrorKinesisV2 errorKinesisV2 = FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(error);\n\n\t\tFanOutShardSubscriber subscriber = new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n\t\tsoftware.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition = software.amazon.awssdk.services.kinesis.model.StartingPosition\n\t\t\t.builder().build();\n\t\tsubscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> { });\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutShardSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"325fb24b97de9286a8ede0280932637996ce3dd3","commitMessage":"@@@[FLINK-19899][Kinesis][EFO] Optimise error handling to use a separate exception delivery mechanism\n\n[FLINK-19898][Kinesis][EFO] Ignore ReadTimeoutException from SubcribeToShard retry policy\n\nThis closes #13886.\n","date":"2020-11-04 18:40:44","modifiedFileCount":"5","status":"B","submitter":"Danny Cranmer"},{"authorTime":"2021-04-26 22:22:19","codes":[{"authorDate":"2021-04-26 22:22:19","commitOrder":2,"curCode":"    public void testRecoverableErrorThrownToConsumer() throws Exception {\n        thrown.expect(FanOutShardSubscriber.RecoverableFanOutSubscriberException.class);\n        thrown.expectMessage(\"io.netty.handler.timeout.ReadTimeoutException\");\n\n        SubscriptionErrorKinesisV2 errorKinesisV2 =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(\n                        ReadTimeoutException.INSTANCE);\n\n        FanOutShardSubscriber subscriber =\n                new FanOutShardSubscriber(\n                        \"consumerArn\",\n                        \"shardId\",\n                        errorKinesisV2,\n                        DEFAULT_SUBSCRIBE_TO_SHARD_TIMEOUT);\n\n        software.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition =\n                software.amazon.awssdk.services.kinesis.model.StartingPosition.builder().build();\n        subscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> {});\n    }\n","date":"2021-04-28 23:05:04","endLine":59,"groupId":"10583","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverableErrorThrownToConsumer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/962df49a62a813835b01d4f168dd7fed7a989e.src","preCode":"    public void testRecoverableErrorThrownToConsumer() throws Exception {\n        thrown.expect(FanOutShardSubscriber.RecoverableFanOutSubscriberException.class);\n        thrown.expectMessage(\"io.netty.handler.timeout.ReadTimeoutException\");\n\n        SubscriptionErrorKinesisV2 errorKinesisV2 =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(\n                        ReadTimeoutException.INSTANCE);\n\n        FanOutShardSubscriber subscriber =\n                new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n        software.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition =\n                software.amazon.awssdk.services.kinesis.model.StartingPosition.builder().build();\n        subscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> {});\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutShardSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-04-26 22:22:19","commitOrder":2,"curCode":"    public void testRetryableErrorThrownToConsumer() throws Exception {\n        thrown.expect(FanOutShardSubscriber.RetryableFanOutSubscriberException.class);\n        thrown.expectMessage(\"Error!\");\n\n        RuntimeException error = new RuntimeException(\"Error!\");\n        SubscriptionErrorKinesisV2 errorKinesisV2 =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(error);\n\n        FanOutShardSubscriber subscriber =\n                new FanOutShardSubscriber(\n                        \"consumerArn\",\n                        \"shardId\",\n                        errorKinesisV2,\n                        DEFAULT_SUBSCRIBE_TO_SHARD_TIMEOUT);\n\n        software.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition =\n                software.amazon.awssdk.services.kinesis.model.StartingPosition.builder().build();\n        subscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> {});\n    }\n","date":"2021-04-28 23:05:04","endLine":80,"groupId":"10583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetryableErrorThrownToConsumer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/962df49a62a813835b01d4f168dd7fed7a989e.src","preCode":"    public void testRetryableErrorThrownToConsumer() throws Exception {\n        thrown.expect(FanOutShardSubscriber.RetryableFanOutSubscriberException.class);\n        thrown.expectMessage(\"Error!\");\n\n        RuntimeException error = new RuntimeException(\"Error!\");\n        SubscriptionErrorKinesisV2 errorKinesisV2 =\n                FakeKinesisFanOutBehavioursFactory.errorDuringSubscription(error);\n\n        FanOutShardSubscriber subscriber =\n                new FanOutShardSubscriber(\"consumerArn\", \"shardId\", errorKinesisV2);\n\n        software.amazon.awssdk.services.kinesis.model.StartingPosition startingPosition =\n                software.amazon.awssdk.services.kinesis.model.StartingPosition.builder().build();\n        subscriber.subscribeToShardAndConsumeRecords(startingPosition, event -> {});\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutShardSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"11f5abc41057cf119548cb03dfcc97d755e0029a","commitMessage":"@@@[FLINK-22479[Kinesis][Consumer] Potential lock-up under error condition\n","date":"2021-04-28 23:05:04","modifiedFileCount":"10","status":"M","submitter":"Danny Cranmer"}]
