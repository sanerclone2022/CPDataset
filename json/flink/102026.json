[{"authorTime":"2019-12-03 17:21:29","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":3,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-02-15 14:07:13","endLine":91,"groupId":"13709","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcSplitReader.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/3b31e1bf1f08fe4f9b77d41f71f6382ecf3ce4.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/OrcNoHiveSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2019-12-03 17:21:29","commitOrder":3,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-02-15 14:07:13","endLine":99,"groupId":"9326","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(StringhiveVersion@Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcSplitReader.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2a/829797662216f5937661ffa7ae529421cf0697.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc/src/main/java/org/apache/flink/orc/OrcSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"MB"}],"commitId":"63e9e9d200ef4f17097ae236be09d308efe8b72a","commitMessage":"@@@[FLINK-14802][orc][hive] Multi vectorized read version support for hive orc read\n\nsupport vectorized read for hive 1.x.\n\ncloses #10730\n","date":"2020-02-15 14:07:13","modifiedFileCount":"11","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-08-12 15:28:38","codes":[{"authorDate":"2019-12-03 17:21:29","commitOrder":4,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-02-15 14:07:13","endLine":91,"groupId":"13709","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcSplitReader.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/3b31e1bf1f08fe4f9b77d41f71f6382ecf3ce4.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/OrcNoHiveSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2020-08-12 15:28:38","commitOrder":4,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)], type);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-08-12 15:28:38","endLine":99,"groupId":"9326","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(StringhiveVersion@Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcSplitReader.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/30/bc96c24fa43e1d331d1ab4030509fffd3d0f55.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc/src/main/java/org/apache/flink/orc/OrcSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"808ec56bf9487f09178429c9045e51b48d1dc9c5","commitMessage":"@@@[FLINK-18682][orc][hive] Vector orc reader cannot read Hive 2.0.0 table\n\nThis closes #12985","date":"2020-08-12 15:28:38","modifiedFileCount":"4","status":"M","submitter":"Rui Li"},{"authorTime":"2020-10-21 19:35:39","codes":[{"authorDate":"2020-10-21 19:35:39","commitOrder":5,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcFilters.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-10-21 19:35:39","endLine":92,"groupId":"102026","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcFilters.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/d924127bf9b5e4e81cc61f32d62ca18bd4c2c4.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tOrcColumnarRowSplitReader.ColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)]);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tnew OrcNoHiveShim(),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc-nohive/src/main/java/org/apache/flink/orc/nohive/OrcNoHiveSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-10-21 19:35:39","commitOrder":5,"curCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcFilters.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)], type);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","date":"2020-10-21 19:35:39","endLine":99,"groupId":"102026","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"genPartColumnarRowReader","params":"(StringhiveVersion@Configurationconf@String[]fullFieldNames@DataType[]fullFieldTypes@Map<String@Object>partitionSpec@int[]selectedFields@List<OrcFilters.Predicate>conjunctPredicates@intbatchSize@Pathpath@longsplitStart@longsplitLength)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d7/ba24b26de8053c875635573faccf7db8f148b6.src","preCode":"\tpublic static OrcColumnarRowSplitReader<VectorizedRowBatch> genPartColumnarRowReader(\n\t\t\tString hiveVersion,\n\t\t\tConfiguration conf,\n\t\t\tString[] fullFieldNames,\n\t\t\tDataType[] fullFieldTypes,\n\t\t\tMap<String, Object> partitionSpec,\n\t\t\tint[] selectedFields,\n\t\t\tList<OrcSplitReader.Predicate> conjunctPredicates,\n\t\t\tint batchSize,\n\t\t\tPath path,\n\t\t\tlong splitStart,\n\t\t\tlong splitLength) throws IOException {\n\n\t\tList<String> nonPartNames = getNonPartNames(fullFieldNames, partitionSpec);\n\n\t\tint[] selectedOrcFields = getSelectedOrcFields(fullFieldNames, selectedFields, nonPartNames);\n\n\t\tColumnBatchGenerator<VectorizedRowBatch> gen = (VectorizedRowBatch rowBatch) -> {\n\t\t\t\r\n\t\t\tColumnVector[] vectors = new ColumnVector[selectedFields.length];\n\t\t\tfor (int i = 0; i < vectors.length; i++) {\n\t\t\t\tString name = fullFieldNames[selectedFields[i]];\n\t\t\t\tLogicalType type = fullFieldTypes[selectedFields[i]].getLogicalType();\n\t\t\t\tvectors[i] = partitionSpec.containsKey(name) ?\n\t\t\t\t\t\tcreateFlinkVectorFromConstant(type, partitionSpec.get(name), batchSize) :\n\t\t\t\t\t\tcreateFlinkVector(rowBatch.cols[nonPartNames.indexOf(name)], type);\n\t\t\t}\n\t\t\treturn new VectorizedColumnBatch(vectors);\n\t\t};\n\n\t\treturn new OrcColumnarRowSplitReader<>(\n\t\t\t\tOrcShim.createShim(hiveVersion),\n\t\t\t\tconf,\n\t\t\t\tconvertToOrcTypeWithPart(fullFieldNames, fullFieldTypes, partitionSpec.keySet()),\n\t\t\t\tselectedOrcFields,\n\t\t\t\tgen,\n\t\t\t\tconjunctPredicates,\n\t\t\t\tbatchSize,\n\t\t\t\tpath,\n\t\t\t\tsplitStart,\n\t\t\t\tsplitLength);\n\t}\n","realPath":"flink-formats/flink-orc/src/main/java/org/apache/flink/orc/OrcSplitReaderUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"091a2ae2e172cd80a5a7638a11329c7077573d4e","commitMessage":"@@@[FLINK-19747][orc] Move Predicate classes to OrcFilters\n\nThis closes #13715","date":"2020-10-21 19:35:39","modifiedFileCount":"15","status":"M","submitter":"Jingsong Lee"}]
