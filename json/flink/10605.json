[{"authorTime":"2020-07-28 19:44:31","codes":[{"authorDate":"2020-07-28 19:44:31","commitOrder":1,"curCode":"\tpublic void testEagerStrategyWithNoConsumerName() {\n\t\tString msg = \"No valid enhanced fan-out consumer name is set through \" + ConsumerConfigConstants.EFO_CONSUMER_NAME;\n\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n\t}\n","date":"2020-09-04 14:54:02","endLine":84,"groupId":"6178","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEagerStrategyWithNoConsumerName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/eaa33d0c282aac9a7ce27f7dc347c227d243a4.src","preCode":"\tpublic void testEagerStrategyWithNoConsumerName() {\n\t\tString msg = \"No valid enhanced fan-out consumer name is set through \" + ConsumerConfigConstants.EFO_CONSUMER_NAME;\n\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2020-07-28 19:44:31","commitOrder":1,"curCode":"\tpublic void testNoneStrategyWithNotEnoughStreams() {\n\t\tList<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n\t\tString msg = \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_REGISTRATION_TYPE, EFORegistrationType.NONE.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, streams);\n\t}\n","date":"2020-09-04 14:54:02","endLine":133,"groupId":"6176","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoneStrategyWithNotEnoughStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/eaa33d0c282aac9a7ce27f7dc347c227d243a4.src","preCode":"\tpublic void testNoneStrategyWithNotEnoughStreams() {\n\t\tList<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n\t\tString msg = \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_REGISTRATION_TYPE, EFORegistrationType.NONE.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, streams);\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"e472abb39681adb3d0e0de02254fd92b04b451f3","commitMessage":"@@@[FLINK-18536][kinesis] Adding enhanced fan-out related configurations.\n\nThis closes #13015.\n","date":"2020-09-04 14:54:02","modifiedFileCount":"4","status":"B","submitter":"xiaolong.wang"},{"authorTime":"2020-09-04 17:35:35","codes":[{"authorDate":"2020-09-04 17:35:35","commitOrder":2,"curCode":"\tpublic void testEagerStrategyWithNoConsumerName() {\n\t\tString msg = \"No valid enhanced fan-out consumer name is set through \" + EFO_CONSUMER_NAME;\n\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n\t}\n","date":"2020-09-21 13:37:35","endLine":91,"groupId":"43684","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEagerStrategyWithNoConsumerName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/4fbdb70a9fda1ffcabcad97513f16668ea5c1c.src","preCode":"\tpublic void testEagerStrategyWithNoConsumerName() {\n\t\tString msg = \"No valid enhanced fan-out consumer name is set through \" + ConsumerConfigConstants.EFO_CONSUMER_NAME;\n\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-09-04 17:35:35","commitOrder":2,"curCode":"\tpublic void testNoneStrategyWithNotEnoughStreams() {\n\t\tList<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n\t\tString msg = \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n\t\ttestConfig.setProperty(EFO_REGISTRATION_TYPE, NONE.toString());\n\t\ttestConfig.setProperty(EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, streams);\n\t}\n","date":"2020-09-21 13:37:35","endLine":140,"groupId":"43691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoneStrategyWithNotEnoughStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/4fbdb70a9fda1ffcabcad97513f16668ea5c1c.src","preCode":"\tpublic void testNoneStrategyWithNotEnoughStreams() {\n\t\tList<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n\t\tString msg = \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n\t\texception.expect(IllegalArgumentException.class);\n\t\texception.expectMessage(msg);\n\n\t\tProperties testConfig = TestUtils.getStandardProperties();\n\t\ttestConfig.setProperty(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, RecordPublisherType.EFO.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_REGISTRATION_TYPE, EFORegistrationType.NONE.toString());\n\t\ttestConfig.setProperty(ConsumerConfigConstants.EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n\t\tnew FanOutRecordPublisherConfiguration(testConfig, streams);\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"ad4e9a60f12b5e28c93091e5d89f1cbce86c0c35","commitMessage":"@@@[FLINK-18661][Kinesis] Stream consumer Registration/Deregistration\n","date":"2020-09-21 13:37:35","modifiedFileCount":"15","status":"M","submitter":"Danny Cranmer"},{"authorTime":"2021-04-26 22:22:19","codes":[{"authorDate":"2021-04-26 22:22:19","commitOrder":3,"curCode":"    public void testEagerStrategyWithNoConsumerName() {\n        String msg = \"No valid enhanced fan-out consumer name is set through \" + EFO_CONSUMER_NAME;\n\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(msg);\n\n        Properties testConfig = TestUtils.getStandardProperties();\n        testConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n        new FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n    }\n","date":"2021-04-28 23:05:04","endLine":88,"groupId":"10605","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testEagerStrategyWithNoConsumerName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/58ffbdba511397ec5a8394920cf445d9a263b5.src","preCode":"    public void testEagerStrategyWithNoConsumerName() {\n        String msg = \"No valid enhanced fan-out consumer name is set through \" + EFO_CONSUMER_NAME;\n\n        exception.expect(IllegalArgumentException.class);\n        exception.expectMessage(msg);\n\n        Properties testConfig = TestUtils.getStandardProperties();\n        testConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n        new FanOutRecordPublisherConfiguration(testConfig, new ArrayList<>());\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-04-26 22:22:19","commitOrder":3,"curCode":"    public void testNoneStrategyWithNotEnoughStreams() {\n        List<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n        String msg =\n                \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(msg);\n\n        Properties testConfig = TestUtils.getStandardProperties();\n        testConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n        testConfig.setProperty(EFO_REGISTRATION_TYPE, NONE.toString());\n        testConfig.setProperty(EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n        new FanOutRecordPublisherConfiguration(testConfig, streams);\n    }\n","date":"2021-04-28 23:05:04","endLine":140,"groupId":"10605","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNoneStrategyWithNotEnoughStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/58ffbdba511397ec5a8394920cf445d9a263b5.src","preCode":"    public void testNoneStrategyWithNotEnoughStreams() {\n        List<String> streams = Arrays.asList(\"fakedstream1\", \"fakedstream2\");\n\n        String msg =\n                \"Invalid efo consumer arn settings for not providing consumer arns: flink.stream.efo.consumerarn.fakedstream2\";\n        exception.expect(IllegalArgumentException.class);\n        exception.expectMessage(msg);\n\n        Properties testConfig = TestUtils.getStandardProperties();\n        testConfig.setProperty(RECORD_PUBLISHER_TYPE, EFO.toString());\n        testConfig.setProperty(EFO_REGISTRATION_TYPE, NONE.toString());\n        testConfig.setProperty(EFO_CONSUMER_ARN_PREFIX + \".\" + \"fakedstream1\", \"fakedstream1\");\n\n        new FanOutRecordPublisherConfiguration(testConfig, streams);\n    }\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/internals/publisher/fanout/FanOutRecordPublisherConfigurationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"11f5abc41057cf119548cb03dfcc97d755e0029a","commitMessage":"@@@[FLINK-22479[Kinesis][Consumer] Potential lock-up under error condition\n","date":"2021-04-28 23:05:04","modifiedFileCount":"10","status":"M","submitter":"Danny Cranmer"}]
