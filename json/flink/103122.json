[{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:07:45","endLine":896,"groupId":"2203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedTranslationOnKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/f54b5d4858bf648fdfb1a6715bb0038babd1b6.src","preCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"B"},{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:07:45","endLine":940,"groupId":"2204","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedTranslationOnNonKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/f54b5d4858bf648fdfb1a6715bb0038babd1b6.src","preCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"B"}],"commitId":"c6c17befe54d55755ebaf160ff20a11aa32bbbca","commitMessage":"@@@[FLINK-3659] Expose broadcast state on DataStream API.\n","date":"2018-02-07 21:07:45","modifiedFileCount":"5","status":"B","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:17:24","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":2,"curCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:07:45","endLine":896,"groupId":"2203","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedTranslationOnKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/f54b5d4858bf648fdfb1a6715bb0038babd1b6.src","preCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"N"},{"authorDate":"2018-01-29 23:17:24","commitOrder":2,"curCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:08:16","endLine":940,"groupId":"2204","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedTranslationOnNonKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bc/bbfd69272c294b0ce5e80d8d5fb0ae6b25fde5.src","preCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"M"}],"commitId":"26918c953287c7940120dfcfcc10dd5a42beaf81","commitMessage":"@@@[FLINK-8345] Add iterator of keyed state on broadcast side of connected streams.\n","date":"2018-02-07 21:08:16","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:23:04","codes":[{"authorDate":"2018-01-29 23:23:04","commitOrder":3,"curCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:08:52","endLine":896,"groupId":"2203","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedTranslationOnKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/76ef4c2923a98fb72278dcaecf18856f811200.src","preCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"M"},{"authorDate":"2018-01-29 23:23:04","commitOrder":3,"curCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:08:52","endLine":940,"groupId":"2204","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedTranslationOnNonKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/76ef4c2923a98fb72278dcaecf18856f811200.src","preCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"M"}],"commitId":"28768235068039e4ff50c5235ab79c54410b4ec0","commitMessage":"@@@[FLINK-8446] Support multiple broadcast states.\n","date":"2018-02-07 21:08:52","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-02-02 21:59:34","codes":[{"authorDate":"2018-02-02 21:59:34","commitOrder":4,"curCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:09:16","endLine":812,"groupId":"2203","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedTranslationOnKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/8a134e8248becfe44146743c39d9da90ac2215.src","preCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"M"},{"authorDate":"2018-02-02 21:59:34","commitOrder":4,"curCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:09:16","endLine":858,"groupId":"2204","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedTranslationOnNonKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/8a134e8248becfe44146743c39d9da90ac2215.src","preCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tsrcOne.connect(broadcast)\n\t\t\t\t.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"}],"commitId":"5050f9119c4c83765019d1da51d4c1bff6f2f44b","commitMessage":"@@@[hotfix] Create BroadcastITCase.\n","date":"2018-02-07 21:09:16","modifiedFileCount":"1","status":"M","submitter":"kkloudas"},{"authorTime":"2018-04-10 07:08:58","codes":[{"authorDate":"2018-02-02 21:59:34","commitOrder":5,"curCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-02-07 21:09:16","endLine":812,"groupId":"103122","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedTranslationOnKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/8a134e8248becfe44146743c39d9da90ac2215.src","preCode":"\tpublic void testFailedTranslationOnKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew BroadcastProcessFunction<Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"N"},{"authorDate":"2018-04-10 07:08:58","commitOrder":5,"curCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","date":"2018-04-12 23:04:30","endLine":891,"groupId":"103122","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedTranslationOnNonKeyed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/2d6e1f6a514e8c898b30ce80380a66e55dfc00.src","preCode":"\tpublic void testFailedTranslationOnNonKeyed() {\n\n\t\tfinal MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromElements(\"Test:0\", \"Test:1\", \"Test:2\", \"Test:3\", \"Test:4\", \"Test:5\")\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tBroadcastStream<String> broadcast = srcTwo.broadcast(descriptor);\n\t\tBroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast);\n\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\tbcStream.process(\n\t\t\t\tnew KeyedBroadcastProcessFunction<String, Long, String, String>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/DataStreamTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":851,"status":"M"}],"commitId":"584229dc00e62a6a8540b059645269bb04d0ba04","commitMessage":"@@@[FLINK-9152] Harmonize BroadcastProcessFunction Context names\n","date":"2018-04-12 23:04:30","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"}]
