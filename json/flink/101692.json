[{"authorTime":"2018-01-02 14:42:18","codes":[{"authorDate":"2018-01-02 14:42:18","commitOrder":1,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:39:41","endLine":72,"groupId":"16940","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/ca33e7324e350146795ff089eb8bf0a8ae4b97.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2018-01-02 14:42:18","commitOrder":1,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:39:41","endLine":90,"groupId":"16940","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cf/ca33e7324e350146795ff089eb8bf0a8ae4b97.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"12396f19851e74310c9b5f28870a8de9794511fc","commitMessage":"@@@[FLINK-8333] [flip6] Separate deployment options from command options\n\nThis commit separates the parsing of command options and deployment options into two\nsteps. This makes it easier to make the CustomCommandLines non-static.\n\nMoreover.  this commit moves the CliFrontend into the cli sub package.\n\nThis closes #5220.\n","date":"2018-01-12 03:39:41","modifiedFileCount":"10","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2018-01-11 20:55:16","codes":[{"authorDate":"2018-01-11 20:55:16","commitOrder":2,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:39:57","endLine":83,"groupId":"49604","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/1de5557352d0cdeff729f768a8a3a601640cfa.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-01-11 20:55:16","commitOrder":2,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:39:57","endLine":104,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3f/1de5557352d0cdeff729f768a8a3a601640cfa.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(CliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"aff43768f3285a5f2bc5593369a7fec3ed77a2af","commitMessage":"@@@[FLINK-8338] [flip6] Make CustomCommandLines non static in CliFrontend\n\nThis commit changes how CustomCommandLines are registered at the CliFrontend.\nHenceforth.  the CliFrontend is initialized with the set of CustomCommandLines\ninstead of registering them statically. This improves maintainability and\ntestability.\n\nThis closes #5224.\n","date":"2018-01-12 03:39:57","modifiedFileCount":"14","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2018-01-11 23:17:42","codes":[{"authorDate":"2018-01-11 23:17:42","commitOrder":3,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:40:06","endLine":78,"groupId":"49604","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/212cbb602d63e23ba890665d1b57d21c67cfc3.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-01-11 23:17:42","commitOrder":3,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 03:40:06","endLine":98,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/212cbb602d63e23ba890665d1b57d21c67cfc3.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\tint retCode = testFrontend.info(parameters);\n\t\t\tassertTrue(retCode == 0);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"e2f1ba92decdb27f3aea4e21a7cad7dcc98cea1a","commitMessage":"@@@[FLINK-8339] [flip6] Let CustomCommandLine return ClusterDescriptor\n\nInstead of directly retrieving or deploying a Flink cluster.  the\nCustomCommandLine now only returns a ClusterDescriptor which can be used\nfor these operations. This disentangles the ClusterDescriptor and the\nCustomCommandLine a bit better supporting a proper lifecycle management\nof the former.\n\nThis closes #5225.\n","date":"2018-01-12 03:40:06","modifiedFileCount":"21","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2018-01-03 20:25:09","codes":[{"authorDate":"2018-01-03 20:25:09","commitOrder":4,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = new Configuration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(new DefaultCLI(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 23:14:02","endLine":78,"groupId":"49604","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/84c6141b7a3a9fef90594afdc26ff390984189.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-01-03 20:25:09","commitOrder":4,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = new Configuration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(new DefaultCLI(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-01-12 23:14:02","endLine":98,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/84c6141b7a3a9fef90594afdc26ff390984189.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tnew Configuration(),\n\t\t\t\tCollections.singletonList(new DefaultCLI()),\n\t\t\t\tCliFrontendTestUtils.getConfigDir());\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"30011b9b110aad0e1c28e7e0a025b73986781a72","commitMessage":"@@@[FLINK-8340] [flip6] Remove passing of Configuration to CustomCommandLine\n\nSince the Configuration does not change over the lifetime of a CustomCommandLine. \nwe can safely pass it as a constructor argument instead of method argument.\n\nThis closes #5226.\n","date":"2018-01-12 23:14:02","modifiedFileCount":"22","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2018-03-08 18:07:08","codes":[{"authorDate":"2018-03-08 18:07:08","commitOrder":5,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-03-19 02:12:02","endLine":77,"groupId":"49604","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/47/c799ee98120baf2c324c8213832632702191ba.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = new Configuration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(new DefaultCLI(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2018-03-08 18:07:08","commitOrder":5,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-03-19 02:12:02","endLine":97,"groupId":"50827","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/47/c799ee98120baf2c324c8213832632702191ba.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = new Configuration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(new DefaultCLI(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"463b922abebc77420d0ec990ba18ad83ea33c0e4","commitMessage":"@@@[FLINK-8906][flip6][tests] also test Flip6DefaultCLI in org.apache.flink.client.cli tests\n\nThis closes #5671.\n","date":"2018-03-19 02:12:02","modifiedFileCount":"8","status":"M","submitter":"Nico Kruber"},{"authorTime":"2018-03-08 18:07:08","codes":[{"authorDate":"2019-11-19 23:04:31","commitOrder":6,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"4\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2019-11-20 21:49:45","endLine":77,"groupId":"49604","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/71858ab983a6965189c5d7f3477610d6099ca2.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"1\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2018-03-08 18:07:08","commitOrder":6,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2018-03-19 02:12:02","endLine":97,"groupId":"50827","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/47/c799ee98120baf2c324c8213832632702191ba.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"948bab8db07b24d06ce2e2c41826e1c3cd47d1db","commitMessage":"@@@[FLINK-14861][Client/Job Submission] Fix parallelism.default propagation from flink-conf.yaml\n","date":"2019-11-20 21:49:45","modifiedFileCount":"3","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-04-16 19:31:20","codes":[{"authorDate":"2020-04-16 19:31:20","commitOrder":7,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\", \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 4\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2020-05-01 04:07:57","endLine":77,"groupId":"37140","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/3c1cf62c939b4ec42d089d9aa9a6d7a0612b17.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"4\\\"\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-04-16 19:31:20","commitOrder":7,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath(), \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 17\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2020-05-01 04:07:57","endLine":97,"groupId":"37139","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/3c1cf62c939b4ec42d089d9aa9a6d7a0612b17.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath()};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\": \\\"17\\\"\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"93d4c35cad0cd95160f8269b661f01e6d7fa0bb9","commitMessage":"@@@[FLINK-16661] Move the ClassPathPackagedProgramRetriever to flink-clients\n\nThis is done because the ClassPathPackagedProgramRetriever is going to be\nalso used by other ApplicationEntrypoints in the future.  including the\nYarnApplicationClusterEntryPoint.\n","date":"2020-05-01 04:07:57","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-10-07 18:50:45","codes":[{"authorDate":"2020-10-07 18:50:45","commitOrder":8,"curCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\", \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli()));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 4\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2020-10-27 23:07:18","endLine":77,"groupId":"101692","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowExecutionPlan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/3172a809278076885da82dab274a8bbe2e0a78.src","preCode":"\tpublic void testShowExecutionPlan() throws Exception {\n\t\treplaceStdOut();\n\t\ttry {\n\n\t\t\tString[] parameters = new String[]{CliFrontendTestUtils.getTestJarPath(), \"-f\", \"true\", \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 4\"));\n\t\t}\n\t\tfinally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-10-07 18:50:45","commitOrder":8,"curCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath(), \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli()));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 17\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","date":"2020-10-27 23:07:18","endLine":97,"groupId":"101692","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowExecutionPlanWithParallelism","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/3172a809278076885da82dab274a8bbe2e0a78.src","preCode":"\tpublic void testShowExecutionPlanWithParallelism() {\n\t\treplaceStdOut();\n\t\ttry {\n\t\t\tString[] parameters = {\"-p\", \"17\", CliFrontendTestUtils.getTestJarPath(), \"--arg\", \"suffix\"};\n\t\t\tConfiguration configuration = getConfiguration();\n\t\t\tCliFrontend testFrontend = new CliFrontend(\n\t\t\t\tconfiguration,\n\t\t\t\tCollections.singletonList(getCli(configuration)));\n\t\t\ttestFrontend.info(parameters);\n\t\t\tassertTrue(buffer.toString().contains(\"\\\"parallelism\\\" : 17\"));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(\"Program caused an exception: \" + e.getMessage());\n\t\t} finally {\n\t\t\trestoreStdOut();\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/cli/CliFrontendInfoTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"15f3844f1a325f898540a5c1b70928c3688787a6","commitMessage":"@@@[FLINK-19493] In CliFrontend.  make flow of Configuration more obvious\n\nBefore.  it was up to the CustomCommandLine implementation whether any\nConfiguration was passed through from the flink-conf.yaml or wherever\nthe base Configuration came from.\n\nNow.  we make the flow of the Configuration explicit in\nCliFrontend.getEffectiveConfiguration(). Instead of relying on the\nConfiguration we get from the CustomCommandLine we ask the\nCustomCommandLine to materialize its settings and add them manually to\nan effective Configuration that the CliFrontend controls.\n\nThis removes the Configuration parameter from CustomCommandLines that\ndon't need it anymore.  such as DefaultCLI.  which means we also have to\ntouch tests.\n\nThis adds a new integration test in CliFrontendITCase that verifies\ncorrect parameter passing and also verifies that command line arguments\noverride base settings.\n","date":"2020-10-27 23:07:18","modifiedFileCount":"25","status":"M","submitter":"Aljoscha Krettek"}]
