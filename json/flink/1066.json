[{"authorTime":"2021-01-22 04:15:38","codes":[{"authorDate":"2021-01-22 04:15:38","commitOrder":4,"curCode":"    protected EmbeddedRocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = TEMP_FOLDER.newFolder().getAbsolutePath();\n        EmbeddedRocksDBStateBackend backend =\n                new EmbeddedRocksDBStateBackend(enableIncrementalCheckpointing);\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","date":"2021-02-25 10:11:27","endLine":167,"groupId":"15552","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getStateBackend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/c4bde0a0227525d78088e0dbebbc2680ef7c4a.src","preCode":"    protected EmbeddedRocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = TEMP_FOLDER.newFolder().getAbsolutePath();\n        EmbeddedRocksDBStateBackend backend =\n                new EmbeddedRocksDBStateBackend(enableIncrementalCheckpointing);\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/EmbeddedRocksDBStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2021-01-22 04:15:38","commitOrder":4,"curCode":"    protected RocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = tempFolder.newFolder().getAbsolutePath();\n        String checkpointPath = tempFolder.newFolder().toURI().toString();\n        RocksDBStateBackend backend =\n                new RocksDBStateBackend(\n                        new FsStateBackend(checkpointPath), enableIncrementalCheckpointing);\n\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","date":"2021-02-25 10:11:27","endLine":62,"groupId":"15552","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"getStateBackend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/8ef85e74c2f613676360e24fbf0642fc92c6b1.src","preCode":"    protected RocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = tempFolder.newFolder().getAbsolutePath();\n        String checkpointPath = tempFolder.newFolder().toURI().toString();\n        RocksDBStateBackend backend =\n                new RocksDBStateBackend(\n                        new FsStateBackend(checkpointPath), enableIncrementalCheckpointing);\n\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"MB"}],"commitId":"0a76daba0a428a322f0273d7dc6a70966f62bf26","commitMessage":"@@@[FLINK-19467][runtime / state backends] Implement HashMapStateBackend and EmbeddedRocksDBStateBackend\n","date":"2021-02-25 10:11:27","modifiedFileCount":"32","status":"M","submitter":"Seth Wiesman"},{"authorTime":"2021-01-22 04:15:38","codes":[{"authorDate":"2021-06-02 01:12:28","commitOrder":5,"curCode":"    protected ConfigurableStateBackend getStateBackend() throws IOException {\n        dbPath = TEMP_FOLDER.newFolder().getAbsolutePath();\n        EmbeddedRocksDBStateBackend backend =\n                new EmbeddedRocksDBStateBackend(enableIncrementalCheckpointing);\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","date":"2021-06-08 01:53:34","endLine":169,"groupId":"1066","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getStateBackend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b2/fba07fae33ddff183761ae12be0cac96b506d1.src","preCode":"    protected EmbeddedRocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = TEMP_FOLDER.newFolder().getAbsolutePath();\n        EmbeddedRocksDBStateBackend backend =\n                new EmbeddedRocksDBStateBackend(enableIncrementalCheckpointing);\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/EmbeddedRocksDBStateBackendTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2021-01-22 04:15:38","commitOrder":5,"curCode":"    protected RocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = tempFolder.newFolder().getAbsolutePath();\n        String checkpointPath = tempFolder.newFolder().toURI().toString();\n        RocksDBStateBackend backend =\n                new RocksDBStateBackend(\n                        new FsStateBackend(checkpointPath), enableIncrementalCheckpointing);\n\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","date":"2021-02-25 10:11:27","endLine":62,"groupId":"1066","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getStateBackend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/8ef85e74c2f613676360e24fbf0642fc92c6b1.src","preCode":"    protected RocksDBStateBackend getStateBackend() throws IOException {\n        dbPath = tempFolder.newFolder().getAbsolutePath();\n        String checkpointPath = tempFolder.newFolder().toURI().toString();\n        RocksDBStateBackend backend =\n                new RocksDBStateBackend(\n                        new FsStateBackend(checkpointPath), enableIncrementalCheckpointing);\n\n        Configuration configuration = new Configuration();\n        configuration.set(\n                RocksDBOptions.TIMER_SERVICE_FACTORY,\n                EmbeddedRocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n        backend = backend.configure(configuration, Thread.currentThread().getContextClassLoader());\n        backend.setDbStoragePath(dbPath);\n        return backend;\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"292fa16b03902daae31c9535a2f53b0fa00160da","commitMessage":"@@@[FLINK-22835][tests] Use ChangelogStateBackend on recovery in the relevant tests\n","date":"2021-06-08 01:53:34","modifiedFileCount":"10","status":"M","submitter":"Roman Khachatryan"}]
