[{"authorTime":"2020-05-20 02:37:31","codes":[{"authorDate":"2020-05-20 02:37:31","commitOrder":1,"curCode":"\tpublic void testWatermarksDoNotRegress() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(12L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(10L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tnew Watermark(12L),\n\t\t\tnew Watermark(17L),\n\t\t\tnew Watermark(18L)\n\t\t));\n\t}\n","date":"2020-05-28 00:08:40","endLine":61,"groupId":"20234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarksDoNotRegress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/b3f81b784e4a34637e12942ae05251dfd2504b.src","preCode":"\tpublic void testWatermarksDoNotRegress() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(12L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(10L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tnew Watermark(12L),\n\t\t\tnew Watermark(17L),\n\t\t\tnew Watermark(18L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/WatermarkToDataOutputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2020-05-20 02:37:31","commitOrder":1,"curCode":"\tpublic void becomingActiveEmitsStatus() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.markIdle();\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(100L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tStreamStatus.IDLE,\n\t\t\tStreamStatus.ACTIVE,\n\t\t\tnew Watermark(100L)\n\t\t));\n\t}\n","date":"2020-05-28 00:08:40","endLine":76,"groupId":"20233","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"becomingActiveEmitsStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/b3f81b784e4a34637e12942ae05251dfd2504b.src","preCode":"\tpublic void becomingActiveEmitsStatus() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.markIdle();\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(100L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tStreamStatus.IDLE,\n\t\t\tStreamStatus.ACTIVE,\n\t\t\tnew Watermark(100L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/WatermarkToDataOutputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"54f1a4c8071a6d71111185449e795b2f00fa49e9","commitMessage":"@@@[FLINK-17899][runtime] Integrate FLIP-126 Watermarks with FLIP-27 Sources\n","date":"2020-05-28 00:08:40","modifiedFileCount":"8","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2021-08-13 20:11:51","codes":[{"authorDate":"2020-05-20 02:37:31","commitOrder":2,"curCode":"\tpublic void testWatermarksDoNotRegress() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(12L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(10L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tnew Watermark(12L),\n\t\t\tnew Watermark(17L),\n\t\t\tnew Watermark(18L)\n\t\t));\n\t}\n","date":"2020-05-28 00:08:40","endLine":61,"groupId":"103148","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWatermarksDoNotRegress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0f/b3f81b784e4a34637e12942ae05251dfd2504b.src","preCode":"\tpublic void testWatermarksDoNotRegress() {\n\t\tfinal CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n\t\tfinal WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(12L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(10L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(17L));\n\t\twmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(18L));\n\n\t\tassertThat(testingOutput.events, contains(\n\t\t\tnew Watermark(12L),\n\t\t\tnew Watermark(17L),\n\t\t\tnew Watermark(18L)\n\t\t));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/WatermarkToDataOutputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2021-08-13 20:11:51","commitOrder":2,"curCode":"    public void becomingActiveEmitsStatus() {\n        final CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n        final WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n        wmOutput.markIdle();\n        wmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(100L));\n\n        assertThat(\n                testingOutput.events,\n                contains(WatermarkStatus.IDLE, WatermarkStatus.ACTIVE, new Watermark(100L)));\n    }\n","date":"2021-08-17 01:05:54","endLine":70,"groupId":"103148","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"becomingActiveEmitsStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/91/77ba09f7cbbe3ac332ec57d43cadfc707d62cf.src","preCode":"    public void becomingActiveEmitsStatus() {\n        final CollectingDataOutput<Object> testingOutput = new CollectingDataOutput<>();\n        final WatermarkToDataOutput wmOutput = new WatermarkToDataOutput(testingOutput);\n\n        wmOutput.markIdle();\n        wmOutput.emitWatermark(new org.apache.flink.api.common.eventtime.Watermark(100L));\n\n        assertThat(\n                testingOutput.events,\n                contains(StreamStatus.IDLE, StreamStatus.ACTIVE, new Watermark(100L)));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/source/WatermarkToDataOutputTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"474808d5833398247aa27a5544abf09d6bd17ee4","commitMessage":"@@@[FLINK-23767][streaming] Rename StreamStatus to WatermarkStatus.\n\ngit grep -l 'streamStatus' | xargs sed -i '' -e 's/streamStatus/watermarkStatus/g'\ngit grep -l 'StreamStatus' | xargs sed -i '' -e 's/StreamStatus/WatermarkStatus/g'\ngit grep -l 'streamstatus' | xargs sed -i '' -e 's/streamstatus/watermarkstatus/g'\ngit grep -l 'Stream Status' | xargs sed -i '' -e 's/Stream Status/Watermark Status/g'\ngit grep -l 'Stream status' | xargs sed -i '' -e 's/Stream status/Watermark status/g'\ngit grep -l 'stream status' | xargs sed -i '' -e 's/stream status/watermark status/g'\nRenamed class StreamStatus(Test) -> WatermarkStatus(Test)\nRenamed package streamstatus -> watermarkstatus\nReverted Kinesis as it does have a real StreamStatus\nmvn spotless:apply\n","date":"2021-08-17 01:05:54","modifiedFileCount":"66","status":"M","submitter":"Arvid Heise"}]
