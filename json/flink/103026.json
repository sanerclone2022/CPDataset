[{"authorTime":"2020-09-24 17:38:56","codes":[{"authorDate":"2020-10-26 23:46:16","commitOrder":2,"curCode":"\tprivate void testNoSupportForIterationsInBatchHelper(final Transformation<?>... transformations) {\n\t\tfinal List<Transformation<?>> registeredTransformations = new ArrayList<>();\n\t\tCollections.addAll(registeredTransformations, transformations);\n\n\t\tStreamGraphGenerator streamGraphGenerator =\n\t\t\t\tnew StreamGraphGenerator(\n\t\t\t\t\t\tregisteredTransformations,\n\t\t\t\t\t\tnew ExecutionConfig(),\n\t\t\t\t\t\tnew CheckpointConfig());\n\t\tstreamGraphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH);\n\n\t\texpectedException.expect(UnsupportedOperationException.class);\n\t\texpectedException.expectMessage(\"Iterations are not supported in BATCH execution mode.\");\n\t\tstreamGraphGenerator.generate();\n\t}\n","date":"2020-10-27 21:38:34","endLine":433,"groupId":"41507","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoSupportForIterationsInBatchHelper","params":"(finalTransformation<?>...transformations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/86/15e711a803f7175911d45194938a6e8841b12c.src","preCode":"\tprivate void testNoSupportForIterationsInBatchHelper(final Transformation<?>... transformations) {\n\t\tfinal List<Transformation<?>> registeredTransformations = new ArrayList<>();\n\t\tCollections.addAll(registeredTransformations, transformations);\n\n\t\tStreamGraphGenerator streamGraphGenerator =\n\t\t\t\tnew StreamGraphGenerator(\n\t\t\t\t\t\tregisteredTransformations,\n\t\t\t\t\t\tnew ExecutionConfig(),\n\t\t\t\t\t\tnew CheckpointConfig());\n\t\tstreamGraphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH);\n\n\t\texpectedException.expect(UnsupportedOperationException.class);\n\t\texpectedException.expectMessage(\"Iterations are not supported in BATCH execution mode.\");\n\t\tstreamGraphGenerator.generate();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2020-09-24 17:38:56","commitOrder":2,"curCode":"\tprivate StreamGraph generateStreamGraph(\n\t\t\tfinal RuntimeExecutionMode initMode,\n\t\t\tfinal Transformation<?>... transformations) {\n\n\t\tfinal List<Transformation<?>> registeredTransformations = new ArrayList<>();\n\t\tCollections.addAll(registeredTransformations, transformations);\n\n\t\tStreamGraphGenerator streamGraphGenerator =\n\t\t\t\tnew StreamGraphGenerator(\n\t\t\t\t\t\tregisteredTransformations,\n\t\t\t\t\t\tnew ExecutionConfig(),\n\t\t\t\t\t\tnew CheckpointConfig());\n\t\tstreamGraphGenerator.setRuntimeExecutionMode(initMode);\n\t\treturn streamGraphGenerator.generate();\n\t}\n","date":"2020-10-01 15:19:34","endLine":148,"groupId":"41507","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateStreamGraph","params":"(finalRuntimeExecutionModeinitMode@finalTransformation<?>...transformations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2c/06eb72e6bced25ad4228f0644996f71818ef19.src","preCode":"\tprivate StreamGraph generateStreamGraph(\n\t\t\tfinal RuntimeExecutionMode initMode,\n\t\t\tfinal Transformation<?>... transformations) {\n\n\t\tfinal List<Transformation<?>> registeredTransformations = new ArrayList<>();\n\t\tCollections.addAll(registeredTransformations, transformations);\n\n\t\tStreamGraphGenerator streamGraphGenerator =\n\t\t\t\tnew StreamGraphGenerator(\n\t\t\t\t\t\tregisteredTransformations,\n\t\t\t\t\t\tnew ExecutionConfig(),\n\t\t\t\t\t\tnew CheckpointConfig());\n\t\tstreamGraphGenerator.setRuntimeExecutionMode(initMode);\n\t\treturn streamGraphGenerator.generate();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"NB"}],"commitId":"756995330b01285b63fb8601d971d98af1616fff","commitMessage":"@@@[FLINK-19815] CoFeedbackTransformation is not supported in BATCH mode\n\nThis closes #13795.\n","date":"2020-10-27 21:38:34","modifiedFileCount":"2","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2021-08-12 00:09:10","codes":[{"authorDate":"2021-08-12 00:09:10","commitOrder":3,"curCode":"    private void testNoSupportForIterationsInBatchHelper(\n            final Transformation<?>... transformations) {\n        final List<Transformation<?>> registeredTransformations = new ArrayList<>();\n        Collections.addAll(registeredTransformations, transformations);\n\n        final Configuration configuration = new Configuration();\n        configuration.set(ExecutionOptions.RUNTIME_MODE, RuntimeExecutionMode.BATCH);\n\n        StreamGraphGenerator streamGraphGenerator =\n                new StreamGraphGenerator(\n                        registeredTransformations,\n                        new ExecutionConfig(),\n                        new CheckpointConfig(),\n                        configuration);\n\n        expectedException.expect(UnsupportedOperationException.class);\n        expectedException.expectMessage(\"Iterations are not supported in BATCH execution mode.\");\n        streamGraphGenerator.generate();\n    }\n","date":"2021-08-13 23:14:56","endLine":502,"groupId":"103026","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoSupportForIterationsInBatchHelper","params":"(finalTransformation<?>...transformations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c3/a11115c73e4b56f4512869dcc841b1eac70b24.src","preCode":"    private void testNoSupportForIterationsInBatchHelper(\n            final Transformation<?>... transformations) {\n        final List<Transformation<?>> registeredTransformations = new ArrayList<>();\n        Collections.addAll(registeredTransformations, transformations);\n\n        StreamGraphGenerator streamGraphGenerator =\n                new StreamGraphGenerator(\n                        registeredTransformations, new ExecutionConfig(), new CheckpointConfig());\n        streamGraphGenerator.setRuntimeExecutionMode(RuntimeExecutionMode.BATCH);\n\n        expectedException.expect(UnsupportedOperationException.class);\n        expectedException.expectMessage(\"Iterations are not supported in BATCH execution mode.\");\n        streamGraphGenerator.generate();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"},{"authorDate":"2021-08-12 00:09:10","commitOrder":3,"curCode":"    private StreamGraph generateStreamGraph(\n            final RuntimeExecutionMode initMode, final Transformation<?>... transformations) {\n\n        final List<Transformation<?>> registeredTransformations = new ArrayList<>();\n        Collections.addAll(registeredTransformations, transformations);\n\n        final Configuration configuration = new Configuration();\n        configuration.set(ExecutionOptions.RUNTIME_MODE, initMode);\n\n        return new StreamGraphGenerator(\n                        registeredTransformations,\n                        new ExecutionConfig(),\n                        new CheckpointConfig(),\n                        configuration)\n                .generate();\n    }\n","date":"2021-08-13 23:14:56","endLine":273,"groupId":"103026","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"generateStreamGraph","params":"(finalRuntimeExecutionModeinitMode@finalTransformation<?>...transformations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/5f22738db69802f742d2978bcaea634a89c493.src","preCode":"    private StreamGraph generateStreamGraph(\n            final RuntimeExecutionMode initMode, final Transformation<?>... transformations) {\n\n        final List<Transformation<?>> registeredTransformations = new ArrayList<>();\n        Collections.addAll(registeredTransformations, transformations);\n\n        StreamGraphGenerator streamGraphGenerator =\n                new StreamGraphGenerator(\n                        registeredTransformations, new ExecutionConfig(), new CheckpointConfig());\n        streamGraphGenerator.setRuntimeExecutionMode(initMode);\n        return streamGraphGenerator.generate();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorExecutionModeDetectionTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"0875db3559afdb847d02de585ad7348b39eee053","commitMessage":"@@@[FLINK-20897][table-planner] Support batch mode in StreamTableEnvironment\n\nThis enables batch mode for StreamTableEnvironment.\n\nBoth StreamExecutionEnvironment.  TableEnvironment.  and StreamTableEnvironment\nuse StreamGraphGenerator with the same configuration. Previous work ensured\nthat when execution.runtime-mode is set to BATCH all batch properties are\neither set consistently (e.g. shuffle mode) or have no impact on the pipeline\n(e.g. auto watermark interval.  state backends).\n\nMost of the changes are removing checks and ensuring that internal (e.g. values)\nand external (e.g. data stream.  table source) source transformations are set\nto BOUNDED. The latter is a complex topic as we currently use 4 different ways\nof expressing external sources:\n\n- InputFormatProvider: Boundedness needs to be explicitly set by the planner\ndue to custom formats that don't extend from FileInputFormat.\n- SourceFunctionProvider: Boundedness needs to be explicitly set by the planner\nvia custom transformation to also disable progressive watermarks.\n- DataStreamScanProvider: Boundedness needs to be explicitly set by the planner\nto ensure old behavior again. New source interfaces + FileInputFormat are fine.\n- TransformationScanProvider: Boundedness can be derived automatically and will\nonly work with new source interfaces + FileInputFormat.\n\nThis closes #16793.\n","date":"2021-08-13 23:14:56","modifiedFileCount":"18","status":"M","submitter":"Timo Walther"}]
