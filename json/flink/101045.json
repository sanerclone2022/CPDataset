[{"authorTime":"2020-01-07 19:33:31","codes":[{"authorDate":"2019-12-19 14:30:42","commitOrder":2,"curCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('an', 'bn')\"));\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\"));\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\"));\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\"));\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(null as int))\"));\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-01-02 12:43:03","endLine":120,"groupId":"37050","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/d2f661ecdd7623bfcc826f2637a3edb1f3900f.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('an', 'bn')\"));\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\"));\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\"));\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\"));\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(null as int))\"));\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"},{"authorDate":"2020-01-07 19:33:31","commitOrder":2,"curCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select negative(5.1)\"));\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","date":"2020-01-07 19:33:31","endLine":132,"groupId":"37050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecimalReturnType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/f2c3a91fd5cefaa0d5b79d68ce2a5f6bf2f5ed.src","preCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select negative(5.1)\"));\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"b195383b6b792ea1363ae340ffcfb6ef45c84677","commitMessage":"@@@[FLINK-15482][table][hive] Fix calling Hive functions with returning decimal type failed (#10775)\n\n","date":"2020-01-07 19:33:31","modifiedFileCount":"4","status":"M","submitter":"Rui Li"},{"authorTime":"2020-03-05 17:01:00","codes":[{"authorDate":"2020-03-05 17:01:00","commitOrder":3,"curCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('an', 'bn')\"));\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\"));\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\"));\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\"));\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(null as int))\"));\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-03-05 17:01:00","endLine":130,"groupId":"37050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/a5494dbb276a2625bb988aa78764ff07620447.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('an', 'bn')\"));\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\"));\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\"));\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\"));\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(null as int))\"));\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-03-05 17:01:00","commitOrder":3,"curCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select negative(5.1)\"));\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","date":"2020-03-05 17:01:00","endLine":142,"groupId":"37050","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecimalReturnType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/a5494dbb276a2625bb988aa78764ff07620447.src","preCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule(HiveShimLoader.getHiveVersion()));\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select negative(5.1)\"));\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"b4730308a75f5a99f930622ccdd5289380c5d73c","commitMessage":"@@@[FLINK-16418][hive] Hide hive version to avoid user confuse (#11304)\n\n","date":"2020-03-05 17:01:00","modifiedFileCount":"5","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-05-09 11:25:24","codes":[{"authorDate":"2020-05-09 11:25:24","commitOrder":4,"curCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-05-12 09:37:14","endLine":136,"groupId":"2734","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/cbda51c27b4f112bd3632f4919d082ecdb8672.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('an', 'bn')\"));\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\"));\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\"));\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\"));\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = TableUtils.collectToList(tEnv.sqlQuery(\"select concat('ab',cast(null as int))\"));\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-05-09 11:25:24","commitOrder":4,"curCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(tEnv.sqlQuery(\"select negative(5.1)\").execute().collect());\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","date":"2020-05-12 09:37:14","endLine":148,"groupId":"2734","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecimalReturnType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/cbda51c27b4f112bd3632f4919d082ecdb8672.src","preCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = TableUtils.collectToList(tEnv.sqlQuery(\"select negative(5.1)\"));\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"2160c3294ef87143ab9a4e8138cb618651499792","commitMessage":"@@@[FLINK-17252][table] Add Table#execute api and support SELECT statement in TableEnvironment#executeSql\n\nThis closes #12049\n","date":"2020-05-12 09:37:14","modifiedFileCount":"16","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-06-18 11:52:35","codes":[{"authorDate":"2020-06-18 11:52:35","commitOrder":5,"curCode":"\tpublic void testConstantArguments() {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = CollectionUtil.iteratorToList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":134,"groupId":"24490","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/3fad4189ba46177da2276f88605b456212506a.src","preCode":"\tpublic void testConstantArguments() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n\t\tassertEquals(\"[anbn]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\").execute().collect());\n\t\tassertEquals(\"[abcdefg]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\").execute().collect());\n\t\tassertEquals(\"[ab12.34]\", results.toString());\n\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\").execute().collect());\n\t\tassertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n\t\t\r\n\t\tresults = Lists.newArrayList(\n\t\t\t\ttEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n\t\tassertEquals(\"[null]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-06-18 11:52:35","commitOrder":5,"curCode":"\tpublic void testDecimalReturnType() {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = CollectionUtil.iteratorToList(tEnv.sqlQuery(\"select negative(5.1)\").execute().collect());\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","date":"2020-09-07 17:37:11","endLine":146,"groupId":"24490","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDecimalReturnType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/3fad4189ba46177da2276f88605b456212506a.src","preCode":"\tpublic void testDecimalReturnType() throws Exception {\n\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n\t\ttEnv.unloadModule(\"core\");\n\t\ttEnv.loadModule(\"hive\", new HiveModule());\n\n\t\tList<Row> results = Lists.newArrayList(tEnv.sqlQuery(\"select negative(5.1)\").execute().collect());\n\n\t\tassertEquals(\"[-5.1]\", results.toString());\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"91d2b628bfe1a2e7beed5111a6d9a572cc6bc310","commitMessage":"@@@[hotfix][table][connector] Use CollectionUtil#iteratorToList instead of Guava Lists\n","date":"2020-09-07 17:37:11","modifiedFileCount":"18","status":"M","submitter":"godfreyhe"},{"authorTime":"2021-06-24 15:56:28","codes":[{"authorDate":"2021-06-24 15:56:28","commitOrder":6,"curCode":"    public void testConstantArguments() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvInBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n        assertEquals(\"[anbn]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[abcdefg]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[ab12.34]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        \"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n        \r\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n        assertEquals(\"[null]\", results.toString());\n    }\n","date":"2021-07-06 19:28:35","endLine":171,"groupId":"101045","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testConstantArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/7b5d8b69ec892b9e2efaabe40913897d4b017f.src","preCode":"    public void testConstantArguments() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('an', 'bn')\").execute().collect());\n        assertEquals(\"[anbn]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab', cast('cdefghi' as varchar(5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[abcdefg]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(12.34 as decimal(10,5)))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[ab12.34]\", results.toString());\n\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\n                                        \"select concat(cast('2018-01-19' as date),cast('2019-12-27 17:58:23.385' as timestamp))\")\n                                .execute()\n                                .collect());\n        assertEquals(\"[2018-01-192019-12-27 17:58:23.385]\", results.toString());\n\n        \r\n        \r\n        results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select concat('ab',cast(null as int))\").execute().collect());\n        assertEquals(\"[null]\", results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-06-24 15:56:28","commitOrder":6,"curCode":"    public void testDecimalReturnType() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvInBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select negative(5.1)\").execute().collect());\n\n        assertEquals(\"[-5.1]\", results.toString());\n    }\n","date":"2021-07-06 19:28:35","endLine":185,"groupId":"101045","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testDecimalReturnType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/7b5d8b69ec892b9e2efaabe40913897d4b017f.src","preCode":"    public void testDecimalReturnType() {\n        TableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n\n        tEnv.unloadModule(\"core\");\n        tEnv.loadModule(\"hive\", new HiveModule());\n\n        List<Row> results =\n                CollectionUtil.iteratorToList(\n                        tEnv.sqlQuery(\"select negative(5.1)\").execute().collect());\n\n        assertEquals(\"[-5.1]\", results.toString());\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/module/hive/HiveModuleTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"312fe4c1ce17ac6e5515bcab560b86456993daf5","commitMessage":"@@@[FLINK-22880][table] Remove 'blink' term from code base\n\nThis removes all mentionings of the term \"blink\" in the code\nbase. In order to reduce user confusion.  do not use this term\nanymore but refer to as \"Flink SQL\" or \"Flink Table API\".\n\nThis closes #16374.\n","date":"2021-07-06 19:28:35","modifiedFileCount":"73","status":"M","submitter":"Timo Walther"}]
