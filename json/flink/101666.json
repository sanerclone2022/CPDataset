[{"authorTime":"2016-09-21 20:55:58","codes":[{"authorDate":"2016-08-11 00:44:50","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal int parallelism = Integer.parseInt(args[3]);\n\t\tfinal String checkpointPath = args[4];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[5]);\n\t\tfinal String outputPath = args[6];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2016-09-01 01:10:01","endLine":80,"groupId":"15636","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/e479769a7f348dcbedbe69616d7f421f7a728b.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal int parallelism = Integer.parseInt(args[3]);\n\t\tfinal String checkpointPath = args[4];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[5]);\n\t\tfinal String outputPath = args[6];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2016-09-21 20:55:58","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal String checkpointPath = args[3];\n\t\tfinal String outputPath = args[4];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2016-09-22 20:42:12","endLine":85,"groupId":"33048","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/96cb0b5fa171bb00ab2a7dd9a4561ef1138e4b.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal String checkpointPath = args[3];\n\t\tfinal String outputPath = args[4];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"}],"commitId":"3b8fe95ec728d59e3ffba2901450c56d7cca2b24","commitMessage":"@@@[FLINK-4603] [checkpoints] Fix user code classloading in KeyedStateBackend\n\nThis closes #2533\n","date":"2016-09-22 20:42:12","modifiedFileCount":"9","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-03-17 00:03:03","codes":[{"authorDate":"2017-03-17 00:03:03","commitOrder":4,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2017-05-05 17:06:07","endLine":77,"groupId":"15636","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cb/d553ce6816ba23753cdfe0d1cd47db1fd78169.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal int parallelism = Integer.parseInt(args[3]);\n\t\tfinal String checkpointPath = args[4];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[5]);\n\t\tfinal String outputPath = args[6];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2017-03-17 00:03:03","commitOrder":4,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2017-05-05 17:06:07","endLine":84,"groupId":"33048","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/4a3a88571a7634e0a043548601b5dac5350f44.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String jarFile = args[0];\n\t\tfinal String host = args[1];\n\t\tfinal int port = Integer.parseInt(args[2]);\n\t\tfinal String checkpointPath = args[3];\n\t\tfinal String outputPath = args[4];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(host, port, jarFile);\n\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer,Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"ddd6a99a95b56c52ea5b5153b7270b578f5479bc","commitMessage":"@@@[FLINK-6078] Remove CuratorFramework#close calls from ZooKeeper based HA services\n\nRemove client less factory methods from ZooKeeperUtils\n\nIntroduce default job id\n\nThis closes #3781.\n","date":"2017-05-05 17:06:07","modifiedFileCount":"114","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":5,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":76,"groupId":"15636","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/4b8df63336c307971abc22ba37582aa1d3d416.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":5,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":88,"groupId":"33048","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/5f2d74906392d0a9309a0b91bc113b28c3a037.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().disableSysoutLogging();\n\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2020-05-22 01:37:14","commitOrder":6,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\t\tfinal Optional<Boolean> unalignedCheckpoints = args.length > 4 ? Optional.of(Boolean.parseBoolean(args[4])) : Optional.empty();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tunalignedCheckpoints.ifPresent(value -> env.getCheckpointConfig().enableUnalignedCheckpoints(value));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2020-05-22 01:37:14","endLine":79,"groupId":"44566","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/f4aa1d3bf87c2722be7eed306c9f108d2187ed.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":6,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":88,"groupId":"33048","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/5f2d74906392d0a9309a0b91bc113b28c3a037.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"463dc8b9cab99d6d5df07ec0e593843885e3ac72","commitMessage":"@@@Merge pull request #12244 from pnowojski/f17258\n\n[FLINK-17258][network] Fix couple of ITCases that were failing with enabled unaligned checkpoints","date":"2020-05-22 01:37:14","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2020-05-22 01:38:35","commitOrder":7,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2020-05-22 01:38:35","endLine":76,"groupId":"15636","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/95/4b8df63336c307971abc22ba37582aa1d3d416.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\t\tfinal Optional<Boolean> unalignedCheckpoints = args.length > 4 ? Optional.of(Boolean.parseBoolean(args[4])) : Optional.empty();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tunalignedCheckpoints.ifPresent(value -> env.getCheckpointConfig().enableUnalignedCheckpoints(value));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":7,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":88,"groupId":"33048","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/5f2d74906392d0a9309a0b91bc113b28c3a037.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"840a4d954233f8769a54ac2ada5d34a5ef80c82d","commitMessage":"@@@Revert \"Merge pull request #12244 from pnowojski/f17258\"\n\nThis reverts commit 463dc8b9cab99d6d5df07ec0e593843885e3ac72.\n","date":"2020-05-22 01:38:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2020-05-15 02:34:22","commitOrder":8,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\t\tfinal Optional<Boolean> unalignedCheckpoints = args.length > 4 ? Optional.of(Boolean.parseBoolean(args[4])) : Optional.empty();\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tunalignedCheckpoints.ifPresent(value -> env.getCheckpointConfig().enableUnalignedCheckpoints(value));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","date":"2020-05-22 01:38:56","endLine":79,"groupId":"101666","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d6/f4aa1d3bf87c2722be7eed306c9f108d2187ed.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal int parallelism = Integer.parseInt(args[0]);\n\t\tfinal String checkpointPath = args[1];\n\t\tfinal int checkpointingInterval = Integer.parseInt(args[2]);\n\t\tfinal String outputPath = args[3];\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":8,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","date":"2019-08-27 20:27:23","endLine":88,"groupId":"101666","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/5f2d74906392d0a9309a0b91bc113b28c3a037.src","preCode":"\tpublic static void main(String[] args) throws Exception {\n\t\tfinal String checkpointPath = args[0];\n\t\tfinal String outputPath = args[1];\n\t\tfinal int parallelism = 1;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tenv.setParallelism(parallelism);\n\t\t\t\tenv.enableCheckpointing(100);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 1000));\n\t\tenv.setStateBackend(new FsStateBackend(checkpointPath));\n\n\t\tDataStream<Integer> source = env.addSource(new InfiniteIntegerSource());\n\t\tsource\n\t\t\t\t.map(new MapFunction<Integer, Tuple2<Integer, Integer>>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Tuple2<Integer, Integer> map(Integer value) throws Exception {\n\t\t\t\t\t\treturn new Tuple2<>(ThreadLocalRandom.current().nextInt(parallelism), value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.keyBy(new KeySelector<Tuple2<Integer, Integer>, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Tuple2<Integer, Integer> value) throws Exception {\n\t\t\t\t\t\treturn value.f0;\n\t\t\t\t\t}\n\t\t\t\t}).flatMap(new ReducingStateFlatMap()).writeAsText(outputPath, FileSystem.WriteMode.OVERWRITE);\n\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/jar/CheckpointingCustomKvStateProgram.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"b3a78515870d3a9b461130b6cfc92e72412ed209","commitMessage":"@@@[FLINK-17258][network][test] Run ClassLoaderITCase#testDisposeSavepointWithCustomKvState without unaligned checkpoints\n\nThis test needs many concurent checkpoint & savepoints and this is currently not supported with unaligned checkpoints.\n","date":"2020-05-22 01:38:56","modifiedFileCount":"2","status":"M","submitter":"Piotr Nowojski"}]
