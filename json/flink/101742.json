[{"authorTime":"2020-11-02 17:17:57","codes":[{"authorDate":"2020-04-23 23:22:55","commitOrder":4,"curCode":"\tpublic void testApplicationSucceedsWhenAllJobsSucceed() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tfinal CompletableFuture<Void> applicationFuture = runApplication(dispatcherBuilder, 3);\n\n\t\t\r\n\t\tapplicationFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","date":"2020-05-01 04:08:04","endLine":249,"groupId":"6828","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationSucceedsWhenAllJobsSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/52abd0251233c297a69faa42a1b007fdfb039c.src","preCode":"\tpublic void testApplicationSucceedsWhenAllJobsSucceed() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tfinal CompletableFuture<Void> applicationFuture = runApplication(dispatcherBuilder, 3);\n\n\t\t\r\n\t\tapplicationFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"NB"},{"authorDate":"2020-11-02 17:17:57","commitOrder":4,"curCode":"\tpublic void testClusterIsShutdownInAttachedModeWhenJobCancelled() throws Exception {\n\t\tfinal CompletableFuture<ApplicationStatus> clusterShutdown = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway dispatcherGateway = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction(status -> {\n\t\t\t\t\tclusterShutdown.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t}).build();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t\t\t.setUserClassPaths(Collections.singletonList(new File(CliFrontendTestUtils.getTestJarPath()).toURI().toURL()))\n\t\t\t\t\t.setEntryPointClassName(MULTI_EXECUTE_JOB_CLASS_NAME)\n\t\t\t\t\t.setArguments(String.valueOf(2), String.valueOf(true))\n\t\t\t\t\t.build();\n\n\t\tfinal Configuration configuration = getConfiguration();\n\t\tconfiguration.set(DeploymentOptions.ATTACHED, true);\n\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = new ApplicationDispatcherBootstrap(\n\t\t\t\tprogram,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tconfiguration,\n\t\t\t\tdispatcherGateway,\n\t\t\t\tscheduledExecutor,\n\t\t\t\te -> {});\n\n\t\tfinal CompletableFuture<Void> applicationFuture =\n\t\t\t\tbootstrap.getApplicationCompletionFuture();\n\t\tassertException(applicationFuture, ApplicationFailureException.class);\n\n\t\tassertEquals(clusterShutdown.get(), ApplicationStatus.CANCELED);\n\t}\n","date":"2020-11-06 16:50:21","endLine":414,"groupId":"6833","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterIsShutdownInAttachedModeWhenJobCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/7fbe17a85a787e0b0e4a52b912a62146b58e15.src","preCode":"\tpublic void testClusterIsShutdownInAttachedModeWhenJobCancelled() throws Exception {\n\t\tfinal CompletableFuture<ApplicationStatus> clusterShutdown = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway dispatcherGateway = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction(status -> {\n\t\t\t\t\tclusterShutdown.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t}).build();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t\t\t.setUserClassPaths(Collections.singletonList(new File(CliFrontendTestUtils.getTestJarPath()).toURI().toURL()))\n\t\t\t\t\t.setEntryPointClassName(MULTI_EXECUTE_JOB_CLASS_NAME)\n\t\t\t\t\t.setArguments(String.valueOf(2), String.valueOf(true))\n\t\t\t\t\t.build();\n\n\t\tfinal Configuration configuration = getConfiguration();\n\t\tconfiguration.set(DeploymentOptions.ATTACHED, true);\n\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = new ApplicationDispatcherBootstrap(\n\t\t\t\tprogram,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tconfiguration,\n\t\t\t\tdispatcherGateway,\n\t\t\t\tscheduledExecutor,\n\t\t\t\te -> {});\n\n\t\tfinal CompletableFuture<Void> applicationFuture =\n\t\t\t\tbootstrap.getApplicationCompletionFuture();\n\t\tassertException(applicationFuture, ApplicationFailureException.class);\n\n\t\tassertEquals(clusterShutdown.get(), ApplicationStatus.CANCELED);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"B"}],"commitId":"2422fb5fc9da3aac95bbd52a6cac7d11479c1ae1","commitMessage":"@@@[FLINK-19909] Shutdown application cluster in attached mode when job cancelled\n\nCurrently when executing an application in Attached Application mode\nwe do not shutdown the cluster when the job is cancelled. That is\nbecause the exception thrown does not include the STATUS with which\nthe job failed.  so we cannot distinguish between different reasons\nof unsuccessfule termination. This commit fixes this.\n\nThis closes #13911.\n","date":"2020-11-06 16:50:21","modifiedFileCount":"4","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-11-04 02:38:12","codes":[{"authorDate":"2020-04-23 23:22:55","commitOrder":5,"curCode":"\tpublic void testApplicationSucceedsWhenAllJobsSucceed() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tfinal CompletableFuture<Void> applicationFuture = runApplication(dispatcherBuilder, 3);\n\n\t\t\r\n\t\tapplicationFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","date":"2020-05-01 04:08:04","endLine":249,"groupId":"101742","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationSucceedsWhenAllJobsSucceed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/52abd0251233c297a69faa42a1b007fdfb039c.src","preCode":"\tpublic void testApplicationSucceedsWhenAllJobsSucceed() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)));\n\n\t\tfinal CompletableFuture<Void> applicationFuture = runApplication(dispatcherBuilder, 3);\n\n\t\t\r\n\t\tapplicationFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2020-11-04 02:38:12","commitOrder":5,"curCode":"\tpublic void testClusterIsShutdownInAttachedModeWhenJobCancelled() throws Exception {\n\t\tfinal CompletableFuture<ApplicationStatus> clusterShutdown = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway dispatcherGateway = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction(status -> {\n\t\t\t\t\tclusterShutdown.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t}).build();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t\t\t.setUserClassPaths(Collections.singletonList(new File(CliFrontendTestUtils.getTestJarPath()).toURI().toURL()))\n\t\t\t\t\t.setEntryPointClassName(MULTI_EXECUTE_JOB_CLASS_NAME)\n\t\t\t\t\t.setArguments(String.valueOf(2), String.valueOf(true))\n\t\t\t\t\t.build();\n\n\t\tfinal Configuration configuration = getConfiguration();\n\t\tconfiguration.set(DeploymentOptions.ATTACHED, true);\n\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = new ApplicationDispatcherBootstrap(\n\t\t\t\tprogram,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tconfiguration,\n\t\t\t\tdispatcherGateway,\n\t\t\t\tscheduledExecutor,\n\t\t\t\te -> {});\n\n\t\tfinal CompletableFuture<Void> applicationFuture =\n\t\t\t\tbootstrap.getApplicationCompletionFuture();\n\t\tassertException(applicationFuture, UnsuccessfulExecutionException.class);\n\n\t\tassertEquals(clusterShutdown.get(), ApplicationStatus.CANCELED);\n\t}\n","date":"2020-11-06 16:50:22","endLine":414,"groupId":"101742","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterIsShutdownInAttachedModeWhenJobCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9c/b0ae8cc87bebc882b34bfc028d23f26298d5a7.src","preCode":"\tpublic void testClusterIsShutdownInAttachedModeWhenJobCancelled() throws Exception {\n\t\tfinal CompletableFuture<ApplicationStatus> clusterShutdown = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway dispatcherGateway = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.CANCELED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createCancelledJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction(status -> {\n\t\t\t\t\tclusterShutdown.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t}).build();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t\t\t.setUserClassPaths(Collections.singletonList(new File(CliFrontendTestUtils.getTestJarPath()).toURI().toURL()))\n\t\t\t\t\t.setEntryPointClassName(MULTI_EXECUTE_JOB_CLASS_NAME)\n\t\t\t\t\t.setArguments(String.valueOf(2), String.valueOf(true))\n\t\t\t\t\t.build();\n\n\t\tfinal Configuration configuration = getConfiguration();\n\t\tconfiguration.set(DeploymentOptions.ATTACHED, true);\n\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = new ApplicationDispatcherBootstrap(\n\t\t\t\tprogram,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tconfiguration,\n\t\t\t\tdispatcherGateway,\n\t\t\t\tscheduledExecutor,\n\t\t\t\te -> {});\n\n\t\tfinal CompletableFuture<Void> applicationFuture =\n\t\t\t\tbootstrap.getApplicationCompletionFuture();\n\t\tassertException(applicationFuture, ApplicationFailureException.class);\n\n\t\tassertEquals(clusterShutdown.get(), ApplicationStatus.CANCELED);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"ad44485d98b6abe20d736848edcb033791e92ddf","commitMessage":"@@@[hotfix] Rename ApplicationFailureException to UnsuccessfulExecutionException\n","date":"2020-11-06 16:50:22","modifiedFileCount":"3","status":"M","submitter":"Kostas Kloudas"}]
