[{"authorTime":"2020-03-16 10:35:23","codes":[{"authorDate":"2020-03-16 10:35:23","commitOrder":3,"curCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","date":"2020-03-16 10:35:23","endLine":118,"groupId":"38926","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMainContainerPorts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/10a7234ac551e9fdd688af0c2fa795c4cfaa7d.src","preCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"MB"},{"authorDate":"2020-03-16 10:35:23","commitOrder":3,"curCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertEquals(\"ClusterIP\", internalService.getSpec().getType());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withPort(REST_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","date":"2020-03-16 10:35:23","endLine":90,"groupId":"38926","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/f91ea8247f67c31e3dd6d0c1225e1e6d332aa0.src","preCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertEquals(\"ClusterIP\", internalService.getSpec().getType());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withPort(REST_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"}],"commitId":"3d119079288f3e9da7a19a32d68446ae5228b626","commitMessage":"@@@[FLINK-16508][k8s] Name the ports exposed by the main Container in Pod\n\nThis closes #11360 .","date":"2020-03-16 10:35:23","modifiedFileCount":"9","status":"M","submitter":"Canbin Zheng"},{"authorTime":"2020-03-25 14:31:22","codes":[{"authorDate":"2020-03-16 10:35:23","commitOrder":4,"curCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","date":"2020-03-16 10:35:23","endLine":118,"groupId":"38926","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMainContainerPorts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/10a7234ac551e9fdd688af0c2fa795c4cfaa7d.src","preCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-03-25 14:31:22","commitOrder":4,"curCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertEquals(\"ClusterIP\", internalService.getSpec().getType());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withPort(REST_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\texpectedLabels.putAll(userLabels);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","date":"2020-03-25 14:31:22","endLine":91,"groupId":"38926","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cb/591cb1fe37844708bf7e30cc94b21aaa048162.src","preCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertEquals(\"ClusterIP\", internalService.getSpec().getType());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withPort(REST_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"f4b68c4440c0c0a8ab061a4eac366bbb19233455","commitMessage":"@@@[FLINK-15640][k8s] Support to set labels for jobmanager and taskmanager pod\n\nThis closes #11489 .\n","date":"2020-03-25 14:31:22","modifiedFileCount":"16","status":"M","submitter":"Yang Wang"},{"authorTime":"2020-04-08 17:31:57","codes":[{"authorDate":"2020-03-16 10:35:23","commitOrder":5,"curCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","date":"2020-03-16 10:35:23","endLine":118,"groupId":"38926","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMainContainerPorts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/10a7234ac551e9fdd688af0c2fa795c4cfaa7d.src","preCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-04-08 17:31:57","commitOrder":5,"curCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertNull(internalService.getSpec().getType());\n\t\tassertEquals(\"None\", internalService.getSpec().getClusterIP());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\texpectedLabels.putAll(userLabels);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","date":"2020-04-08 17:31:57","endLine":91,"groupId":"42024","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/f79ede490a64733d0dc054f649db4002da70ca.src","preCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertEquals(\"ClusterIP\", internalService.getSpec().getType());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withPort(REST_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\texpectedLabels.putAll(userLabels);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"562e7711914e58f152288b512bbf05ec3a1cfbfa","commitMessage":"@@@[FLINK-16602][k8s] Rework the internal & external Service\n\n1.The REST service serves REST traffic while the internal service serves internal requests from TMs to JM.\n2.The REST service is always created but the internal service is only created in non-high availability setup.\n\nCo-authored-by: felixzheng <felixzheng@tencent.com>\n\nThis closes #11456 .","date":"2020-04-08 17:31:57","modifiedFileCount":"10","status":"M","submitter":"Canbin Zheng"},{"authorTime":"2020-05-26 01:23:10","codes":[{"authorDate":"2020-03-16 10:35:23","commitOrder":6,"curCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","date":"2020-03-16 10:35:23","endLine":118,"groupId":"102361","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMainContainerPorts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/10a7234ac551e9fdd688af0c2fa795c4cfaa7d.src","preCode":"\tpublic void testMainContainerPorts() {\n\t\tfinal List<ContainerPort> expectedContainerPorts = Arrays.asList(\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t.withContainerPort(REST_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withContainerPort(RPC_PORT)\n\t\t\t.build(),\n\t\t\tnew ContainerPortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withContainerPort(BLOB_SERVER_PORT)\n\t\t\t.build());\n\n\t\tassertEquals(expectedContainerPorts, this.resultMainContainer.getPorts());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InitJobManagerDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-05-26 01:23:10","commitOrder":6,"curCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tInternalServiceDecorator.getNamespacedInternalServiceName(CLUSTER_ID, NAMESPACE),\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(InternalServiceDecorator.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertNull(internalService.getSpec().getType());\n\t\tassertEquals(\"None\", internalService.getSpec().getClusterIP());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\texpectedLabels.putAll(userLabels);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","date":"2020-05-26 01:23:10","endLine":90,"groupId":"102361","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0b/39e00f3727b1cf58e72d906f4101ea29992bae.src","preCode":"\tpublic void testBuildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal List<HasMetadata> resources = this.internalServiceDecorator.buildAccompanyingKubernetesResources();\n\t\tassertEquals(1, resources.size());\n\n\t\tassertEquals(\n\t\t\tKubernetesUtils.getInternalServiceName(CLUSTER_ID) + \".\" + NAMESPACE,\n\t\t\tthis.flinkConfig.getString(JobManagerOptions.ADDRESS));\n\n\t\tfinal Service internalService = (Service) resources.get(0);\n\n\t\tassertEquals(Constants.API_VERSION, internalService.getApiVersion());\n\n\t\tassertEquals(KubernetesUtils.getInternalServiceName(CLUSTER_ID), internalService.getMetadata().getName());\n\n\t\tfinal Map<String, String> expectedLabels = getCommonLabels();\n\t\tassertEquals(expectedLabels, internalService.getMetadata().getLabels());\n\n\t\tassertNull(internalService.getSpec().getType());\n\t\tassertEquals(\"None\", internalService.getSpec().getClusterIP());\n\n\t\tList<ServicePort> expectedServicePorts = Arrays.asList(\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t.withPort(RPC_PORT)\n\t\t\t\t.build(),\n\t\t\tnew ServicePortBuilder()\n\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t.withPort(BLOB_SERVER_PORT)\n\t\t\t\t.build());\n\t\tassertEquals(expectedServicePorts, internalService.getSpec().getPorts());\n\n\t\texpectedLabels.put(Constants.LABEL_COMPONENT_KEY, Constants.LABEL_COMPONENT_JOB_MANAGER);\n\t\texpectedLabels.putAll(userLabels);\n\t\tassertEquals(expectedLabels, internalService.getSpec().getSelector());\n\t}\n","realPath":"flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecoratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"b19058a11097b9e5aa8a412c0c63abc5b1f61a61","commitMessage":"@@@[FLINK-17230] Fix incorrect returned address of Endpoint for external Service of ClusterIP type\n\nThis closes #12277 .","date":"2020-05-26 01:23:10","modifiedFileCount":"10","status":"M","submitter":"Canbin Zheng"}]
