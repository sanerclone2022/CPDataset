[{"authorTime":"2020-02-04 17:19:39","codes":[{"authorDate":"2020-02-04 17:19:39","commitOrder":1,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-02-28 16:29:28","endLine":136,"groupId":"20203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/0144b732bc7ceadb73c6ad03c4d2c7d657d6dc.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-02-04 17:19:39","commitOrder":1,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-02-28 16:29:28","endLine":203,"groupId":"20208","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/0144b732bc7ceadb73c6ad03c4d2c7d657d6dc.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"8becccb8dc4d00eb2c5f2e13827ad02c93331343","commitMessage":"@@@[FLINK-16060][task] Implemente working StreamMultipleInputProcessor\n\nThis doesn't fully support input selection.  watermarks.  latency markers and keyed contextes yet\n","date":"2020-02-28 16:29:28","modifiedFileCount":"5","status":"B","submitter":"Piotr Nowojski"},{"authorTime":"2020-02-26 16:39:53","codes":[{"authorDate":"2020-02-26 16:39:53","commitOrder":2,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-03-25 22:06:35","endLine":139,"groupId":"20203","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/88/c4f9a66a88c57fd24f1a32f50d2da9e5fc49ba.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-02-26 16:39:53","commitOrder":2,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-03-25 22:06:35","endLine":206,"groupId":"20208","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/88/c4f9a66a88c57fd24f1a32f50d2da9e5fc49ba.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperator())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"16a0334879ac468b8cb5bda67116b5eab6549d1a","commitMessage":"@@@[FLINK-16316][operators] Implement new AbstractStreamOperatorV2 as a replacement for AbstractStreamOperator\n\nThe new base class for operators tries to address couple of limitations in the AbstractStreamOperator like:\n- lack of support for multiple inputs\n- setup(...) method\n","date":"2020-03-25 22:06:35","modifiedFileCount":"5","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-03-19 02:41:11","codes":[{"authorDate":"2020-03-19 02:41:11","commitOrder":3,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-04-27 14:00:52","endLine":150,"groupId":"41313","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/9974001ef3cf8f35d491aa7ea18ffac0c79096.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-03-19 02:41:11","commitOrder":3,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-04-27 14:00:52","endLine":209,"groupId":"38195","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/9974001ef3cf8f35d491aa7ea18ffac0c79096.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"2e313f026cf3a9e8896cd2816ae5c847894c4fd7","commitMessage":"@@@[FLINK-16404][runtime] Avoid caching buffers for blocked input channels before barrier alignment\n\nThis commit is the first part of implementation to solve the dead lock problem when reducing the exclusive buffer of receiver side to 0.\n\nReducing the number of exclusive buffers of receiver side to 0 can bring several advantages (may at the cost of some performance regression). One is that memory can be saved from the reduced network buffer usage. Another important benefit is that the in-flight data can be reduced so we can speed up checkpoint in cases of back pressure. However.  for the current implementation.  reducing the exclusive buffer of receiver side can incur deadlock problem because all the floating buffers might be requested away by some blocked input channels and never recycled until barrier alignment.\n\nTo solve the problem.  this commit mainly makes the following changes:\n1. At sender side.  after sending a checkpoint barrier when aligned exactly-once checkpoint mode is used.  the outgoing channel will be blocked and no data will be sent out until the channel is unblocked.\n2. At receiver side.  no buffer will be stored in BufferStorage any more and after a checkpoint is completed or canceled.  the receiver side will resume data consumption and unblock the upstream by sending a special event to the sender side.\n\nNote that after this patch we still can't set the exclusive buffer of receiver side to 0 because there is still deadlock problem which will be totally solved in the following up patches.\n","date":"2020-04-27 14:00:52","modifiedFileCount":"128","status":"M","submitter":"kevin.cyj"},{"authorTime":"2020-07-28 22:35:51","codes":[{"authorDate":"2020-07-28 22:35:51","commitOrder":4,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-07-29 16:03:10","endLine":150,"groupId":"41313","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/bb1563b1e02d34df237cdad0806fc891c98b9b.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-07-28 22:35:51","commitOrder":4,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-07-29 16:03:10","endLine":209,"groupId":"38195","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/bb1563b1e02d34df237cdad0806fc891c98b9b.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"35fed94415a4725d1e2060ae5f97c316a6811bd7","commitMessage":"@@@[FLINK-18656][tests] Rename MultipleInputStreamTaskTestHarnessBuilder to StreamTaskMailboxTestHarnessBuilder\n\nThe orignal concept MultipleInputStreamTaskTestHarnessBuilder proved much more\nversatile then initially expected and it can easily handle all of the uses cases:\n- MultipleInputStreamTask\n- OneInputStreamTask\n- SourceStreamTask\n\nHence there is no need for the abstraction and no need to provide specialized versions of\nMultipleInputStreamTaskTestHarnessBuilder for the other types of tasks.\n","date":"2020-07-29 16:03:10","modifiedFileCount":"6","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-09-18 22:29:02","codes":[{"authorDate":"2020-09-18 22:29:02","commitOrder":5,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory(3))\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-09-25 16:25:14","endLine":151,"groupId":"102513","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/84ceade9270357d20ac20f37a9a943beb13db9.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(11, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 0);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"11\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\t\r\n\t\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-09-18 22:29:02","commitOrder":5,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory(3))\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","date":"2020-09-25 16:25:14","endLine":210,"groupId":"102513","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/84ceade9270357d20ac20f37a9a943beb13db9.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\ttry (StreamTaskMailboxTestHarness<String> testHarness =\n\t\t\tnew StreamTaskMailboxTestHarnessBuilder<>(MultipleInputStreamTask::new, BasicTypeInfo.STRING_TYPE_INFO)\n\t\t\t\t.addInput(BasicTypeInfo.STRING_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO, 2)\n\t\t\t\t.addInput(BasicTypeInfo.DOUBLE_TYPE_INFO, 2)\n\t\t\t\t.setupOutputForSingletonOperatorChain(new MapToStringMultipleInputOperatorFactory())\n\t\t\t\t.build()) {\n\t\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n\t\t\tlong initialTime = 0L;\n\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"Witam-0-1\", initialTime), 0, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(42, initialTime), 1, 1);\n\t\t\ttestHarness.processElement(new StreamRecord<>(1.0d, initialTime), 2, 1);\n\t\t\texpectedOutput.add(new StreamRecord<>(\"Witam-0-1\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"42\", initialTime));\n\t\t\texpectedOutput.add(new StreamRecord<>(\"1.0\", initialTime));\n\n\t\t\t\r\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\n\t\t\t\r\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 0);\n\t\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 2, 1);\n\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tassertThat(testHarness.getOutput(), contains(expectedOutput.toArray()));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"a531294d84fd0cc2991b6826641499f4295c60ab","commitMessage":"@@@[FLINK-18906][test] Generalise testing code for MultipleInputStreamTask\n\nThis will allow to re-use it for checkpointing tests with chained sources\n","date":"2020-09-25 16:25:14","modifiedFileCount":"2","status":"M","submitter":"Piotr Nowojski"}]
