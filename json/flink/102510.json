[{"authorTime":"2020-05-11 13:45:45","codes":[{"authorDate":"2020-05-11 13:45:45","commitOrder":2,"curCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","date":"2020-05-20 14:58:00","endLine":89,"groupId":"29814","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyCheckpointComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/bb92f37ea1e89b040cd2f1ee048b932bbfedeb.src","preCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"MB"},{"authorDate":"2020-05-11 13:45:45","commitOrder":2,"curCode":"\tpublic void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\tsubtaskCheckpointCoordinator.checkpointState(\n\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n\t\t\tnew CheckpointMetrics(),\n\t\t\toperatorChain,\n\t\t\t() -> true);\n\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n\t\tassertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n\t\tassertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n\t}\n","date":"2020-05-20 14:58:00","endLine":214,"groupId":"23400","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyCheckpointAbortedAfterAsyncPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/bb92f37ea1e89b040cd2f1ee048b932bbfedeb.src","preCode":"\tpublic void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\tsubtaskCheckpointCoordinator.checkpointState(\n\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n\t\t\tnew CheckpointMetrics(),\n\t\t\toperatorChain,\n\t\t\t() -> true);\n\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n\t\tassertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n\t\tassertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"}],"commitId":"f0ed29c06d331892a06ee9bddea4173d6300835d","commitMessage":"@@@[FLINK-8871][checkpoint] Support to cancel checkpoing via notification on task side\n","date":"2020-05-20 14:58:00","modifiedFileCount":"62","status":"M","submitter":"Yun Tang"},{"authorTime":"2020-10-05 21:22:14","codes":[{"authorDate":"2020-05-11 13:45:45","commitOrder":3,"curCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","date":"2020-05-20 14:58:00","endLine":89,"groupId":"29814","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyCheckpointComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/bb92f37ea1e89b040cd2f1ee048b932bbfedeb.src","preCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2020-10-05 21:22:14","commitOrder":3,"curCode":"\tpublic void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\tsubtaskCheckpointCoordinator.checkpointState(\n\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n\t\t\tnew CheckpointMetricsBuilder(),\n\t\t\toperatorChain,\n\t\t\t() -> true);\n\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n\t\tassertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n\t\tassertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n\t}\n","date":"2020-10-13 23:09:23","endLine":351,"groupId":"2349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyCheckpointAbortedAfterAsyncPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/6e929baf1d2cc8fa3f2991dd76a4d2cf27299d.src","preCode":"\tpublic void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\tsubtaskCheckpointCoordinator.checkpointState(\n\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n\t\t\tnew CheckpointMetrics(),\n\t\t\toperatorChain,\n\t\t\t() -> true);\n\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n\t\tassertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n\t\tassertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"f86c9591a4f041cb34f2e966d77108ce817b563e","commitMessage":"@@@[FLINK-18662][task] Introduce CheckpointMetricsBuilder\n\nThis will later allow to solve in a hopefully elegant way the issue.  that\nsome checkpoint metrics are calculated after AsyncCheckpointRunnable's construction.\nCheckpointMetricsBuilder will be able to collect those additional metrics via CompletableFuture's\nwhile CheckpointMetrics class will remain a serializable class used in the RPC.\n","date":"2020-10-13 23:09:23","modifiedFileCount":"22","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-01-25 00:57:44","codes":[{"authorDate":"2020-05-11 13:45:45","commitOrder":4,"curCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","date":"2020-05-20 14:58:00","endLine":89,"groupId":"29814","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyCheckpointComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/bb92f37ea1e89b040cd2f1ee048b932bbfedeb.src","preCode":"\tpublic void testNotifyCheckpointComplete() throws Exception {\n\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\t\tSubtaskCheckpointCoordinator subtaskCheckpointCoordinator = new MockSubtaskCheckpointCoordinatorBuilder()\n\t\t\t.setEnvironment(mockEnvironment)\n\t\t\t.build();\n\n\t\tfinal OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n\t\tlong checkpointId = 42L;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(checkpointId, operatorChain, () -> true);\n\t\t\tassertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\n\t\tlong newCheckpointId = checkpointId + 1;\n\t\t{\n\t\t\tsubtaskCheckpointCoordinator.notifyCheckpointComplete(newCheckpointId, operatorChain, () -> false);\n\t\t\t\r\n\t\t\tassertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2021-01-25 00:57:44","commitOrder":4,"curCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n        SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build();\n\n        final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n        long checkpointId = 42L;\n        subtaskCheckpointCoordinator.checkpointState(\n                new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> false);\n        subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                checkpointId, operatorChain, () -> true);\n        assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n        assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n    }\n","date":"2021-01-28 18:01:53","endLine":393,"groupId":"2349","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyCheckpointAbortedAfterAsyncPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3fc4e1f1bbd41897c61bf46e000626486b0cc5.src","preCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n        SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build();\n\n        final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n        long checkpointId = 42L;\n        subtaskCheckpointCoordinator.checkpointState(\n                new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> true);\n        subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                checkpointId, operatorChain, () -> true);\n        assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n        assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"be6eb95af5eaa866ead85ebfa89bdbc7c57c6edc","commitMessage":"@@@[FLINK-20675][checkpointing] Only decline async checkpoint failure when task is still running\n","date":"2021-01-28 18:01:53","modifiedFileCount":"8","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-04-07 17:48:02","codes":[{"authorDate":"2021-04-07 17:48:02","commitOrder":5,"curCode":"    public void testNotifyCheckpointComplete() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinator subtaskCheckpointCoordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        checkpointId, operatorChain, () -> true);\n                assertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n\n            long newCheckpointId = checkpointId + 1;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        newCheckpointId, operatorChain, () -> false);\n                \r\n                assertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n        }\n    }\n","date":"2021-04-07 23:53:17","endLine":147,"groupId":"18390","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyCheckpointComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/49e68ded01d5f2c0e83abf65862fca77bdba45.src","preCode":"    public void testNotifyCheckpointComplete() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n        SubtaskCheckpointCoordinator subtaskCheckpointCoordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setEnvironment(mockEnvironment)\n                        .build();\n\n        final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n        long checkpointId = 42L;\n        {\n            subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                    checkpointId, operatorChain, () -> true);\n            assertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n        }\n\n        long newCheckpointId = checkpointId + 1;\n        {\n            subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                    newCheckpointId, operatorChain, () -> false);\n            \r\n            assertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-04-07 17:48:02","commitOrder":5,"curCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            subtaskCheckpointCoordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                    CheckpointOptions.forCheckpointWithDefaultLocation(),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> false);\n            subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                    checkpointId, operatorChain, () -> true);\n            assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n            assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n        }\n    }\n","date":"2021-04-07 23:53:17","endLine":452,"groupId":"18402","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyCheckpointAbortedAfterAsyncPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/49e68ded01d5f2c0e83abf65862fca77bdba45.src","preCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n        SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build();\n\n        final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n        long checkpointId = 42L;\n        subtaskCheckpointCoordinator.checkpointState(\n                new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                new CheckpointMetricsBuilder(),\n                operatorChain,\n                () -> false);\n        subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                checkpointId, operatorChain, () -> true);\n        assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n        assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"}],"commitId":"3cf8597cf3bcccc847519fa12925a2b984e80304","commitMessage":"@@@[hotfix][tests] Close SubtaskCheckpointCoordinator in tests\n\nThis is to reveal any async failures occurring for\nexample when writing channel state.\n","date":"2021-04-07 23:53:17","modifiedFileCount":"1","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-07-28 13:46:47","codes":[{"authorDate":"2021-04-07 17:48:02","commitOrder":6,"curCode":"    public void testNotifyCheckpointComplete() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinator subtaskCheckpointCoordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        checkpointId, operatorChain, () -> true);\n                assertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n\n            long newCheckpointId = checkpointId + 1;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        newCheckpointId, operatorChain, () -> false);\n                \r\n                assertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n        }\n    }\n","date":"2021-04-07 23:53:17","endLine":147,"groupId":"102510","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyCheckpointComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/49e68ded01d5f2c0e83abf65862fca77bdba45.src","preCode":"    public void testNotifyCheckpointComplete() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinator subtaskCheckpointCoordinator =\n                new MockSubtaskCheckpointCoordinatorBuilder()\n                        .setEnvironment(mockEnvironment)\n                        .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        checkpointId, operatorChain, () -> true);\n                assertEquals(checkpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n\n            long newCheckpointId = checkpointId + 1;\n            {\n                subtaskCheckpointCoordinator.notifyCheckpointComplete(\n                        newCheckpointId, operatorChain, () -> false);\n                \r\n                assertEquals(newCheckpointId, stateManager.getNotifiedCompletedCheckpointId());\n            }\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2021-07-28 13:46:47","commitOrder":6,"curCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            subtaskCheckpointCoordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                    CheckpointOptions.forCheckpointWithDefaultLocation(),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    false,\n                    () -> false);\n            subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                    checkpointId, operatorChain, () -> true);\n            assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n            assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n        }\n    }\n","date":"2021-08-03 19:19:41","endLine":465,"groupId":"102510","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyCheckpointAbortedAfterAsyncPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/43a36d04a16e5fb3ea17fff0d95d1560fd7c79.src","preCode":"    public void testNotifyCheckpointAbortedAfterAsyncPhase() throws Exception {\n        TestTaskStateManager stateManager = new TestTaskStateManager();\n        MockEnvironment mockEnvironment =\n                MockEnvironment.builder().setTaskStateManager(stateManager).build();\n\n        try (SubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator =\n                (SubtaskCheckpointCoordinatorImpl)\n                        new MockSubtaskCheckpointCoordinatorBuilder()\n                                .setEnvironment(mockEnvironment)\n                                .build()) {\n            final OperatorChain<?, ?> operatorChain = getOperatorChain(mockEnvironment);\n\n            long checkpointId = 42L;\n            subtaskCheckpointCoordinator.checkpointState(\n                    new CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n                    CheckpointOptions.forCheckpointWithDefaultLocation(),\n                    new CheckpointMetricsBuilder(),\n                    operatorChain,\n                    () -> false);\n            subtaskCheckpointCoordinator.notifyCheckpointAborted(\n                    checkpointId, operatorChain, () -> true);\n            assertEquals(0, subtaskCheckpointCoordinator.getAbortedCheckpointSize());\n            assertEquals(checkpointId, stateManager.getNotifiedAbortedCheckpointId());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"}],"commitId":"66bf4e6891a0cb271ca940d3814db83ca51164d5","commitMessage":"@@@[FLINK-21080][runtime][checkpoint] The task reports whether it has called operators' finish method\n","date":"2021-08-03 19:19:41","modifiedFileCount":"12","status":"M","submitter":"Yun Gao"}]
