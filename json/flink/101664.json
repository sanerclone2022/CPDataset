[{"authorTime":"2017-07-04 19:49:55","codes":[{"authorDate":"2017-07-04 19:49:55","commitOrder":10,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tint port = testCluster.getLeaderRPCPort();\n\n\t\t\r\n\t\tfinal PackagedProgram userCodeTypeProg = new PackagedProgram(\n\t\t\tnew File(USERCODETYPE_JAR_PATH),\n\t\t\tnew String[] { USERCODETYPE_JAR_PATH,\n\t\t\t\t\"localhost\",\n\t\t\t\tString.valueOf(port),\n\t\t\t});\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2017-07-19 17:33:35","endLine":254,"groupId":"12560","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tint port = testCluster.getLeaderRPCPort();\n\n\t\t\r\n\t\tfinal PackagedProgram userCodeTypeProg = new PackagedProgram(\n\t\t\tnew File(USERCODETYPE_JAR_PATH),\n\t\t\tnew String[] { USERCODETYPE_JAR_PATH,\n\t\t\t\t\"localhost\",\n\t\t\t\tString.valueOf(port),\n\t\t\t});\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"},{"authorDate":"2017-07-04 19:49:55","commitOrder":10,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft());\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\t\t\tFuture<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft());\n\t\t\tRunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft());\n\n\t\t\tfor (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {\n\t\t\t\tjobId = runningJob.getJobId();\n\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\tLOG.info(\"Wait for all tasks to be running.\");\n\t\tFuture<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft());\n\t\tAwait.ready(allRunning, deadline.timeLeft());\n\t\tLOG.info(\"All tasks are running.\");\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\tFuture<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft());\n\n\t\t\tObject savepointResponse = Await.result(savepointFuture, deadline.timeLeft());\n\n\t\t\tif (savepointResponse.getClass() == TriggerSavepointSuccess.class) {\n\t\t\t\tsavepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath();\n\t\t\t\tLOG.info(\"Triggered savepoint. Path: \" + savepointPath);\n\t\t\t} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {\n\t\t\t\tThrowable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause();\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Unexpected response to TriggerSavepoint\");\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\t\r\n\t\tLOG.info(\"Disposing savepoint at \" + savepointPath);\n\t\tFuture<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft());\n\t\tObject disposeResponse = Await.result(disposeFuture, deadline.timeLeft());\n\n\t\tif (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {\n\t\t\t\r\n\t\t\tLOG.info(\"Disposed savepoint at \" + savepointPath);\n\t\t} else if (disposeResponse instanceof DisposeSavepointFailure) {\n\t\t\tthrow new IllegalStateException(\"Failed to dispose savepoint \" + disposeResponse);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response to DisposeSavepoint\");\n\t\t}\n\n\t\t\r\n\t\tFuture<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft());\n\t\tObject response = Await.result(cancelFuture, deadline.timeLeft());\n\t\tassertTrue(\"Unexpected response: \" + response, response instanceof JobManagerMessages.CancellationSuccess);\n\t}\n","date":"2017-07-19 17:33:35","endLine":394,"groupId":"7649","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft());\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\t\t\tFuture<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft());\n\t\t\tRunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft());\n\n\t\t\tfor (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {\n\t\t\t\tjobId = runningJob.getJobId();\n\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\tLOG.info(\"Wait for all tasks to be running.\");\n\t\tFuture<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft());\n\t\tAwait.ready(allRunning, deadline.timeLeft());\n\t\tLOG.info(\"All tasks are running.\");\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\tFuture<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft());\n\n\t\t\tObject savepointResponse = Await.result(savepointFuture, deadline.timeLeft());\n\n\t\t\tif (savepointResponse.getClass() == TriggerSavepointSuccess.class) {\n\t\t\t\tsavepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath();\n\t\t\t\tLOG.info(\"Triggered savepoint. Path: \" + savepointPath);\n\t\t\t} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {\n\t\t\t\tThrowable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause();\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Unexpected response to TriggerSavepoint\");\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\t\r\n\t\tLOG.info(\"Disposing savepoint at \" + savepointPath);\n\t\tFuture<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft());\n\t\tObject disposeResponse = Await.result(disposeFuture, deadline.timeLeft());\n\n\t\tif (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {\n\t\t\t\r\n\t\t\tLOG.info(\"Disposed savepoint at \" + savepointPath);\n\t\t} else if (disposeResponse instanceof DisposeSavepointFailure) {\n\t\t\tthrow new IllegalStateException(\"Failed to dispose savepoint \" + disposeResponse);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response to DisposeSavepoint\");\n\t\t}\n\n\t\t\r\n\t\tFuture<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft());\n\t\tObject response = Await.result(cancelFuture, deadline.timeLeft());\n\t\tassertTrue(\"Unexpected response: \" + response, response instanceof JobManagerMessages.CancellationSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"MB"}],"commitId":"5ac1324b9eb89afb87de7810e7bd4b1209b544b6","commitMessage":"@@@[FLINK-7102] improve ClassLoaderITCase\n\n* ClassLoaderITCase unnecessarily runs multiple tests in a single test case\n* ClassLoaderITCase#testDisposeSavepointWithCustomKvState() does not cancel its\n  job (thus the order of execution of test cases defines the outcome)\n* ClassLoaderITCase uses e.getCause().getCause() which may cause\n  {{NullPointerException}}s hiding the original error\n\nThis closes #4255.\n","date":"2017-07-19 17:33:35","modifiedFileCount":"1","status":"M","submitter":"Nico Kruber"},{"authorTime":"2017-08-21 23:20:30","codes":[{"authorDate":"2017-07-04 19:49:55","commitOrder":11,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tint port = testCluster.getLeaderRPCPort();\n\n\t\t\r\n\t\tfinal PackagedProgram userCodeTypeProg = new PackagedProgram(\n\t\t\tnew File(USERCODETYPE_JAR_PATH),\n\t\t\tnew String[] { USERCODETYPE_JAR_PATH,\n\t\t\t\t\"localhost\",\n\t\t\t\tString.valueOf(port),\n\t\t\t});\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2017-07-19 17:33:35","endLine":254,"groupId":"12560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tint port = testCluster.getLeaderRPCPort();\n\n\t\t\r\n\t\tfinal PackagedProgram userCodeTypeProg = new PackagedProgram(\n\t\t\tnew File(USERCODETYPE_JAR_PATH),\n\t\t\tnew String[] { USERCODETYPE_JAR_PATH,\n\t\t\t\t\"localhost\",\n\t\t\t\tString.valueOf(port),\n\t\t\t});\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"},{"authorDate":"2017-08-21 23:20:30","commitOrder":11,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft());\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\t\t\tFuture<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft());\n\t\t\tRunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft());\n\n\t\t\tfor (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {\n\t\t\t\tjobId = runningJob.getJobId();\n\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\tLOG.info(\"Wait for all tasks to be running.\");\n\t\tFuture<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft());\n\t\tAwait.ready(allRunning, deadline.timeLeft());\n\t\tLOG.info(\"All tasks are running.\");\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\tFuture<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft());\n\n\t\t\tObject savepointResponse = Await.result(savepointFuture, deadline.timeLeft());\n\n\t\t\tif (savepointResponse.getClass() == TriggerSavepointSuccess.class) {\n\t\t\t\tsavepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath();\n\t\t\t\tLOG.info(\"Triggered savepoint. Path: \" + savepointPath);\n\t\t\t} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {\n\t\t\t\tThrowable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause();\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Unexpected response to TriggerSavepoint\");\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\t\r\n\t\tLOG.info(\"Disposing savepoint at \" + savepointPath);\n\t\tFuture<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft());\n\t\tObject disposeResponse = Await.result(disposeFuture, deadline.timeLeft());\n\n\t\tif (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {\n\t\t\t\r\n\t\t\tLOG.info(\"Disposed savepoint at \" + savepointPath);\n\t\t} else if (disposeResponse instanceof DisposeSavepointFailure) {\n\t\t\tthrow new IllegalStateException(\"Failed to dispose savepoint \" + disposeResponse);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response to DisposeSavepoint\");\n\t\t}\n\n\t\t\r\n\t\tFuture<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft());\n\t\tObject response = Await.result(cancelFuture, deadline.timeLeft());\n\t\tassertTrue(\"Unexpected response: \" + response, response instanceof JobManagerMessages.CancellationSuccess);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2017-09-28 15:31:16","endLine":399,"groupId":"7649","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/9633d4d62c5698f76a90b06b17dfab94bc97df.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft());\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\t\t\tFuture<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft());\n\t\t\tRunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft());\n\n\t\t\tfor (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {\n\t\t\t\tjobId = runningJob.getJobId();\n\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\tLOG.info(\"Wait for all tasks to be running.\");\n\t\tFuture<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft());\n\t\tAwait.ready(allRunning, deadline.timeLeft());\n\t\tLOG.info(\"All tasks are running.\");\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\tFuture<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft());\n\n\t\t\tObject savepointResponse = Await.result(savepointFuture, deadline.timeLeft());\n\n\t\t\tif (savepointResponse.getClass() == TriggerSavepointSuccess.class) {\n\t\t\t\tsavepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath();\n\t\t\t\tLOG.info(\"Triggered savepoint. Path: \" + savepointPath);\n\t\t\t} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {\n\t\t\t\tThrowable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause();\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Unexpected response to TriggerSavepoint\");\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\t\r\n\t\tLOG.info(\"Disposing savepoint at \" + savepointPath);\n\t\tFuture<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft());\n\t\tObject disposeResponse = Await.result(disposeFuture, deadline.timeLeft());\n\n\t\tif (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {\n\t\t\t\r\n\t\t\tLOG.info(\"Disposed savepoint at \" + savepointPath);\n\t\t} else if (disposeResponse instanceof DisposeSavepointFailure) {\n\t\t\tthrow new IllegalStateException(\"Failed to dispose savepoint \" + disposeResponse);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response to DisposeSavepoint\");\n\t\t}\n\n\t\t\r\n\t\tFuture<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft());\n\t\tObject response = Await.result(cancelFuture, deadline.timeLeft());\n\t\tassertTrue(\"Unexpected response: \" + response, response instanceof JobManagerMessages.CancellationSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"84bfec9d9b31f8664f5bdf52a901d12991e03e16","commitMessage":"@@@[FLINK-7487][tests] fix ClassLoaderITCase#testDisposeSavepointWithCustomKvState not self-contained\n\nThe cancellation of the job started in #testDisposeSavepointWithCustomKvState\nmay actually continue after the test method succeeds and may thus stop further\njobs from being executed. This may result in a NoResourceAvailableException.\n\n[FLINK-7487][tests] address PR comments\n\nThis closes #4571.\n","date":"2017-09-28 15:31:16","modifiedFileCount":"1","status":"M","submitter":"Nico Kruber"},{"authorTime":"2018-04-05 17:49:48","codes":[{"authorDate":"2018-04-05 17:49:48","commitOrder":12,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2018-04-19 15:58:15","endLine":267,"groupId":"12560","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/08/9ade443a7b444a739ed4f8416c92dd85a710f8.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tint port = testCluster.getLeaderRPCPort();\n\n\t\t\r\n\t\tfinal PackagedProgram userCodeTypeProg = new PackagedProgram(\n\t\t\tnew File(USERCODETYPE_JAR_PATH),\n\t\t\tnew String[] { USERCODETYPE_JAR_PATH,\n\t\t\t\t\"localhost\",\n\t\t\t\tString.valueOf(port),\n\t\t\t});\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2018-04-05 17:49:48","commitOrder":12,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), testCluster);\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2018-04-19 15:58:15","endLine":385,"groupId":"46209","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/08/9ade443a7b444a739ed4f8416c92dd85a710f8.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tActorGateway jm = testCluster.getLeaderGateway(deadline.timeLeft());\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\t\t\tFuture<Object> jobsFuture = jm.ask(JobManagerMessages.getRequestRunningJobsStatus(), deadline.timeLeft());\n\t\t\tRunningJobsStatus runningJobs = (RunningJobsStatus) Await.result(jobsFuture, deadline.timeLeft());\n\n\t\t\tfor (JobStatusMessage runningJob : runningJobs.getStatusMessages()) {\n\t\t\t\tjobId = runningJob.getJobId();\n\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\tLOG.info(\"Wait for all tasks to be running.\");\n\t\tFuture<Object> allRunning = jm.ask(new WaitForAllVerticesToBeRunning(jobId), deadline.timeLeft());\n\t\tAwait.ready(allRunning, deadline.timeLeft());\n\t\tLOG.info(\"All tasks are running.\");\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\tFuture<Object> savepointFuture = jm.ask(new TriggerSavepoint(jobId, Option.<String>empty()), deadline.timeLeft());\n\n\t\t\tObject savepointResponse = Await.result(savepointFuture, deadline.timeLeft());\n\n\t\t\tif (savepointResponse.getClass() == TriggerSavepointSuccess.class) {\n\t\t\t\tsavepointPath = ((TriggerSavepointSuccess) savepointResponse).savepointPath();\n\t\t\t\tLOG.info(\"Triggered savepoint. Path: \" + savepointPath);\n\t\t\t} else if (savepointResponse.getClass() == JobManagerMessages.TriggerSavepointFailure.class) {\n\t\t\t\tThrowable cause = ((JobManagerMessages.TriggerSavepointFailure) savepointResponse).cause();\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t} else {\n\t\t\t\tthrow new IllegalStateException(\"Unexpected response to TriggerSavepoint\");\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\t\r\n\t\tLOG.info(\"Disposing savepoint at \" + savepointPath);\n\t\tFuture<Object> disposeFuture = jm.ask(new DisposeSavepoint(savepointPath), deadline.timeLeft());\n\t\tObject disposeResponse = Await.result(disposeFuture, deadline.timeLeft());\n\n\t\tif (disposeResponse.getClass() == JobManagerMessages.getDisposeSavepointSuccess().getClass()) {\n\t\t\t\r\n\t\t\tLOG.info(\"Disposed savepoint at \" + savepointPath);\n\t\t} else if (disposeResponse instanceof DisposeSavepointFailure) {\n\t\t\tthrow new IllegalStateException(\"Failed to dispose savepoint \" + disposeResponse);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response to DisposeSavepoint\");\n\t\t}\n\n\t\t\r\n\t\tFuture<?> cancelFuture = jm.ask(new JobManagerMessages.CancelJob(jobId), deadline.timeLeft());\n\t\tObject response = Await.result(cancelFuture, deadline.timeLeft());\n\t\tassertTrue(\"Unexpected response: \" + response, response instanceof JobManagerMessages.CancellationSuccess);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"674a2d3464cc5628961f3b9628713b9515ba6c6f","commitMessage":"@@@[FLINK-8704][tests] Port ClassLoaderITCase to flip6\n\nThis closes #5780.\n","date":"2018-04-19 15:58:15","modifiedFileCount":"1","status":"M","submitter":"zentol"},{"authorTime":"2018-10-22 22:00:40","codes":[{"authorDate":"2018-10-22 22:00:40","commitOrder":13,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2018-10-24 22:04:20","endLine":264,"groupId":"40998","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/503d7e370c7690d96c76c836cdf87740b61ecb.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2018-10-22 22:00:40","commitOrder":13,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2018-10-24 22:04:20","endLine":382,"groupId":"46209","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/503d7e370c7690d96c76c836cdf87740b61ecb.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), testCluster);\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"bf64740b308c3272de51befdab5bd7374db71407","commitMessage":"@@@[FLINK-10637] Use MiniClusterResource for tests in flink-runtime\n\nRename MiniClusterResource into MiniClusterWithClientResource and move base functionality\nin the form of MiniClusterResource into flink-runtime. The new base class simply starts a\nMiniCluster with random ports.\n\nMoreover.  this commit lets almost all tests in flink-runtime use the MiniClusterResource\nto guarantee that there are no port conflicts between concurrently executed tests.\n\nThis closes #6899.\n","date":"2018-10-24 22:04:20","modifiedFileCount":"56","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-09-25 10:20:10","codes":[{"authorDate":"2019-09-25 10:20:10","commitOrder":14,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-10-02 22:10:37","endLine":265,"groupId":"40998","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2019-09-25 10:20:10","commitOrder":14,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2019-10-02 22:10:37","endLine":380,"groupId":"15932","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.<URL>emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t\t} catch (ProgramInvocationException ignored) {\n\t\t\t\t\tif (ignored.getCause() == null ||\n\t\t\t\t\t\t!(ignored.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\t\tignored.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"2a182ffc1946fac7d2dcf7d16c408c53ef61466e","commitMessage":"@@@[hotfix][test] Clean up unnecessary type argument declarations in ClassLoaderITCase\n","date":"2019-10-02 22:10:37","modifiedFileCount":"1","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-11-08 10:23:59","codes":[{"authorDate":"2019-09-25 10:20:10","commitOrder":15,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-10-02 22:10:37","endLine":265,"groupId":"40998","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"},{"authorDate":"2019-11-08 10:23:59","commitOrder":15,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2019-11-08 10:23:59","endLine":378,"groupId":"15932","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/755193844d18eb3d520eb0ce6a3ff99845303a.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId);\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"d938c19480c220344827271ff8da729cd91735b3","commitMessage":"@@@[FLINK-14593][client] Port ClusterClient to asynchronous interface version\n\nThis closes #10069 .\n","date":"2019-11-08 10:23:59","modifiedFileCount":"27","status":"M","submitter":"tison"},{"authorTime":"2019-09-09 19:02:28","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":16,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-11-09 19:26:33","endLine":271,"groupId":"40998","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = new PackagedProgram(new File(USERCODETYPE_JAR_PATH));\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2019-09-09 19:02:28","commitOrder":16,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString()})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2019-11-09 19:26:33","endLine":386,"groupId":"15932","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = new PackagedProgram(\n\t\t\t\tnew File(CUSTOM_KV_STATE_JAR_PATH),\n\t\t\t\tnew String[] {\n\t\t\t\t\t\tString.valueOf(parallelism),\n\t\t\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\t\t\"5000\",\n\t\t\t\t\t\toutputDir.toURI().toString()\n\t\t\t\t});\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"c1e9aefc2449a4ea0ff3fa590cf1eb6c1cb484a2","commitMessage":"@@@[FLINK-14465] Let StandaloneJobClusterEntryPoint use the user code class loader\n\n[FLINK-14465] The PackageProgram's constructor does not throw excpetion\nany more when jarFile is null. Introducing this change is because there\nmay be no jarFile in perjob mode. All jars the user code depends on are\nin the classpaths.\n\n[FLINK-14465] ClassPathJobGraphRetriever creates PackagesProgram with user\nclass paths.\n\n[FLINK-14465] StandaloneJobClusterEntryPoint uses \"FLINK_HOME/usrlib\"\nas the job's class path. The environment variable FLINK_HOME is set\nat Dockerfile. Link the FLINK_JOB_ARTIFACTS_DIR to the FLINK_HOME/job. \nwhich makes the FlinkUserClassloader load the user class in the\nstandalone perjob mode.\n\nThis closes #10076.\n","date":"2019-11-09 19:26:33","modifiedFileCount":"22","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-05-22 01:37:14","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":17,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-11-09 19:26:33","endLine":271,"groupId":"40998","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-05-22 01:37:14","commitOrder":17,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString(),\n\t\t\t\t\"false\" \r\n\t\t\t})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2020-05-22 01:37:14","endLine":389,"groupId":"15932","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/97/4512c2847b7bcb881383cdfea2d4ea28c06ee5.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString()})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"463dc8b9cab99d6d5df07ec0e593843885e3ac72","commitMessage":"@@@Merge pull request #12244 from pnowojski/f17258\n\n[FLINK-17258][network] Fix couple of ITCases that were failing with enabled unaligned checkpoints","date":"2020-05-22 01:37:14","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-05-22 01:38:35","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":18,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-11-09 19:26:33","endLine":271,"groupId":"40998","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-05-22 01:38:35","commitOrder":18,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString()})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2020-05-22 01:38:35","endLine":387,"groupId":"15932","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/a054a8b381c1c94b69bc25e7a00a1aea53da77.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString(),\n\t\t\t\t\"false\" \r\n\t\t\t})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"840a4d954233f8769a54ac2ada5d34a5ef80c82d","commitMessage":"@@@Revert \"Merge pull request #12244 from pnowojski/f17258\"\n\nThis reverts commit 463dc8b9cab99d6d5df07ec0e593843885e3ac72.\n","date":"2020-05-22 01:38:35","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-05-15 02:34:22","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":19,"curCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-11-09 19:26:33","endLine":271,"groupId":"101664","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testUserCodeTypeJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testUserCodeTypeJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\tPackagedProgram userCodeTypeProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(USERCODETYPE_JAR_PATH))\n\t\t\t.build();\n\n\t\tTestEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(USERCODETYPE_JAR_PATH)),\n\t\t\tCollections.emptyList());\n\n\t\tuserCodeTypeProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-05-15 02:34:22","commitOrder":19,"curCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString(),\n\t\t\t\t\"false\" \r\n\t\t\t})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","date":"2020-05-22 01:38:56","endLine":389,"groupId":"101664","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisposeSavepointWithCustomKvState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/97/4512c2847b7bcb881383cdfea2d4ea28c06ee5.src","preCode":"\tpublic void testDisposeSavepointWithCustomKvState() throws Exception {\n\t\tClusterClient<?> clusterClient = new MiniClusterClient(new Configuration(), miniClusterResource.getMiniCluster());\n\n\t\tDeadline deadline = new FiniteDuration(100, TimeUnit.SECONDS).fromNow();\n\n\t\tFile checkpointDir = FOLDER.newFolder();\n\t\tFile outputDir = FOLDER.newFolder();\n\n\t\tfinal PackagedProgram program = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(CUSTOM_KV_STATE_JAR_PATH))\n\t\t\t.setArguments(new String[] {\n\t\t\t\tString.valueOf(parallelism),\n\t\t\t\tcheckpointDir.toURI().toString(),\n\t\t\t\t\"5000\",\n\t\t\t\toutputDir.toURI().toString()})\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(CUSTOM_KV_STATE_JAR_PATH)),\n\t\t\tCollections.emptyList()\n\t\t);\n\n\t\t\r\n\t\tThread invokeThread = new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tprogram.invokeInteractiveModeForExecution();\n\t\t\t} catch (ProgramInvocationException ex) {\n\t\t\t\tif (ex.getCause() == null ||\n\t\t\t\t\t!(ex.getCause() instanceof JobCancellationException)) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tLOG.info(\"Starting program invoke thread\");\n\t\tinvokeThread.start();\n\n\t\t\r\n\t\tJobID jobId = null;\n\n\t\tLOG.info(\"Waiting for job status running.\");\n\n\t\t\r\n\t\twhile (jobId == null && deadline.hasTimeLeft()) {\n\n\t\t\tCollection<JobStatusMessage> jobs = clusterClient.listJobs().get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tfor (JobStatusMessage job : jobs) {\n\t\t\t\tif (job.getJobState() == JobStatus.RUNNING) {\n\t\t\t\t\tjobId = job.getJobId();\n\t\t\t\t\tLOG.info(\"Job running. ID: \" + jobId);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\tif (jobId == null) {\n\t\t\t\tThread.sleep(100L);\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\tString savepointPath = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tLOG.info(\"Triggering savepoint (\" + (i + 1) + \"/20).\");\n\t\t\ttry {\n\t\t\t\tsavepointPath = clusterClient.triggerSavepoint(jobId, null)\n\t\t\t\t\t.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t} catch (Exception cause) {\n\t\t\t\tLOG.info(\"Failed to trigger savepoint. Retrying...\", cause);\n\t\t\t\t\r\n\t\t\t\tThread.sleep(500);\n\t\t\t}\n\t\t}\n\n\t\tassertNotNull(\"Failed to trigger savepoint\", savepointPath);\n\n\t\tclusterClient.disposeSavepoint(savepointPath).get();\n\n\t\tclusterClient.cancel(jobId).get();\n\n\t\t\r\n\t\tinvokeThread.join(deadline.timeLeft().toMillis());\n\t\tassertFalse(\"Program invoke thread still running\", invokeThread.isAlive());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"b3a78515870d3a9b461130b6cfc92e72412ed209","commitMessage":"@@@[FLINK-17258][network][test] Run ClassLoaderITCase#testDisposeSavepointWithCustomKvState without unaligned checkpoints\n\nThis test needs many concurent checkpoint & savepoints and this is currently not supported with unaligned checkpoints.\n","date":"2020-05-22 01:38:56","modifiedFileCount":"2","status":"M","submitter":"Piotr Nowojski"}]
