[{"authorTime":"2016-10-25 18:25:30","codes":[{"authorDate":"2016-10-25 18:25:30","commitOrder":1,"curCode":"\tpublic void testEventTimeTimersDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\n\t\ttestHarness.processWatermark(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:CIAO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":105,"groupId":"42290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventTimeTimersDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testEventTimeTimersDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\n\t\ttestHarness.processWatermark(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:CIAO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2016-10-25 18:25:30","commitOrder":1,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"fa664e5b9527ec82dae1f18746f7b2f0bbd7a3ba","commitMessage":"@@@[FLINK-4907] Add Test for Timers/State Provided by AbstractStreamOperator\n","date":"2016-10-27 05:26:29","modifiedFileCount":"3","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2020-03-20 00:35:43","codes":[{"authorDate":"2020-03-20 00:35:43","commitOrder":2,"curCode":"\tpublic void testEventTimeTimersDontInterfere() throws Exception {\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness = createTestHarness()) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.processWatermark(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\n\t\t\ttestHarness.processWatermark(10L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\t\ttestHarness.processWatermark(20L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:CIAO\"));\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":117,"groupId":"103268","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEventTimeTimersDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testEventTimeTimersDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:10\"), 0);\n\n\t\ttestHarness.processWatermark(10L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_EVENT_TIME:CIAO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2020-03-20 00:35:43","commitOrder":2,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness = createTestHarness()) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\t\t\ttestHarness.processWatermark(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\t\ttestHarness.processWatermark(20L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\t\ttestHarness.setProcessingTime(10L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":222,"groupId":"103268","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"a443b04d20764257bb45efd53b4dcec5f8be59f1","commitMessage":"@@@[FLINK-16317][operators] Refactor AbstractStreamOperatorTest class\n\nThis deduplicates code a little bit.  fixes not closing issue and makes it ready for future extension that comes in next commit.\n","date":"2020-03-26 14:55:31","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"}]
