[{"authorTime":"2017-08-18 11:27:38","codes":[{"authorDate":"2017-08-18 11:27:38","commitOrder":1,"curCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2017-08-25 17:13:34","endLine":126,"groupId":"46111","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreWithEmptyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/4560c40ddd3349e71b8628f56fe38c7cc018ed.src","preCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2017-08-18 11:27:38","commitOrder":1,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, consumerFunction.getRestoredState());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2017-08-25 17:13:34","endLine":151,"groupId":"46111","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/4560c40ddd3349e71b8628f56fe38c7cc018ed.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, consumerFunction.getRestoredState());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"c384e52e647da457ce5127863148d03c93c1a4aa","commitMessage":"@@@[FLINK-7429] [kinesis] Add IT tests for migration from 1.3\n","date":"2017-08-25 17:13:34","modifiedFileCount":"0","status":"B","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-02-01 18:11:48","codes":[{"authorDate":"2018-02-01 18:11:48","commitOrder":2,"curCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2018-02-07 02:58:58","endLine":152,"groupId":"5292","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreWithEmptyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/77cbc574a0f9895ff9f1fe024c91c2ec1b51e5.src","preCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2018-02-01 18:11:48","commitOrder":2,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, consumerFunction.getRestoredState());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2018-02-07 02:58:58","endLine":197,"groupId":"5292","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/77cbc574a0f9895ff9f1fe024c91c2ec1b51e5.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(mock(KinesisDataFetcher.class));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, consumerFunction.getRestoredState());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"ffd7995b932ffcf03731c4e423676e370639507b","commitMessage":"@@@[hotfix] [kinesis.  test] Use real test classes instead of Mockito in FlinkKinesisConsumerMigrationTest\n","date":"2018-02-07 02:58:58","modifiedFileCount":"1","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-02-01 19:53:42","codes":[{"authorDate":"2018-02-01 19:53:42","commitOrder":3,"curCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(), restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2018-02-07 02:58:58","endLine":172,"groupId":"5292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreWithEmptyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/9739d616a8b5a3c45387d8b9da6c43c98f56a3.src","preCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2018-02-01 19:53:42","commitOrder":3,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, removeEquivalenceWrappers(consumerFunction.getRestoredState()));\n\t\tassertEquals(1, fetcher.getSubscribedShardsState().size());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum());\n\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2018-02-07 02:58:58","endLine":229,"groupId":"5292","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/79/9739d616a8b5a3c45387d8b9da6c43c98f56a3.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, consumerFunction.getRestoredState());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"140bb0c66257d5d09d61845731aef1dbdb90a0bd","commitMessage":"@@@[FLINK-8484] [kinesis] Use an equivalence wrapper around restored StreamShardMetadatas to bypass out-of-sync shard infos\n\nThis closes #5337.\n","date":"2018-02-07 02:58:58","modifiedFileCount":"5","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2019-01-10 21:58:43","codes":[{"authorDate":"2019-01-10 21:58:43","commitOrder":4,"curCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(\n\t\t\tOperatorSnapshotUtil.getResourceFilename(\n\t\t\t\t\"kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\"));\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(), restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2019-01-17 19:52:14","endLine":171,"groupId":"10549","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestoreWithEmptyState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/6b661273a468f97bce5866df17a72f20c596f7.src","preCode":"\tpublic void testRestoreWithEmptyState() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator = new StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-empty-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertTrue(consumerFunction.getRestoredState().isEmpty());\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(), restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2019-01-10 21:58:43","commitOrder":4,"curCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.initializeState(\n\t\t\tOperatorSnapshotUtil.getResourceFilename(\n\t\t\t\t\"kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\"));\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, removeEquivalenceWrappers(consumerFunction.getRestoredState()));\n\t\tassertEquals(1, fetcher.getSubscribedShardsState().size());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum());\n\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","date":"2019-01-17 19:52:14","endLine":228,"groupId":"10549","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/6b661273a468f97bce5866df17a72f20c596f7.src","preCode":"\tpublic void testRestore() throws Exception {\n\t\tfinal List<StreamShardHandle> initialDiscoveryShards = new ArrayList<>(TEST_STATE.size());\n\t\tfor (StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {\n\t\t\tShard shard = new Shard();\n\t\t\tshard.setShardId(shardMetadata.getShardId());\n\n\t\t\tSequenceNumberRange sequenceNumberRange = new SequenceNumberRange();\n\t\t\tsequenceNumberRange.withStartingSequenceNumber(\"1\");\n\t\t\tshard.setSequenceNumberRange(sequenceNumberRange);\n\n\t\t\tinitialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(), shard));\n\t\t}\n\n\t\tfinal TestFetcher<String> fetcher = new TestFetcher<>(\n\t\t\tCollections.singletonList(TEST_STREAM_NAME),\n\t\t\tnew TestSourceContext<>(),\n\t\t\tnew TestRuntimeContext(true, 1, 0),\n\t\t\tTestUtils.getStandardProperties(),\n\t\t\tnew KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),\n\t\t\tnull,\n\t\t\tinitialDiscoveryShards);\n\n\t\tfinal DummyFlinkKinesisConsumer<String> consumerFunction = new DummyFlinkKinesisConsumer<>(\n\t\t\tfetcher, new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));\n\n\t\tStreamSource<String, DummyFlinkKinesisConsumer<String>> consumerOperator =\n\t\t\tnew StreamSource<>(consumerFunction);\n\n\t\tfinal AbstractStreamOperatorTestHarness<String> testHarness =\n\t\t\tnew AbstractStreamOperatorTestHarness<>(consumerOperator, 1, 1, 0);\n\n\t\ttestHarness.setup();\n\t\tMigrationTestUtil.restoreFromSnapshot(\n\t\t\ttestHarness,\n\t\t\t\"src/test/resources/kinesis-consumer-migration-test-flink\" + testMigrateVersion + \"-snapshot\", testMigrateVersion);\n\t\ttestHarness.open();\n\n\t\tconsumerFunction.run(new TestSourceContext<>());\n\n\t\t\r\n\t\tassertNotEquals(null, consumerFunction.getRestoredState());\n\t\tassertEquals(1, consumerFunction.getRestoredState().size());\n\t\tassertEquals(TEST_STATE, removeEquivalenceWrappers(consumerFunction.getRestoredState()));\n\t\tassertEquals(1, fetcher.getSubscribedShardsState().size());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum());\n\n\t\tKinesisStreamShardState restoredShardState = fetcher.getSubscribedShardsState().get(0);\n\t\tassertEquals(TEST_STREAM_NAME, restoredShardState.getStreamShardHandle().getStreamName());\n\t\tassertEquals(TEST_SHARD_ID, restoredShardState.getStreamShardHandle().getShard().getShardId());\n\t\tassertFalse(restoredShardState.getStreamShardHandle().isClosed());\n\t\tassertEquals(TEST_SEQUENCE_NUMBER, restoredShardState.getLastProcessedSequenceNum());\n\n\t\tconsumerOperator.close();\n\t\tconsumerOperator.cancel();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"b30adb0ce90d8f81f8028aeb5d541a3a67e6543d","commitMessage":"@@@[hotfix] [tests] Remove unfruitful MigrationTestUtil class\n\nThat utility class had a single helper method.  restoreFromSnapshot. \nwhich accepts the target snapshot's Flink version. This was useful\nbefore.  because the way to restore snapshots was a bit different for\nFlink <= 1.1 and newer versions.\n\nSince we now no longer support compatibility for 1.1 versions and\nbelow.  this helper method is simply forwarding the restore operation\nto the test harness.\n\nThis commit refactors this have equivalent behaviour directly in the\nAbstractStreamOperatorTestHarness class.\n","date":"2019-01-17 19:52:14","modifiedFileCount":"9","status":"M","submitter":"Tzu-Li (Gordon) Tai"}]
