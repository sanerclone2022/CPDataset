[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-13 20:55:49","commitOrder":1,"curCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT * FROM \" + INPUT_TABLE), Row.class)\n\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","date":"2020-05-13 20:55:49","endLine":120,"groupId":"47604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/e90b2c22d14563d7537e39ce7798822f96f8f0.src","preCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT * FROM \" + INPUT_TABLE), Row.class)\n\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":1,"curCode":"\tpublic void testProjectableJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner()\n\t\t\t\t.inStreamingMode()\n\t\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE), Row.class)\n\t\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","date":"2020-05-13 20:55:49","endLine":156,"groupId":"47603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectableJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/e90b2c22d14563d7537e39ce7798822f96f8f0.src","preCode":"\tpublic void testProjectableJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner()\n\t\t\t\t.inStreamingMode()\n\t\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE), Row.class)\n\t\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"6a6a439517b99d939758ef9275d40f88f5700c4a","commitMessage":"@@@[FLINK-17537][jdbc] Refactor flink-jdbc connector structure\n\n(1) Use Jdbc instead of JDBC.\n(2) Move interfaces and classes to org.apache.flink.connector.jdbc.\n(3) Keep ancient JDBCOutputFormat.  JDBCInputFormat and ParameterValuesProvider in old package.\n(4) Add tests/ITCase for ancient Classes and new classes.\n(5) rename flink-jdbc module to flink-connector-jdbc.\n(6) update docs.\n\nThis closes #12036","date":"2020-05-13 20:55:49","modifiedFileCount":"0","status":"B","submitter":"Leonard Xu"},{"authorTime":"2020-05-19 23:40:26","codes":[{"authorDate":"2020-05-19 23:40:26","commitOrder":2,"curCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tTableResult tableResult = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE);\n\n\t\tList<String> results = manifestResults(tableResult);\n\n\t\tassertThat(\n\t\t\t\tresults,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\"));\n\t}\n","date":"2020-05-19 23:40:55","endLine":126,"groupId":"47603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/7191c452ae84458179c001cf0e086ec7e8f496.src","preCode":"\tpublic void testJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"double_col DOUBLE,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT * FROM \" + INPUT_TABLE), Row.class)\n\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-05-19 23:40:26","commitOrder":2,"curCode":"\tpublic void testProjectableJdbcSource() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner()\n\t\t\t\t.inStreamingMode()\n\t\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tTableResult tableResult = tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n\n\t\tList<String> results = manifestResults(tableResult);\n\n\t\tassertThat(\n\t\t\t\tresults,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\"));\n\t}\n","date":"2020-05-19 23:40:55","endLine":161,"groupId":"47603","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectableJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/7191c452ae84458179c001cf0e086ec7e8f496.src","preCode":"\tpublic void testProjectableJdbcSource() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t\t.useBlinkPlanner()\n\t\t\t\t.inStreamingMode()\n\t\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n\t\t\t\t\"id BIGINT,\" +\n\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n\t\t\t\t\"time_col TIME,\" +\n\t\t\t\t\"real_col FLOAT,\" +\n\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + INPUT_TABLE + \"'\" +\n\t\t\t\t\")\"\n\t\t);\n\n\t\tStreamITCase.clear();\n\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE), Row.class)\n\t\t\t\t.addSink(new StreamITCase.StringSink<>());\n\t\tenv.execute();\n\n\t\tList<String> expected =\n\t\t\tArrays.asList(\n\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n\t\tStreamITCase.compareWithList(expected);\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"8c15ff1d0641386ad0151880c9e84a8853ba5cd9","commitMessage":"@@@[FLINK-17361] Refactor JdbcTableSourceITCase to use TableResult instead of StreamITCase\n\nUsing the static sink approach of StreamITCase is potentially\nproblematic with concurrency.  plus the code is just plain nicer like\nthis.\n","date":"2020-05-19 23:40:55","modifiedFileCount":"1","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":3,"curCode":"    public void testJdbcSource() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 15:35, 1.175E-37, 1.79769E308, 100.1234]\",\n                        \"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, 15:36:01, -1.175E-37, -1.79769E308, 101.1234]\"));\n    }\n","date":"2021-01-08 00:17:30","endLine":137,"groupId":"47603","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/738094ebf4d9d92deb1e72eb2f898be943e8f4.src","preCode":"    public void testJdbcSource() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n                        \"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\"));\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":3,"curCode":"    public void testProjectableJdbcSource() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[2020-01-01T15:35:00.123456, 100.1234]\",\n                        \"+I[2020-01-01T15:36:01.123456, 101.1234]\"));\n    }\n","date":"2021-01-08 00:17:30","endLine":176,"groupId":"47603","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectableJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/64/738094ebf4d9d92deb1e72eb2f898be943e8f4.src","preCode":"    public void testProjectableJdbcSource() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"2020-01-01T15:35:00.123456,100.1234\",\n                        \"2020-01-01T15:36:01.123456,101.1234\"));\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-06-07 23:37:43","codes":[{"authorDate":"2021-06-07 23:37:43","commitOrder":4,"curCode":"    public void testJdbcSource() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 15:35, 1.175E-37, 1.79769E308, 100.1234]\",\n                        \"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, 15:36:01, -1.175E-37, -1.79769E308, 101.1234]\"));\n    }\n","date":"2021-06-11 15:34:45","endLine":134,"groupId":"10440","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/66ed9eb0cda2088d4916a01b79b7aa44f7318d.src","preCode":"    public void testJdbcSource() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"double_col DOUBLE,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult = tEnv.executeSql(\"SELECT * FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[1, 2020-01-01T15:35:00.123456, 2020-01-01T15:35:00.123456789, 15:35, 1.175E-37, 1.79769E308, 100.1234]\",\n                        \"+I[2, 2020-01-01T15:36:01.123456, 2020-01-01T15:36:01.123456789, 15:36:01, -1.175E-37, -1.79769E308, 101.1234]\"));\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-06-07 23:37:43","commitOrder":4,"curCode":"    public void testProjectableJdbcSource() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[2020-01-01T15:35:00.123456, 100.1234]\",\n                        \"+I[2020-01-01T15:36:01.123456, 101.1234]\"));\n    }\n","date":"2021-06-11 15:34:45","endLine":171,"groupId":"10440","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testProjectableJdbcSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/66ed9eb0cda2088d4916a01b79b7aa44f7318d.src","preCode":"    public void testProjectableJdbcSource() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE \"\n                        + INPUT_TABLE\n                        + \"(\"\n                        + \"id BIGINT,\"\n                        + \"timestamp6_col TIMESTAMP(6),\"\n                        + \"timestamp9_col TIMESTAMP(9),\"\n                        + \"time_col TIME,\"\n                        + \"real_col FLOAT,\"\n                        + \"decimal_col DECIMAL(10, 4)\"\n                        + \") WITH (\"\n                        + \"  'connector.type'='jdbc',\"\n                        + \"  'connector.url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'connector.table'='\"\n                        + INPUT_TABLE\n                        + \"'\"\n                        + \")\");\n\n        TableResult tableResult =\n                tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n\n        List<String> results = manifestResults(tableResult);\n\n        assertThat(\n                results,\n                containsInAnyOrder(\n                        \"+I[2020-01-01T15:35:00.123456, 100.1234]\",\n                        \"+I[2020-01-01T15:36:01.123456, 101.1234]\"));\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"bd27a2e2846186f59556c38b7bf562a9b04d14ac","commitMessage":"@@@[FLINK-22744][table] Update and simplify EnvironmentSettings\n","date":"2021-06-11 15:34:45","modifiedFileCount":"33","status":"M","submitter":"Timo Walther"}]
