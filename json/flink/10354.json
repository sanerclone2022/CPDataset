[{"authorTime":"2021-08-16 18:08:31","codes":[{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void topicListSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber = getTopicListSubscriber(Arrays.asList(TOPIC1, TOPIC2));\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC2, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n    }\n","date":"2021-08-17 05:35:59","endLine":69,"groupId":"43180","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"topicListSubscriber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/56afb7da001a08b8ab5c896ff6c510cbe6fd3c.src","preCode":"    void topicListSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber = getTopicListSubscriber(Arrays.asList(TOPIC1, TOPIC2));\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC2, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/PulsarSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    void topicPatternSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC3, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber =\n                getTopicPatternSubscriber(\n                        Pattern.compile(\"persistent://public/default/topic*?\"), AllTopics);\n\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC3, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n        deleteTopic(TOPIC3, true);\n    }\n","date":"2021-08-17 05:35:59","endLine":97,"groupId":"43180","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"topicPatternSubscriber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/56afb7da001a08b8ab5c896ff6c510cbe6fd3c.src","preCode":"    void topicPatternSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC3, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber =\n                getTopicPatternSubscriber(\n                        Pattern.compile(\"persistent://public/default/topic*?\"), AllTopics);\n\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC3, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n        deleteTopic(TOPIC3, true);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/PulsarSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"c675f786c51038801161e861826d1c54654f0dde","commitMessage":"@@@[FLINK-20731] Introduce new pulsar source connector for flink.\n","date":"2021-08-17 05:35:59","modifiedFileCount":"3","status":"B","submitter":"Yufan Sheng"},{"authorTime":"2021-08-24 06:19:02","codes":[{"authorDate":"2021-08-24 06:19:02","commitOrder":2,"curCode":"    void topicListSubscriber() {\n        operator().createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        operator().createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber = getTopicListSubscriber(Arrays.asList(TOPIC1, TOPIC2));\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        operator().admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC2, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        operator().deleteTopic(TOPIC1, true);\n        operator().deleteTopic(TOPIC2, true);\n    }\n","date":"2021-08-26 19:24:50","endLine":69,"groupId":"10354","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"topicListSubscriber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/fbb42ea311b0164ad8aa251a58f75f204e2fe3.src","preCode":"    void topicListSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber = getTopicListSubscriber(Arrays.asList(TOPIC1, TOPIC2));\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC2, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/PulsarSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-08-24 06:19:02","commitOrder":2,"curCode":"    void topicPatternSubscriber() {\n        operator().createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        operator().createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n        operator().createTopic(TOPIC3, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber =\n                getTopicPatternSubscriber(\n                        Pattern.compile(\"persistent://public/default/topic*?\"), AllTopics);\n\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        operator().admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC3, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        operator().deleteTopic(TOPIC1, true);\n        operator().deleteTopic(TOPIC2, true);\n        operator().deleteTopic(TOPIC3, true);\n    }\n","date":"2021-08-26 19:24:50","endLine":97,"groupId":"10354","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"topicPatternSubscriber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/fbb42ea311b0164ad8aa251a58f75f204e2fe3.src","preCode":"    void topicPatternSubscriber() {\n        createTopic(TOPIC1, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC2, NUM_PARTITIONS_PER_TOPIC);\n        createTopic(TOPIC3, NUM_PARTITIONS_PER_TOPIC);\n\n        PulsarSubscriber subscriber =\n                getTopicPatternSubscriber(\n                        Pattern.compile(\"persistent://public/default/topic*?\"), AllTopics);\n\n        Set<TopicPartition> topicPartitions =\n                subscriber.getSubscribedTopicPartitions(\n                        admin(), new FullRangeGenerator(), NUM_PARALLELISM);\n\n        Set<TopicPartition> expectedPartitions = new HashSet<>();\n\n        for (int i = 0; i < NUM_PARTITIONS_PER_TOPIC; i++) {\n            expectedPartitions.add(new TopicPartition(TOPIC1, i, createFullRange()));\n            expectedPartitions.add(new TopicPartition(TOPIC3, i, createFullRange()));\n        }\n\n        assertEquals(expectedPartitions, topicPartitions);\n\n        deleteTopic(TOPIC1, true);\n        deleteTopic(TOPIC2, true);\n        deleteTopic(TOPIC3, true);\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/test/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/PulsarSubscriberTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"d476c5facf7baac5b3c70295599d4fc41c52eedd","commitMessage":"@@@[FLINK-23877][connector/pulsar] Provide an embedded pulsar server for testing.\n","date":"2021-08-26 19:24:50","modifiedFileCount":"7","status":"M","submitter":"Yufan Sheng"}]
