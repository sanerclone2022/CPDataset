[{"authorTime":"2020-10-23 15:58:17","codes":[{"authorDate":"2020-10-23 15:58:17","commitOrder":1,"curCode":"\tprivate static Map<String, String> getBasicSinkOptions() {\n\t\tMap<String, String> tableOptions = new HashMap<>();\n\t\t\r\n\t\ttableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n\t\ttableOptions.put(\"topic\", TOPIC);\n\t\ttableOptions.put(\"properties.group.id\", \"dummy\");\n\t\ttableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n\t\ttableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n\t\ttableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n\t\t\r\n\t\ttableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n\t\tfinal String formatDelimiterKey = String.format(\"%s.%s\",\n\t\t\t\tTestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n\t\ttableOptions.put(formatDelimiterKey, \",\");\n\t\treturn tableOptions;\n\t}\n","date":"2020-11-03 13:24:13","endLine":587,"groupId":"17766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getBasicSinkOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/618b11355839aa86de4b07e6187bb5c143cf36.src","preCode":"\tprivate static Map<String, String> getBasicSinkOptions() {\n\t\tMap<String, String> tableOptions = new HashMap<>();\n\t\t\r\n\t\ttableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n\t\ttableOptions.put(\"topic\", TOPIC);\n\t\ttableOptions.put(\"properties.group.id\", \"dummy\");\n\t\ttableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n\t\ttableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n\t\ttableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n\t\t\r\n\t\ttableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n\t\tfinal String formatDelimiterKey = String.format(\"%s.%s\",\n\t\t\t\tTestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n\t\ttableOptions.put(formatDelimiterKey, \",\");\n\t\treturn tableOptions;\n\t}\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"B"},{"authorDate":"2020-10-23 15:58:17","commitOrder":1,"curCode":"\tprivate static Map<String, String> getKeyValueOptions() {\n\t\tMap<String, String> tableOptions = new HashMap<>();\n\t\t\r\n\t\ttableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n\t\ttableOptions.put(\"topic\", TOPIC);\n\t\ttableOptions.put(\"properties.group.id\", \"dummy\");\n\t\ttableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n\t\ttableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n\t\ttableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n\t\ttableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n\t\t\r\n\t\ttableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n\t\ttableOptions.put(\n\t\t\t\tString.format(\"key.%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n\t\t\t\t\"#\");\n\t\ttableOptions.put(\"key.fields\", NAME);\n\t\ttableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n\t\ttableOptions.put(\n\t\t\t\tString.format(\"value.%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n\t\t\t\t\"|\");\n\t\ttableOptions.put(\"value.fields-include\", KafkaOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n\t\treturn tableOptions;\n\t}\n","date":"2020-11-03 13:24:13","endLine":611,"groupId":"17769","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/618b11355839aa86de4b07e6187bb5c143cf36.src","preCode":"\tprivate static Map<String, String> getKeyValueOptions() {\n\t\tMap<String, String> tableOptions = new HashMap<>();\n\t\t\r\n\t\ttableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n\t\ttableOptions.put(\"topic\", TOPIC);\n\t\ttableOptions.put(\"properties.group.id\", \"dummy\");\n\t\ttableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n\t\ttableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n\t\ttableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n\t\ttableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n\t\t\r\n\t\ttableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n\t\ttableOptions.put(\n\t\t\t\tString.format(\"key.%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n\t\t\t\t\"#\");\n\t\ttableOptions.put(\"key.fields\", NAME);\n\t\ttableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n\t\ttableOptions.put(\n\t\t\t\tString.format(\"value.%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n\t\t\t\t\"|\");\n\t\ttableOptions.put(\"value.fields-include\", KafkaOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n\t\treturn tableOptions;\n\t}\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"B"}],"commitId":"59d2a2dd9c4ade641793fecc9c2084a2b6c0a0e1","commitMessage":"@@@[FLINK-19294][connector-kafka] Support key/value formats in Kafka table source and sinks\n\nThis closes #13862\n","date":"2020-11-03 13:24:13","modifiedFileCount":"13","status":"B","submitter":"Timo Walther"},{"authorTime":"2021-06-30 19:55:22","codes":[{"authorDate":"2021-06-30 19:55:22","commitOrder":2,"curCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\n                \"sink.semantic\", KafkaConnectorOptionsUtil.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","date":"2021-07-12 18:56:18","endLine":958,"groupId":"7197","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getBasicSinkOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/c739b7c9c5f4841dcd53002aaa0aa0df987454.src","preCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":940,"status":"M"},{"authorDate":"2021-06-30 19:55:22","commitOrder":2,"curCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\n                \"sink.semantic\", KafkaConnectorOptionsUtil.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\",\n                KafkaConnectorOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","date":"2021-07-12 18:56:18","endLine":990,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/c739b7c9c5f4841dcd53002aaa0aa0df987454.src","preCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\"sink.partitioner\", KafkaOptions.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", KafkaOptions.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\", KafkaOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":960,"status":"M"}],"commitId":"5703e2f40150782943429092c8c3cb00ba719124","commitMessage":"@@@[FLINK-23064][connector-kafka] Expose connector options as PublicEvolving\n\nThis closes #16334.\n","date":"2021-07-12 18:56:18","modifiedFileCount":"4","status":"M","submitter":"Ingo B?rk"},{"authorTime":"2021-07-14 13:54:56","codes":[{"authorDate":"2021-07-14 13:54:56","commitOrder":3,"curCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", SinkSemantic.EXACTLY_ONCE.toString());\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","date":"2021-07-26 22:20:08","endLine":925,"groupId":"7197","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getBasicSinkOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/8337b7bbd971fc3bed7bb90018951c716bc269.src","preCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\n                \"sink.semantic\", KafkaConnectorOptionsUtil.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"M"},{"authorDate":"2021-07-14 13:54:56","commitOrder":3,"curCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", SinkSemantic.EXACTLY_ONCE.toString());\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\",\n                KafkaConnectorOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","date":"2021-07-26 22:20:08","endLine":956,"groupId":"43484","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bb/8337b7bbd971fc3bed7bb90018951c716bc269.src","preCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\n                \"sink.semantic\", KafkaConnectorOptionsUtil.SINK_SEMANTIC_VALUE_EXACTLY_ONCE);\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\",\n                KafkaConnectorOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"M"}],"commitId":"abbc658f1d1898e63e7bb0d9bfdbbf42fc70ad8b","commitMessage":"@@@[FLINK-23369][connector-kafka] Use enums for options\n\nThis closes #16482.\n","date":"2021-07-26 22:20:08","modifiedFileCount":"8","status":"M","submitter":"Ingo B?rk"},{"authorTime":"2021-08-10 19:34:26","codes":[{"authorDate":"2021-08-10 19:34:26","commitOrder":4,"curCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.delivery-guarantee\", DeliveryGuarantee.EXACTLY_ONCE.toString());\n        tableOptions.put(\"sink.transactional-id-prefix\", \"kafka-sink\");\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","date":"2021-08-14 00:05:49","endLine":998,"groupId":"10219","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getBasicSinkOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/11/5b61266de1ec06e5b3d24038fea9da63ec3581.src","preCode":"    private static Map<String, String> getBasicSinkOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", SinkSemantic.EXACTLY_ONCE.toString());\n        \r\n        tableOptions.put(\"format\", TestFormatFactory.IDENTIFIER);\n        final String formatDelimiterKey =\n                String.format(\n                        \"%s.%s\", TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key());\n        tableOptions.put(formatDelimiterKey, \",\");\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":980,"status":"M"},{"authorDate":"2021-08-10 19:34:26","commitOrder":4,"curCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.delivery-guarantee\", DeliveryGuarantee.EXACTLY_ONCE.toString());\n        tableOptions.put(\"sink.transactional-id-prefix\", \"kafka-sink\");\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\",\n                KafkaConnectorOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","date":"2021-08-14 00:05:49","endLine":1030,"groupId":"10219","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/11/5b61266de1ec06e5b3d24038fea9da63ec3581.src","preCode":"    private static Map<String, String> getKeyValueOptions() {\n        Map<String, String> tableOptions = new HashMap<>();\n        \r\n        tableOptions.put(\"connector\", KafkaDynamicTableFactory.IDENTIFIER);\n        tableOptions.put(\"topic\", TOPIC);\n        tableOptions.put(\"properties.group.id\", \"dummy\");\n        tableOptions.put(\"properties.bootstrap.servers\", \"dummy\");\n        tableOptions.put(\"scan.topic-partition-discovery.interval\", DISCOVERY_INTERVAL);\n        tableOptions.put(\n                \"sink.partitioner\", KafkaConnectorOptionsUtil.SINK_PARTITIONER_VALUE_FIXED);\n        tableOptions.put(\"sink.semantic\", SinkSemantic.EXACTLY_ONCE.toString());\n        \r\n        tableOptions.put(\"key.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"key.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"#\");\n        tableOptions.put(\"key.fields\", NAME);\n        tableOptions.put(\"value.format\", TestFormatFactory.IDENTIFIER);\n        tableOptions.put(\n                String.format(\n                        \"value.%s.%s\",\n                        TestFormatFactory.IDENTIFIER, TestFormatFactory.DELIMITER.key()),\n                \"|\");\n        tableOptions.put(\n                \"value.fields-include\",\n                KafkaConnectorOptions.ValueFieldsStrategy.EXCEPT_KEY.toString());\n        return tableOptions;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"M"}],"commitId":"1948446eeda0bcd93471b2aad61a953b6a2e36e3","commitMessage":"@@@[FLINK-23639][connectors/kafka] Migrate Table API Kafka connector to use FLIP-143 KafkaSink\n","date":"2021-08-14 00:05:49","modifiedFileCount":"9","status":"M","submitter":"Fabian Paul"}]
