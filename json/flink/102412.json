[{"authorTime":"2020-01-02 18:24:00","codes":[{"authorDate":"2020-04-16 20:55:39","commitOrder":7,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\t\tfinal ApplicationConfiguration applicationConfiguration = ApplicationConfiguration.fromConfiguration(configuration);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration, applicationConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal JobID  jobId = createJobIdForCluster(configuration);\n\t\tconfiguration.set(PipelineOptionsInternal.PIPELINE_FIXED_JOB_ID, jobId.toHexString());\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-01 04:07:59","endLine":151,"groupId":"40384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/14/b3c0e589d73274535170c3355ebb7fc69b7e4e.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\t\tfinal ApplicationConfiguration applicationConfiguration = ApplicationConfiguration.fromConfiguration(configuration);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration, applicationConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal JobID  jobId = createJobIdForCluster(configuration);\n\t\tconfiguration.set(PipelineOptionsInternal.PIPELINE_FIXED_JOB_ID, jobId.toHexString());\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2020-01-02 18:24:00","commitOrder":7,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","date":"2020-01-03 10:58:45","endLine":88,"groupId":"40384","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/56f29078ae991cc55b424d61496498f329c165.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnSessionClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"}],"commitId":"3c4cd5cc69fa784f233d9d0f869d288c7688a806","commitMessage":"@@@[FLINK-16661][yarn] Add the YarnApplicationClusterEntryPoint\n\nThis is the ClusterEntryPoint to be used when running an\napplication on Yarn.  in \"Application Mode\" (see in FLIP-85).\n","date":"2020-05-01 04:07:59","modifiedFileCount":"0","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-01-02 18:24:00","codes":[{"authorDate":"2020-04-17 05:23:18","commitOrder":8,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal JobID  jobId = createJobIdForCluster(configuration);\n\t\tconfiguration.set(PipelineOptionsInternal.PIPELINE_FIXED_JOB_ID, jobId.toHexString());\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-01 04:08:00","endLine":111,"groupId":"40384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/73/f889ad2ac11ef08fe47e6dac6e8d05bd0d83fa.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\t\tfinal ApplicationConfiguration applicationConfiguration = ApplicationConfiguration.fromConfiguration(configuration);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration, applicationConfiguration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal JobID  jobId = createJobIdForCluster(configuration);\n\t\tconfiguration.set(PipelineOptionsInternal.PIPELINE_FIXED_JOB_ID, jobId.toHexString());\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-01-02 18:24:00","commitOrder":8,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","date":"2020-01-03 10:58:45","endLine":88,"groupId":"40384","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/56f29078ae991cc55b424d61496498f329c165.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnSessionClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"7f49ec99bccac66fdd7abf5010dc5bf9cc6acbb0","commitMessage":"@@@[FLINK-16661] Consolidating code in ApplicationClusterEntrypoints\n","date":"2020-05-01 04:08:00","modifiedFileCount":"2","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-01-02 18:24:00","codes":[{"authorDate":"2020-04-23 23:22:55","commitOrder":9,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-01 04:08:04","endLine":103,"groupId":"40384","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/ec082c2dce668a2539da8f94a3d044e97bff15.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfinal JobID  jobId = createJobIdForCluster(configuration);\n\t\tconfiguration.set(PipelineOptionsInternal.PIPELINE_FIXED_JOB_ID, jobId.toHexString());\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-01-02 18:24:00","commitOrder":9,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","date":"2020-01-03 10:58:45","endLine":88,"groupId":"40384","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/56f29078ae991cc55b424d61496498f329c165.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnSessionClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"f42c14e07b9160620022064956e866dd284b4fd8","commitMessage":"@@@[FLINK-16661] Move the static job id setting to ApplicationDispatcherBootstrap\n\nHA support and static Job Ids go hand-in-hand.  as HA requires that\nthe id of a job graph stays fixed across consecutive executions. In\naddition.  no 2 jobs can have the same job id while executing on the\nsame cluster. This commit consolidates this logic (in the context\nof Application Mode) in one place.  the ApplicationDispatcherBootstrap.\n","date":"2020-05-01 04:08:04","modifiedFileCount":"4","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-01-02 18:24:00","codes":[{"authorDate":"2020-05-18 18:29:48","commitOrder":10,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-05-19 00:36:39","endLine":106,"groupId":"40384","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c8/b107cdf2e7a4d35af56014c209ef8e5ecbc2c0.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tconfiguration.set(DeploymentOptions.TARGET, EmbeddedExecutor.NAME);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, program.getJobJarAndDependencies(), URL::toString);\n\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, program.getClasspaths(), URL::toString);\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-01-02 18:24:00","commitOrder":10,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","date":"2020-01-03 10:58:45","endLine":88,"groupId":"40384","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c4/56f29078ae991cc55b424d61496498f329c165.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnSessionClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"}],"commitId":"b591f906685ee1379d791d296bd0b305cc7e9bb7","commitMessage":"@@@[FLINK-17796] Respect user specified classpath for application mode\n\nThis closes #12222.\n","date":"2020-05-19 00:36:39","modifiedFileCount":"4","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-10-19 21:09:56","codes":[{"authorDate":"2020-10-19 21:09:56","commitOrder":11,"curCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tYarnApplicationClusterEntryPoint.class);\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, dynamicParameters, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":112,"groupId":"102412","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/37ab0fea27a1301f473df6776a3de7f42317ff.src","preCode":"\tpublic static void main(final String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnApplicationClusterEntryPoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\t\tworkingDirectory != null,\n\t\t\t\t\"Working directory variable (%s) not set\",\n\t\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tPackagedProgram program = null;\n\t\ttry {\n\t\t\tprogram = getPackagedProgram(configuration);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not create application program.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tconfigureExecution(configuration, program);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Could not apply application configuration.\", e);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tYarnApplicationClusterEntryPoint yarnApplicationClusterEntrypoint =\n\t\t\t\tnew YarnApplicationClusterEntryPoint(configuration, program);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnApplicationClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnApplicationClusterEntryPoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-10-19 21:09:56","commitOrder":11,"curCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tfinal Configuration dynamicParameters = ClusterEntrypointUtils.parseParametersOrExit(\n\t\t\targs,\n\t\t\tnew DynamicParametersConfigurationParserFactory(),\n\t\t\tYarnSessionClusterEntrypoint.class);\n\t\tfinal Configuration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, dynamicParameters, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","date":"2020-11-05 01:07:21","endLine":87,"groupId":"102412","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/de71270e80b46c989010ebee52f8dabd9545c6.src","preCode":"\tpublic static void main(String[] args) {\n\t\t\r\n\t\tEnvironmentInformation.logEnvironmentInfo(LOG, YarnSessionClusterEntrypoint.class.getSimpleName(), args);\n\t\tSignalHandler.register(LOG);\n\t\tJvmShutdownSafeguard.installAsShutdownHook(LOG);\n\n\t\tMap<String, String> env = System.getenv();\n\n\t\tfinal String workingDirectory = env.get(ApplicationConstants.Environment.PWD.key());\n\t\tPreconditions.checkArgument(\n\t\t\tworkingDirectory != null,\n\t\t\t\"Working directory variable (%s) not set\",\n\t\t\tApplicationConstants.Environment.PWD.key());\n\n\t\ttry {\n\t\t\tYarnEntrypointUtils.logYarnEnvironmentInformation(env, LOG);\n\t\t} catch (IOException e) {\n\t\t\tLOG.warn(\"Could not log YARN environment information.\", e);\n\t\t}\n\n\t\tConfiguration configuration = YarnEntrypointUtils.loadConfiguration(workingDirectory, env);\n\n\t\tYarnSessionClusterEntrypoint yarnSessionClusterEntrypoint = new YarnSessionClusterEntrypoint(configuration);\n\n\t\tClusterEntrypoint.runClusterEntrypoint(yarnSessionClusterEntrypoint);\n\t}\n","realPath":"flink-yarn/src/main/java/org/apache/flink/yarn/entrypoint/YarnSessionClusterEntrypoint.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"0a51d85255b9c7480eb5e939d88e9ccc5e98af69","commitMessage":"@@@[FLINK-19662][runtime][kubernetes][yarn][dist] Added dynamic parameters to BashJavaUtils' JobManager argument extraction. Additionally.  the Kubernetes and Yarn deployment were extended accordingly.\n\nThe parameters are returned using the newly introduced global environment variable DYNAMIC_PARAMETERS.\n","date":"2020-11-05 01:07:21","modifiedFileCount":"17","status":"M","submitter":"Matthias Pohl"}]
