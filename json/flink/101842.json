[{"authorTime":"2020-05-14 11:51:44","codes":[{"authorDate":"2020-05-14 11:51:44","commitOrder":5,"curCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\t\ttargetFileSystem, targetDir, Collections.emptyList(), applicationId);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tremotePaths,\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tnew ArrayList<>(),\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-05-16 02:08:57","endLine":246,"groupId":"31010","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterMultipleLocalResources","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertempFolder@booleanaddSchemeToLocalPath@booleanuseRemoteFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/1cbae2c73dc64e215082621a380915e6adecfe.src","preCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\t\ttargetFileSystem, targetDir, Collections.emptyList(), applicationId);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tremotePaths,\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tnew ArrayList<>(),\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2020-05-14 11:51:44","commitOrder":5,"curCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\t\ttargetFileSystem, targetDir, Collections.emptyList(), applicationId);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tremotePaths,\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tnew ArrayList<>(),\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-05-16 02:08:57","endLine":295,"groupId":"2463","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopySingleFileFromLocal","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertemporaryFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/1cbae2c73dc64e215082621a380915e6adecfe.src","preCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\t\ttargetFileSystem, targetDir, Collections.emptyList(), applicationId);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tremotePaths,\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tnew ArrayList<>(),\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"MB"}],"commitId":"681b2113845c879e058512d3b907fcf17f5b76c1","commitMessage":"@@@[FLINK-17632][yarn] Support to specify a remote path for job jar\n\nThis closes #12143.\n","date":"2020-05-16 02:08:57","modifiedFileCount":"7","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-05-14 13:19:43","codes":[{"authorDate":"2020-05-14 13:19:43","commitOrder":6,"curCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-05-16 02:08:57","endLine":247,"groupId":"31010","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterMultipleLocalResources","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertempFolder@booleanaddSchemeToLocalPath@booleanuseRemoteFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/23fc73fb029ded2c882590d345873e45f9a0d8.src","preCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"MB"},{"authorDate":"2020-05-14 13:19:43","commitOrder":6,"curCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-05-16 02:08:57","endLine":297,"groupId":"31009","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopySingleFileFromLocal","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertemporaryFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ba/23fc73fb029ded2c882590d345873e45f9a0d8.src","preCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"MB"}],"commitId":"7bea158ff2a865ad43e93575ac82286fa5df88c5","commitMessage":"@@@[FLINK-17632][yarn] Move some variables as member of YarnApplicationFileUploader to make it more self-contained\n","date":"2020-05-16 02:08:57","modifiedFileCount":"4","status":"M","submitter":"wangyang0918"},{"authorTime":"2020-07-30 20:08:43","codes":[{"authorDate":"2020-07-30 20:08:43","commitOrder":7,"curCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tLocalResourceType.FILE);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-07-30 20:10:18","endLine":249,"groupId":"101842","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterMultipleLocalResources","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertempFolder@booleanaddSchemeToLocalPath@booleanuseRemoteFiles)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/77/4130f7a83eec74bf9db80a28a9abf59ac9c797.src","preCode":"\tstatic void testRegisterMultipleLocalResources(\n\t\t\tFileSystem targetFileSystem,\n\t\t\tPath targetDir,\n\t\t\tString localResourceDirectory,\n\t\t\tTemporaryFolder tempFolder,\n\t\t\tboolean addSchemeToLocalPath,\n\t\t\tboolean useRemoteFiles) throws Exception {\n\n\t\t\r\n\t\tassertFalse(targetFileSystem.exists(targetDir));\n\n\t\tfinal File srcDir = tempFolder.newFolder();\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\n\t\t\r\n\t\tsrcFiles.put(\"1\", \"Hello 1\");\n\t\tsrcFiles.put(\"2\", \"Hello 2\");\n\t\tsrcFiles.put(\"nested/3\", \"Hello nested/3\");\n\t\tsrcFiles.put(\"nested/4/5\", \"Hello nested/4/5\");\n\t\tsrcFiles.put(\"test.jar\", \"JAR Content\");\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\n\t\tfinal Path srcPath;\n\t\tif (useRemoteFiles) {\n\t\t\tsrcPath = new Path(hdfsRootPath.toString() + \"/tmp/remoteFiles\");\n\t\t\thdfsCluster.getFileSystem().copyFromLocalFile(new Path(srcDir.getAbsolutePath()), srcPath);\n\t\t} else {\n\t\t\tif (addSchemeToLocalPath) {\n\t\t\t\tsrcPath = new Path(\"file://\" + srcDir.getAbsolutePath());\n\t\t\t} else {\n\t\t\t\tsrcPath = new Path(srcDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\n\t\t\r\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(srcPath),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tfinal Path basePath = new Path(localResourceDirectory, srcPath.getName());\n\t\t\tfinal Path nestedPath = new Path(basePath, \"nested\");\n\t\t\tassertThat(\n\t\t\t\tclasspath,\n\t\t\t\tcontainsInAnyOrder(\n\t\t\t\t\tbasePath.toString(),\n\t\t\t\t\tnestedPath.toString(),\n\t\t\t\t\tnew Path(nestedPath, \"4\").toString(),\n\t\t\t\t\tnew Path(basePath, \"test.jar\").toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tassertEquals(srcFiles.size(), localResources.size());\n\n\t\t\tfinal Path workDir = ConverterUtils\n\t\t\t\t.getPathFromYarnURL(\n\t\t\t\t\tlocalResources.get(new Path(localResourceDirectory, new Path(srcPath.getName(), \"1\")).toString())\n\t\t\t\t\t\t.getResource()).getParent();\n\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\n\t\t} finally {\n\t\t\t\r\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2020-07-30 20:08:43","commitOrder":7,"curCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tlocalResourceDirectory,\n\t\t\t\tLocalResourceType.FILE);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","date":"2020-07-30 20:10:18","endLine":300,"groupId":"101842","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCopySingleFileFromLocal","params":"(FileSystemtargetFileSystem@PathtargetDir@StringlocalResourceDirectory@TemporaryFoldertemporaryFolder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/77/4130f7a83eec74bf9db80a28a9abf59ac9c797.src","preCode":"\tprivate static void testCopySingleFileFromLocal(\n\t\tFileSystem targetFileSystem,\n\t\tPath targetDir,\n\t\tString localResourceDirectory,\n\t\tTemporaryFolder temporaryFolder) throws IOException, InterruptedException, URISyntaxException {\n\n\t\tfinal File srcDir = temporaryFolder.newFolder();\n\n\t\tfinal String localFile = \"local.jar\";\n\t\tfinal String localFileContent = \"Local Jar Content\";\n\n\t\tfinal HashMap<String ,  String> srcFiles = new HashMap<>(4);\n\t\tsrcFiles.put(localFile, localFileContent);\n\n\t\tgenerateFilesInDirectory(srcDir, srcFiles);\n\t\ttry {\n\t\t\tfinal List<Path> remotePaths = new ArrayList<>();\n\n\t\t\tfinal ApplicationId applicationId = ApplicationId.newInstance(0, 0);\n\t\t\tfinal YarnApplicationFileUploader uploader = YarnApplicationFileUploader.from(\n\t\t\t\ttargetFileSystem,\n\t\t\t\ttargetDir,\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tapplicationId,\n\t\t\t\tDFSConfigKeys.DFS_REPLICATION_DEFAULT);\n\n\t\t\tfinal List<String> classpath = uploader.registerMultipleLocalResources(\n\t\t\t\tCollections.singletonList(new Path(srcDir.getAbsolutePath(), localFile)),\n\t\t\t\tlocalResourceDirectory);\n\n\t\t\tassertThat(classpath, containsInAnyOrder(new Path(localResourceDirectory, localFile).toString()));\n\n\t\t\tfinal Map<String, LocalResource> localResources = uploader.getRegisteredLocalResources();\n\t\t\tfinal Path workDir = ConverterUtils.getPathFromYarnURL(\n\t\t\t\tlocalResources.get(new Path(localResourceDirectory, localFile).toString()).getResource()).getParent();\n\t\t\tverifyDirectoryRecursive(targetFileSystem, workDir, srcFiles);\n\t\t} finally {\n\t\t\ttargetFileSystem.delete(targetDir, true);\n\t\t}\n\t}\n","realPath":"flink-yarn/src/test/java/org/apache/flink/yarn/YarnFileStageTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"a0227e20430ee9eaff59464023de2385378f71ea","commitMessage":"@@@[FLINK-18362][yarn] Fix mistakenly merged commit 0e10fd5b8ee0\n","date":"2020-07-30 20:10:18","modifiedFileCount":"9","status":"M","submitter":"Kostas Kloudas"}]
