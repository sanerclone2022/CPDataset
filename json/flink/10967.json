[{"authorTime":"2020-10-28 22:05:50","codes":[{"authorDate":"2020-10-28 22:05:50","commitOrder":1,"curCode":"\tpublic void testOnCheckpointNoPendingRecoverable() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(false);\n\t\tFileWriterBucketState bucketState = bucket.snapshotState();\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 0, 0);\n\t\tassertEquals(BUCKET_ID, bucketState.getBucketId());\n\t\tassertEquals(path, bucketState.getBucketPath());\n\t\tassertNotNull(\n\t\t\t\t\"The bucket should have in-progress recoverable\",\n\t\t\t\tbucketState.getInProgressFileRecoverable());\n\t}\n","date":"2020-11-05 17:59:56","endLine":86,"groupId":"16024","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnCheckpointNoPendingRecoverable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/01520e19a1115e1bca51704e491b9e04ac82d0.src","preCode":"\tpublic void testOnCheckpointNoPendingRecoverable() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(false);\n\t\tFileWriterBucketState bucketState = bucket.snapshotState();\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 0, 0);\n\t\tassertEquals(BUCKET_ID, bucketState.getBucketId());\n\t\tassertEquals(path, bucketState.getBucketPath());\n\t\tassertNotNull(\n\t\t\t\t\"The bucket should have in-progress recoverable\",\n\t\t\t\tbucketState.getInProgressFileRecoverable());\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-10-28 22:05:50","commitOrder":1,"curCode":"\tpublic void testFlush() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(true);\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 1, 0);\n\t\tassertNull(\n\t\t\t\t\"The bucket should not have in-progress part after flushed\",\n\t\t\t\tbucket.getInProgressPart());\n\t}\n","date":"2020-11-05 17:59:56","endLine":189,"groupId":"16024","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/50/01520e19a1115e1bca51704e491b9e04ac82d0.src","preCode":"\tpublic void testFlush() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(true);\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 1, 0);\n\t\tassertNull(\n\t\t\t\t\"The bucket should not have in-progress part after flushed\",\n\t\t\t\tbucket.getInProgressPart());\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"1f5055c473c45348b794ff9c9ed8f0759d32a691","commitMessage":"@@@[FLINK-19758] Add unified FileSink based on new Sink API\n","date":"2020-11-05 17:59:56","modifiedFileCount":"0","status":"B","submitter":"Yun Gao"},{"authorTime":"2020-11-06 23:24:31","codes":[{"authorDate":"2020-11-06 23:24:31","commitOrder":2,"curCode":"\tpublic void testOnCheckpointNoPendingRecoverable() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\", 0);\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(false);\n\t\tFileWriterBucketState bucketState = bucket.snapshotState();\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 0, 0);\n\t\tassertEquals(BUCKET_ID, bucketState.getBucketId());\n\t\tassertEquals(path, bucketState.getBucketPath());\n\t\tassertNotNull(\n\t\t\t\t\"The bucket should have in-progress recoverable\",\n\t\t\t\tbucketState.getInProgressFileRecoverable());\n\t}\n","date":"2020-11-07 22:47:18","endLine":86,"groupId":"10967","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnCheckpointNoPendingRecoverable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/3f8050b5d85caf1e044160446547919aace498.src","preCode":"\tpublic void testOnCheckpointNoPendingRecoverable() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(false);\n\t\tFileWriterBucketState bucketState = bucket.snapshotState();\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 0, 0);\n\t\tassertEquals(BUCKET_ID, bucketState.getBucketId());\n\t\tassertEquals(path, bucketState.getBucketPath());\n\t\tassertNotNull(\n\t\t\t\t\"The bucket should have in-progress recoverable\",\n\t\t\t\tbucketState.getInProgressFileRecoverable());\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-11-06 23:24:31","commitOrder":2,"curCode":"\tpublic void testFlush() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\", 0);\n\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(true);\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 1, 0);\n\t\tassertNull(\n\t\t\t\t\"The bucket should not have in-progress part after flushed\",\n\t\t\t\tbucket.getInProgressPart());\n\t}\n","date":"2020-11-07 22:47:18","endLine":189,"groupId":"10967","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlush","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4d/3f8050b5d85caf1e044160446547919aace498.src","preCode":"\tpublic void testFlush() throws IOException {\n\t\tFile outDir = TEMP_FOLDER.newFolder();\n\t\tPath path = new Path(outDir.toURI());\n\n\t\tTestRecoverableWriter recoverableWriter = getRecoverableWriter(path);\n\n\t\tFileWriterBucket<String> bucket = createBucket(\n\t\t\t\trecoverableWriter,\n\t\t\t\tpath,\n\t\t\t\tDEFAULT_ROLLING_POLICY,\n\t\t\t\tOutputFileConfig.builder().build());\n\t\tbucket.write(\"test-element\");\n\n\t\tList<FileSinkCommittable> fileSinkCommittables = bucket.prepareCommit(true);\n\n\t\tcompareNumberOfPendingAndInProgress(fileSinkCommittables, 1, 0);\n\t\tassertNull(\n\t\t\t\t\"The bucket should not have in-progress part after flushed\",\n\t\t\t\tbucket.getInProgressPart());\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"c619a18e897a494ca9638c89485ab4beb8481216","commitMessage":"@@@[FLINK-19510][sink][fs] Support processing time policicies in FileSink\n\nThis closes #13971.\n","date":"2020-11-07 22:47:18","modifiedFileCount":"6","status":"M","submitter":"Yun Gao"}]
