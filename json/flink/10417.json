[{"authorTime":"2020-01-14 07:43:31","codes":[{"authorDate":"2020-11-28 03:59:38","commitOrder":3,"curCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-01-19 20:54:14","endLine":98,"groupId":"22706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"selectBooks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/89/7856ac09fe49ad0a5adbbcb3bfc0f82467b6f6.src","preCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"NB"},{"authorDate":"2020-01-14 07:43:31","commitOrder":3,"curCode":"    private List<Integer> getInsertedIds() throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","date":"2021-01-19 20:54:14","endLine":92,"groupId":"11944","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getInsertedIds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ac/9cdd98584ff9c665665c02b25f89c0f57589cb.src","preCode":"    private List<Integer> getInsertedIds() throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/xa/JdbcXaFacadeTestHelper.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"ced428ca9645a497365bfe940f315263e88d07dc","commitMessage":"@@@[FLINK-15578][connectors/jdbc] implement exactly once JDBC sink using JTA (XA)\n","date":"2021-01-19 20:54:14","modifiedFileCount":"5","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-04-16 04:21:18","codes":[{"authorDate":"2020-11-28 03:59:38","commitOrder":4,"curCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-01-19 20:54:14","endLine":98,"groupId":"22706","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"selectBooks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/89/7856ac09fe49ad0a5adbbcb3bfc0f82467b6f6.src","preCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2021-04-16 04:21:18","commitOrder":4,"curCode":"    private List<Integer> getInsertedIds() throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl, user, pass)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","date":"2021-04-21 01:54:07","endLine":102,"groupId":"11944","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getInsertedIds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/a11419c1f90e19456dd081292279d4fc894701.src","preCode":"    private List<Integer> getInsertedIds() throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/xa/JdbcXaFacadeTestHelper.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"a28590bddf25221c3d1b11b350e7ecec064e6a22","commitMessage":"@@@[FLINK-22239][jdbc] Pool connections in JDBC XA sink\n\nSome databases like PostgreSQL and MySql allow at most\none XA transaction per connection. Using new connection\nfor each transaction (and pooling) allows to overcome\nthis limitation.\n","date":"2021-04-21 01:54:07","modifiedFileCount":"8","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2021-04-16 01:23:25","codes":[{"authorDate":"2020-11-28 03:59:38","commitOrder":5,"curCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-01-19 20:54:14","endLine":98,"groupId":"10417","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"selectBooks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/89/7856ac09fe49ad0a5adbbcb3bfc0f82467b6f6.src","preCode":"    private List<TestEntry> selectBooks() throws SQLException {\n        List<TestEntry> result = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(getDbMetadata().getUrl())) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs =\n                        st.executeQuery(\n                                \"select id, title, author, price, qty from \" + INPUT_TABLE)) {\n                    while (rs.next()) {\n                        result.add(\n                                new TestEntry(\n                                        getNullable(rs, r -> r.getInt(1)),\n                                        getNullable(rs, r -> r.getString(2)),\n                                        getNullable(rs, r -> r.getString(3)),\n                                        getNullable(rs, r -> r.getDouble(4)),\n                                        getNullable(rs, r -> r.getInt(5))));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/JdbcITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2021-04-16 01:23:25","commitOrder":5,"curCode":"    static List<Integer> getInsertedIds(String dbUrl, String user, String pass, String table)\n            throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl, user, pass)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","date":"2021-04-21 01:54:07","endLine":93,"groupId":"10417","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getInsertedIds","params":"(StringdbUrl@Stringuser@Stringpass@Stringtable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/91/cf0d48c434d62d2b7400bf28f841b1db3fc217.src","preCode":"    private List<Integer> getInsertedIds() throws SQLException {\n        List<Integer> dbContents = new ArrayList<>();\n        try (Connection connection = DriverManager.getConnection(dbUrl, user, pass)) {\n            connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n            connection.setReadOnly(true);\n            try (Statement st = connection.createStatement()) {\n                try (ResultSet rs = st.executeQuery(\"select id from \" + table)) {\n                    while (rs.next()) {\n                        dbContents.add(rs.getInt(1));\n                    }\n                }\n            }\n        }\n        return dbContents;\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/xa/JdbcXaFacadeTestHelper.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"9e4e14adef2014f4c0b3dda1967f2811a5610723","commitMessage":"@@@[FLINK-22239][tests] Test JDBC XA Sink against PostgreSQL\n","date":"2021-04-21 01:54:07","modifiedFileCount":"7","status":"M","submitter":"Roman Khachatryan"}]
