[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-05-18 12:30:38","endLine":156,"groupId":"51381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/f7f77f21bbf1dd474c1b2e328edd470463cd2a.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":2,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":151,"groupId":"26933","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"NB"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-06-17 14:23:46","codes":[{"authorDate":"2020-06-17 14:23:46","commitOrder":3,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":168,"groupId":"51381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f9/353ed3385ac36eae9dbc15e36f2540b8a9ae2a.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-06-17 14:23:46","commitOrder":3,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":148,"groupId":"26933","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/2705f2a28cad6a6d0b3aa3970eab2e4fd93893.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"6f2a0412c0eb00adeb494fcc1d68481bdf2dd7b8","commitMessage":"@@@[FLINK-18337][table] Introduce TableResult#await method to block until data is ready or job finished\n\nThis closes #12688.\n","date":"2020-09-07 17:35:17","modifiedFileCount":"26","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":4,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":166,"groupId":"51381","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/435e86fdb7b38e1b26836b8401b4c1baa1fe08.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  real_data float\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE4 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":4,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":146,"groupId":"26933","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/fd9433b1a6550b78dcd570f64d058c9a4d3741.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2021-06-07 23:37:43","commitOrder":5,"curCode":"    public void testReal() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.getConfig().enableObjectReuse();\n        StreamTableEnvironment tEnv =\n                StreamTableEnvironment.create(env, EnvironmentSettings.inStreamingMode());\n\n        tEnv.executeSql(\n                \"CREATE TABLE upsertSink (\"\n                        + \"  real_data float\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + OUTPUT_TABLE4\n                        + \"'\"\n                        + \")\");\n\n        tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n        check(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[] {\"real_data\"});\n    }\n","date":"2021-06-11 15:34:45","endLine":205,"groupId":"10445","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/783032359b382ca000e4959c233d4cefe6ca99.src","preCode":"    public void testReal() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.getConfig().enableObjectReuse();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        tEnv.executeSql(\n                \"CREATE TABLE upsertSink (\"\n                        + \"  real_data float\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + OUTPUT_TABLE4\n                        + \"'\"\n                        + \")\");\n\n        tEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n        check(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[] {\"real_data\"});\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":5,"curCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":146,"groupId":"10445","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/fd9433b1a6550b78dcd570f64d058c9a4d3741.src","preCode":"\tpublic void testReal() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\ttEnv.executeSql(\n\t\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\t\t\"  real_data float\" +\n\t\t\t\t\t\t\") WITH (\" +\n\t\t\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\t\t\"  'connector.table'='REAL_TABLE'\" +\n\t\t\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink SELECT CAST(1.0 as FLOAT)\").await();\n\t\tcheck(new Row[] {Row.of(1.0f)}, DB_URL, \"REAL_TABLE\", new String[]{\"real_data\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"}],"commitId":"bd27a2e2846186f59556c38b7bf562a9b04d14ac","commitMessage":"@@@[FLINK-22744][table] Update and simplify EnvironmentSettings\n","date":"2021-06-11 15:34:45","modifiedFileCount":"33","status":"M","submitter":"Timo Walther"}]
