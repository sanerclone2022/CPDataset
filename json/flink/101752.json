[{"authorTime":"2020-04-01 16:36:44","codes":[{"authorDate":"2020-04-01 16:36:44","commitOrder":1,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createSuccessfulJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(\n\t\t\t\t\tapplicationCompletionFuture.isDone()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCompletedExceptionally()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCancelled());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","date":"2020-04-21 17:15:13","endLine":287,"groupId":"37825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/7fe53ddfd4b55b9b172e30a3efdee283d28b2d.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createSuccessfulJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(\n\t\t\t\t\tapplicationCompletionFuture.isDone()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCompletedExceptionally()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCancelled());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"},{"authorDate":"2020-04-01 16:36:44","commitOrder":1,"curCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createFailedJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(applicationCompletionFuture.isDone() && applicationCompletionFuture.isCompletedExceptionally());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","date":"2020-04-21 17:15:13","endLine":311,"groupId":"37825","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7c/7fe53ddfd4b55b9b172e30a3efdee283d28b2d.src","preCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createFailedJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(applicationCompletionFuture.isDone() && applicationCompletionFuture.isCompletedExceptionally());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"3ff4cee8e69e8f1772458b63138021593d6acf36","commitMessage":"@@@[FLINK-16660] Introduce the ApplicationDispatcherBootstrap\n\nThis adds the functionality needed for dispatcher to be able\nto execute applications in \"Application Mode\".  as described\nin FLIP-85. The idea is that the bootstrap is responsible for:\n1) launching the recovered job graphs --when recovering from a failure\n2) launch the application's main()\n3) submit the non-executing job graphs of the application for execution\n   or re-attach a job client to the already running recovered ones\n4) terminate the cluster when the application is terminated\n   either normally or abruptly.\n","date":"2020-04-21 17:15:13","modifiedFileCount":"14","status":"B","submitter":"Kostas Kloudas"},{"authorTime":"2020-04-17 22:14:01","codes":[{"authorDate":"2020-04-17 22:14:01","commitOrder":2,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Boolean> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> {\n\t\t\t\t\texternalShutdownFuture.complete(true);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true));\n\t}\n","date":"2020-04-21 17:15:18","endLine":272,"groupId":"18936","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/317c89c716a5decf672386ca873297e17f477a.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createSuccessfulJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(\n\t\t\t\t\tapplicationCompletionFuture.isDone()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCompletedExceptionally()\n\t\t\t\t\t\t\t&& !applicationCompletionFuture.isCancelled());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2020-04-17 22:14:01","commitOrder":2,"curCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Boolean> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FAILED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createFailedJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> {\n\t\t\t\t\texternalShutdownFuture.complete(true);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true));\n\t}\n","date":"2020-04-21 17:15:18","endLine":299,"groupId":"18936","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/317c89c716a5decf672386ca873297e17f477a.src","preCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\tfinal ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n\t\ttry {\n\t\t\tfinal ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(executor);\n\n\t\t\tfinal JobID testJobId = new JobID(0, 2);\n\t\t\tfinal CompletableFuture<JobResult> jobTerminationFuture = new CompletableFuture<>();\n\t\t\tfinal CompletableFuture<Void> clusterTerminationFuture = new CompletableFuture<>();\n\n\t\t\tfinal CompletableFuture<Void> applicationCompletionFuture =\n\t\t\t\t\trunSingleJobApplication(scheduledExecutor, testJobId, jobTerminationFuture, clusterTerminationFuture);\n\n\t\t\tassertFalse(applicationCompletionFuture.isDone());\n\n\t\t\tjobTerminationFuture.complete(createFailedJobResult(testJobId));\n\t\t\tclusterTerminationFuture.get();\n\n\t\t\tassertTrue(applicationCompletionFuture.isDone() && applicationCompletionFuture.isCompletedExceptionally());\n\t\t} finally {\n\t\t\tExecutorUtils.gracefulShutdown(5, TimeUnit.SECONDS, executor);\n\t\t}\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"4f55b88a3c26469bf26994181fb74ecb0b629fe9","commitMessage":"@@@[FLINK-16658] Refactor ApplicationDispatcherBootstrap and test\n\nThis simplifies the internal structure of ApplicationDispatcherBootstrap\nand refactors the test to not assume as much about the internals of\nApplicationDispatcherBootstrap.\n\nThis closes #11696.\n","date":"2020-04-21 17:15:18","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-04-30 18:16:16","codes":[{"authorDate":"2020-04-30 18:16:16","commitOrder":3,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","date":"2020-05-01 04:08:07","endLine":400,"groupId":"16304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa2eb50bdc608b9c3be643976d21280a00f66.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Boolean> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> {\n\t\t\t\t\texternalShutdownFuture.complete(true);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"},{"authorDate":"2020-04-30 18:16:16","commitOrder":3,"curCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FAILED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createFailedJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.FAILED));\n\t}\n","date":"2020-05-01 04:08:07","endLine":427,"groupId":"16304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa2eb50bdc608b9c3be643976d21280a00f66.src","preCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Boolean> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FAILED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createFailedJobResult(jobId)))\n\t\t\t\t.setClusterShutdownSupplier(() -> {\n\t\t\t\t\texternalShutdownFuture.complete(true);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(true));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"}],"commitId":"440755dda75d2a45a27930cd9f96db6343bc3e2a","commitMessage":"@@@[minor] Verify cluster shutdown status in ApplicationDispatcherBootstrap\n\nThis also verifies cluster shutdown status in other tests\n","date":"2020-05-01 04:08:07","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-10-22 02:55:44","codes":[{"authorDate":"2020-10-22 02:55:44","commitOrder":4,"curCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","date":"2020-10-26 21:25:43","endLine":404,"groupId":"101752","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationSucceeds","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testClusterShutdownWhenApplicationSucceeds() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FINISHED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createSuccessfulJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.SUCCEEDED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2020-10-22 02:55:44","commitOrder":4,"curCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FAILED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createFailedJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.FAILED));\n\t}\n","date":"2020-10-26 21:25:43","endLine":431,"groupId":"101752","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterShutdownWhenApplicationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testClusterShutdownWhenApplicationFails() throws Exception {\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<ApplicationStatus> externalShutdownFuture = new CompletableFuture<>();\n\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.FAILED))\n\t\t\t\t.setRequestJobResultFunction(jobId -> CompletableFuture.completedFuture(createFailedJobResult(jobId)))\n\t\t\t\t.setClusterShutdownFunction((status) -> {\n\t\t\t\t\texternalShutdownFuture.complete(status);\n\t\t\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n\t\t\t\t});\n\n\t\tApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(3);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\t\r\n\t\tshutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS);\n\n\t\t\r\n\t\tassertThat(externalShutdownFuture.get(TIMEOUT_SECONDS, TimeUnit.SECONDS), is(ApplicationStatus.FAILED));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"c5ec0b0abe09e097f0e79f126b749be22bee437a","commitMessage":"@@@[FLINK-19154] Merge ApplicationDispatcherBootstrap#initialize() with constructor.\n","date":"2020-10-26 21:25:43","modifiedFileCount":"17","status":"M","submitter":"Kostas Kloudas"}]
