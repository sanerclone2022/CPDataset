[{"authorTime":"2020-10-28 19:44:51","codes":[{"authorDate":"2020-10-28 19:44:51","commitOrder":1,"curCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-02 19:01:45","endLine":87,"groupId":"46371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateForBatch","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/3786d180911e241f9176f4935810dbfdb17b13.src","preCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2020-10-28 19:44:51","commitOrder":1,"curCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tparallelism,\n\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew GlobalStreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-02 19:01:45","endLine":116,"groupId":"46370","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreaming","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/3786d180911e241f9176f4935810dbfdb17b13.src","preCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tparallelism,\n\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew GlobalStreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"34d143fb23216ac03869cce7834200ac1709dc43","commitMessage":"@@@[FLINK-19736] Add SinkTransformation along with Translator\n\nThis patch does three things:\n\n1. Introduce 'SinkTransformation' to represent the new sink api.\n\n2. Introduce 'SinkTransformationTranslator' that translates the\n'SinkTransformation' to the corresponding runtime operators.\n\n3. Make DataStream Sdk support new sink api.\n","date":"2020-11-02 19:01:45","modifiedFileCount":"7","status":"B","submitter":"GuoWei Ma"},{"authorTime":"2020-11-02 22:22:50","codes":[{"authorDate":"2020-10-28 19:44:51","commitOrder":2,"curCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-02 19:01:45","endLine":87,"groupId":"46371","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"translateForBatch","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ad/3786d180911e241f9176f4935810dbfdb17b13.src","preCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-11-02 22:22:50","commitOrder":2,"curCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tparallelism,\n\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-03 15:50:35","endLine":116,"groupId":"46370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreaming","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/792e9ee34a21573cd10ecf264bfee10aa6c215.src","preCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tparallelism,\n\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew GlobalStreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"d3fdc176565194f6a1b184f0c46aada01f37d21e","commitMessage":"@@@[FLINK-19841] Sink API: Rename GlobalStreamingCommitterOperator to StreamingGlobalCommitterOperator\n\nThis makes it more consistent with other sink runtime operators.\n\nThis closes #13889.\n","date":"2020-11-03 15:50:35","modifiedFileCount":"2","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-11-04 13:02:16","codes":[{"authorDate":"2020-11-04 13:02:16","commitOrder":3,"curCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-05 17:59:34","endLine":87,"groupId":"18560","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"translateForBatch","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/d800c8921819114313a04a22b08203b9ef7952.src","preCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-11-04 13:02:16","commitOrder":3,"curCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tparallelism,\n\t\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\t\tnew StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-05 17:59:34","endLine":114,"groupId":"18561","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreaming","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/d800c8921819114313a04a22b08203b9ef7952.src","preCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\tint writerId = addWriter(\n\t\t\t\ttransformation,\n\t\t\t\tparallelism,\n\t\t\t\tcontext);\n\t\tint committerId = addCommitter(\n\t\t\t\twriterId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tparallelism,\n\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\tcontext);\n\t\taddGlobalCommitter(\n\t\t\t\tcommitterId >= 0 ? committerId : writerId,\n\t\t\t\ttransformation,\n\t\t\t\tnew StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\tcontext);\n\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"79b1632d365e69ea9010413d90785671ea183f18","commitMessage":"@@@[FLINK-19958] Add IOException to all I/O related Sink API signatures\n","date":"2020-11-05 17:59:34","modifiedFileCount":"12","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-11-23 12:17:36","codes":[{"authorDate":"2020-11-23 12:17:36","commitOrder":4,"curCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tPREVIOUS_SINK_STATE_NAME,\n\t\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-30 22:18:17","endLine":93,"groupId":"27554","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"translateForBatch","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/643dea5e44667fba50be5cce8c7f4543605205.src","preCode":"\tpublic Collection<Integer> translateForBatch(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tnew BatchCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\t1,\n\t\t\t\t\t1,\n\t\t\t\t\tnew BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-23 12:17:36","commitOrder":4,"curCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tPREVIOUS_SINK_STATE_NAME,\n\t\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tparallelism,\n\t\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\t\tnew StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\n\t\treturn Collections.emptyList();\n\t}\n","date":"2020-11-30 22:18:17","endLine":121,"groupId":"27554","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"translateForStreaming","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/643dea5e44667fba50be5cce8c7f4543605205.src","preCode":"\tpublic Collection<Integer> translateForStreaming(\n\t\t\tSinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n\t\t\tContext context) {\n\n\t\tStreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n\t\tfinal int parallelism = getParallelism(transformation, context);\n\n\t\ttry {\n\t\t\tinternalTranslate(\n\t\t\t\t\ttransformation,\n\t\t\t\t\tparallelism,\n\t\t\t\t\tnew StreamingCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tparallelism,\n\t\t\t\t\ttransformation.getMaxParallelism(),\n\t\t\t\t\tnew StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n\t\t\t\t\tcontext);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FlinkRuntimeException(\n\t\t\t\t\t\"Could not add the Committer or GlobalCommitter to the stream graph.\",\n\t\t\t\t\te);\n\t\t}\n\n\t\treturn Collections.emptyList();\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"ff3247151b10a29e5ad3e04119a6e51cce7b7ce6","commitMessage":"@@@[FLINK-20337] Let StatefulSinkWriterOperator load StreamingFileSink's state\n\nTo allow stateful migration from `StreamingFileSink` to `FileSink` we\nlet the `StatefulSinkWriterOperator` load the `StreamingFileSink`'s\nstate (\"bucket-state\") if it exists.\n","date":"2020-11-30 22:18:17","modifiedFileCount":"4","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2021-08-04 18:12:01","codes":[{"authorDate":"2021-08-04 18:12:01","commitOrder":5,"curCode":"    public Collection<Integer> translateForBatch(\n            SinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n            Context context) {\n\n        StreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n        final int parallelism = getParallelism(transformation, context);\n\n        try {\n            internalTranslate(transformation, parallelism, true, context);\n        } catch (IOException e) {\n            throw new FlinkRuntimeException(\n                    \"Could not add the Committer or GlobalCommitter to the stream graph.\", e);\n        }\n        return Collections.emptyList();\n    }\n","date":"2021-08-06 13:54:35","endLine":70,"groupId":"103439","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"translateForBatch","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/5c1bef19c250a98aaf9d8565307d27e0fc312d.src","preCode":"    public Collection<Integer> translateForBatch(\n            SinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n            Context context) {\n\n        StreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n        final int parallelism = getParallelism(transformation, context);\n\n        try {\n            internalTranslate(\n                    transformation,\n                    parallelism,\n                    PREVIOUS_SINK_STATE_NAME,\n                    new BatchCommitterOperatorFactory<>(transformation.getSink()),\n                    1,\n                    1,\n                    new BatchGlobalCommitterOperatorFactory<>(transformation.getSink()),\n                    context);\n        } catch (IOException e) {\n            throw new FlinkRuntimeException(\n                    \"Could not add the Committer or GlobalCommitter to the stream graph.\", e);\n        }\n        return Collections.emptyList();\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-08-04 18:12:01","commitOrder":5,"curCode":"    public Collection<Integer> translateForStreaming(\n            SinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n            Context context) {\n\n        StreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n        final int parallelism = getParallelism(transformation, context);\n\n        try {\n            internalTranslate(transformation, parallelism, false, context);\n        } catch (IOException e) {\n            throw new FlinkRuntimeException(\n                    \"Could not add the Committer or GlobalCommitter to the stream graph.\", e);\n        }\n\n        return Collections.emptyList();\n    }\n","date":"2021-08-06 13:54:35","endLine":89,"groupId":"103439","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"translateForStreaming","params":"(SinkTransformation<InputT@CommT@WriterStateT@GlobalCommT>transformation@Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/5c1bef19c250a98aaf9d8565307d27e0fc312d.src","preCode":"    public Collection<Integer> translateForStreaming(\n            SinkTransformation<InputT, CommT, WriterStateT, GlobalCommT> transformation,\n            Context context) {\n\n        StreamGraphUtils.validateTransformationUid(context.getStreamGraph(), transformation);\n\n        final int parallelism = getParallelism(transformation, context);\n\n        try {\n            internalTranslate(\n                    transformation,\n                    parallelism,\n                    PREVIOUS_SINK_STATE_NAME,\n                    new StreamingCommitterOperatorFactory<>(transformation.getSink()),\n                    parallelism,\n                    transformation.getMaxParallelism(),\n                    new StreamingGlobalCommitterOperatorFactory<>(transformation.getSink()),\n                    context);\n        } catch (IOException e) {\n            throw new FlinkRuntimeException(\n                    \"Could not add the Committer or GlobalCommitter to the stream graph.\", e);\n        }\n\n        return Collections.emptyList();\n    }\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/SinkTransformationTranslator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"478e8d094264ed22071e26147f5566f6f6c6f9a3","commitMessage":"@@@[FLINK-23617][datastream] Translate sink into the new SinkOperatorFactory and CommitterOperatorFactory.\n\nThis commit converts existing sink operators into SinkWriterStateHandler and CommitterHandler and composes them into the new operators.\nFurther all test cases are adjusted to test the new combinations.\n","date":"2021-08-06 13:54:35","modifiedFileCount":"6","status":"M","submitter":"Arvid Heise"}]
