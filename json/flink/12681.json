[{"authorTime":"2016-12-01 11:40:46","codes":[{"authorDate":"2016-12-17 00:46:54","commitOrder":3,"curCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getRecordsMaxAttempts && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","date":"2017-01-20 23:29:40","endLine":216,"groupId":"5683","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRecords","params":"(StringshardIterator@intmaxRecordsToGet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0b/0fccf77de3191a5e2bed5965941362132a03a7.src","preCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getRecordsMaxAttempts && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"NB"},{"authorDate":"2016-12-01 11:40:46","commitOrder":3,"curCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getShardIteratorMaxAttempts && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","date":"2017-01-24 14:20:07","endLine":293,"groupId":"5683","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardIterator","params":"(GetShardIteratorRequestgetShardIteratorRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/0555f0fcbd94e0b4edad7e68937ac370e742cb.src","preCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getShardIteratorMaxAttempts && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"}],"commitId":"8d8a5abfcc4d2452a3ae46f18a3223b66588c191","commitMessage":"@@@[FLINK-4523] Allow Kinesis Consumer to start from specific timestamp / Date\n","date":"2017-01-24 14:20:07","modifiedFileCount":"8","status":"M","submitter":"Tony Wei"},{"authorTime":"2016-12-01 11:40:46","codes":[{"authorDate":"2018-04-03 11:49:50","commitOrder":4,"curCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getRecordsMaxAttempts && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","date":"2018-04-18 20:09:34","endLine":236,"groupId":"5683","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRecords","params":"(StringshardIterator@intmaxRecordsToGet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/86206840c3e03eb5bba6fdd3a1530f8ab36a6b.src","preCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getRecordsMaxAttempts && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2016-12-01 11:40:46","commitOrder":4,"curCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getShardIteratorMaxAttempts && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","date":"2017-01-24 14:20:07","endLine":293,"groupId":"5683","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardIterator","params":"(GetShardIteratorRequestgetShardIteratorRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/0555f0fcbd94e0b4edad7e68937ac370e742cb.src","preCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getShardIteratorMaxAttempts && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"N"}],"commitId":"9fec5cae65a7cddea5dff47e5cade50493f6cbdf","commitMessage":"@@@[FLINK-9124] [kinesis] Allow customization of KinesisProxy.getRecords read timeout and retry.\n\nThis closes #5803.\n","date":"2018-04-18 20:09:34","modifiedFileCount":"3","status":"M","submitter":"Thomas Weise"},{"authorTime":"2018-08-03 08:47:34","codes":[{"authorDate":"2018-08-03 08:47:34","commitOrder":5,"curCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getRecordsMaxRetries && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxRetries +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","date":"2018-08-17 12:17:59","endLine":250,"groupId":"41195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getRecords","params":"(StringshardIterator@intmaxRecordsToGet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/2181ae3bcb2abd2e6e10da362cf5d6c876f8c4.src","preCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getRecordsMaxAttempts && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2018-08-03 08:47:34","commitOrder":5,"curCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getShardIteratorMaxRetries && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxRetries +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","date":"2018-08-17 12:17:59","endLine":324,"groupId":"41195","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardIterator","params":"(GetShardIteratorRequestgetShardIteratorRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/2181ae3bcb2abd2e6e10da362cf5d6c876f8c4.src","preCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint attempt = 0;\n\t\twhile (attempt <= getShardIteratorMaxAttempts && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, attempt++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxAttempts +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"50d076ab6ad325907690a2c115ee2cb1c45775c9","commitMessage":"@@@[FLINK-10020] [kinesis] Support recoverable exceptions in listShards.\n\nThis closes #6482.\n","date":"2018-08-17 12:17:59","modifiedFileCount":"3","status":"M","submitter":"Thomas Weise"},{"authorTime":"2019-03-02 08:35:19","codes":[{"authorDate":"2019-03-02 08:35:19","commitOrder":6,"curCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getRecordsMaxRetries && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getRecords operation - all \" + getRecordsMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","date":"2019-03-02 08:35:19","endLine":270,"groupId":"41195","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getRecords","params":"(StringshardIterator@intmaxRecordsToGet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2c/21f11b236dc4eeb597aa4aa85c36393e47ebda.src","preCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getRecordsMaxRetries && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getRecords operation - all \" + getRecordsMaxRetries +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-03-02 08:35:19","commitOrder":6,"curCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getShardIteratorMaxRetries && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getShardIterator operation - all \" + getShardIteratorMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","date":"2019-03-02 08:35:19","endLine":344,"groupId":"41195","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardIterator","params":"(GetShardIteratorRequestgetShardIteratorRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2c/21f11b236dc4eeb597aa4aa85c36393e47ebda.src","preCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getShardIteratorMaxRetries && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getErrorMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Rate Exceeded for getShardIterator operation - all \" + getShardIteratorMaxRetries +\n\t\t\t\t\" retry attempts returned ProvisionedThroughputExceededException.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"91a53838b60cd77cfef40f16cce8324c5c24ca82","commitMessage":"@@@[FLINK-11617] [kinesis] Kinesis consumer getRecords() failure logging is misleading (#7706)\n\n","date":"2019-03-02 08:35:19","modifiedFileCount":"1","status":"M","submitter":"Jamie Grier"},{"authorTime":"2020-09-04 17:35:35","codes":[{"authorDate":"2020-09-04 17:35:35","commitOrder":7,"curCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getRecordsMaxRetries && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = BACKOFF.calculateFullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tBACKOFF.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getRecords operation - all \" + getRecordsMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","date":"2020-09-21 13:36:37","endLine":262,"groupId":"12681","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getRecords","params":"(StringshardIterator@intmaxRecordsToGet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/d308611653398dda480e6de2eb710b8a29b325.src","preCode":"\tpublic GetRecordsResult getRecords(String shardIterator, int maxRecordsToGet) throws InterruptedException {\n\t\tfinal GetRecordsRequest getRecordsRequest = new GetRecordsRequest();\n\t\tgetRecordsRequest.setShardIterator(shardIterator);\n\t\tgetRecordsRequest.setLimit(maxRecordsToGet);\n\n\t\tGetRecordsResult getRecordsResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getRecordsMaxRetries && getRecordsResult == null) {\n\t\t\ttry {\n\t\t\t\tgetRecordsResult = kinesisClient.getRecords(getRecordsRequest);\n\t\t\t} catch (SdkClientException ex) {\n\t\t\t\tif (isRecoverableSdkClientException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetRecordsBaseBackoffMillis, getRecordsMaxBackoffMillis, getRecordsExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable SdkClientException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getRecordsResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getRecords operation - all \" + getRecordsMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\n\t\treturn getRecordsResult;\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2020-09-04 17:35:35","commitOrder":7,"curCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getShardIteratorMaxRetries && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = BACKOFF.calculateFullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tBACKOFF.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getShardIterator operation - all \" + getShardIteratorMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","date":"2020-09-21 13:36:37","endLine":330,"groupId":"12681","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getShardIterator","params":"(GetShardIteratorRequestgetShardIteratorRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/d308611653398dda480e6de2eb710b8a29b325.src","preCode":"\tprivate String getShardIterator(GetShardIteratorRequest getShardIteratorRequest) throws InterruptedException {\n\t\tGetShardIteratorResult getShardIteratorResult = null;\n\n\t\tint retryCount = 0;\n\t\twhile (retryCount <= getShardIteratorMaxRetries && getShardIteratorResult == null) {\n\t\t\ttry {\n\t\t\t\t\tgetShardIteratorResult = kinesisClient.getShardIterator(getShardIteratorRequest);\n\t\t\t} catch (AmazonServiceException ex) {\n\t\t\t\tif (isRecoverableException(ex)) {\n\t\t\t\t\tlong backoffMillis = fullJitterBackoff(\n\t\t\t\t\t\tgetShardIteratorBaseBackoffMillis, getShardIteratorMaxBackoffMillis, getShardIteratorExpConstant, retryCount++);\n\t\t\t\t\tLOG.warn(\"Got recoverable AmazonServiceException. Backing off for \"\n\t\t\t\t\t\t+ backoffMillis + \" millis (\" + ex.getClass().getName() + \": \" + ex.getMessage() + \")\");\n\t\t\t\t\tThread.sleep(backoffMillis);\n\t\t\t\t} else {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (getShardIteratorResult == null) {\n\t\t\tthrow new RuntimeException(\"Retries exceeded for getShardIterator operation - all \" + getShardIteratorMaxRetries +\n\t\t\t\t\" retry attempts failed.\");\n\t\t}\n\t\treturn getShardIteratorResult.getShardIterator();\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/proxy/KinesisProxy.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"bbcd0c791371c2c6b3e477a83adfbd78dbee2602","commitMessage":"@@@[FLINK-18515][Kinesis] Adding FanOutRecordPublisher for Kinesis EFO support\n\nThis closes #13189.\n","date":"2020-09-21 13:36:37","modifiedFileCount":"26","status":"M","submitter":"Danny Cranmer"}]
