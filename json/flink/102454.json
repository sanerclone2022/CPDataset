[{"authorTime":"2017-12-06 21:32:46","codes":[{"authorDate":"2017-12-06 21:32:46","commitOrder":3,"curCode":"\tpublic void testValueState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","date":"2017-12-06 21:33:28","endLine":396,"groupId":"25183","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/283677c571d65404062dac6e07b8955fc65575.src","preCode":"\tpublic void testValueState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"MB"},{"authorDate":"2017-12-06 21:32:46","commitOrder":3,"curCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\t\r\n\t\t\tCompletableFuture<TestingJobManagerMessages.JobStatusIs> runningFuture =\n\t\t\t\t\tnotifyWhenJobStatusIs(closableJobGraph.getJobId(), JobStatus.RUNNING, deadline);\n\n\t\t\tcluster.submitJobDetached(closableJobGraph.getJobGraph());\n\n\t\t\t\r\n\t\t\tTestingJobManagerMessages.JobStatusIs jobStatus =\n\t\t\t\t\trunningFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatus.state());\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2017-12-06 21:33:28","endLine":477,"groupId":"25183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongJobIdAndWrongQueryableStateName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/283677c571d65404062dac6e07b8955fc65575.src","preCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\t\r\n\t\t\tCompletableFuture<TestingJobManagerMessages.JobStatusIs> runningFuture =\n\t\t\t\t\tnotifyWhenJobStatusIs(closableJobGraph.getJobId(), JobStatus.RUNNING, deadline);\n\n\t\t\tcluster.submitJobDetached(closableJobGraph.getJobGraph());\n\n\t\t\t\r\n\t\t\tTestingJobManagerMessages.JobStatusIs jobStatus =\n\t\t\t\t\trunningFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatus.state());\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"MB"}],"commitId":"a3fd548e9c76c67609bbf159d5fb743d756450b1","commitMessage":"@@@[FLINK-7880][QS] Wait for proper resource cleanup after each ITCase.\n","date":"2017-12-06 21:33:28","modifiedFileCount":"5","status":"M","submitter":"kkloudas"},{"authorTime":"2018-02-26 18:55:14","codes":[{"authorDate":"2018-02-26 18:55:14","commitOrder":4,"curCode":"\tpublic void testValueState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(jobGraph, AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","date":"2018-03-11 23:17:21","endLine":357,"groupId":"25183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e9/9a28b36a212bf1b57b90b36967980c8ce0d7e2.src","preCode":"\tpublic void testValueState() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tcluster.submitJobDetached(jobGraph);\n\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2018-02-26 18:55:14","commitOrder":4,"curCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(\n\t\t\t\tclosableJobGraph.getJobGraph(), AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\tCompletableFuture<JobStatus> jobStatusFuture =\n\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\n\t\t\twhile (deadline.hasTimeLeft() && !jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).equals(JobStatus.RUNNING)) {\n\t\t\t\tThread.sleep(50);\n\t\t\t\tjobStatusFuture =\n\t\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\t\t\t}\n\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS));\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-03-11 23:17:21","endLine":441,"groupId":"25183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongJobIdAndWrongQueryableStateName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e9/9a28b36a212bf1b57b90b36967980c8ce0d7e2.src","preCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\n\t\tfinal Deadline deadline = TEST_TIMEOUT.fromNow();\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(cluster, env, deadline)) {\n\n\t\t\t\r\n\t\t\tCompletableFuture<TestingJobManagerMessages.JobStatusIs> runningFuture =\n\t\t\t\t\tnotifyWhenJobStatusIs(closableJobGraph.getJobId(), JobStatus.RUNNING, deadline);\n\n\t\t\tcluster.submitJobDetached(closableJobGraph.getJobGraph());\n\n\t\t\t\r\n\t\t\tTestingJobManagerMessages.JobStatusIs jobStatus =\n\t\t\t\t\trunningFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatus.state());\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"8365c90b8d8fe637e8a54fb21d56e001258db5f2","commitMessage":"@@@[FLINK-8778] Port queryable state ITCases to use MiniClusterResource\n","date":"2018-03-11 23:17:21","modifiedFileCount":"5","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2019-11-01 14:51:28","codes":[{"authorDate":"2019-11-01 14:51:28","commitOrder":5,"curCode":"\tpublic void testValueState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tClientUtils.submitJob(clusterClient, jobGraph);\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","date":"2019-11-01 14:51:28","endLine":352,"groupId":"25183","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/91ab6fafdf31af79c0ef04c64bf1db55d035ab.src","preCode":"\tpublic void testValueState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(jobGraph, AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2019-11-01 14:51:28","commitOrder":5,"curCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tClientUtils.submitJob(clusterClient, closableJobGraph.getJobGraph());\n\n\t\t\tCompletableFuture<JobStatus> jobStatusFuture =\n\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\n\t\t\twhile (deadline.hasTimeLeft() && !jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).equals(JobStatus.RUNNING)) {\n\t\t\t\tThread.sleep(50);\n\t\t\t\tjobStatusFuture =\n\t\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\t\t\t}\n\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS));\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-11-01 14:51:28","endLine":434,"groupId":"25183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongJobIdAndWrongQueryableStateName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/91ab6fafdf31af79c0ef04c64bf1db55d035ab.src","preCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tclusterClient.setDetached(true);\n\t\t\tclusterClient.submitJob(\n\t\t\t\tclosableJobGraph.getJobGraph(), AbstractQueryableStateTestBase.class.getClassLoader());\n\n\t\t\tCompletableFuture<JobStatus> jobStatusFuture =\n\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\n\t\t\twhile (deadline.hasTimeLeft() && !jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).equals(JobStatus.RUNNING)) {\n\t\t\t\tThread.sleep(50);\n\t\t\t\tjobStatusFuture =\n\t\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\t\t\t}\n\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS));\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"bf5235e340543b9c4551d2131e8a405bd1e9e0c0","commitMessage":"@@@[FLINK-14496][client] Exclude detach flag from ClusterClient\n\nThis closes #9972 .","date":"2019-11-01 14:51:28","modifiedFileCount":"37","status":"M","submitter":"tison"},{"authorTime":"2020-08-15 08:29:49","codes":[{"authorDate":"2020-08-15 08:29:49","commitOrder":6,"curCode":"\tpublic void testValueState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tclusterClient.submitJob(jobGraph).get();\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","date":"2020-08-20 07:30:49","endLine":350,"groupId":"102454","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/3d3d81b472528e78cdc7aff060fbe4c6a960ac.src","preCode":"\tpublic void testValueState() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\n\t\t\r\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob autoCancellableJob = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tfinal JobID jobId = autoCancellableJob.getJobId();\n\t\t\tfinal JobGraph jobGraph = autoCancellableJob.getJobGraph();\n\n\t\t\tClientUtils.submitJob(clusterClient, jobGraph);\n\t\t\texecuteValueQuery(deadline, client, jobId, \"hakuna\", valueState, numElements);\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2020-08-15 08:29:49","commitOrder":6,"curCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tclusterClient.submitJob(closableJobGraph.getJobGraph()).get();\n\n\t\t\tCompletableFuture<JobStatus> jobStatusFuture =\n\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\n\t\t\twhile (deadline.hasTimeLeft() && !jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).equals(JobStatus.RUNNING)) {\n\t\t\t\tThread.sleep(50);\n\t\t\t\tjobStatusFuture =\n\t\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\t\t\t}\n\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS));\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-08-20 07:30:49","endLine":432,"groupId":"102454","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWrongJobIdAndWrongQueryableStateName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/12/3d3d81b472528e78cdc7aff060fbe4c6a960ac.src","preCode":"\tpublic void testWrongJobIdAndWrongQueryableStateName() throws Exception {\n\t\tfinal Deadline deadline = Deadline.now().plus(TEST_TIMEOUT);\n\t\tfinal long numElements = 1024L;\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStateBackend(stateBackend);\n\t\tenv.setParallelism(maxParallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 1000L));\n\n\t\tDataStream<Tuple2<Integer, Long>> source = env.addSource(new TestAscendingValueSource(numElements));\n\t\tValueStateDescriptor<Tuple2<Integer, Long>> valueState = new ValueStateDescriptor<>(\"any\", source.getType());\n\n\t\tsource.keyBy(new KeySelector<Tuple2<Integer, Long>, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 7662520075515707428L;\n\n\t\t\t@Override\n\t\t\tpublic Integer getKey(Tuple2<Integer, Long> value) {\n\t\t\t\treturn value.f0;\n\t\t\t}\n\t\t}).asQueryableState(\"hakuna\", valueState);\n\n\t\ttry (AutoCancellableJob closableJobGraph = new AutoCancellableJob(deadline, clusterClient, env)) {\n\n\t\t\tClientUtils.submitJob(clusterClient, closableJobGraph.getJobGraph());\n\n\t\t\tCompletableFuture<JobStatus> jobStatusFuture =\n\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\n\t\t\twhile (deadline.hasTimeLeft() && !jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS).equals(JobStatus.RUNNING)) {\n\t\t\t\tThread.sleep(50);\n\t\t\t\tjobStatusFuture =\n\t\t\t\t\tclusterClient.getJobStatus(closableJobGraph.getJobId());\n\t\t\t}\n\n\t\t\tassertEquals(JobStatus.RUNNING, jobStatusFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS));\n\n\t\t\tfinal JobID wrongJobId = new JobID();\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownJobFuture = client.getKvState(\n\t\t\t\t\twrongJobId, \t\t\t\t\t\t\r\n\t\t\t\t\t\"hakuna\",\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownJobFuture.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"FlinkJobNotFoundException: Could not find Flink job (\" + wrongJobId + \")\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\n\t\t\tCompletableFuture<ValueState<Tuple2<Integer, Long>>> unknownQSName = client.getKvState(\n\t\t\t\t\tclosableJobGraph.getJobId(),\n\t\t\t\t\t\"wrong-hakuna\", \r\n\t\t\t\t\t0,\n\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO,\n\t\t\t\t\tvalueState);\n\n\t\t\ttry {\n\t\t\t\tunknownQSName.get(deadline.timeLeft().toMillis(), TimeUnit.MILLISECONDS);\n\t\t\t\tfail(); \r\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause() instanceof RuntimeException);\n\t\t\t\tAssert.assertTrue(\"GOT: \" + e.getCause().getMessage(), e.getCause().getMessage().contains(\n\t\t\t\t\t\t\"UnknownKvStateLocation: No KvStateLocation found for KvState instance with name 'wrong-hakuna'.\"));\n\t\t\t} catch (Exception f) {\n\t\t\t\tfail(\"Unexpected type of exception: \" + f.getMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/itcases/AbstractQueryableStateTestBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"dfb8a3be7f0d113032a28cf6a1b296725e5562f5","commitMessage":"@@@[FLINK-15299][test] Move ClientUtils#submitJob & ClientUtils#submitJobAndWaitForResult to test scope\n\nThis closes #11469 .\n","date":"2020-08-20 07:30:49","modifiedFileCount":"28","status":"M","submitter":"tison"}]
