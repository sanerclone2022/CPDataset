[{"authorTime":"2019-11-05 18:34:38","codes":[{"authorDate":"2019-11-05 18:34:38","commitOrder":1,"curCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(DefaultActionContext context) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontext.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","date":"2019-11-07 21:21:43","endLine":105,"groupId":"6925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunDefaultAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/513c6dde89132cb1f9d4ba4aa6559c8e2d57b3.src","preCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(DefaultActionContext context) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontext.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2019-11-05 18:34:38","commitOrder":1,"curCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(DefaultActionContext context) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontext.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index);\n\n\t\tmailboxThread.signalStart();\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","date":"2019-11-07 21:21:43","endLine":255,"groupId":"16437","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/513c6dde89132cb1f9d4ba4aa6559c8e2d57b3.src","preCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(DefaultActionContext context) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontext.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index);\n\n\t\tmailboxThread.signalStart();\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"}],"commitId":"f62d98e1d8440b216bf7af7940f4a6818a111a2a","commitMessage":"@@@[hotfix][runtime] Consolidating javadoc and package structure.\n","date":"2019-11-07 21:21:43","modifiedFileCount":"18","status":"B","submitter":"Arvid Heise"},{"authorTime":"2019-11-05 21:34:07","codes":[{"authorDate":"2019-11-05 21:34:07","commitOrder":2,"curCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","date":"2019-11-07 21:21:43","endLine":105,"groupId":"30278","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunDefaultAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/887a2fcedad6cba71b20462b6abfe432198def.src","preCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"MB"},{"authorDate":"2019-11-05 21:34:07","commitOrder":2,"curCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index);\n\n\t\tmailboxThread.signalStart();\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","date":"2019-11-07 21:21:43","endLine":255,"groupId":"16437","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/887a2fcedad6cba71b20462b6abfe432198def.src","preCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index);\n\n\t\tmailboxThread.signalStart();\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"MB"}],"commitId":"809533e5b5c686e2d21b64361d22178ccb92ec26","commitMessage":"@@@[hotfix][runtime] Moving interfaces closely related to mailbox\ndefault action into MailboxDefaultAction. Renaming DefaultActionContext\nto MailboxDefaultAction.Controller.\n","date":"2019-11-07 21:21:43","modifiedFileCount":"15","status":"M","submitter":"Arvid Heise"},{"authorTime":"2019-11-19 20:59:52","codes":[{"authorDate":"2019-11-19 20:59:52","commitOrder":3,"curCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tmailboxThread.join();\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","date":"2019-11-21 22:34:25","endLine":105,"groupId":"30278","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunDefaultAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/448e1a49c51edc3a5599b1724643520daeec08.src","preCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-11-19 20:59:52","commitOrder":3,"curCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index.get());\n\n\t\tmailboxThread.signalStart();\n\t\tmailboxThread.join();\n\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","date":"2019-11-21 22:34:25","endLine":254,"groupId":"16437","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/448e1a49c51edc3a5599b1724643520daeec08.src","preCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index);\n\n\t\tmailboxThread.signalStart();\n\t\tstop(mailboxThread);\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"9686c0b6995a9ee96fc04f3fc319c6e087e44106","commitMessage":"@@@[hotfix][runtime] Smaller cleanup of Mailbox and ensuring state changing\noperation may only occur through the mailbox thread.  such that state\nchecks do not any kind of synchronizations.\n","date":"2019-11-21 22:34:25","modifiedFileCount":"2","status":"M","submitter":"Arvid Heise"},{"authorTime":"2019-11-27 20:39:15","codes":[{"authorDate":"2019-11-19 20:59:52","commitOrder":4,"curCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tmailboxThread.join();\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","date":"2019-11-21 22:34:25","endLine":105,"groupId":"102517","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunDefaultAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/448e1a49c51edc3a5599b1724643520daeec08.src","preCode":"\tpublic void testRunDefaultAction() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tstart(mailboxThread);\n\t\tmailboxThread.join();\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2019-11-27 20:39:15","commitOrder":4,"curCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew RunnableWithException() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index.get());\n\n\t\tmailboxThread.signalStart();\n\t\tmailboxThread.join();\n\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","date":"2019-12-03 21:24:00","endLine":284,"groupId":"102517","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvoidStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/14705d060a3c0507e9a85650dfe94be47218a8.src","preCode":"\tpublic void testAvoidStarvation() throws Exception {\n\n\t\tfinal int expectedInvocations = 3;\n\t\tfinal AtomicInteger counter = new AtomicInteger(0);\n\t\tMailboxThread mailboxThread = new MailboxThread() {\n\t\t\t@Override\n\t\t\tpublic void runDefaultAction(Controller controller) {\n\t\t\t\tif (counter.incrementAndGet() == expectedInvocations) {\n\t\t\t\t\tcontroller.allActionsCompleted();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tmailboxThread.start();\n\t\tfinal MailboxProcessor mailboxProcessor = mailboxThread.getMailboxProcessor();\n\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMailboxExecutor(DEFAULT_PRIORITY);\n\t\tAtomicInteger index = new AtomicInteger();\n\t\tmailboxExecutor.execute(\n\t\t\tnew Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tmailboxExecutor.execute(this, \"Blocking mail\" + index.incrementAndGet());\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Blocking mail\" + index.get());\n\n\t\tmailboxThread.signalStart();\n\t\tmailboxThread.join();\n\n\t\tAssert.assertEquals(expectedInvocations, counter.get());\n\t\tAssert.assertEquals(expectedInvocations, index.get());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailboxProcessorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"c41e0879160e4e3088abe6496d3827d479d802df","commitMessage":"@@@[FLINK-14935][task. runtime] Use RunnableWithException in the Mailbox\n\nThis allows mailbox action to throw an exception.\n","date":"2019-12-03 21:24:00","modifiedFileCount":"11","status":"M","submitter":"Piotr Nowojski"}]
