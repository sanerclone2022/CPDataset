[{"authorTime":"2016-06-11 08:14:07","codes":[{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testOperatorChainedToSource() throws Exception {\n\t\t\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.ALWAYS));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","date":"2016-07-05 21:51:06","endLine":99,"groupId":"46528","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorChainedToSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/c8024de12646f449eeddfa86e39c45e63a173c.src","preCode":"\tpublic void testOperatorChainedToSource() throws Exception {\n\t\t\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.ALWAYS));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/StreamTaskTimerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2016-06-11 08:14:07","commitOrder":1,"curCode":"\tpublic void testOneInputOperatorWithoutChaining() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.NEVER));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","date":"2016-07-05 21:51:06","endLine":136,"groupId":"46528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneInputOperatorWithoutChaining","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/c8024de12646f449eeddfa86e39c45e63a173c.src","preCode":"\tpublic void testOneInputOperatorWithoutChaining() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.NEVER));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/StreamTaskTimerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"b9f42e91c9415dd6063079df00c142334b74e636","commitMessage":"@@@[FLINK-3995] [build] flink-test-utils also contains the streaming test utilities.\n\nTest utilities include the StreamingMultipleProgramsTestBase and StreamingTestEnvironment.\n\nThis moves the ITCases for streaming into 'flink-tests' to achieve that.\n\nThis closes #2092\n","date":"2016-07-05 21:51:06","modifiedFileCount":"12","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2019-08-16 06:38:01","codes":[{"authorDate":"2019-08-16 06:38:01","commitOrder":2,"curCode":"\tpublic void testOperatorChainedToSource() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.ALWAYS));\n\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tverifyJobExecutionException(e);\n\t\t}\n\t}\n","date":"2019-08-21 14:12:24","endLine":85,"groupId":"101525","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOperatorChainedToSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/da16ccbfb94d24f08ac8bf06cd91e86db39169.src","preCode":"\tpublic void testOperatorChainedToSource() throws Exception {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.ALWAYS));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/StreamTaskTimerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-08-16 06:38:01","commitOrder":2,"curCode":"\tpublic void testOneInputOperatorWithoutChaining() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.NEVER));\n\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tverifyJobExecutionException(e);\n\t\t}\n\t}\n","date":"2019-08-21 14:12:24","endLine":121,"groupId":"101525","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneInputOperatorWithoutChaining","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/da16ccbfb94d24f08ac8bf06cd91e86db39169.src","preCode":"\tpublic void testOneInputOperatorWithoutChaining() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(timeCharacteristic);\n\t\tenv.setParallelism(1);\n\n\t\tDataStream<String> source = env.addSource(new InfiniteTestSource());\n\n\t\tsource.transform(\"Custom Operator\", BasicTypeInfo.STRING_TYPE_INFO, new TimerOperator(ChainingStrategy.NEVER));\n\n\t\tboolean testSuccess = false;\n\t\ttry {\n\t\t\tenv.execute(\"Timer test\");\n\t\t} catch (JobExecutionException e) {\n\t\t\tif (e.getCause() instanceof TimerException) {\n\t\t\t\tTimerException te = (TimerException) e.getCause();\n\t\t\t\tif (te.getCause() instanceof RuntimeException) {\n\t\t\t\t\tRuntimeException re = (RuntimeException) te.getCause();\n\t\t\t\t\tif (re.getMessage().equals(\"TEST SUCCESS\")) {\n\t\t\t\t\t\ttestSuccess = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(testSuccess);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/StreamTaskTimerITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"8935ebf1b1f36109e3b1c48a5aba8e63f9df263a","commitMessage":"@@@[FLINK-13588] Report exception message when failing StreamTask#handleAsyncException\n\nDon't throw away exception info in logging as it make diagnosis extremely hard\n\nThis closes #9456.\n","date":"2019-08-21 14:12:24","modifiedFileCount":"4","status":"M","submitter":"John Lonergan"}]
