[{"authorTime":"2016-10-02 22:56:41","codes":[{"authorDate":"2016-10-02 22:56:41","commitOrder":1,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2016-10-07 20:14:27","endLine":607,"groupId":"44313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraphWithKeyedState","params":"(intparallelism@intmaxParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/8a5793827a72b84b66ab1b06d0c9846f668cdc.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"B"},{"authorDate":"2016-10-02 22:56:41","commitOrder":1,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2016-10-07 20:14:27","endLine":645,"groupId":"7493","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraphWithKeyedAndNonPartitionedOperatorState","params":"(intparallelism@intmaxParallelism@intfixedParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/8a5793827a72b84b66ab1b06d0c9846f668cdc.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"B"}],"commitId":"8d953bf2626012e3e497334641962bd8f96098de","commitMessage":"@@@[FLINK-4731] Fix HeapKeyedStateBackend Scale-In\n\nAdds additional tests in RescalingITCase for scale-in\n\nThis closes #2584.\n","date":"2016-10-07 20:14:27","modifiedFileCount":"11","status":"B","submitter":"Stefan Richter"},{"authorTime":"2016-10-02 22:56:41","codes":[{"authorDate":"2017-01-16 21:31:22","commitOrder":2,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\t\tint parallelism,\n\t\t\tint maxParallelism,\n\t\t\tint numberKeys,\n\t\t\tint numberElements,\n\t\t\tboolean terminateAfterEmission,\n\t\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tif (0 < maxParallelism) {\n\t\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\t}\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\t\tnumberKeys,\n\t\t\t\tnumberElements,\n\t\t\t\tterminateAfterEmission))\n\t\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2017-01-24 22:51:35","endLine":684,"groupId":"44313","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraphWithKeyedState","params":"(intparallelism@intmaxParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/3632ad00d86ebd05b0618eecf5e0447688e5b7.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\t\tint parallelism,\n\t\t\tint maxParallelism,\n\t\t\tint numberKeys,\n\t\t\tint numberElements,\n\t\t\tboolean terminateAfterEmission,\n\t\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\t\tnumberKeys,\n\t\t\t\tnumberElements,\n\t\t\t\tterminateAfterEmission))\n\t\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"M"},{"authorDate":"2016-10-02 22:56:41","commitOrder":2,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2016-10-07 20:14:27","endLine":645,"groupId":"7493","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraphWithKeyedAndNonPartitionedOperatorState","params":"(intparallelism@intmaxParallelism@intfixedParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/8a5793827a72b84b66ab1b06d0c9846f668cdc.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"acfeeaf5e337e56300d10a3a991e79edc827ac7a","commitMessage":"@@@[FLINK-5473] Limit max parallelism to 1 for non-parallel operators\n\n[FLINK-5473] Better default behaviours for unspecified maximum parallelism\n\nThis closes #3182.\n","date":"2017-01-24 22:51:35","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2016-10-02 22:56:41","codes":[{"authorDate":"2017-06-14 00:07:50","commitOrder":3,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\t\tint parallelism,\n\t\t\tint maxParallelism,\n\t\t\tint numberKeys,\n\t\t\tint numberElements,\n\t\t\tboolean terminateAfterEmission,\n\t\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tif (0 < maxParallelism) {\n\t\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\t}\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\tenv.getConfig().setUseSnapshotCompression(true);\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\t\tnumberKeys,\n\t\t\t\tnumberElements,\n\t\t\t\tterminateAfterEmission))\n\t\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2017-07-04 16:17:26","endLine":706,"groupId":"101580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createJobGraphWithKeyedState","params":"(intparallelism@intmaxParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a5/8ec514c156a9452357a1a9e838fe2c034c4a43.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedState(\n\t\t\tint parallelism,\n\t\t\tint maxParallelism,\n\t\t\tint numberKeys,\n\t\t\tint numberElements,\n\t\t\tboolean terminateAfterEmission,\n\t\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tif (0 < maxParallelism) {\n\t\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\t}\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexSource(\n\t\t\t\tnumberKeys,\n\t\t\t\tnumberElements,\n\t\t\t\tterminateAfterEmission))\n\t\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"},{"authorDate":"2016-10-02 22:56:41","commitOrder":3,"curCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","date":"2016-10-07 20:14:27","endLine":645,"groupId":"101580","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createJobGraphWithKeyedAndNonPartitionedOperatorState","params":"(intparallelism@intmaxParallelism@intfixedParallelism@intnumberKeys@intnumberElements@booleanterminateAfterEmission@intcheckpointingInterval)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/8a5793827a72b84b66ab1b06d0c9846f668cdc.src","preCode":"\tprivate static JobGraph createJobGraphWithKeyedAndNonPartitionedOperatorState(\n\t\tint parallelism,\n\t\tint maxParallelism,\n\t\tint fixedParallelism,\n\t\tint numberKeys,\n\t\tint numberElements,\n\t\tboolean terminateAfterEmission,\n\t\tint checkpointingInterval) {\n\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setParallelism(parallelism);\n\t\tenv.getConfig().setMaxParallelism(maxParallelism);\n\t\tenv.enableCheckpointing(checkpointingInterval);\n\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\tDataStream<Integer> input = env.addSource(new SubtaskIndexNonPartitionedStateSource(\n\t\t\tnumberKeys,\n\t\t\tnumberElements,\n\t\t\tterminateAfterEmission))\n\t\t\t.setParallelism(fixedParallelism)\n\t\t\t.keyBy(new KeySelector<Integer, Integer>() {\n\t\t\t\tprivate static final long serialVersionUID = -7952298871120320940L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic Integer getKey(Integer value) throws Exception {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\tSubtaskIndexFlatMapper.workCompletedLatch = new CountDownLatch(numberKeys);\n\n\t\tDataStream<Tuple2<Integer, Integer>> result = input.flatMap(new SubtaskIndexFlatMapper(numberElements));\n\n\t\tresult.addSink(new CollectionSink<Tuple2<Integer, Integer>>());\n\n\t\treturn env.getStreamGraph().getJobGraph();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/RescalingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"5171513a3c48d9ba1bd642225ee35cd8c194cb99","commitMessage":"@@@[FLINK-6773] [checkpoint] Introduce compression (snappy) for keyed state in full checkpoints and savepoints\n","date":"2017-07-04 16:17:26","modifiedFileCount":"11","status":"M","submitter":"Stefan Richter"}]
