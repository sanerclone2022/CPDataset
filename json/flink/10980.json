[{"authorTime":"2018-07-17 02:51:44","codes":[{"authorDate":"2018-07-17 02:51:44","commitOrder":1,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getCurrentInProgress());\n\t\tAssert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty());\n\t}\n","date":"2018-07-17 02:54:02","endLine":78,"groupId":"50662","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/35/3ac00fd9020a722dad579efa89f650b58f976c.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getCurrentInProgress());\n\t\tAssert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2018-07-17 02:51:44","commitOrder":1,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","date":"2018-07-17 02:54:02","endLine":117,"groupId":"50661","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/35/3ac00fd9020a722dad579efa89f650b58f976c.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"0bbc91eb1b23fa535e28fa8403f8040db46ebf98","commitMessage":"@@@[FLINK-9750] [DataStream API] Add new StreamingFileSink on top of the ResumableWriter.\n","date":"2018-07-17 02:54:02","modifiedFileCount":"1","status":"B","submitter":"kkloudas"},{"authorTime":"2018-07-17 17:52:02","codes":[{"authorDate":"2018-07-17 17:52:02","commitOrder":2,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgress());\n\t\tAssert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty());\n\t}\n","date":"2018-07-20 22:12:29","endLine":80,"groupId":"50662","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/5be6340ff1521278e3c2e735c46a0b106634f5.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getCurrentInProgress());\n\t\tAssert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-07-17 17:52:02","commitOrder":2,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","date":"2018-07-20 22:12:29","endLine":120,"groupId":"50661","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/5be6340ff1521278e3c2e735c46a0b106634f5.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState bucketState = new BucketState(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState> serializer =\n\t\t\t\tnew BucketStateSerializer(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer()\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"b56c75ca375049b1d2c80d2d0945ae1ae04eb39e","commitMessage":"@@@[FLINK-9903] [DataStream API] Refactor StreamingFileSink / add bulk encoders\n\n* Add supports for bulk encoders.\n* Expose more options in the rolling policy and\n* Allows to return any object as bucket id from the bucketer.\n","date":"2018-07-20 22:12:29","modifiedFileCount":"14","status":"M","submitter":"kkloudas"},{"authorTime":"2018-07-17 17:52:02","codes":[{"authorDate":"2018-07-30 17:37:41","commitOrder":3,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","date":"2018-08-03 00:58:33","endLine":80,"groupId":"50662","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/55/360a4a35380da6f344b3b24de9351641f3f176.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgress());\n\t\tAssert.assertTrue(recoveredState.getPendingPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-07-17 17:52:02","commitOrder":3,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","date":"2018-07-20 22:12:29","endLine":120,"groupId":"50661","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3d/5be6340ff1521278e3c2e735c46a0b106634f5.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"}],"commitId":"1b0baa162bd87efd69040eb787de8d6624f14c85","commitMessage":"@@@[FLINK-10029][DataStream API] Refactoring the StreamingFileSink code.\n","date":"2018-08-03 00:58:33","modifiedFileCount":"17","status":"M","submitter":"kkloudas"},{"authorTime":"2019-03-21 19:04:28","codes":[{"authorDate":"2018-07-30 17:37:41","commitOrder":4,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","date":"2018-08-03 00:58:33","endLine":80,"groupId":"50662","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/55/360a4a35380da6f344b3b24de9351641f3f176.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2019-03-21 19:04:28","commitOrder":4,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n\t\t);\n\t}\n","date":"2019-03-21 19:04:28","endLine":120,"groupId":"50661","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/c1f8b2885dd918e491cb1102325c8c72b6aab4.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"06f8fe87421493280f6602aeb73153e677844542","commitMessage":"@@@[hotfix][streaming] Fix BucketStateSerializerTest on Windows\n\n","date":"2019-03-21 19:04:28","modifiedFileCount":"1","status":"M","submitter":"boshu Zheng"},{"authorTime":"2020-05-13 21:15:03","codes":[{"authorDate":"2020-05-13 21:15:03","commitOrder":5,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty());\n\t}\n","date":"2020-05-18 00:48:47","endLine":138,"groupId":"22157","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/3ae8d5354129a21ad2091630713a4c986bacbc.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2020-05-13 21:15:03","commitOrder":5,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","date":"2020-05-18 00:48:47","endLine":192,"groupId":"22157","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/3ae8d5354129a21ad2091630713a4c986bacbc.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"339f5d84d0b7e9fe64534ea4e2adf7e35dee8398","commitMessage":"@@@[FLINK-17593][fs-connector] Support arbitrary recovery mechanism for PartFileWriter\n\nThis change includes two things:\n1. Make the PartFileWriter generic and decouple the PartFileWriter and RecoverableStream. According to different pre-commit / commit methods. \nthis change allows us to extend different types of PartFileWriter.\n2. Make the Bucket/Buckets depends on the PartFileFactory instead of RecoverableWriter.\n\nThis closes #12132\n","date":"2020-05-18 00:48:47","modifiedFileCount":"19","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-05-18 02:17:58","codes":[{"authorDate":"2020-05-18 02:17:58","commitOrder":6,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","date":"2020-05-18 03:32:11","endLine":80,"groupId":"50662","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/c1f8b2885dd918e491cb1102325c8c72b6aab4.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-05-18 02:17:58","commitOrder":6,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n\t\t);\n\t}\n","date":"2020-05-18 03:32:11","endLine":120,"groupId":"50661","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f2/c1f8b2885dd918e491cb1102325c8c72b6aab4.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"c3a4a1241164d43476d6c96959dfaffc848e5754","commitMessage":"@@@Revert \"[FLINK-17593][fs-connector] Support arbitrary recovery mechanism for PartFileWriter\"\n\nThis reverts commit 339f5d84d0b7e9fe64534ea4e2adf7e35dee8398.\n\nI'm reverting these three related commits because it is important to\nhave confidence in our testing and to clearly separate the addition of\nthe Bucket State upgrade test from changing the serializer.\n","date":"2020-05-18 03:32:11","modifiedFileCount":"19","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-05-18 15:19:07","codes":[{"authorDate":"2020-05-18 15:19:07","commitOrder":7,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingPartsPerCheckpoint().isEmpty());\n\t}\n","date":"2020-05-18 22:09:50","endLine":140,"groupId":"22157","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/c57663c89c0166f52995fb1f8f08ce06b64aac.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, null, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tbyte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\t\tAssert.assertNull(recoveredState.getInProgressResumableFile());\n\t\tAssert.assertTrue(recoveredState.getCommittableFilesPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-05-18 15:19:07","commitOrder":7,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","date":"2020-05-18 22:09:50","endLine":194,"groupId":"22157","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/c57663c89c0166f52995fb1f8f08ce06b64aac.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\t\tfinal File testFolder = tempFolder.newFolder();\n\t\tfinal FileSystem fs = FileSystem.get(testFolder.toURI());\n\n\t\tfinal Path testBucket = new Path(testFolder.getPath(), \"test\");\n\n\t\tfinal RecoverableWriter writer = fs.createRecoverableWriter();\n\t\tfinal RecoverableFsDataOutputStream stream = writer.open(testBucket);\n\t\tstream.write(IN_PROGRESS_CONTENT.getBytes(Charset.forName(\"UTF-8\")));\n\n\t\tfinal RecoverableWriter.ResumeRecoverable current = stream.persist();\n\n\t\tfinal BucketState<String> bucketState = new BucketState<>(\n\t\t\t\t\"test\", testBucket, Long.MAX_VALUE, current, new HashMap<>());\n\n\t\tfinal SimpleVersionedSerializer<BucketState<String>> serializer =\n\t\t\t\tnew BucketStateSerializer<>(\n\t\t\t\t\t\twriter.getResumeRecoverableSerializer(),\n\t\t\t\t\t\twriter.getCommitRecoverableSerializer(),\n\t\t\t\t\t\tSimpleVersionedStringSerializer.INSTANCE\n\t\t\t\t);\n\n\t\tfinal byte[] bytes = SimpleVersionedSerialization.writeVersionAndSerialize(serializer, bucketState);\n\n\t\t\r\n\t\tstream.close();\n\n\t\tfinal BucketState<String> recoveredState =  SimpleVersionedSerialization.readVersionAndDeSerialize(serializer, bytes);\n\n\t\tAssert.assertEquals(testBucket, recoveredState.getBucketPath());\n\n\t\tFileStatus[] statuses = fs.listStatus(testBucket.getParent());\n\t\tAssert.assertEquals(1L, statuses.length);\n\t\tAssert.assertTrue(\n\t\t\t\tstatuses[0].getPath().getPath().startsWith(\n\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n\t\t);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"f1e9362cb09e094f1ea6d1984dc65ea34443bb5b","commitMessage":"@@@[FLINK-17593][Connectors/FileSystem] Turn BucketStateSerializerTest into an upgrade test\n","date":"2020-05-18 22:09:50","modifiedFileCount":"1","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-05-18 15:19:07","codes":[{"authorDate":"2020-05-13 21:15:03","commitOrder":8,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty());\n\t}\n","date":"2020-05-18 22:09:50","endLine":139,"groupId":"22157","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cb/d18c486dc38d037bae11fd825bbcae8fb07bbf.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingPartsPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-05-18 15:19:07","commitOrder":8,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","date":"2020-05-18 22:09:50","endLine":194,"groupId":"22157","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/c57663c89c0166f52995fb1f8f08ce06b64aac.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"N"}],"commitId":"220f7dabf24fc1e6fe77b83a00a7de47d75d5b18","commitMessage":"@@@[FLINK-17593][Connectors/FileSystem] Support arbitrary recovery mechanism for PartFileWriter\n\nThis change includes two things:\n\n1. Make the PartFileWriter generic and decouple the PartFileWriter and\nRecoverableStream. According to different pre-commit / commit methods. \nthis change allows us to extend different types of PartFileWriter.\n\n2. Make the Bucket/Buckets depends on the PartFileFactory instead of\nRecoverableWriter.\n","date":"2020-05-18 22:09:50","modifiedFileCount":"19","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-11-26 12:21:09","codes":[{"authorDate":"2020-11-26 12:21:09","commitOrder":9,"curCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal BucketStatePathResolver pathResolver = new BucketStatePathResolver(BASE_PATH, previousVersion);\n\n\t\tfinal java.nio.file.Path outputPath = pathResolver.getOutputPath(scenarioName);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty());\n\t}\n","date":"2020-11-30 22:18:17","endLine":113,"groupId":"10980","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerializationEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/80257dc2c16376d8682ce5b4b6d3e03cff331a.src","preCode":"\tpublic void testSerializationEmpty() throws IOException {\n\n\t\tfinal String scenarioName = \"empty\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\t\tAssert.assertNull(bucket.getInProgressPart());\n\t\tAssert.assertTrue(bucket.getPendingFileRecoverablesPerCheckpoint().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-11-26 12:21:09","commitOrder":9,"curCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal BucketStatePathResolver pathResolver = new BucketStatePathResolver(BASE_PATH, previousVersion);\n\n\t\tfinal java.nio.file.Path outputPath = pathResolver.getOutputPath(scenarioName);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","date":"2020-11-30 22:18:17","endLine":150,"groupId":"10980","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializationOnlyInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3a/80257dc2c16376d8682ce5b4b6d3e03cff331a.src","preCode":"\tpublic void testSerializationOnlyInProgress() throws IOException {\n\n\t\tfinal String scenarioName = \"only-in-progress\";\n\t\tfinal java.nio.file.Path outputPath = getOutputPath(scenarioName, previousVersion);\n\n\t\tfinal Path testBucketPath = new Path(outputPath.resolve(BUCKET_ID).toString());\n\n\t\tfinal BucketState<String> recoveredState = readBucketState(scenarioName, previousVersion);\n\n\t\tfinal Bucket<String, String> bucket = restoreBucket(0, recoveredState);\n\n\t\tAssert.assertEquals(testBucketPath, bucket.getBucketPath());\n\n\t\t\r\n\t\tAssert.assertEquals(8, bucket.getInProgressPart().getSize());\n\n\t\tlong numFiles = Files.list(Paths.get(testBucketPath.toString()))\n\t\t\t.map(file -> {\n\t\t\t\tassertThat(\n\t\t\t\t\tfile.getFileName().toString(),\n\t\t\t\t\tstartsWith(\".part-0-0.inprogress\"));\n\t\t\t\treturn 1;\n\t\t\t})\n\t\t\t.count();\n\n\t\tassertThat(numFiles, is(1L));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"2fe2be71974fc17c36990f69abd5ec54d222663a","commitMessage":"@@@[refactor] Factor test data generator/resolver out of BucketStateSerializerTest\n\nWe want to reuse this code for the new FileSink migration test as well.\n","date":"2020-11-30 22:18:17","modifiedFileCount":"1","status":"M","submitter":"Yun Gao"}]
