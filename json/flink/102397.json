[{"authorTime":"2020-11-05 15:00:31","codes":[{"authorDate":"2020-11-05 15:00:31","commitOrder":1,"curCode":"\tpublic void replace(String key, StringResourceVersion resourceVersion, T state) throws Exception {\n\t\tcheckNotNull(key, \"Key in ConfigMap.\");\n\t\tcheckNotNull(state, \"State.\");\n\n\t\tfinal RetrievableStateHandle<T> oldStateHandle = getAndLock(key);\n\n\t\tfinal RetrievableStateHandle<T> newStateHandle = storage.store(state);\n\n\t\tboolean success = false;\n\n\t\ttry {\n\t\t\tfinal byte[] serializedStoreHandle = InstantiationUtil.serializeObject(newStateHandle);\n\t\t\tsuccess = kubeClient.checkAndUpdateConfigMap(\n\t\t\t\tconfigMapName,\n\t\t\t\tc -> {\n\t\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (c.getData().containsKey(key)) {\n\t\t\t\t\t\t\tc.getData().put(key, encodeStateHandle(serializedStoreHandle));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new CompletionException(getKeyNotExistException(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t\t}\n\t\t\t\t\treturn Optional.empty();\n\t\t\t\t}).get();\n\t\t} catch (Exception ex) {\n\t\t\tthrow ExceptionUtils.findThrowable(ex, NotExistException.class).orElseThrow(() -> ex);\n\t\t} finally {\n\t\t\tif (success) {\n\t\t\t\toldStateHandle.discardState();\n\t\t\t} else {\n\t\t\t\tnewStateHandle.discardState();\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-08 00:54:31","endLine":202,"groupId":"34699","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"replace","params":"(Stringkey@StringResourceVersionresourceVersion@Tstate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/9169a63a6c80832f13b1bbe8b808a8abb3f9d2.src","preCode":"\tpublic void replace(String key, StringResourceVersion resourceVersion, T state) throws Exception {\n\t\tcheckNotNull(key, \"Key in ConfigMap.\");\n\t\tcheckNotNull(state, \"State.\");\n\n\t\tfinal RetrievableStateHandle<T> oldStateHandle = getAndLock(key);\n\n\t\tfinal RetrievableStateHandle<T> newStateHandle = storage.store(state);\n\n\t\tboolean success = false;\n\n\t\ttry {\n\t\t\tfinal byte[] serializedStoreHandle = InstantiationUtil.serializeObject(newStateHandle);\n\t\t\tsuccess = kubeClient.checkAndUpdateConfigMap(\n\t\t\t\tconfigMapName,\n\t\t\t\tc -> {\n\t\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (c.getData().containsKey(key)) {\n\t\t\t\t\t\t\tc.getData().put(key, encodeStateHandle(serializedStoreHandle));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new CompletionException(getKeyNotExistException(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t\t}\n\t\t\t\t\treturn Optional.empty();\n\t\t\t\t}).get();\n\t\t} catch (Exception ex) {\n\t\t\tthrow ExceptionUtils.findThrowable(ex, NotExistException.class).orElseThrow(() -> ex);\n\t\t} finally {\n\t\t\tif (success) {\n\t\t\t\toldStateHandle.discardState();\n\t\t\t} else {\n\t\t\t\tnewStateHandle.discardState();\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStore.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2020-11-05 15:00:31","commitOrder":1,"curCode":"\tpublic void clearEntries() throws Exception {\n\t\tkubeClient.checkAndUpdateConfigMap(\n\t\t\tconfigMapName,\n\t\t\tc -> {\n\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\tc.getData().keySet().removeIf(configMapKeyFilter);\n\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t}\n\t\t\t\treturn Optional.empty();\n\t\t\t}).get();\n\t}\n","date":"2020-11-08 00:54:31","endLine":408,"groupId":"11222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"clearEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/9169a63a6c80832f13b1bbe8b808a8abb3f9d2.src","preCode":"\tpublic void clearEntries() throws Exception {\n\t\tkubeClient.checkAndUpdateConfigMap(\n\t\t\tconfigMapName,\n\t\t\tc -> {\n\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\tc.getData().keySet().removeIf(configMapKeyFilter);\n\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t}\n\t\t\t\treturn Optional.empty();\n\t\t\t}).get();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStore.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"B"}],"commitId":"8b4f28b334af4cb2e36d6f46805f9631ce34e091","commitMessage":"@@@[FLINK-19543][k8s] Implement KubernetesStateHandleStore based on Kubernetes API\n","date":"2020-11-08 00:54:31","modifiedFileCount":"2","status":"B","submitter":"wangyang0918"},{"authorTime":"2020-11-05 15:00:31","codes":[{"authorDate":"2021-05-04 15:41:38","commitOrder":2,"curCode":"    public void replace(String key, StringResourceVersion resourceVersion, T state)\n            throws Exception {\n        checkNotNull(key, \"Key in ConfigMap.\");\n        checkNotNull(state, \"State.\");\n\n        final RetrievableStateHandle<T> oldStateHandle = getAndLock(key);\n\n        final RetrievableStateHandle<T> newStateHandle = storage.store(state);\n\n        final byte[] serializedStateHandle = serializeOrDiscard(newStateHandle);\n\n        \r\n        boolean discardOldState = false;\n        boolean discardNewState = true;\n        try {\n            boolean success =\n                    kubeClient\n                            .checkAndUpdateConfigMap(\n                                    configMapName,\n                                    c -> {\n                                        if (KubernetesLeaderElector.hasLeadership(\n                                                c, lockIdentity)) {\n                                            \r\n                                            if (c.getData().containsKey(key)) {\n                                                c.getData()\n                                                        .put(\n                                                                key,\n                                                                encodeStateHandle(\n                                                                        serializedStateHandle));\n                                            } else {\n                                                throw new CompletionException(\n                                                        getKeyNotExistException(key));\n                                            }\n                                            return Optional.of(c);\n                                        }\n                                        return Optional.empty();\n                                    })\n                            .get();\n\n            \r\n            discardOldState = success;\n            discardNewState = !success;\n        } catch (Exception ex) {\n            final Optional<PossibleInconsistentStateException> possibleInconsistentStateException =\n                    ExceptionUtils.findThrowable(ex, PossibleInconsistentStateException.class);\n            if (possibleInconsistentStateException.isPresent()) {\n                \r\n                \r\n                discardNewState = false;\n                throw possibleInconsistentStateException.get();\n            }\n\n            throw ExceptionUtils.findThrowable(ex, NotExistException.class).orElseThrow(() -> ex);\n        } finally {\n            if (discardNewState) {\n                newStateHandle.discardState();\n            }\n\n            if (discardOldState) {\n                oldStateHandle.discardState();\n            }\n        }\n    }\n","date":"2021-05-18 16:58:42","endLine":259,"groupId":"102397","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"replace","params":"(Stringkey@StringResourceVersionresourceVersion@Tstate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/68/caf9f387e8a1719b1181bcf49f01b2ba074bc0.src","preCode":"    public void replace(String key, StringResourceVersion resourceVersion, T state)\n            throws Exception {\n        checkNotNull(key, \"Key in ConfigMap.\");\n        checkNotNull(state, \"State.\");\n\n        final RetrievableStateHandle<T> oldStateHandle = getAndLock(key);\n\n        final RetrievableStateHandle<T> newStateHandle = storage.store(state);\n\n        boolean success = false;\n\n        try {\n            final byte[] serializedStoreHandle = InstantiationUtil.serializeObject(newStateHandle);\n            success =\n                    kubeClient\n                            .checkAndUpdateConfigMap(\n                                    configMapName,\n                                    c -> {\n                                        if (KubernetesLeaderElector.hasLeadership(\n                                                c, lockIdentity)) {\n                                            \r\n                                            if (c.getData().containsKey(key)) {\n                                                c.getData()\n                                                        .put(\n                                                                key,\n                                                                encodeStateHandle(\n                                                                        serializedStoreHandle));\n                                            } else {\n                                                throw new CompletionException(\n                                                        getKeyNotExistException(key));\n                                            }\n                                            return Optional.of(c);\n                                        }\n                                        return Optional.empty();\n                                    })\n                            .get();\n        } catch (Exception ex) {\n            throw ExceptionUtils.findThrowable(ex, NotExistException.class).orElseThrow(() -> ex);\n        } finally {\n            if (success) {\n                oldStateHandle.discardState();\n            } else {\n                newStateHandle.discardState();\n            }\n        }\n    }\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStore.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-11-05 15:00:31","commitOrder":2,"curCode":"\tpublic void clearEntries() throws Exception {\n\t\tkubeClient.checkAndUpdateConfigMap(\n\t\t\tconfigMapName,\n\t\t\tc -> {\n\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\tc.getData().keySet().removeIf(configMapKeyFilter);\n\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t}\n\t\t\t\treturn Optional.empty();\n\t\t\t}).get();\n\t}\n","date":"2020-11-08 00:54:31","endLine":408,"groupId":"102397","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"clearEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9e/9169a63a6c80832f13b1bbe8b808a8abb3f9d2.src","preCode":"\tpublic void clearEntries() throws Exception {\n\t\tkubeClient.checkAndUpdateConfigMap(\n\t\t\tconfigMapName,\n\t\t\tc -> {\n\t\t\t\tif (KubernetesLeaderElector.hasLeadership(c, lockIdentity)) {\n\t\t\t\t\tc.getData().keySet().removeIf(configMapKeyFilter);\n\t\t\t\t\treturn Optional.of(c);\n\t\t\t\t}\n\t\t\t\treturn Optional.empty();\n\t\t\t}).get();\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/highavailability/KubernetesStateHandleStore.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"N"}],"commitId":"417cf78fd02f1464428a98798c892ce7eb70dc43","commitMessage":"@@@[FLINK-22494][ha] Introduces PossibleInconsistentState to StateHandleStore\n","date":"2021-05-18 16:58:42","modifiedFileCount":"6","status":"M","submitter":"Matthias Pohl"}]
