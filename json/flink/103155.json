[{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":271,"groupId":"49993","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"},{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":352,"groupId":"49995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"}],"commitId":"c6c17befe54d55755ebaf160ff20a11aa32bbbca","commitMessage":"@@@[FLINK-3659] Expose broadcast state on DataStream API.\n","date":"2018-02-07 21:07:45","modifiedFileCount":"5","status":"B","submitter":"kkloudas"},{"authorTime":"2018-01-29 23:23:04","codes":[{"authorDate":"2018-01-29 23:23:04","commitOrder":2,"curCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-07 21:08:52","endLine":329,"groupId":"23236","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/e1c3e390c54db3d03ff2ad1d9c744f499655d6.src","preCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2018-01-29 23:23:04","commitOrder":2,"curCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-07 21:08:52","endLine":415,"groupId":"23233","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/e1c3e390c54db3d03ff2ad1d9c744f499655d6.src","preCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"28768235068039e4ff50c5235ab79c54410b4ec0","commitMessage":"@@@[FLINK-8446] Support multiple broadcast states.\n","date":"2018-02-07 21:08:52","modifiedFileCount":"7","status":"M","submitter":"kkloudas"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":3,"curCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-25 22:10:28","endLine":329,"groupId":"23236","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/72e4549c69b771951f9368f1263f71649de17a.src","preCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2018-02-23 17:36:09","commitOrder":3,"curCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-02-25 22:10:28","endLine":415,"groupId":"23233","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/72e4549c69b771951f9368f1263f71649de17a.src","preCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorStateHandles mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2019-02-23 03:19:12","codes":[{"authorDate":"2019-02-23 03:19:12","commitOrder":4,"curCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\tfinal OperatorSubtaskState initState1 = repartitionInitState(mergedSnapshot, 10, 2, 3, 0);\n\t\tfinal OperatorSubtaskState initState2 = repartitionInitState(mergedSnapshot, 10, 2, 3, 1);\n\t\tfinal OperatorSubtaskState initState3 = repartitionInitState(mergedSnapshot, 10, 2, 3, 2);\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tinitState1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tinitState2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tinitState3,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-02-23 03:19:12","endLine":333,"groupId":"103155","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/e1c7bf8c7251db002eef09f76194aa0f66423a.src","preCode":"\tpublic void testScaleUp() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness3.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\t\t\tQueue<?> output3 = testHarness3.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output3.size());\n\t\t\tfor (Object o: output3) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-02-23 03:19:12","commitOrder":4,"curCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\tfinal OperatorSubtaskState initState1 = repartitionInitState(mergedSnapshot, 10, 3, 2, 0);\n\t\tfinal OperatorSubtaskState initState2 = repartitionInitState(mergedSnapshot, 10, 3, 2, 1);\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tinitState1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tinitState2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-02-23 03:19:12","endLine":422,"groupId":"103155","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/e1c7bf8c7251db002eef09f76194aa0f66423a.src","preCode":"\tpublic void testScaleDown() throws Exception {\n\t\tfinal Set<String> keysToRegister = new HashSet<>();\n\t\tkeysToRegister.add(\"test1\");\n\t\tkeysToRegister.add(\"test2\");\n\t\tkeysToRegister.add(\"test3\");\n\n\t\tfinal OperatorSubtaskState mergedSnapshot;\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness3 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\t\r\n\t\t\ttestHarness1.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness2.processElement2(new StreamRecord<>(3));\n\t\t\ttestHarness3.processElement2(new StreamRecord<>(3));\n\n\t\t\tmergedSnapshot = AbstractStreamOperatorTestHarness.repackageState(\n\t\t\t\t\ttestHarness1.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness2.snapshot(0L, 0L),\n\t\t\t\t\ttestHarness3.snapshot(0L, 0L)\n\t\t\t);\n\t\t}\n\n\t\tfinal Set<String> expected = new HashSet<>(3);\n\t\texpected.add(\"test1=3\");\n\t\texpected.add(\"test2=3\");\n\t\texpected.add(\"test3=3\");\n\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness1 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR);\n\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness2 = getInitializedTestHarness(\n\t\t\t\t\t\tnew TestFunctionWithOutput(keysToRegister),\n\t\t\t\t\t\t10,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t1,\n\t\t\t\t\t\tmergedSnapshot,\n\t\t\t\t\t\tSTATE_DESCRIPTOR)\n\t\t) {\n\t\t\ttestHarness1.processElement1(new StreamRecord<>(\"trigger\"));\n\t\t\ttestHarness2.processElement1(new StreamRecord<>(\"trigger\"));\n\n\t\t\tQueue<?> output1 = testHarness1.getOutput();\n\t\t\tQueue<?> output2 = testHarness2.getOutput();\n\n\t\t\tAssert.assertEquals(expected.size(), output1.size());\n\t\t\tfor (Object o: output1) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\n\t\t\tAssert.assertEquals(expected.size(), output2.size());\n\t\t\tfor (Object o: output2) {\n\t\t\t\tStreamRecord<String> rec = (StreamRecord<String>) o;\n\t\t\t\tAssert.assertTrue(expected.contains(rec.getValue()));\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"bdb776035f7266916e9debc7a0d4e7cc5cb1dfd3","commitMessage":"@@@[FLINK-11618][state] Refactor operator state repartition mechanism\n\nThis closes #7711.\n","date":"2019-02-23 03:19:12","modifiedFileCount":"20","status":"M","submitter":"Yun Tang"}]
