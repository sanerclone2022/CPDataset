[{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> brSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG);\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> nonBrSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG);\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedBr, brSideOutput);\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedNonBr, nonBrSideOutput);\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":158,"groupId":"23234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/06/6a80ff95ac08750ca0cfa331afc5a389dfeece.src","preCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> brSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG);\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> nonBrSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG);\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedBr, brSideOutput);\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedNonBr, nonBrSideOutput);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2017-12-21 21:38:54","commitOrder":1,"curCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedNonBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG));\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":170,"groupId":"23234","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/98d14b581262db3139945d97b3b0336fca2bf8.src","preCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedNonBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"}],"commitId":"c6c17befe54d55755ebaf160ff20a11aa32bbbca","commitMessage":"@@@[FLINK-3659] Expose broadcast state on DataStream API.\n","date":"2018-02-07 21:07:45","modifiedFileCount":"5","status":"B","submitter":"kkloudas"},{"authorTime":"2017-12-21 21:38:54","codes":[{"authorDate":"2018-01-29 23:23:04","commitOrder":2,"curCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tnew FunctionWithSideOutput(), STATE_DESCRIPTOR)\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> brSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG);\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> nonBrSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG);\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedBr, brSideOutput);\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedNonBr, nonBrSideOutput);\n\t\t}\n\t}\n","date":"2018-02-07 21:08:52","endLine":211,"groupId":"103154","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/e1c3e390c54db3d03ff2ad1d9c744f499655d6.src","preCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> brSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG);\n\t\t\tConcurrentLinkedQueue<StreamRecord<String>> nonBrSideOutput = testHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG);\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedBr, brSideOutput);\n\t\t\tTestHarnessUtil.assertOutputEquals(\"Wrong Side Output\", expectedNonBr, nonBrSideOutput);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithNonKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2017-12-21 21:38:54","commitOrder":2,"curCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedNonBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG));\n\t\t}\n\t}\n","date":"2018-02-07 21:07:45","endLine":170,"groupId":"103154","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/98d14b581262db3139945d97b3b0336fca2bf8.src","preCode":"\tpublic void testSideOutput() throws Exception {\n\t\ttry (\n\t\t\t\tTwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(\n\t\t\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n\t\t\t\t\t\tnew IdentityKeySelector<>(),\n\t\t\t\t\t\tnew FunctionWithSideOutput())\n\t\t) {\n\n\t\t\ttestHarness.processWatermark1(new Watermark(10L));\n\t\t\ttestHarness.processWatermark2(new Watermark(10L));\n\t\t\ttestHarness.processElement2(new StreamRecord<>(5, 12L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(40L));\n\t\t\ttestHarness.processWatermark2(new Watermark(40L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 13L));\n\t\t\ttestHarness.processElement1(new StreamRecord<>(\"6\", 15L));\n\n\t\t\ttestHarness.processWatermark1(new Watermark(50L));\n\t\t\ttestHarness.processWatermark2(new Watermark(50L));\n\n\t\t\tQueue<StreamRecord<String>> expectedBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedBr.add(new StreamRecord<>(\"BR:5 WM:10 TS:12\", 12L));\n\n\t\t\tQueue<StreamRecord<String>> expectedNonBr = new ConcurrentLinkedQueue<>();\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:13\", 13L));\n\t\t\texpectedNonBr.add(new StreamRecord<>(\"NON-BR:6 WM:40 TS:15\", 15L));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.BROADCAST_TAG));\n\n\t\t\tTestHarnessUtil.assertOutputEquals(\n\t\t\t\t\t\"Wrong Side Output\",\n\t\t\t\t\texpectedNonBr,\n\t\t\t\t\ttestHarness.getSideOutput(FunctionWithSideOutput.NON_BROADCAST_TAG));\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/co/CoBroadcastWithKeyedOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"28768235068039e4ff50c5235ab79c54410b4ec0","commitMessage":"@@@[FLINK-8446] Support multiple broadcast states.\n","date":"2018-02-07 21:08:52","modifiedFileCount":"7","status":"M","submitter":"kkloudas"}]
