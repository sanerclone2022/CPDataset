[{"authorTime":"2018-09-04 17:57:12","codes":[{"authorDate":"2018-09-04 17:57:12","commitOrder":1,"curCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2018-09-07 20:27:06","endLine":98,"groupId":"8794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnImmediateCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/5259e91c41d24dfd9121d419c32ece1ab6028a.src","preCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2018-09-04 17:57:12","commitOrder":1,"curCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\t\tfinal Thread runner = Thread.currentThread();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t\trunner.interrupt();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2018-09-07 20:27:06","endLine":131,"groupId":"8795","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnAsyncCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/5259e91c41d24dfd9121d419c32ece1ab6028a.src","preCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\t\tfinal Thread runner = Thread.currentThread();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t\trunner.interrupt();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"78141f749c5e61752f80eb56ffe1cc055c2386a1","commitMessage":"@@@[FLINK-10242][tests] Split StreamSourceOperatorTest\n","date":"2018-09-07 20:27:06","modifiedFileCount":"0","status":"B","submitter":"zentol"},{"authorTime":"2019-02-26 23:53:14","codes":[{"authorDate":"2018-09-04 17:57:12","commitOrder":2,"curCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2018-09-07 20:27:06","endLine":98,"groupId":"8794","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnImmediateCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/5259e91c41d24dfd9121d419c32ece1ab6028a.src","preCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2019-02-26 23:53:14","commitOrder":2,"curCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2019-02-27 00:26:45","endLine":125,"groupId":"23208","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnAsyncCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/5df42a44846fd55c5ff509c276a65a1c6ab965.src","preCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\t\tfinal Thread runner = Thread.currentThread();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t\trunner.interrupt();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"7a5f047e7a6ef37dd33abc3c9e9533fbf593a5be","commitMessage":"@@@[FLINK-11185] Fix StreamSourceOperatorWatermarksTest instability.\n\nThe cause of the instability seems to be that due to a not-so-rare timing. \nthe thread that calls the `interrupt()` on the main thread.  runs still\nafter its original test finishes and calls `interrupt()` during execution\nof the next test. This causes the normal execution (or `sleep()` in this case)\nto be interrupted.\n\nThis closes #7842.\n","date":"2019-02-27 00:26:45","modifiedFileCount":"1","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2019-06-24 04:13:18","codes":[{"authorDate":"2019-06-24 04:13:18","commitOrder":3,"curCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\tOperatorChain<?, ?> operatorChain = createOperatorChain(operator);\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output), operatorChain);\n\t\t} finally {\n\t\t\toperatorChain.releaseOutputs();\n\t\t}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2019-06-24 15:35:44","endLine":106,"groupId":"8297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnImmediateCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/5d3bc2c42f22791808fa28c687a7ea0129aaa2.src","preCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-06-24 04:13:18","commitOrder":3,"curCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\tOperatorChain<?, ?> operatorChain = createOperatorChain(operator);\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output), operatorChain);\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\t\tfinally {\n\t\t\toperatorChain.releaseOutputs();\n\t\t}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","date":"2019-06-24 15:35:44","endLine":141,"groupId":"52466","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnAsyncCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/5d3bc2c42f22791808fa28c687a7ea0129aaa2.src","preCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output));\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"3b823107275b2a8658a6c3b51c11374463ee80bc","commitMessage":"@@@[FLINK-11878][runtime] Implement the runtime handling of BoundedOneInput and BoundedMultiInput\n","date":"2019-06-24 15:35:44","modifiedFileCount":"20","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-11-13 21:37:15","codes":[{"authorDate":"2019-11-13 21:37:15","commitOrder":4,"curCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(\n\t\t\tsourceOperator, BasicTypeInfo.STRING_TYPE_INFO, true);\n\n\t\ttestHarness.invoke();\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tfail(\"should throw an exception\");\n\t\t} catch (Throwable t) {\n\t\t\tassertTrue(ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent());\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","date":"2019-11-14 20:54:30","endLine":113,"groupId":"40556","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnImmediateCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/6f1f3af9431843f81fe8af8b2f322c6a2353cc.src","preCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\t\toperator.cancel();\n\n\t\t\r\n\t\tOperatorChain<?, ?> operatorChain = createOperatorChain(operator);\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output), operatorChain);\n\t\t} finally {\n\t\t\toperatorChain.releaseOutputs();\n\t\t}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-11-13 21:37:15","commitOrder":4,"curCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(sourceOperator, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\t\tThread.sleep(200);\n\t\ttestHarness.getTask().cancel(); \r\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t} catch (Throwable t) {\n\t\t\tassertTrue(ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent());\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","date":"2019-11-14 20:54:30","endLine":130,"groupId":"13348","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnAsyncCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/6f1f3af9431843f81fe8af8b2f322c6a2353cc.src","preCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\n\t\tfinal List<StreamElement> output = new ArrayList<>();\n\n\t\t\r\n\t\tfinal StreamSource<String, InfiniteSource<String>> operator =\n\t\t\t\tnew StreamSource<>(new InfiniteSource<String>());\n\n\t\tsetupSourceOperator(operator, TimeCharacteristic.EventTime, 0);\n\n\t\t\r\n\t\tnew Thread(\"canceler\") {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(200);\n\t\t\t\t} catch (InterruptedException ignored) {}\n\t\t\t\toperator.cancel();\n\t\t\t}\n\t\t}.start();\n\n\t\t\r\n\t\tOperatorChain<?, ?> operatorChain = createOperatorChain(operator);\n\t\ttry {\n\t\t\toperator.run(new Object(), mock(StreamStatusMaintainer.class), new CollectorOutput<String>(output), operatorChain);\n\t\t}\n\t\tcatch (InterruptedException ignored) {}\n\t\tfinally {\n\t\t\toperatorChain.releaseOutputs();\n\t\t}\n\n\t\tassertTrue(output.isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"3171edfe78a7f9feea88488273bf4341eee7b7f0","commitMessage":"@@@[FLINK-14239] Fix the max watermark in StreamSource may arrive the downstream operator early\n","date":"2019-11-14 20:54:30","modifiedFileCount":"3","status":"M","submitter":"sunhaibotb"},{"authorTime":"2020-02-03 18:28:18","codes":[{"authorDate":"2020-02-03 18:28:18","commitOrder":5,"curCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(\n\t\t\tsourceOperator, BasicTypeInfo.STRING_TYPE_INFO, true);\n\n\t\ttestHarness.invoke();\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tfail(\"should throw an exception\");\n\t\t} catch (Throwable t) {\n\t\t\tif (!ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent()) {\n\t\t\t\tthrow t;\n\t\t\t}\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","date":"2020-02-06 00:33:46","endLine":115,"groupId":"102557","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnImmediateCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/97160527b6b94d826847b5f44afc0e961b378b.src","preCode":"\tpublic void testNoMaxWatermarkOnImmediateCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(\n\t\t\tsourceOperator, BasicTypeInfo.STRING_TYPE_INFO, true);\n\n\t\ttestHarness.invoke();\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t\tfail(\"should throw an exception\");\n\t\t} catch (Throwable t) {\n\t\t\tassertTrue(ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent());\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-02-03 18:28:18","commitOrder":5,"curCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(sourceOperator, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\t\tThread.sleep(200);\n\t\ttestHarness.getTask().cancel();\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t} catch (Throwable t) {\n\t\t\tif (!ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent()) {\n\t\t\t\tthrow t;\n\t\t\t}\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","date":"2020-02-06 00:33:46","endLine":134,"groupId":"102557","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoMaxWatermarkOnAsyncCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/40/97160527b6b94d826847b5f44afc0e961b378b.src","preCode":"\tpublic void testNoMaxWatermarkOnAsyncCancel() throws Exception {\n\t\tStreamSource<String, ?> sourceOperator = new StreamSource<>(new InfiniteSource<>());\n\t\tStreamTaskTestHarness<String> testHarness = setupSourceStreamTask(sourceOperator, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\t\tThread.sleep(200);\n\t\ttestHarness.getTask().cancel(); \r\n\t\ttry {\n\t\t\ttestHarness.waitForTaskCompletion();\n\t\t} catch (Throwable t) {\n\t\t\tassertTrue(ExceptionUtils.findThrowable(t, CancelTaskException.class).isPresent());\n\t\t}\n\t\tassertTrue(testHarness.getOutput().isEmpty());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/StreamSourceOperatorWatermarksTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"7d06b11ec5f0c382fe353ba5437bf74b3b40971f","commitMessage":"@@@[FLINK-15811][task] report CancelTaskException on SourceStreamTask cancellation\n\nThread interruption and InterruptedException are implementation details\nand shouldn't be exposed. Throw CancelTaskException instead which is a part of informal contract.\n","date":"2020-02-06 00:33:46","modifiedFileCount":"2","status":"M","submitter":"Roman Khachatryan"}]
