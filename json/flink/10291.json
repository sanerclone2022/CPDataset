[{"authorTime":"2021-08-16 15:58:23","codes":[{"authorDate":"2021-08-16 15:58:23","commitOrder":1,"curCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"kafkaWriter-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"key.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"value.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        return standardProps;\n    }\n","date":"2021-08-17 06:15:36","endLine":142,"groupId":"11074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getKafkaClientConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/b2ae17bef6a613b3561fcffe4ad26c11232f54.src","preCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"kafkaWriter-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"key.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"value.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        return standardProps;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/connector/kafka/sink/KafkaWriterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2021-08-16 15:58:23","commitOrder":1,"curCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"flink-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        standardProps.put(\"max.partition.fetch.bytes\", 256);\n        return standardProps;\n    }\n","date":"2021-08-17 06:15:36","endLine":209,"groupId":"11074","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getKafkaClientConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/820fb4ed83cdfdee27ab61f3470ec8835674c7.src","preCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"flink-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        standardProps.put(\"max.partition.fetch.bytes\", 256);\n        return standardProps;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/connector/kafka/sink/KafkaTransactionLogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"94da2b587c133621bbdf39d36d55070a64605f56","commitMessage":"@@@[FLINK-23710][connectors/kafka] Move FLIP-143 KafkaSink to org.apache.kafka.connector.kafka.sink\n","date":"2021-08-17 06:15:36","modifiedFileCount":"4","status":"B","submitter":"Fabian Paul"},{"authorTime":"2021-08-27 17:13:08","codes":[{"authorDate":"2021-08-16 15:58:23","commitOrder":2,"curCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"kafkaWriter-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"key.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"value.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        return standardProps;\n    }\n","date":"2021-08-17 06:15:36","endLine":142,"groupId":"10291","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getKafkaClientConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/b2ae17bef6a613b3561fcffe4ad26c11232f54.src","preCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"kafkaWriter-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"key.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"value.serializer\", ByteArraySerializer.class.getName());\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        return standardProps;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/connector/kafka/sink/KafkaWriterITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2021-08-27 17:13:08","commitOrder":2,"curCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"flink-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"auto.id.reset\", \"earliest\");\n        standardProps.put(\"max.partition.fetch.bytes\", 256);\n        return standardProps;\n    }\n","date":"2021-09-01 14:27:59","endLine":173,"groupId":"10291","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getKafkaClientConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/9c80262076169333c71bdfc7744336aa2ca1c6.src","preCode":"    private static Properties getKafkaClientConfiguration() {\n        final Properties standardProps = new Properties();\n        standardProps.put(\"bootstrap.servers\", KAFKA_CONTAINER.getBootstrapServers());\n        standardProps.put(\"group.id\", \"flink-tests\");\n        standardProps.put(\"enable.auto.commit\", false);\n        standardProps.put(\"auto.offset.reset\", \"earliest\");\n        standardProps.put(\"max.partition.fetch.bytes\", 256);\n        return standardProps;\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/connector/kafka/sink/KafkaTransactionLogITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"b203b499552f23a31092ec6f7c4a1c3e292fd8ea","commitMessage":"@@@[FLINK-23854][connectors/kafka] Reliably abort lingering transactions in Kafka.\n\nThe new approach depends on successively aborting transactions until an unused transaction is ensured. This approach covers all edge cases including failures before first checkpoint and downscaling without checkpoints.\n","date":"2021-09-01 14:27:59","modifiedFileCount":"8","status":"M","submitter":"Arvid Heise"}]
