[{"authorTime":"2017-02-20 16:50:19","codes":[{"authorDate":"2017-02-20 16:50:19","commitOrder":1,"curCode":"\tpublic void testItemFailureRethrownOnInvoke() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"next msg\"));\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","date":"2017-02-24 22:58:40","endLine":90,"groupId":"12066","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemFailureRethrownOnInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/df5c6f44fdb268ad1d4e3f3b4719ae2b33a4e0.src","preCode":"\tpublic void testItemFailureRethrownOnInvoke() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"next msg\"));\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch-base/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/ElasticsearchSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2017-02-20 16:50:19","commitOrder":1,"curCode":"\tpublic void testItemFailureRethrownOnCheckpoint() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.snapshot(1L, 1000L);\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","date":"2017-02-24 22:58:40","endLine":122,"groupId":"12066","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemFailureRethrownOnCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b9/df5c6f44fdb268ad1d4e3f3b4719ae2b33a4e0.src","preCode":"\tpublic void testItemFailureRethrownOnCheckpoint() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.snapshot(1L, 1000L);\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch-base/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/ElasticsearchSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"2437da6e54cb48c4e29116b8789fbe4782b17ea7","commitMessage":"@@@[FLINK-5487] [elasticsearch] At-least-once Elasticsearch Sink\n\nThis closes #3358.\n","date":"2017-02-24 22:58:40","modifiedFileCount":"8","status":"B","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-05-18 06:17:04","codes":[{"authorDate":"2018-05-18 06:17:04","commitOrder":2,"curCode":"\tpublic void testItemFailureRethrownOnInvoke() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"next msg\"));\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","date":"2018-08-01 21:13:53","endLine":112,"groupId":"10404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testItemFailureRethrownOnInvoke","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/161a747c13b8bd483849d6e038bd824efed298.src","preCode":"\tpublic void testItemFailureRethrownOnInvoke() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.processElement(new StreamRecord<>(\"next msg\"));\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch-base/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/ElasticsearchSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2018-05-18 06:17:04","commitOrder":2,"curCode":"\tpublic void testItemFailureRethrownOnCheckpoint() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.snapshot(1L, 1000L);\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","date":"2018-08-01 21:13:53","endLine":144,"groupId":"10404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testItemFailureRethrownOnCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5a/161a747c13b8bd483849d6e038bd824efed298.src","preCode":"\tpublic void testItemFailureRethrownOnCheckpoint() throws Throwable {\n\t\tfinal DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(\n\t\t\tnew HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler());\n\n\t\tfinal OneInputStreamOperatorTestHarness<String, Object> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));\n\n\t\ttestHarness.open();\n\n\t\t\r\n\t\tsink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception(\"artificial failure for record\")));\n\t\ttestHarness.processElement(new StreamRecord<>(\"msg\"));\n\t\tverify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class));\n\n\t\t\r\n\t\tsink.manualBulkRequestWithAllPendingRequests();\n\n\t\ttry {\n\t\t\ttestHarness.snapshot(1L, 1000L);\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\tAssert.assertTrue(e.getCause().getCause().getMessage().contains(\"artificial failure for record\"));\n\n\t\t\t\r\n\t\t\treturn;\n\t\t}\n\n\t\tAssert.fail();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch-base/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/ElasticsearchSinkBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"b463cfb1be228d86b5d2f5a50a7cc4b682bde1ca","commitMessage":"@@@[FLINK-7386] [elasticsearch] Evolve ES connector API to make it working with Elasticsearch 5.3+\n\nThis closes #6043.\n","date":"2018-08-01 21:13:53","modifiedFileCount":"8","status":"M","submitter":"Christophe Jolif"}]
