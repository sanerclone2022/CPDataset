[{"authorTime":"2016-12-14 10:18:25","codes":[{"authorDate":"2016-12-14 10:18:25","commitOrder":2,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-07 16:28:52","endLine":778,"groupId":"51811","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/8e44f5c17195c9993a5c4254a170cd21a6331c.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":730,"status":"MB"},{"authorDate":"2016-12-14 10:18:25","commitOrder":2,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new KinesisStreamShard(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-07 16:28:52","endLine":923,"groupId":"11791","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bf/8e44f5c17195c9993a5c4254a170cd21a6331c.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new KinesisStreamShard(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"B"}],"commitId":"a05b574cc68d3f652d11fece46c23bbc24f35430","commitMessage":"@@@[FLINK-4821] Implement rescalable non-partitioned state for Kinesis Connector\n","date":"2017-05-07 16:28:52","modifiedFileCount":"3","status":"M","submitter":"Tony Wei"},{"authorTime":"2017-05-07 16:29:32","codes":[{"authorDate":"2017-05-07 16:29:32","commitOrder":3,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShard, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-07 17:33:04","endLine":787,"groupId":"51811","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/178c74620ca07f52baea9cfaba29358fd2d7ac.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"},{"authorDate":"2017-05-07 16:29:32","commitOrder":3,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShard, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new KinesisStreamShard(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-07 17:33:04","endLine":944,"groupId":"11791","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/178c74620ca07f52baea9cfaba29358fd2d7ac.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestingListState<Serializable> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new KinesisStreamShard(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tMockito.verify(mockedFetcher).setIsRestoringFromFailure(true);\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"M"}],"commitId":"e5b65a7fc2b4a7532ca40748f81bcbf8ace46815","commitMessage":"@@@[FLINK-4821] [kinesis] General improvements to rescalable FlinkKinesisConsumer\n\nThis commit adds some general improvements to the rescalable\nimplementation of FlinkKinesisConsumer.  including:\n- Refactor setup procedures in KinesisDataFetcher so that duplicate work\n  isn't done on a restored run\n- Strengthen corner cases where fetcher was not fully seeded with\n  initial state when snapshot is taken\n\nThis closes #3001.\n","date":"2017-05-07 17:33:04","modifiedFileCount":"6","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2017-05-25 10:39:22","codes":[{"authorDate":"2017-05-25 10:39:22","commitOrder":4,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShardV2, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-26 16:27:18","endLine":799,"groupId":"14424","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/0858a2d4894f4b5dad77b71a9f240347eb60c0.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShard, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"},{"authorDate":"2017-05-25 10:39:22","commitOrder":4,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShardV2, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new StreamShardHandle(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-26 16:27:18","endLine":959,"groupId":"14424","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/0858a2d4894f4b5dad77b71a9f240347eb60c0.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<KinesisStreamShard, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShard, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> state: fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(state.getKey(), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<KinesisStreamShard> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new KinesisStreamShard(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new KinesisStreamShard(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<KinesisStreamShard, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(restoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":901,"status":"M"}],"commitId":"913be2f5ca3e1f87104273f25c7f4e722b23e562","commitMessage":"@@@[FLINK-6653] Avoid directly serializing AWS's Shard class in Kinesis consumer's checkpoints\n","date":"2017-05-26 16:27:18","modifiedFileCount":"13","status":"M","submitter":"Tony Wei"},{"authorTime":"2017-05-26 15:56:54","codes":[{"authorDate":"2017-05-26 15:56:54","commitOrder":5,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-26 16:27:19","endLine":799,"groupId":"14424","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/6dfa6b96cf4be824d8538606ff5cff43e1c9c2.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShardV2, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"},{"authorDate":"2017-05-26 15:56:54","commitOrder":5,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new StreamShardHandle(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2017-05-26 16:27:19","endLine":959,"groupId":"14424","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/6dfa6b96cf4be824d8538606ff5cff43e1c9c2.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<KinesisStreamShardV2, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.createKinesisStreamShardV2(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new StreamShardHandle(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.createKinesisStreamShardV2(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":901,"status":"M"}],"commitId":"2597e7e1803da66190ff545e705a6a4e6a6f76a2","commitMessage":"@@@[FLINK-6653] [kinesis] Improvements to removal of AWS's Shard class in checkpoints\n\nThis closes #3994.\n","date":"2017-05-26 16:27:19","modifiedFileCount":"8","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-11-01 13:44:27","codes":[{"authorDate":"2018-11-01 13:44:27","commitOrder":6,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = mockKinesisDataFetcher();\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2018-11-21 18:44:47","endLine":328,"groupId":"10544","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/e18bdc98cea312994e592b3c97d3d8f23b0102.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededIfRestoringFromCheckpoint() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2018-11-01 13:44:27","commitOrder":6,"curCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = mockKinesisDataFetcher();\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new StreamShardHandle(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","date":"2018-11-21 18:44:47","endLine":486,"groupId":"10544","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/e18bdc98cea312994e592b3c97d3d8f23b0102.src","preCode":"\tpublic void testFetcherShouldBeCorrectlySeededWithNewDiscoveredKinesisStreamShard() throws Exception {\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tHashMap<StreamShardHandle, SequenceNumber> fakeRestoredState = getFakeRestoredStore(\"all\");\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestingListState<Tuple2<StreamShardMetadata, SequenceNumber>> listState = new TestingListState<>();\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> state : fakeRestoredState.entrySet()) {\n\t\t\tlistState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(state.getKey()), state.getValue()));\n\t\t}\n\n\t\tOperatorStateStore operatorStateStore = mock(OperatorStateStore.class);\n\t\twhen(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);\n\n\t\tStateInitializationContext initializationContext = mock(StateInitializationContext.class);\n\t\twhen(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);\n\t\twhen(initializationContext.isRestored()).thenReturn(true);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tKinesisDataFetcher mockedFetcher = Mockito.mock(KinesisDataFetcher.class);\n\t\tList<StreamShardHandle> shards = new ArrayList<>();\n\t\tshards.addAll(fakeRestoredState.keySet());\n\t\tshards.add(new StreamShardHandle(\"fakeStream2\",\n\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))));\n\t\twhen(mockedFetcher.discoverNewShardsToSubscribe()).thenReturn(shards);\n\t\tPowerMockito.whenNew(KinesisDataFetcher.class).withAnyArguments().thenReturn(mockedFetcher);\n\n\t\t\r\n\t\tPowerMockito.mockStatic(KinesisConfigUtil.class);\n\t\tPowerMockito.doNothing().when(KinesisConfigUtil.class);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\n\t\tTestableFlinkKinesisConsumer consumer = new TestableFlinkKinesisConsumer(\n\t\t\t\"fakeStream\", new Properties(), 10, 2);\n\t\tconsumer.initializeState(initializationContext);\n\t\tconsumer.open(new Configuration());\n\t\tconsumer.run(Mockito.mock(SourceFunction.SourceContext.class));\n\n\t\tfakeRestoredState.put(new StreamShardHandle(\"fakeStream2\",\n\t\t\t\tnew Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2))),\n\t\t\tSentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get());\n\t\tfor (Map.Entry<StreamShardHandle, SequenceNumber> restoredShard : fakeRestoredState.entrySet()) {\n\t\t\tMockito.verify(mockedFetcher).registerNewSubscribedShardState(\n\t\t\t\tnew KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(restoredShard.getKey()),\n\t\t\t\t\trestoredShard.getKey(), restoredShard.getValue()));\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-kinesis/src/test/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisConsumerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"}],"commitId":"f75c33d81993240b0a67feffc348aa19dc6c2834","commitMessage":"@@@[FLINK-5697] [kinesis] Add periodic per-shard watermark support\n\nAdds support for periodic per-shard watermarks to the Kinesis consumer. This\nfunctionality is off by default and can be enabled by setting an optional\nwatermark assigner on the consumer. When enabled.  the watermarking also\noptionally supports idle shard detection based on configurable interval of\ninactivity.\n\n- Add watermark assigner to consumer\n- Modify data fetcher to track watermark state per shard\n- Modify emitRecordAndUpdateState to extract timestamp and update watermark\n- Timer driven periodic watermark emit\n\nThis closes #6980.\n","date":"2018-11-21 18:44:47","modifiedFileCount":"8","status":"M","submitter":"Thomas Weise"}]
