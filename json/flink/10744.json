[{"authorTime":"2020-11-09 01:59:06","codes":[{"authorDate":"2020-11-09 01:59:06","commitOrder":1,"curCode":"\tpublic void testMultipleSplitsWithDifferentFinishingMoments() throws Exception {\n\t\tFutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n\t\t\tnew FutureCompletingBlockingQueue<>();\n\t\tMockSplitReader mockSplitReader = MockSplitReader.newBuilder()\n\t\t\t.setNumRecordsPerSplitPerFetch(2)\n\t\t\t.setSeparatedFinishedRecord(false)\n\t\t\t.setBlockingFetch(false)\n\t\t\t.build();\n\t\tMockSourceReader reader = new MockSourceReader(\n\t\t\telementsQueue,\n\t\t\t() -> mockSplitReader,\n\t\t\tgetConfig(),\n\t\t\tnull);\n\n\t\treader.start();\n\n\t\tList<MockSourceSplit> splits = Arrays.asList(\n\t\t\tgetSplit(0, 10, Boundedness.BOUNDED),\n\t\t\tgetSplit(1, 12, Boundedness.BOUNDED)\n\t\t);\n\t\treader.addSplits(splits);\n\t\treader.notifyNoMoreSplits();\n\n\t\twhile (true) {\n\t\t\tInputStatus status = reader.pollNext(new TestingReaderOutput<>());\n\t\t\tif (status == InputStatus.END_OF_INPUT) {\n\t\t\t\tbreak;\n\t\t\t} if (status == InputStatus.NOTHING_AVAILABLE) {\n\t\t\t\treader.isAvailable().get();\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-11 02:58:46","endLine":159,"groupId":"43255","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleSplitsWithDifferentFinishingMoments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/caa711e544c3d74c548001db6c82c3310acc92.src","preCode":"\tpublic void testMultipleSplitsWithDifferentFinishingMoments() throws Exception {\n\t\tFutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n\t\t\tnew FutureCompletingBlockingQueue<>();\n\t\tMockSplitReader mockSplitReader = MockSplitReader.newBuilder()\n\t\t\t.setNumRecordsPerSplitPerFetch(2)\n\t\t\t.setSeparatedFinishedRecord(false)\n\t\t\t.setBlockingFetch(false)\n\t\t\t.build();\n\t\tMockSourceReader reader = new MockSourceReader(\n\t\t\telementsQueue,\n\t\t\t() -> mockSplitReader,\n\t\t\tgetConfig(),\n\t\t\tnull);\n\n\t\treader.start();\n\n\t\tList<MockSourceSplit> splits = Arrays.asList(\n\t\t\tgetSplit(0, 10, Boundedness.BOUNDED),\n\t\t\tgetSplit(1, 12, Boundedness.BOUNDED)\n\t\t);\n\t\treader.addSplits(splits);\n\t\treader.notifyNoMoreSplits();\n\n\t\twhile (true) {\n\t\t\tInputStatus status = reader.pollNext(new TestingReaderOutput<>());\n\t\t\tif (status == InputStatus.END_OF_INPUT) {\n\t\t\t\tbreak;\n\t\t\t} if (status == InputStatus.NOTHING_AVAILABLE) {\n\t\t\t\treader.isAvailable().get();\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-base/src/test/java/org/apache/flink/connector/base/source/reader/SourceReaderBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2020-11-09 01:59:06","commitOrder":1,"curCode":"\tpublic void testMultipleSplitsWithSeparatedFinishedRecord() throws Exception {\n\t\tFutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n\t\t\tnew FutureCompletingBlockingQueue<>();\n\t\tMockSplitReader mockSplitReader = MockSplitReader.newBuilder()\n\t\t\t.setNumRecordsPerSplitPerFetch(2)\n\t\t\t.setSeparatedFinishedRecord(true)\n\t\t\t.setBlockingFetch(false)\n\t\t\t.build();\n\t\tMockSourceReader reader = new MockSourceReader(\n\t\t\telementsQueue,\n\t\t\t() -> mockSplitReader,\n\t\t\tgetConfig(),\n\t\t\tnull);\n\n\t\treader.start();\n\n\t\tList<MockSourceSplit> splits = Arrays.asList(\n\t\t\tgetSplit(0, 10, Boundedness.BOUNDED),\n\t\t\tgetSplit(1, 10, Boundedness.BOUNDED)\n\t\t);\n\t\treader.addSplits(splits);\n\t\treader.notifyNoMoreSplits();\n\n\t\twhile (true) {\n\t\t\tInputStatus status = reader.pollNext(new TestingReaderOutput<>());\n\t\t\tif (status == InputStatus.END_OF_INPUT) {\n\t\t\t\tbreak;\n\t\t\t} if (status == InputStatus.NOTHING_AVAILABLE) {\n\t\t\t\treader.isAvailable().get();\n\t\t\t}\n\t\t}\n\t}\n","date":"2020-11-11 02:58:46","endLine":193,"groupId":"43255","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleSplitsWithSeparatedFinishedRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/caa711e544c3d74c548001db6c82c3310acc92.src","preCode":"\tpublic void testMultipleSplitsWithSeparatedFinishedRecord() throws Exception {\n\t\tFutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n\t\t\tnew FutureCompletingBlockingQueue<>();\n\t\tMockSplitReader mockSplitReader = MockSplitReader.newBuilder()\n\t\t\t.setNumRecordsPerSplitPerFetch(2)\n\t\t\t.setSeparatedFinishedRecord(true)\n\t\t\t.setBlockingFetch(false)\n\t\t\t.build();\n\t\tMockSourceReader reader = new MockSourceReader(\n\t\t\telementsQueue,\n\t\t\t() -> mockSplitReader,\n\t\t\tgetConfig(),\n\t\t\tnull);\n\n\t\treader.start();\n\n\t\tList<MockSourceSplit> splits = Arrays.asList(\n\t\t\tgetSplit(0, 10, Boundedness.BOUNDED),\n\t\t\tgetSplit(1, 10, Boundedness.BOUNDED)\n\t\t);\n\t\treader.addSplits(splits);\n\t\treader.notifyNoMoreSplits();\n\n\t\twhile (true) {\n\t\t\tInputStatus status = reader.pollNext(new TestingReaderOutput<>());\n\t\t\tif (status == InputStatus.END_OF_INPUT) {\n\t\t\t\tbreak;\n\t\t\t} if (status == InputStatus.NOTHING_AVAILABLE) {\n\t\t\t\treader.isAvailable().get();\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-base/src/test/java/org/apache/flink/connector/base/source/reader/SourceReaderBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"aa84aa7ac0cdf1076f16d71d9c7b41be04321a84","commitMessage":"@@@[FLINK-19448][connector/common] Fix handling of finished splits and closing split fetchers in SourceReaderBase\n\nThis closes #13989\n","date":"2020-11-11 02:58:46","modifiedFileCount":"4","status":"B","submitter":"Kezhu Wang"},{"authorTime":"2021-08-13 01:51:56","codes":[{"authorDate":"2021-08-13 01:51:56","commitOrder":2,"curCode":"    public void testMultipleSplitsWithDifferentFinishingMoments() throws Exception {\n        FutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n                new FutureCompletingBlockingQueue<>();\n        MockSplitReader mockSplitReader =\n                MockSplitReader.newBuilder()\n                        .setNumRecordsPerSplitPerFetch(2)\n                        .setSeparatedFinishedRecord(false)\n                        .setBlockingFetch(false)\n                        .build();\n        MockSourceReader reader =\n                new MockSourceReader(\n                        elementsQueue,\n                        () -> mockSplitReader,\n                        getConfig(),\n                        new TestingReaderContext());\n\n        reader.start();\n\n        List<MockSourceSplit> splits =\n                Arrays.asList(\n                        getSplit(0, 10, Boundedness.BOUNDED), getSplit(1, 12, Boundedness.BOUNDED));\n        reader.addSplits(splits);\n        reader.notifyNoMoreSplits();\n\n        while (true) {\n            InputStatus status = reader.pollNext(new TestingReaderOutput<>());\n            if (status == InputStatus.END_OF_INPUT) {\n                break;\n            }\n            if (status == InputStatus.NOTHING_AVAILABLE) {\n                reader.isAvailable().get();\n            }\n        }\n    }\n","date":"2021-08-14 22:42:46","endLine":169,"groupId":"10744","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultipleSplitsWithDifferentFinishingMoments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/353c2dfd4e64c88bf9a90554a91d1ddde0c179.src","preCode":"    public void testMultipleSplitsWithDifferentFinishingMoments() throws Exception {\n        FutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n                new FutureCompletingBlockingQueue<>();\n        MockSplitReader mockSplitReader =\n                MockSplitReader.newBuilder()\n                        .setNumRecordsPerSplitPerFetch(2)\n                        .setSeparatedFinishedRecord(false)\n                        .setBlockingFetch(false)\n                        .build();\n        MockSourceReader reader =\n                new MockSourceReader(elementsQueue, () -> mockSplitReader, getConfig(), null);\n\n        reader.start();\n\n        List<MockSourceSplit> splits =\n                Arrays.asList(\n                        getSplit(0, 10, Boundedness.BOUNDED), getSplit(1, 12, Boundedness.BOUNDED));\n        reader.addSplits(splits);\n        reader.notifyNoMoreSplits();\n\n        while (true) {\n            InputStatus status = reader.pollNext(new TestingReaderOutput<>());\n            if (status == InputStatus.END_OF_INPUT) {\n                break;\n            }\n            if (status == InputStatus.NOTHING_AVAILABLE) {\n                reader.isAvailable().get();\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-base/src/test/java/org/apache/flink/connector/base/source/reader/SourceReaderBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2021-08-13 01:51:56","commitOrder":2,"curCode":"    public void testMultipleSplitsWithSeparatedFinishedRecord() throws Exception {\n        FutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n                new FutureCompletingBlockingQueue<>();\n        MockSplitReader mockSplitReader =\n                MockSplitReader.newBuilder()\n                        .setNumRecordsPerSplitPerFetch(2)\n                        .setSeparatedFinishedRecord(true)\n                        .setBlockingFetch(false)\n                        .build();\n        MockSourceReader reader =\n                new MockSourceReader(\n                        elementsQueue,\n                        () -> mockSplitReader,\n                        getConfig(),\n                        new TestingReaderContext());\n\n        reader.start();\n\n        List<MockSourceSplit> splits =\n                Arrays.asList(\n                        getSplit(0, 10, Boundedness.BOUNDED), getSplit(1, 10, Boundedness.BOUNDED));\n        reader.addSplits(splits);\n        reader.notifyNoMoreSplits();\n\n        while (true) {\n            InputStatus status = reader.pollNext(new TestingReaderOutput<>());\n            if (status == InputStatus.END_OF_INPUT) {\n                break;\n            }\n            if (status == InputStatus.NOTHING_AVAILABLE) {\n                reader.isAvailable().get();\n            }\n        }\n    }\n","date":"2021-08-14 22:42:46","endLine":205,"groupId":"10744","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultipleSplitsWithSeparatedFinishedRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/353c2dfd4e64c88bf9a90554a91d1ddde0c179.src","preCode":"    public void testMultipleSplitsWithSeparatedFinishedRecord() throws Exception {\n        FutureCompletingBlockingQueue<RecordsWithSplitIds<int[]>> elementsQueue =\n                new FutureCompletingBlockingQueue<>();\n        MockSplitReader mockSplitReader =\n                MockSplitReader.newBuilder()\n                        .setNumRecordsPerSplitPerFetch(2)\n                        .setSeparatedFinishedRecord(true)\n                        .setBlockingFetch(false)\n                        .build();\n        MockSourceReader reader =\n                new MockSourceReader(elementsQueue, () -> mockSplitReader, getConfig(), null);\n\n        reader.start();\n\n        List<MockSourceSplit> splits =\n                Arrays.asList(\n                        getSplit(0, 10, Boundedness.BOUNDED), getSplit(1, 10, Boundedness.BOUNDED));\n        reader.addSplits(splits);\n        reader.notifyNoMoreSplits();\n\n        while (true) {\n            InputStatus status = reader.pollNext(new TestingReaderOutput<>());\n            if (status == InputStatus.END_OF_INPUT) {\n                break;\n            }\n            if (status == InputStatus.NOTHING_AVAILABLE) {\n                reader.isAvailable().get();\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-base/src/test/java/org/apache/flink/connector/base/source/reader/SourceReaderBaseTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"7f3636f6b4f8bac415a7db85917ad849636bd730","commitMessage":"@@@[FLINK-23652][connectors] Adding common source metrics.\n","date":"2021-08-14 22:42:46","modifiedFileCount":"19","status":"M","submitter":"Arvid Heise"}]
