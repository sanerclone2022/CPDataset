[{"authorTime":"2021-01-22 23:41:36","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":4,"curCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-01-08 00:17:30","endLine":823,"groupId":"16031","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerPartitionWatermarkKafka","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8a/f5b2e42f49de16bd1361f872d1466111a095ad.src","preCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"NB"},{"authorDate":"2021-01-22 23:41:36","commitOrder":4,"curCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-01-22 23:41:36","endLine":904,"groupId":"16032","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerPartitionWatermarkWithIdleSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/09bd4f3063384fb76005e49f981c6e011881b1.src","preCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"B"}],"commitId":"90e680c9c579b2ffa1ca93ad7dfbaa5502dd8701","commitMessage":"@@@[FLINK-20947][planner] Fix idle source doesn't work when pushing watermark into the source\n\nThis closes #14679","date":"2021-01-22 23:41:36","modifiedFileCount":"3","status":"M","submitter":"Shengkai"},{"authorTime":"2021-04-14 17:15:05","codes":[{"authorDate":"2021-04-14 17:15:05","commitOrder":5,"curCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-04-14 17:15:05","endLine":805,"groupId":"16031","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPerPartitionWatermarkKafka","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/545958e475731568809041aa643dbe64d0a34a.src","preCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"M"},{"authorDate":"2021-04-14 17:15:05","commitOrder":5,"curCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-04-14 17:15:05","endLine":885,"groupId":"16032","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPerPartitionWatermarkWithIdleSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/545958e475731568809041aa643dbe64d0a34a.src","preCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = standardProps.getProperty(\"group.id\");\n        String bootstraps = standardProps.getProperty(\"bootstrap.servers\");\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"M"}],"commitId":"e0e11f62470061914dc00cd2504edbd7d43baf8e","commitMessage":"@@@[FLINK-21431][kafka] Use testcontainers for Kafka table IT cases\n\nThis closes #15578","date":"2021-04-14 17:15:05","modifiedFileCount":"3","status":"M","submitter":"Leonard Xu"},{"authorTime":"2021-07-29 16:09:54","codes":[{"authorDate":"2021-07-29 16:09:54","commitOrder":6,"curCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-08-04 19:42:16","endLine":745,"groupId":"10209","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testPerPartitionWatermarkKafka","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/a4305bbbb2bd4917309ebf67c860cf1f1f8888.src","preCode":"    public void testPerPartitionWatermarkKafka() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"per_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `name` STRING,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 'partition-0-name-0', TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 'partition-0-name-1', TIMESTAMP '2020-03-08 14:12:12.223'),\\n\"\n                        + \" (0, 'partition-0-name-2', TIMESTAMP '2020-03-08 15:12:13.323'),\\n\"\n                        + \" (1, 'partition-1-name-0', TIMESTAMP '2020-03-09 13:13:11.123'),\\n\"\n                        + \" (1, 'partition-1-name-1', TIMESTAMP '2020-03-09 15:13:11.133'),\\n\"\n                        + \" (1, 'partition-1-name-2', TIMESTAMP '2020-03-09 16:13:11.143'),\\n\"\n                        + \" (2, 'partition-2-name-0', TIMESTAMP '2020-03-10 13:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-1', TIMESTAMP '2020-03-10 14:12:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-2', TIMESTAMP '2020-03-10 14:13:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-3', TIMESTAMP '2020-03-10 14:14:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-4', TIMESTAMP '2020-03-10 14:15:14.123'),\\n\"\n                        + \" (2, 'partition-2-name-5', TIMESTAMP '2020-03-10 14:16:14.123'),\\n\"\n                        + \" (3, 'partition-3-name-0', TIMESTAMP '2020-03-11 17:12:11.123'),\\n\"\n                        + \" (3, 'partition-3-name-1', TIMESTAMP '2020-03-11 18:12:11.123')\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  id INT,\\n\"\n                        + \"  name STRING,\\n\"\n                        + \"  ts TIMESTAMP(3),\\n\"\n                        + \"  WATERMARK FOR ts as ts\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values',\\n\"\n                        + \"  'sink.drop-late-event' = 'true'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult = tEnv.executeSql(\"INSERT INTO MySink SELECT * FROM kafka\");\n        final List<String> expected =\n                Arrays.asList(\n                        \"+I[0, partition-0-name-0, 2020-03-08T13:12:11.123]\",\n                        \"+I[0, partition-0-name-1, 2020-03-08T14:12:12.223]\",\n                        \"+I[0, partition-0-name-2, 2020-03-08T15:12:13.323]\",\n                        \"+I[1, partition-1-name-0, 2020-03-09T13:13:11.123]\",\n                        \"+I[1, partition-1-name-1, 2020-03-09T15:13:11.133]\",\n                        \"+I[1, partition-1-name-2, 2020-03-09T16:13:11.143]\",\n                        \"+I[2, partition-2-name-0, 2020-03-10T13:12:14.123]\",\n                        \"+I[2, partition-2-name-1, 2020-03-10T14:12:14.123]\",\n                        \"+I[2, partition-2-name-2, 2020-03-10T14:13:14.123]\",\n                        \"+I[2, partition-2-name-3, 2020-03-10T14:14:14.123]\",\n                        \"+I[2, partition-2-name-4, 2020-03-10T14:15:14.123]\",\n                        \"+I[2, partition-2-name-5, 2020-03-10T14:16:14.123]\",\n                        \"+I[3, partition-3-name-0, 2020-03-11T17:12:11.123]\",\n                        \"+I[3, partition-3-name-1, 2020-03-11T18:12:11.123]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"},{"authorDate":"2021-07-29 16:09:54","commitOrder":6,"curCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","date":"2021-08-04 19:42:16","endLine":822,"groupId":"10209","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testPerPartitionWatermarkWithIdleSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/a4305bbbb2bd4917309ebf67c860cf1f1f8888.src","preCode":"    public void testPerPartitionWatermarkWithIdleSource() throws Exception {\n        if (isLegacyConnector) {\n            return;\n        }\n        \r\n        \r\n        final String topic = \"idle_partition_watermark_topic_\" + format;\n        createTestTopic(topic, 4, 1);\n\n        \r\n        String groupId = getStandardProps().getProperty(\"group.id\");\n        String bootstraps = getBootstrapServers();\n        tEnv.getConfig()\n                .getConfiguration()\n                .set(TABLE_EXEC_SOURCE_IDLE_TIMEOUT, Duration.ofMillis(100));\n\n        final String createTable =\n                String.format(\n                        \"CREATE TABLE kafka (\\n\"\n                                + \"  `partition_id` INT,\\n\"\n                                + \"  `value` INT,\\n\"\n                                + \"  `timestamp` TIMESTAMP(3),\\n\"\n                                + \"  WATERMARK FOR `timestamp` AS `timestamp`\\n\"\n                                + \") WITH (\\n\"\n                                + \"  'connector' = 'kafka',\\n\"\n                                + \"  'topic' = '%s',\\n\"\n                                + \"  'properties.bootstrap.servers' = '%s',\\n\"\n                                + \"  'properties.group.id' = '%s',\\n\"\n                                + \"  'scan.startup.mode' = 'earliest-offset',\\n\"\n                                + \"  'sink.partitioner' = '%s',\\n\"\n                                + \"  'format' = '%s'\\n\"\n                                + \")\",\n                        topic, bootstraps, groupId, TestPartitioner.class.getName(), format);\n\n        tEnv.executeSql(createTable);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        String initialValues =\n                \"INSERT INTO kafka\\n\"\n                        + \"VALUES\\n\"\n                        + \" (0, 0, TIMESTAMP '2020-03-08 13:12:11.123'),\\n\"\n                        + \" (0, 1, TIMESTAMP '2020-03-08 13:15:12.223'),\\n\"\n                        + \" (0, 2, TIMESTAMP '2020-03-08 16:12:13.323'),\\n\"\n                        + \" (1, 3, TIMESTAMP '2020-03-08 13:13:11.123'),\\n\"\n                        + \" (1, 4, TIMESTAMP '2020-03-08 13:19:11.133'),\\n\"\n                        + \" (1, 5, TIMESTAMP '2020-03-08 16:13:11.143')\\n\";\n        tEnv.executeSql(initialValues).await();\n\n        \r\n\n        env.setParallelism(1);\n        String createSink =\n                \"CREATE TABLE MySink(\\n\"\n                        + \"  `id` INT,\\n\"\n                        + \"  `cnt` BIGINT\\n\"\n                        + \") WITH (\\n\"\n                        + \"  'connector' = 'values'\\n\"\n                        + \")\";\n        tEnv.executeSql(createSink);\n        TableResult tableResult =\n                tEnv.executeSql(\n                        \"INSERT INTO MySink\\n\"\n                                + \"SELECT `partition_id` as `id`, COUNT(`value`) as `cnt`\\n\"\n                                + \"FROM kafka\\n\"\n                                + \"GROUP BY `partition_id`, TUMBLE(`timestamp`, INTERVAL '1' HOUR) \");\n\n        final List<String> expected = Arrays.asList(\"+I[0, 2]\", \"+I[1, 2]\");\n        KafkaTableTestUtils.waitingExpectedResults(\"MySink\", expected, Duration.ofSeconds(5));\n\n        \r\n\n        tableResult.getJobClient().ifPresent(JobClient::cancel);\n        deleteTestTopic(topic);\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaTableITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":748,"status":"M"}],"commitId":"77901ef7a2b085cfac93d95b3a77448e3ea889b1","commitMessage":"@@@[FLINK-23513][connector-kafka] Remove legacy Kafka connector\n\nUse the new connector via option 'connector' = 'kafka'.\n","date":"2021-08-04 19:42:16","modifiedFileCount":"1","status":"M","submitter":"Ingo B?rk"}]
