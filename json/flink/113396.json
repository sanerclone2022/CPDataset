[{"authorTime":"2017-09-27 21:10:52","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":1,"curCode":"\tpublic int numKeyedStateEntries() {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","date":"2018-01-22 21:06:37","endLine":79,"groupId":"39296","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"numKeyedStateEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/35c4659c7e716c468764cb41f386a82f704170.src","preCode":"\tpublic int numKeyedStateEntries() {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/KeyedOneInputStreamOperatorTestHarness.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2017-09-27 21:10:52","commitOrder":1,"curCode":"\tpublic <N> int numKeyedStateEntries(N namespace) {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries(namespace);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","date":"2018-01-22 21:06:37","endLine":89,"groupId":"39296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"numKeyedStateEntries","params":"(Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/35c4659c7e716c468764cb41f386a82f704170.src","preCode":"\tpublic <N> int numKeyedStateEntries(N namespace) {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries(namespace);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/KeyedOneInputStreamOperatorTestHarness.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"517b3f87214168a445b5751cda210ecf3a292fd6","commitMessage":"@@@[FLINK-7720] [checkpoints] Centralize creation of backends and state related resources\n\nThis closes #4745.\n","date":"2018-01-22 21:06:37","modifiedFileCount":"69","status":"B","submitter":"Stefan Richter"},{"authorTime":"2018-07-27 20:49:27","codes":[{"authorDate":"2018-07-27 20:49:27","commitOrder":2,"curCode":"\tpublic int numKeyedStateEntries() {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numKeyValueStateEntries();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","date":"2018-08-02 23:40:36","endLine":79,"groupId":"113396","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"numKeyedStateEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/f846fdf1234758fcc7beba7ce0059a0f93c8f0.src","preCode":"\tpublic int numKeyedStateEntries() {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries();\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/KeyedOneInputStreamOperatorTestHarness.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-07-27 20:49:27","commitOrder":2,"curCode":"\tpublic <N> int numKeyedStateEntries(N namespace) {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numKeyValueStateEntries(namespace);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","date":"2018-08-02 23:40:36","endLine":89,"groupId":"113396","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"numKeyedStateEntries","params":"(Nnamespace)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/f846fdf1234758fcc7beba7ce0059a0f93c8f0.src","preCode":"\tpublic <N> int numKeyedStateEntries(N namespace) {\n\t\tAbstractStreamOperator<?> abstractStreamOperator = (AbstractStreamOperator<?>) operator;\n\t\tKeyedStateBackend<Object> keyedStateBackend = abstractStreamOperator.getKeyedStateBackend();\n\t\tif (keyedStateBackend instanceof HeapKeyedStateBackend) {\n\t\t\treturn ((HeapKeyedStateBackend) keyedStateBackend).numStateEntries(namespace);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/util/KeyedOneInputStreamOperatorTestHarness.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"9d273a3fcda4033e1a385c0ff0c4a2b7ad640721","commitMessage":"@@@[FLINK-9887][state] Integrate priority queue state with existing serializer upgrade mechanism\n\nThis closes #6467.\n","date":"2018-08-02 23:40:36","modifiedFileCount":"20","status":"M","submitter":"Stefan Richter"}]
