[{"authorTime":"2017-06-04 06:55:48","codes":[{"authorDate":"2017-06-04 06:55:48","commitOrder":1,"curCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-06-08 00:28:58","endLine":375,"groupId":"16149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeReducingEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9f/1906445ec6a615dc85a3b426b88b648569dd3d.src","preCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"},{"authorDate":"2017-06-04 06:55:48","commitOrder":1,"curCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2017-06-08 00:28:58","endLine":491,"groupId":"16149","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeApplyEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9f/1906445ec6a615dc85a3b426b88b648569dd3d.src","preCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"B"}],"commitId":"9f6407dcebb1f30d00f86b0a643c0afc54dbf63b","commitMessage":"@@@[FLINK-6830] [DataStream] Port window operator migration tests for Flink 1.3\n\nThis commit also consolidates all Flink 1.1 and 1.2 window operator\nmigration tests to a single WindowOperatorMigrationTest class.\nParameterization is used to test restoring from different previous Flink\nversion snapshots.\n","date":"2017-06-08 00:28:58","modifiedFileCount":"0","status":"B","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-01-25 00:08:13","codes":[{"authorDate":"2018-01-25 00:08:13","commitOrder":2,"curCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer<>(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-07 02:58:59","endLine":378,"groupId":"43463","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeReducingEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/537c6343341bdacd87b883e3e5d2127f3815d5.src","preCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-01-25 00:08:13","commitOrder":2,"curCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-07 02:58:59","endLine":494,"groupId":"43463","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeApplyEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/537c6343341bdacd87b883e3e5d2127f3815d5.src","preCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"}],"commitId":"7a9d7e7a243c9170635c6a7cd6c414e16d17b8f8","commitMessage":"@@@[FLINK-8421] [DataStream.  tests] Add WindowOperator migration test for Kryo-serialized window keys\n","date":"2018-02-07 02:58:59","modifiedFileCount":"1","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2018-02-23 17:36:09","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":3,"curCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer<>(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":378,"groupId":"43463","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"writeReducingEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/1b9cc0885bc35222a79b11603b35ed16f22a3c.src","preCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer<>(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-02-23 17:36:09","commitOrder":3,"curCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-02-25 22:10:28","endLine":494,"groupId":"43463","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"writeApplyEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/1b9cc0885bc35222a79b11603b35ed16f22a3c.src","preCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-05-04 23:15:51","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":4,"curCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer<>(),\n\t\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":370,"groupId":"102675","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"writeReducingEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/2c751764d5d1042fb271433c36863f3b697e71.src","preCode":"\tpublic void writeReducingEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>(\"window-contents\",\n\t\t\t\tnew SumReducer<>(),\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-reduce-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2018-05-04 23:15:51","commitOrder":4,"curCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tSTRING_INT_TUPLE.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","date":"2018-05-05 00:48:16","endLine":482,"groupId":"102675","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"writeApplyEventTimeWindowsSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2f/2c751764d5d1042fb271433c36863f3b697e71.src","preCode":"\tpublic void writeApplyEventTimeWindowsSnapshot() throws Exception {\n\t\tfinal int windowSize = 3;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\t\tListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\t\tinputType.createSerializer(new ExecutionConfig()));\n\n\t\tWindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(\n\t\t\t\tTumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),\n\t\t\t\tnew TimeWindow.Serializer(),\n\t\t\t\tnew TupleKeySelector<>(),\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\t\tstateDesc,\n\t\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),\n\t\t\t\tEventTimeTrigger.create(),\n\t\t\t\t0,\n\t\t\t\tnull );\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setup();\n\t\ttestHarness.open();\n\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 3000));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 0));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), 1000));\n\n\t\ttestHarness.processWatermark(new Watermark(999));\n\t\texpectedOutput.add(new Watermark(999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\ttestHarness.processWatermark(new Watermark(1999));\n\t\texpectedOutput.add(new Watermark(1999));\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>());\n\n\t\t\r\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\t\tOperatorSnapshotUtil.writeStateHandle(\n\t\t\tsnapshot,\n\t\t\t\"src/test/resources/win-op-migration-test-apply-event-time-flink\" + flinkGenerateSavepointVersion + \"-snapshot\");\n\n\t\ttestHarness.close();\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"}]
