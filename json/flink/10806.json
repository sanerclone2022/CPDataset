[{"authorTime":"2020-05-16 02:06:46","codes":[{"authorDate":"2020-05-16 02:06:40","commitOrder":2,"curCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch7Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","date":"2020-05-17 22:34:39","endLine":86,"groupId":"2995","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/6ede37edaebc2863d595b7d4d6afb7ccc3c861.src","preCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch7Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2020-05-16 02:06:46","commitOrder":2,"curCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch6Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","date":"2020-05-17 22:34:47","endLine":86,"groupId":"2995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/541471a47c9bfc012ac6227853e3878fcf0ac1.src","preCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch6Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"ccd2d531d1cb577113d5021efd6277031eeef9d1","commitMessage":"@@@[FLINK-17027] Introduce a new Elasticsearch 6 connector with new property keys\n\nThis closes #12184\n","date":"2020-05-17 22:34:47","modifiedFileCount":"0","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-06-01 10:32:40","codes":[{"authorDate":"2020-06-01 10:32:40","commitOrder":3,"curCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch7Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","date":"2020-06-01 10:32:40","endLine":86,"groupId":"10806","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/72cee47f39d8367cd0c3c5e6cfaa9a3a766e5a.src","preCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch7Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-06-01 10:32:40","commitOrder":3,"curCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch6Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","date":"2020-06-01 10:32:40","endLine":86,"groupId":"10806","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/17/08efc42a8d357602bf9105f1ad043f9ece658a.src","preCode":"\tpublic void testBuilder() {\n\t\tfinal TableSchema schema = createTestSchema();\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummySinkFormat(),\n\t\t\tnew Elasticsearch6Configuration(getConfig(), this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new DummyFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(true);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffType(ElasticsearchSinkBase.FlushBackoffType.EXPONENTIAL);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffDelay(123);\n\t\tverify(provider.builderSpy).setBulkFlushBackoffRetries(3);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(100);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(1);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(\"/myapp\"));\n\t\tverify(provider.sinkSpy).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"64de78e36500b5a8c8720639ded4d1c5f963ad41","commitMessage":"@@@[FLINK-17887][table][connector] Improve interface of ScanFormatFactory and SinkFormatFactory\n\n\nWe improved the interfaces with the following changes:\n1. Have a common interface DynamicTableSource.Context.  and make Context of ScanTableSource and LookupTableSource extend it.  and rename them to LookupContext and ScanContext\n2. Change parameter of ScanFormat.createScanFormat from ScanTableSource.Context to DynamicTableSource.Context\n3. Rename ScanFormat.createScanFormat to DecodingFormat#createRuntimeDecoder()\n4. Rename SinkFormat.createSinkFormat to EncodingFormat#createRuntimeEncoder()\n5. Rename ScanFormatFactory to DecodingFormatFactory\n6. Rename SinkFormatFactory to EncodingFormatFactory\n\nThis closes #12320","date":"2020-06-01 10:32:40","modifiedFileCount":"48","status":"M","submitter":"Jark Wu"}]
