[{"authorTime":"2016-10-25 18:25:30","codes":[{"authorDate":"2017-01-09 23:01:23","commitOrder":2,"curCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness1.setProcessingTime(0L);\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t}\n","date":"2017-01-10 01:14:16","endLine":191,"groupId":"45932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureProcessingTimeTimerRegisteredOnRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/28/44fbb6808a6fc86509e80b6c3be1d1d75d7718.src","preCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness1.setProcessingTime(0L);\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2016-10-25 18:25:30","commitOrder":2,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"NB"}],"commitId":"36cf7eb2de5be992f1716360b7ca4f010a7c2a58","commitMessage":"@@@[FLINK-4651] Ensure processing-time timers are set on restore\n\nThis test ensures that we set a low-level processing time timer in case\nwe have processing-time timers set.\n","date":"2017-01-10 01:14:16","modifiedFileCount":"1","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2016-10-25 18:25:30","codes":[{"authorDate":"2018-02-23 17:36:09","commitOrder":3,"curCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness1.setProcessingTime(0L);\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t}\n","date":"2018-02-25 22:10:28","endLine":224,"groupId":"45932","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureProcessingTimeTimerRegisteredOnRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/46/cae276082a1c50139b8113e27b143d391293e5.src","preCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\tOperatorStateHandles snapshot = testHarness.snapshot(0, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\t\t\ttestOperator1,\n\t\t\t\t\t\tnew TestKeySelector(),\n\t\t\t\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness1.setProcessingTime(0L);\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2016-10-25 18:25:30","commitOrder":3,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","date":"2016-10-27 05:26:29","endLine":173,"groupId":"45932","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/f426b8d8571f1f92914aa16e552f8c6b473a47.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"617e67c2f540b62b97ca5198b6a5c42b89b6f392","commitMessage":"@@@[hotfix] Remove outdated class OperatorStateHandles and replace it with OperatorSubtaskState\n","date":"2018-02-25 22:10:28","modifiedFileCount":"34","status":"M","submitter":"Stefan Richter"},{"authorTime":"2020-03-20 00:35:43","codes":[{"authorDate":"2020-03-20 00:35:43","commitOrder":4,"curCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tOperatorSubtaskState snapshot;\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness = createTestHarness()) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\t\tsnapshot = testHarness.snapshot(0, 0);\n\t\t}\n\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 = createTestHarness()) {\n\t\t\ttestHarness1.setProcessingTime(0L);\n\n\t\t\ttestHarness1.setup();\n\t\t\ttestHarness1.initializeState(snapshot);\n\t\t\ttestHarness1.open();\n\n\t\t\ttestHarness1.setProcessingTime(10L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\t\ttestHarness1.setProcessingTime(20L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness1),\n\t\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":191,"groupId":"103275","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnsureProcessingTimeTimerRegisteredOnRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testEnsureProcessingTimeTimerRegisteredOnRestore() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_PROC_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(1, \"SET_STATE:CIAO\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\n\t\tOperatorSubtaskState snapshot = testHarness.snapshot(0, 0);\n\n\t\tTestOperator testOperator1 = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness1 =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(\n\t\t\t\ttestOperator1,\n\t\t\t\tnew TestKeySelector(),\n\t\t\t\tBasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness1.setProcessingTime(0L);\n\n\t\ttestHarness1.setup();\n\t\ttestHarness1.initializeState(snapshot);\n\t\ttestHarness1.open();\n\n\t\ttestHarness1.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness1),\n\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\n\t\ttestHarness1.setProcessingTime(20L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness1),\n\t\t\tcontains(\"ON_PROC_TIME:CIAO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2020-03-20 00:35:43","commitOrder":4,"curCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\ttry (KeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness = createTestHarness()) {\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\t\t\ttestHarness.processWatermark(0L);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\t\ttestHarness.processWatermark(20L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\t\ttestHarness.setProcessingTime(10L);\n\n\t\t\tassertThat(\n\t\t\t\textractResult(testHarness),\n\t\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t\t}\n\t}\n","date":"2020-03-26 14:55:31","endLine":222,"groupId":"103275","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessingTimeAndEventTimeDontInterfere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/3067534079f93a78ba10f4f1ce6a65ed2a22a6.src","preCode":"\tpublic void testProcessingTimeAndEventTimeDontInterfere() throws Exception {\n\t\tTestOperator testOperator = new TestOperator();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Tuple2<Integer, String>, String> testHarness =\n\t\t\tnew KeyedOneInputStreamOperatorTestHarness<>(testOperator, new TestKeySelector(), BasicTypeInfo.INT_TYPE_INFO);\n\n\t\ttestHarness.open();\n\n\t\ttestHarness.setProcessingTime(0L);\n\t\ttestHarness.processWatermark(0L);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_PROC_TIME_TIMER:10\"), 0);\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_EVENT_TIME_TIMER:20\"), 0);\n\n\t\ttestHarness.processElement(new Tuple2<>(0, \"SET_STATE:HELLO\"), 0);\n\n\t\ttestHarness.processWatermark(20L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_EVENT_TIME:HELLO\"));\n\n\t\ttestHarness.setProcessingTime(10L);\n\n\t\tassertThat(\n\t\t\textractResult(testHarness),\n\t\t\tcontains(\"ON_PROC_TIME:HELLO\"));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/AbstractStreamOperatorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"a443b04d20764257bb45efd53b4dcec5f8be59f1","commitMessage":"@@@[FLINK-16317][operators] Refactor AbstractStreamOperatorTest class\n\nThis deduplicates code a little bit.  fixes not closing issue and makes it ready for future extension that comes in next commit.\n","date":"2020-03-26 14:55:31","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"}]
