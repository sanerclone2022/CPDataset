[{"authorTime":"2018-06-27 19:16:49","codes":[{"authorDate":"2018-06-27 19:16:49","commitOrder":1,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","date":"2018-07-15 15:51:28","endLine":190,"groupId":"7039","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/3edf77a5e8abe6bd7540c327465632f25c8557.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/AvroRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2018-06-27 19:16:49","commitOrder":1,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn failOnMissingField == that.failOnMissingField && Objects.equals(typeInfo, that.typeInfo);\n\t}\n","date":"2018-07-15 15:51:28","endLine":132,"groupId":"7712","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/8a116ac62f2f0cea808a4f6788f04dc25c1ff5.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn failOnMissingField == that.failOnMissingField && Objects.equals(typeInfo, that.typeInfo);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"ee40335ffa40fb32a692fa6be70946d9a70301b2","commitMessage":"@@@[FLINK-8558] [table] Add unified format interfaces and separate formats from connectors\n\nThis PR introduces a format discovery mechanism based on Java Service Providers. The general `TableFormatFactory` is similar to the existing table source discovery mechanism. However.  it allows for arbirary format interfaces that might be introduced in the future. At the moment.  a connector can request configured instances of `DeserializationSchema` and `SerializationSchema`. In the future we can add interfaces such as a `Writer` or `KeyedSerializationSchema` without breaking backwards compatibility.\n\nThis PR deprecates the existing strong coupling of connector and format for the Kafa table sources and table source factories. It introduces descriptor-based alternatives.\n","date":"2018-07-15 15:51:28","modifiedFileCount":"37","status":"B","submitter":"Timo Walther"},{"authorTime":"2019-03-05 17:45:20","codes":[{"authorDate":"2018-06-27 19:16:49","commitOrder":2,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","date":"2018-07-15 15:51:28","endLine":190,"groupId":"7039","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/3edf77a5e8abe6bd7540c327465632f25c8557.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/AvroRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"},{"authorDate":"2019-03-05 17:45:20","commitOrder":2,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn Objects.equals(typeInfo, that.typeInfo) &&\n\t\t\tObjects.equals(failOnMissingField, that.failOnMissingField);\n\t}\n","date":"2019-07-15 20:55:28","endLine":199,"groupId":"7039","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4a/1ff274bd394b6b0ecc3768eefcba77e5cdf800.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn failOnMissingField == that.failOnMissingField && Objects.equals(typeInfo, that.typeInfo);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"38e4e2b8f9bc63a793a2bddef5a578e3f80b7376","commitMessage":"@@@[FLINK-11727][formats] Fixed JSON format issues after serialization\n\nThis commit reworks JSON format to use a runtime converter created based\non given TypeInformation. Pre this commit conversion logic was based on\nreference comparison of TypeInformation which was not working after\nserialization of the format.\n\nThis also introduces a builder pattern for ensuring future immutability\nof schemas.\n\nThis closes #7932.\n","date":"2019-07-15 20:55:28","modifiedFileCount":"6","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-02-18 16:32:28","codes":[{"authorDate":"2018-06-27 19:16:49","commitOrder":3,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","date":"2018-07-15 15:51:28","endLine":190,"groupId":"101970","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/3edf77a5e8abe6bd7540c327465632f25c8557.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal AvroRowDeserializationSchema that = (AvroRowDeserializationSchema) o;\n\t\treturn Objects.equals(recordClazz, that.recordClazz) &&\n\t\t\tObjects.equals(schemaString, that.schemaString);\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/AvroRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"},{"authorDate":"2020-02-18 16:32:28","commitOrder":3,"curCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn Objects.equals(typeInfo, that.typeInfo) &&\n\t\t\tObjects.equals(failOnMissingField, that.failOnMissingField) &&\n\t\t\tObjects.equals(ignoreParseErrors, that.ignoreParseErrors);\n\t}\n","date":"2020-03-11 10:32:36","endLine":228,"groupId":"101970","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/9b55d589b0af2a96f043355348154233dfb68a.src","preCode":"\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal JsonRowDeserializationSchema that = (JsonRowDeserializationSchema) o;\n\t\treturn Objects.equals(typeInfo, that.typeInfo) &&\n\t\t\tObjects.equals(failOnMissingField, that.failOnMissingField);\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"87ebe5533d3cd675b416146189abb0f6de61559d","commitMessage":"@@@[FLINK-15396][json] Support to ignore parse errors for JSON format\n\nThis closes #11119\n","date":"2020-03-11 10:32:36","modifiedFileCount":"6","status":"M","submitter":"zoudan"}]
