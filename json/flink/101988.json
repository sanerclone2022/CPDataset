[{"authorTime":"2020-04-07 10:58:49","codes":[{"authorDate":"2020-03-06 09:29:25","commitOrder":2,"curCode":"\tprivate static Binary timestampToInt96(LocalDateTime time) {\n\t\tTimestamp timestamp = Timestamp.valueOf(time);\n\t\tlong mills = timestamp.getTime();\n\t\tint julianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\tlong nanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","date":"2020-03-06 09:29:25","endLine":165,"groupId":"35923","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timestampToInt96","params":"(LocalDateTimetime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/4c29568bc414f155775baea49a6fb804855f0c.src","preCode":"\tprivate static Binary timestampToInt96(LocalDateTime time) {\n\t\tTimestamp timestamp = Timestamp.valueOf(time);\n\t\tlong mills = timestamp.getTime();\n\t\tint julianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\tlong nanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/utils/ParquetWriterUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"NB"},{"authorDate":"2020-04-07 10:58:49","commitOrder":2,"curCode":"\tprivate Binary timestampToInt96(SqlTimestamp sqlTimestamp) {\n\t\tint julianDay;\n\t\tlong nanosOfDay;\n\t\tif (utcTimestamp) {\n\t\t\tlong mills = sqlTimestamp.getMillisecond();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = (mills % MILLIS_IN_DAY) * NANOS_PER_MILLISECOND + sqlTimestamp.getNanoOfMillisecond();\n\t\t} else {\n\t\t\tTimestamp timestamp = sqlTimestamp.toTimestamp();\n\t\t\tlong mills = timestamp.getTime();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\t\t}\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","date":"2020-04-07 10:58:49","endLine":253,"groupId":"35923","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampToInt96","params":"(SqlTimestampsqlTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/d578398ef7b032116411e6107b23ab4d19ae2c.src","preCode":"\tprivate Binary timestampToInt96(SqlTimestamp sqlTimestamp) {\n\t\tint julianDay;\n\t\tlong nanosOfDay;\n\t\tif (utcTimestamp) {\n\t\t\tlong mills = sqlTimestamp.getMillisecond();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = (mills % MILLIS_IN_DAY) * NANOS_PER_MILLISECOND + sqlTimestamp.getNanoOfMillisecond();\n\t\t} else {\n\t\t\tTimestamp timestamp = sqlTimestamp.toTimestamp();\n\t\t\tlong mills = timestamp.getTime();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\t\t}\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","realPath":"flink-formats/flink-parquet/src/main/java/org/apache/flink/formats/parquet/row/ParquetRowDataWriter.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"d3c149d9f6b4891b4b33a90576d616a8eac35c0b","commitMessage":"@@@[FLINK-16912][parquet] Introduce table row write support for parquet writer\n\n\nThis closes #11602","date":"2020-04-07 10:58:49","modifiedFileCount":"1","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-04-29 11:27:01","codes":[{"authorDate":"2020-03-06 09:29:25","commitOrder":3,"curCode":"\tprivate static Binary timestampToInt96(LocalDateTime time) {\n\t\tTimestamp timestamp = Timestamp.valueOf(time);\n\t\tlong mills = timestamp.getTime();\n\t\tint julianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\tlong nanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","date":"2020-03-06 09:29:25","endLine":165,"groupId":"101988","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timestampToInt96","params":"(LocalDateTimetime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/4c29568bc414f155775baea49a6fb804855f0c.src","preCode":"\tprivate static Binary timestampToInt96(LocalDateTime time) {\n\t\tTimestamp timestamp = Timestamp.valueOf(time);\n\t\tlong mills = timestamp.getTime();\n\t\tint julianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\tlong nanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/utils/ParquetWriterUtil.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"},{"authorDate":"2020-04-29 11:27:01","commitOrder":3,"curCode":"\tprivate Binary timestampToInt96(TimestampData timestampData) {\n\t\tint julianDay;\n\t\tlong nanosOfDay;\n\t\tif (utcTimestamp) {\n\t\t\tlong mills = timestampData.getMillisecond();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = (mills % MILLIS_IN_DAY) * NANOS_PER_MILLISECOND + timestampData.getNanoOfMillisecond();\n\t\t} else {\n\t\t\tTimestamp timestamp = timestampData.toTimestamp();\n\t\t\tlong mills = timestamp.getTime();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\t\t}\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","date":"2020-04-29 14:14:37","endLine":253,"groupId":"101988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampToInt96","params":"(TimestampDatatimestampData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3c/caaa9f61c646d4cf1772afebfeb963dfe6bdc0.src","preCode":"\tprivate Binary timestampToInt96(SqlTimestamp sqlTimestamp) {\n\t\tint julianDay;\n\t\tlong nanosOfDay;\n\t\tif (utcTimestamp) {\n\t\t\tlong mills = sqlTimestamp.getMillisecond();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = (mills % MILLIS_IN_DAY) * NANOS_PER_MILLISECOND + sqlTimestamp.getNanoOfMillisecond();\n\t\t} else {\n\t\t\tTimestamp timestamp = sqlTimestamp.toTimestamp();\n\t\t\tlong mills = timestamp.getTime();\n\t\t\tjulianDay = (int) ((mills / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS);\n\t\t\tnanosOfDay = ((mills % MILLIS_IN_DAY) / 1000) * NANOS_PER_SECOND + timestamp.getNanos();\n\t\t}\n\n\t\tByteBuffer buf = ByteBuffer.allocate(12);\n\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n\t\tbuf.putLong(nanosOfDay);\n\t\tbuf.putInt(julianDay);\n\t\tbuf.flip();\n\t\treturn Binary.fromConstantByteBuffer(buf);\n\t}\n","realPath":"flink-formats/flink-parquet/src/main/java/org/apache/flink/formats/parquet/row/ParquetRowDataWriter.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"b2c40929dccafe76b654da095a1c385813c6d524","commitMessage":"@@@[FLINK-16996][parquet] Refactor parquet connector to use new data structures\n\nThis closes #11925\n","date":"2020-04-29 14:14:37","modifiedFileCount":"22","status":"M","submitter":"Jark Wu"}]
