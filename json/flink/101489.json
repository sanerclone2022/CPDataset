[{"authorTime":"2020-10-28 19:44:51","codes":[{"authorDate":"2020-10-28 19:44:51","commitOrder":1,"curCode":"\tpublic void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.setGlobalCommitter((Supplier<Queue<String>> & Serializable) () -> GLOBAL_COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\n\t\tenv.execute();\n\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n\t\tassertThat(\n\t\t\t\tGLOBAL_COMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","date":"2020-11-02 19:01:45","endLine":117,"groupId":"29972","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writerAndCommitterAndGlobalCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/3b06be1e9fc29d058a4db01528c485d69ac043.src","preCode":"\tpublic void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.setGlobalCommitter((Supplier<Queue<String>> & Serializable) () -> GLOBAL_COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\n\t\tenv.execute();\n\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n\t\tassertThat(\n\t\t\t\tGLOBAL_COMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2020-10-28 19:44:51","commitOrder":1,"curCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","date":"2020-11-02 19:01:45","endLine":155,"groupId":"29972","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writerAndCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/3b06be1e9fc29d058a4db01528c485d69ac043.src","preCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"34d143fb23216ac03869cce7834200ac1709dc43","commitMessage":"@@@[FLINK-19736] Add SinkTransformation along with Translator\n\nThis patch does three things:\n\n1. Introduce 'SinkTransformation' to represent the new sink api.\n\n2. Introduce 'SinkTransformationTranslator' that translates the\n'SinkTransformation' to the corresponding runtime operators.\n\n3. Make DataStream Sdk support new sink api.\n","date":"2020-11-02 19:01:45","modifiedFileCount":"7","status":"B","submitter":"GuoWei Ma"},{"authorTime":"2020-11-03 13:36:51","codes":[{"authorDate":"2020-11-03 13:36:51","commitOrder":2,"curCode":"\tpublic void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(\n\t\t\t\tBOTH_QUEUE_RECEIVE_ALL_DATA,\n\t\t\t\tSOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.setGlobalCommitter((Supplier<Queue<String>> & Serializable) () -> GLOBAL_COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\n\t\tenv.execute();\n\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n\t\tassertThat(\n\t\t\t\tgetSplittedGlobalCommittedData(),\n\t\t\t\tcontainsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","date":"2020-11-05 02:02:25","endLine":134,"groupId":"29972","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writerAndCommitterAndGlobalCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/ecbd31a3f2ccacde2071a0158a5ab5a38874d7.src","preCode":"\tpublic void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.setGlobalCommitter((Supplier<Queue<String>> & Serializable) () -> GLOBAL_COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\n\t\tenv.execute();\n\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n\t\tassertThat(\n\t\t\t\tGLOBAL_COMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-11-03 13:36:51","commitOrder":2,"curCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(\n\t\t\t\tCOMMIT_QUEUE_RECEIVE_ALL_DATA,\n\t\t\t\tSOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","date":"2020-11-05 02:02:25","endLine":174,"groupId":"29972","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writerAndCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/ecbd31a3f2ccacde2071a0158a5ab5a38874d7.src","preCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(SOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"7a2d76dfb8b89fc217ec0ab5d170b87183c18b52","commitMessage":"@@@[FLINK-19936] Stabilize the SinkITCase\n\nThis fixes instabilities related to\n1. false assumptions about the order of receiving\n   the notification that a checkpoint is complete.\n2. makes sure that the test exits ONLY when the\n   committer and the global committer have received\n   all expected elements\n\nThis closes #13898.\n","date":"2020-11-05 02:02:25","modifiedFileCount":"2","status":"M","submitter":"GuoWei Ma"},{"authorTime":"2020-11-03 13:36:51","codes":[{"authorDate":"2021-07-09 17:13:10","commitOrder":3,"curCode":"    public void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n        final StreamExecutionEnvironment env = buildStreamEnv();\n        final FiniteTestSource<Integer> source =\n                new FiniteTestSource<>(BOTH_QUEUE_RECEIVE_ALL_DATA, SOURCE_DATA);\n\n        env.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n                .sinkTo(\n                        TestSink.newBuilder()\n                                .setDefaultCommitter(\n                                        (Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n                                .setGlobalCommitter(\n                                        (Supplier<Queue<String>> & Serializable)\n                                                () -> GLOBAL_COMMIT_QUEUE)\n                                .build());\n\n        env.execute();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        GLOBAL_COMMIT_QUEUE.remove(END_OF_INPUT_STR);\n\n        assertThat(\n                COMMIT_QUEUE,\n                containsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n        assertThat(\n                getSplittedGlobalCommittedData(),\n                containsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n    }\n","date":"2021-07-13 10:01:45","endLine":150,"groupId":"101489","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"writerAndCommitterAndGlobalCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2a/04317bf64b658b10c6fe06963e3ae2f766ebc8.src","preCode":"    public void writerAndCommitterAndGlobalCommitterExecuteInStreamingMode() throws Exception {\n        final StreamExecutionEnvironment env = buildStreamEnv();\n        final FiniteTestSource<Integer> source =\n                new FiniteTestSource<>(BOTH_QUEUE_RECEIVE_ALL_DATA, SOURCE_DATA);\n\n        env.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n                .sinkTo(\n                        TestSink.newBuilder()\n                                .setDefaultCommitter(\n                                        (Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n                                .setGlobalCommitter(\n                                        (Supplier<Queue<String>> & Serializable)\n                                                () -> GLOBAL_COMMIT_QUEUE)\n                                .build());\n\n        env.execute();\n\n        assertThat(\n                COMMIT_QUEUE,\n                containsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\n        assertThat(\n                getSplittedGlobalCommittedData(),\n                containsInAnyOrder(EXPECTED_GLOBAL_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2020-11-03 13:36:51","commitOrder":3,"curCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(\n\t\t\t\tCOMMIT_QUEUE_RECEIVE_ALL_DATA,\n\t\t\t\tSOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","date":"2020-11-05 02:02:25","endLine":174,"groupId":"101489","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"writerAndCommitterExecuteInStreamingMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/ecbd31a3f2ccacde2071a0158a5ab5a38874d7.src","preCode":"\tpublic void writerAndCommitterExecuteInStreamingMode() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = buildStreamEnv();\n\t\tfinal FiniteTestSource<Integer> source = new FiniteTestSource<>(\n\t\t\t\tCOMMIT_QUEUE_RECEIVE_ALL_DATA,\n\t\t\t\tSOURCE_DATA);\n\n\t\tenv.addSource(source, IntegerTypeInfo.INT_TYPE_INFO)\n\t\t\t\t.sinkTo(TestSink\n\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t\t.setDefaultCommitter((Supplier<Queue<String>> & Serializable) () -> COMMIT_QUEUE)\n\t\t\t\t\t\t.build());\n\t\tenv.execute();\n\t\tassertThat(\n\t\t\t\tCOMMIT_QUEUE,\n\t\t\t\tcontainsInAnyOrder(EXPECTED_COMMITTED_DATA_IN_STREAMING_MODE.toArray()));\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"N"}],"commitId":"2268baf211f1b367e56c8f8d7cd8ee8dee355cab","commitMessage":"@@@[FLINK-23235][connector] Fix SinkITCase instability\n\nThis closes #16441.\n","date":"2021-07-13 10:01:45","modifiedFileCount":"2","status":"M","submitter":"GuoWei Ma"}]
