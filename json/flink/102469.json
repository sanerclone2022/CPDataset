[{"authorTime":"2015-10-20 23:04:21","codes":[{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2015-10-21 17:01:43","endLine":219,"groupId":"49825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/6957b4882886b5e1678df88a889e133bfbd35b.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2015-10-20 23:04:21","commitOrder":1,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2015-10-21 17:01:43","endLine":288,"groupId":"49825","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/6957b4882886b5e1678df88a889e133bfbd35b.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"}],"commitId":"06f6ac5d3edbc8dd20baf6e1b30900c189a68876","commitMessage":"@@@[FLINK-2877] Move Streaming API out of Staging package\n","date":"2015-10-21 17:01:43","modifiedFileCount":"0","status":"B","submitter":"Rufus Refactor"},{"authorTime":"2016-01-19 19:56:52","codes":[{"authorDate":"2016-01-19 19:56:52","commitOrder":2,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2016-01-27 21:45:15","endLine":222,"groupId":"49825","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/052a38c3fb95d7b0bd2c68261a82ffa325cbb6.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2016-01-19 19:56:52","commitOrder":2,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2016-01-27 21:45:15","endLine":292,"groupId":"49825","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/052a38c3fb95d7b0bd2c68261a82ffa325cbb6.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"f681d9b83deecd5cbbecf37abbefb1a988f00268","commitMessage":"@@@[FLINK-3258] [runtime.  streaming-java.  tests] Move registerInputOutput code to invoke and remove registerInputOutput\n\nThis closes #1538\n","date":"2016-01-27 21:45:15","modifiedFileCount":"26","status":"M","submitter":"Ufuk Celebi"},{"authorTime":"2016-11-03 05:34:59","codes":[{"authorDate":"2016-01-19 19:56:52","commitOrder":3,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2016-01-27 21:45:15","endLine":222,"groupId":"49825","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/052a38c3fb95d7b0bd2c68261a82ffa325cbb6.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"},{"authorDate":"2016-11-03 05:34:59","commitOrder":3,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2016-11-09 04:15:34","endLine":331,"groupId":"49825","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/93f6af8b676309020497c28a553f384d7b840c.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"48a48139172e86f548f3b2f1564bdc948c3fe76a","commitMessage":"@@@[FLINK-4985] [checkpointing] Report canceled / declined checkpoints to the Checkpoint Coordinator\n","date":"2016-11-09 04:15:34","modifiedFileCount":"23","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2016-11-14 10:53:18","codes":[{"authorDate":"2016-11-14 10:53:18","commitOrder":4,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-02-10 21:20:42","endLine":445,"groupId":"49825","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/08c83d1975ca40f69fd00855ebd04b79ad2696.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2016-11-14 10:53:18","commitOrder":4,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-02-10 21:20:42","endLine":517,"groupId":"49825","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4b/08c83d1975ca40f69fd00855ebd04b79ad2696.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"}],"commitId":"66305135bcfe0841fdc9d26fdc0d8f373fa58b62","commitMessage":"@@@[FLINK-5017] [streaming] Introduce StreamStatus to facilitate idle sources\n\nThis commit is the first part of making idle streaming sources in Flink\npossible. It introduces a new element.  StreamStatus.  that flows with\nother records in streams. StreamStatus elements are generated at the\nsources.  and affect how operators advance their watermarks with the\npresence of idle sources.\n\nPrior to this commit.  when advancing watermarks at downstream operators. \nthe new min watermark is found by simply determining if the min\nwatermark across all input channels has advanced. This resulted in\nwatermark-stalling downstream operators when there are idle sources.\nWith this change.  operators can now mark input channels to be idle.  and\nignore them when advancing their watermark.\n\nThis commit also includes refactoring of previous watermark forwarding\nlogic into a single class.  StatusWatermarkValve. OneInputStreamTasks. \nTwoInputStreamTasks.  and AbstractStreamOperator use valves to help them\ndetermine how watermarks and stream statuses are forwarded.\n","date":"2017-02-10 21:20:42","modifiedFileCount":"23","status":"M","submitter":"Tzu-Li (Gordon) Tai"},{"authorTime":"2017-02-17 00:56:23","codes":[{"authorDate":"2017-02-17 00:56:23","commitOrder":5,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-02-24 01:39:49","endLine":447,"groupId":"21735","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/2bf8671cbe49e64200ab2ecee3b92dc4ea1521.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"},{"authorDate":"2017-02-17 00:56:23","commitOrder":5,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-02-24 01:39:49","endLine":519,"groupId":"21735","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e2/2bf8671cbe49e64200ab2ecee3b92dc4ea1521.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"}],"commitId":"6e7a91741708a2b167a2bbca5dda5b2059df5e18","commitMessage":"@@@[FLINK-5763] [checkpoints] Add CheckpointOptions\n\nAdds `CheckpointOptions` to the triggered checkpoint messages (coordinator\nto barrier injecting tasks) and barriers (flowing inline with the data:\n\n```java\npublic class CheckpointOptions {\n\n  // Type of checkpoint\n  // => FULL_CHECKPOINT\n  // => SAVEPOINT\n  @NonNull\n  CheckpointType getCheckpointType();\n\n  // Custom target location. This is a String.  because for future\n  // backends it can be a logical location like a DB table.\n  @Nullable\n  String getTargetLocation();\n\n}\n```\n\nThis class would be the place to define more options for performing the\ncheckpoints (for example for incremental checkpoints).\n\nThese options are forwarded via the `StreamTask` to the `StreamOperator`s and\n`Snapshotable` backends. The `AbstractStreamOperator` checks the options and\neither i) forwards the shared per operator `CheckpointStreamFactory` (as of\n\nFor this.  the state backends provide the following new method:\n\n```\nCheckpointStreamFactory createSavepointStreamFactory(JobID.  String.  String);\n```\n\nThe `MemoryStateBackend` returns the regular stream factory and the\n`FsStateBackend` returns a `FsSavepointStreamFactory`.  which writes all\ncheckpoint streams to a single directory (instead of the regular sub folders\nper checkpoint).\n\nWe end up with the following directory layout for savepoints:\n\n```\n+---------------------------+\n| :root_savepoint_directory | (custom per savepoint or configured default via `state.savepoints.dir`)\n+---------------------------+\n  | +---------------------------------------+\n  +-| savepoint-:jobId(0.  6)-:random_suffix | (one directory per savepoint)\n    +---------------------------------------+\n       |\n       +- _metadata (one per savepoint)\n       +- :uuid (one data file per StreamTask)\n       +- ...\n       +- :uuid\n```\n","date":"2017-02-24 01:39:49","modifiedFileCount":"67","status":"M","submitter":"Ufuk Celebi"},{"authorTime":"2017-06-27 00:07:59","codes":[{"authorDate":"2017-06-27 00:07:59","commitOrder":6,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-08-15 20:56:54","endLine":468,"groupId":"21735","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/90620111b489d4b6af2ff9eb46789506a3e6a6.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"},{"authorDate":"2017-06-27 00:07:59","commitOrder":6,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-08-15 20:56:54","endLine":540,"groupId":"21735","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/90620111b489d4b6af2ff9eb46789506a3e6a6.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"b71154a734ea9f4489dffe1be6761efbb90cff41","commitMessage":"@@@[FLINK-7213] Introduce state management by OperatorID in TaskManager\n","date":"2017-08-15 20:56:54","modifiedFileCount":"61","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-10-25 20:16:37","codes":[{"authorDate":"2017-10-25 20:16:37","commitOrder":7,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-10-27 23:37:23","endLine":393,"groupId":"21735","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/dd922b58d6913c84bd928486523e9b0f720c38.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2017-10-25 20:16:37","commitOrder":7,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2017-10-27 23:37:23","endLine":465,"groupId":"21735","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/dd922b58d6913c84bd928486523e9b0f720c38.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forFullCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forFullCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"fe3b276818eec1d4a70632a45343d70dc2be53f3","commitMessage":"@@@[FLINK-7924] [checkpoints] Fix incorrect names of checkpoint options\n\nCheckpoint options are incorrectly always called 'FULL_CHECKPOINT' when actually. \nthe checkpoints may always be incremental and only savepoints have to be full\nand self contained.\n\nInitially.  we planned to add options for multiple checkpoints.  like checkpoints\nthat were foreced to be full.  and checkpoints that were incremental. That\nis not necessary at this point.\n","date":"2017-10-27 23:37:23","modifiedFileCount":"38","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-03-15 11:13:41","codes":[{"authorDate":"2017-03-15 11:13:41","commitOrder":8,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2018-01-10 01:30:59","endLine":399,"groupId":"21735","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/c255321ec6081be53b7d7ab8acb70e2d140cc9.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2017-03-15 11:13:41","commitOrder":8,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2018-01-10 01:30:59","endLine":474,"groupId":"21735","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/c255321ec6081be53b7d7ab8acb70e2d140cc9.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTask<String, String> mapTask = new OneInputStreamTask<String, String>();\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<String, String>(mapTask, 2, 2, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"6033de01ae620ebc9735c552ce85ccd1687793d7","commitMessage":"@@@[FLINK-5982] [runtime] Refactor AbstractInvokable and StatefulTask to accept Environment and State in the constructor.\n\nThis is the first steo towards implementing an RAII pattern for all task runtime classes.\n\nThis closes #3633\n","date":"2018-01-10 01:30:59","modifiedFileCount":"74","status":"M","submitter":"Tony Wei"},{"authorTime":"2018-01-11 01:13:50","codes":[{"authorDate":"2018-01-11 01:13:50","commitOrder":9,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2018-02-01 20:54:55","endLine":400,"groupId":"43258","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/7b6991e99b33037b87b0a75361f92d93ed6ddd.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2018-01-11 01:13:50","commitOrder":9,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2018-02-01 20:54:55","endLine":475,"groupId":"43258","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/7b6991e99b33037b87b0a75361f92d93ed6ddd.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpoint()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpoint()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"}],"commitId":"5cc50934bdcf80ae1fa69abe69e2f214852653f9","commitMessage":"@@@[FLINK-8531] [checkpoints] (part 4) rename forCheckpoint() to forCheckpointWithDefaultLocation()\n","date":"2018-02-01 20:54:55","modifiedFileCount":"35","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2019-10-28 12:09:37","codes":[{"authorDate":"2019-10-28 12:09:37","commitOrder":10,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2019-10-28 14:37:51","endLine":414,"groupId":"6267","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/d82e9b469560b16666da6e34a28bc1936d492c.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"},{"authorDate":"2019-10-28 12:09:37","commitOrder":10,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2019-10-28 14:37:51","endLine":489,"groupId":"6267","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c2/d82e9b469560b16666da6e34a28bc1936d492c.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<String, String>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<Object>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<String>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<String>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"85433349249df77b2c372874f0561fd6fb9809c7","commitMessage":"@@@[hotfix][test] Clean up the test code in SourceStreamTaskTest and OneInputStreamTaskTest\n\nThese cleanups include removing unnecessary type parameter declarations and redundant suppression.  etc.\n","date":"2019-10-28 14:37:51","modifiedFileCount":"2","status":"M","submitter":"sunhaibotb"},{"authorTime":"2020-03-19 02:41:11","codes":[{"authorDate":"2020-03-19 02:41:11","commitOrder":11,"curCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2020-04-27 14:00:52","endLine":413,"groupId":"102469","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/b4e025f43f7ae87e13e1e433adde60a2f5b941.src","preCode":"\tpublic void testCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\t\r\n\t\texpectedOutput.add(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"},{"authorDate":"2020-03-19 02:41:11","commitOrder":11,"curCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","date":"2020-04-27 14:00:52","endLine":480,"groupId":"102469","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvertakingCheckpointBarriers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/b4e025f43f7ae87e13e1e433adde60a2f5b941.src","preCode":"\tpublic void testOvertakingCheckpointBarriers() throws Exception {\n\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(\n\t\t\t\tOneInputStreamTask::new,\n\t\t\t\t2, 2,\n\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\ttestHarness.setupOutputForSingletonOperatorChain();\n\n\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n\t\tStreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap());\n\t\tstreamConfig.setStreamOperator(mapOperator);\n\t\tstreamConfig.setOperatorID(new OperatorID());\n\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\t\tlong initialTime = 0L;\n\n\t\ttestHarness.invoke();\n\t\ttestHarness.waitForTaskRunning();\n\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-0-0\", initialTime), 0, 0);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-0-0\", initialTime), 0, 0);\n\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttestHarness.processElement(new StreamRecord<>(\"Hello-1-1\", initialTime), 1, 1);\n\t\ttestHarness.processElement(new StreamRecord<>(\"Ciao-1-1\", initialTime), 1, 1);\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-1-1\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-1-1\", initialTime));\n\n\t\ttestHarness.waitForInputProcessing();\n\t\t\r\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\texpectedOutput.add(new CancelCheckpointMarker(0));\n\t\texpectedOutput.add(new StreamRecord<>(\"Hello-0-0\", initialTime));\n\t\texpectedOutput.add(new StreamRecord<>(\"Ciao-0-0\", initialTime));\n\t\texpectedOutput.add(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()));\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\n\t\t\r\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n\t\ttestHarness.processEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n\n\t\ttestHarness.waitForInputProcessing();\n\n\t\ttestHarness.endInput();\n\n\t\ttestHarness.waitForTaskCompletion();\n\n\t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"2e313f026cf3a9e8896cd2816ae5c847894c4fd7","commitMessage":"@@@[FLINK-16404][runtime] Avoid caching buffers for blocked input channels before barrier alignment\n\nThis commit is the first part of implementation to solve the dead lock problem when reducing the exclusive buffer of receiver side to 0.\n\nReducing the number of exclusive buffers of receiver side to 0 can bring several advantages (may at the cost of some performance regression). One is that memory can be saved from the reduced network buffer usage. Another important benefit is that the in-flight data can be reduced so we can speed up checkpoint in cases of back pressure. However.  for the current implementation.  reducing the exclusive buffer of receiver side can incur deadlock problem because all the floating buffers might be requested away by some blocked input channels and never recycled until barrier alignment.\n\nTo solve the problem.  this commit mainly makes the following changes:\n1. At sender side.  after sending a checkpoint barrier when aligned exactly-once checkpoint mode is used.  the outgoing channel will be blocked and no data will be sent out until the channel is unblocked.\n2. At receiver side.  no buffer will be stored in BufferStorage any more and after a checkpoint is completed or canceled.  the receiver side will resume data consumption and unblock the upstream by sending a special event to the sender side.\n\nNote that after this patch we still can't set the exclusive buffer of receiver side to 0 because there is still deadlock problem which will be totally solved in the following up patches.\n","date":"2020-04-27 14:00:52","modifiedFileCount":"128","status":"M","submitter":"kevin.cyj"}]
