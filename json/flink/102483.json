[{"authorTime":"2016-12-13 22:21:31","codes":[{"authorDate":"2016-12-13 22:21:31","commitOrder":1,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2016-12-14 23:48:57","endLine":177,"groupId":"8759","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/5c28803c0ee72502aeea0e7ba98351813b676a.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2016-12-13 22:21:31","commitOrder":1,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2016-12-14 23:48:57","endLine":201,"groupId":"20598","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b5/5c28803c0ee72502aeea0e7ba98351813b676a.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"bf2874e22a41ae195ea162f4e9c31e90a42a4c1a","commitMessage":"@@@[FLINK-5240][tests] ensure state backends are properly closed\n\nThis adds additional test cases to verify the state backends are closed\nproperly upon the end of a task. The state backends should always be\nclosed regardless of the final state of the task.\n\nThis closes #2997.\n","date":"2016-12-14 23:48:57","modifiedFileCount":"1","status":"B","submitter":"Maximilian Michels"},{"authorTime":"2017-01-20 21:28:44","codes":[{"authorDate":"2017-01-20 21:28:44","commitOrder":2,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2017-01-24 00:32:49","endLine":195,"groupId":"8759","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/990cadac2213c561405adddb2330be244d9ea2.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2017-01-20 21:28:44","commitOrder":2,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2017-01-24 00:32:49","endLine":219,"groupId":"20598","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/990cadac2213c561405adddb2330be244d9ea2.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tMockito.verify(StateBackendTestSource.operatorStateBackend).close();\n\t\tMockito.verify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"cfb95b9074a05686f5ad290b2aaa4be89536a35b","commitMessage":"@@@[FLINK-5229] [state] Cleanup of operator snapshots if subsequent operator snapshots fail\n\nThis PR adds operator state cleanup to the StreamTask class. If a stream task contains multiple\nstream operators.  then every operator is checkpointed. In case that a snapshot operation fails\nall state handles and OperatorSnapshotResults belonging to previous operators have to be freed.\n\nAdd test cases for failing checkpoint operations in StreamTask\n\nAddress PR comments\n\nThis closes #3179.\n","date":"2017-01-24 00:32:49","modifiedFileCount":"4","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2017-02-17 21:57:20","codes":[{"authorDate":"2017-02-17 21:57:20","commitOrder":3,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2017-02-21 04:29:16","endLine":214,"groupId":"8759","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/88/7ea4f343eeb051ce34279139e6e7d91842623e.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2017-02-17 21:57:20","commitOrder":3,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2017-02-21 04:29:16","endLine":238,"groupId":"20598","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/88/7ea4f343eeb051ce34279139e6e7d91842623e.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(ConfigConstants.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"a4047965898adc0ba7bf74280a3b22792ced3399","commitMessage":"@@@[FLINK-4770] [core] Introduce 'CoreOptions'\n\nThe CoreOptions should hold all essential configuration values that are not specific to\nJobManager.  TaskManager or any feature area.  like HighAvailability or Security.\n\nExamples for that are\n  - default java options\n  - default parallelism\n  - default state backend\n","date":"2017-02-21 04:29:16","modifiedFileCount":"18","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-06-27 00:07:59","codes":[{"authorDate":"2017-06-27 00:07:59","commitOrder":4,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2017-08-15 20:56:54","endLine":226,"groupId":"8759","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/e9a1b26144c6e32912014929da2bbfdee25bfb.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2017-06-27 00:07:59","commitOrder":4,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2017-08-15 20:56:54","endLine":251,"groupId":"20598","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/e9a1b26144c6e32912014929da2bbfdee25bfb.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"b71154a734ea9f4489dffe1be6761efbb90cff41","commitMessage":"@@@[FLINK-7213] Introduce state management by OperatorID in TaskManager\n","date":"2017-08-15 20:56:54","modifiedFileCount":"61","status":"M","submitter":"Stefan Richter"},{"authorTime":"2017-10-25 23:30:14","codes":[{"authorDate":"2017-10-25 23:30:14","commitOrder":5,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2018-01-19 01:08:03","endLine":234,"groupId":"8759","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f4/92d9e738b2cdcf61d75dabd415fd70af295fab.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2017-10-25 23:30:14","commitOrder":5,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2018-01-19 01:08:03","endLine":259,"groupId":"20598","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f4/92d9e738b2cdcf61d75dabd415fd70af295fab.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CoreOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"e52db8bc411e93c245cc78a278854f2653e5f384","commitMessage":"@@@[FLINK-7925] [checkpoints] Add CheckpointingOptions\n\nThe CheckpointingOptions consolidate all checkpointing and state backend-related\nsettings that were previously split across different classes.\n","date":"2018-01-19 01:08:03","modifiedFileCount":"24","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2017-09-27 21:10:52","codes":[{"authorDate":"2017-09-27 21:10:52","commitOrder":6,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2018-01-22 21:06:37","endLine":250,"groupId":"29945","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bc/f44f20799b8a170380850834315947884cd431.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2017-09-27 21:10:52","commitOrder":6,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2018-01-22 21:06:37","endLine":282,"groupId":"45763","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bc/f44f20799b8a170380850834315947884cd431.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tcfg.setStreamOperator(new StreamSource<>(new MockSourceFunction()));\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(StateBackendTestSource.operatorStateBackend).close();\n\t\tverify(StateBackendTestSource.keyedStateBackend).close();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"517b3f87214168a445b5751cda210ecf3a292fd6","commitMessage":"@@@[FLINK-7720] [checkpoints] Centralize creation of backends and state related resources\n\nThis closes #4745.\n","date":"2018-01-22 21:06:37","modifiedFileCount":"69","status":"M","submitter":"Stefan Richter"},{"authorTime":"2018-02-06 21:44:01","codes":[{"authorDate":"2018-02-06 21:44:01","commitOrder":7,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","date":"2018-02-25 22:14:21","endLine":253,"groupId":"29945","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/ea662b132bb26e22ce62b19cbc01c659a9ff78.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2018-02-06 21:44:01","commitOrder":7,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","date":"2018-02-25 22:14:21","endLine":285,"groupId":"45763","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ca/ea662b132bb26e22ce62b19cbc01c659a9ff78.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, MockStateBackend.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"df3e6bb7627db03635febd48eff4c10032b668ef","commitMessage":"@@@[FLINK-8360][checkpointing] Implement state storage for local recovery and integrate with task lifecycle\n","date":"2018-02-25 22:14:21","modifiedFileCount":"107","status":"M","submitter":"Stefan Richter"},{"authorTime":"2020-03-20 13:14:35","codes":[{"authorDate":"2020-03-20 13:14:35","commitOrder":8,"curCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\ttry (ShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n\t\t\tTask task = createTask(StateBackendTestSource.class, shuffleEnvironment, cfg, taskManagerConfig);\n\n\t\t\tStateBackendTestSource.fail = false;\n\t\t\ttask.startTaskThread();\n\n\t\t\t\r\n\t\t\ttask.getExecutingThread().join();\n\n\t\t\t\r\n\t\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\t\r\n\t\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":268,"groupId":"12111","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testStateBackendLoadingAndClosing() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = false;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FINISHED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-03-20 13:14:35","commitOrder":8,"curCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\ttry (NettyShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n\t\t\tTask task = createTask(StateBackendTestSource.class, shuffleEnvironment, cfg, taskManagerConfig);\n\n\t\t\tStateBackendTestSource.fail = true;\n\t\t\ttask.startTaskThread();\n\n\t\t\t\r\n\t\t\ttask.getExecutingThread().join();\n\n\t\t\t\r\n\t\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\t\r\n\t\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":302,"groupId":"9157","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testStateBackendClosingOnFailure() throws Exception {\n\t\tConfiguration taskManagerConfig = new Configuration();\n\t\ttaskManagerConfig.setString(CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n\t\tStreamConfig cfg = new StreamConfig(new Configuration());\n\t\tcfg.setStateKeySerializer(mock(TypeSerializer.class));\n\t\tcfg.setOperatorID(new OperatorID(4711L, 42L));\n\t\tTestStreamSource<Long, MockSourceFunction> streamSource = new TestStreamSource<>(new MockSourceFunction());\n\t\tcfg.setStreamOperator(streamSource);\n\t\tcfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tTask task = createTask(StateBackendTestSource.class, cfg, taskManagerConfig);\n\n\t\tStateBackendTestSource.fail = true;\n\t\ttask.startTaskThread();\n\n\t\t\r\n\t\ttask.getExecutingThread().join();\n\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).close();\n\t\tverify(TestStreamSource.keyedStateBackend).close();\n\t\tverify(TestStreamSource.rawOperatorStateInputs).close();\n\t\tverify(TestStreamSource.rawKeyedStateInputs).close();\n\t\t\r\n\t\tverify(TestStreamSource.operatorStateBackend).dispose();\n\t\tverify(TestStreamSource.keyedStateBackend).dispose();\n\n\t\tassertEquals(ExecutionState.FAILED, task.getExecutionState());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"7dafd1cd65ba8977d923482a810c907ed7d37b59","commitMessage":"@@@[FLINK-16690][tests] Refactor StreamTaskTest to reuse TestTaskBuilder and MockStreamTaskBuilder\n\nThis closes #11459\n","date":"2020-03-21 22:10:58","modifiedFileCount":"5","status":"M","submitter":"Zhijiang"},{"authorTime":"2021-03-07 17:54:12","codes":[{"authorDate":"2021-03-07 17:54:12","commitOrder":9,"curCode":"    public void testStateBackendLoadingAndClosing() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                StateBackendOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (ShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = false;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n        }\n    }\n","date":"2021-04-01 14:16:24","endLine":472,"groupId":"12111","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/52fa674658fd235b38e72a2847c50b839e56fd.src","preCode":"    public void testStateBackendLoadingAndClosing() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (ShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = false;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"},{"authorDate":"2021-03-07 17:54:12","commitOrder":9,"curCode":"    public void testStateBackendClosingOnFailure() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                StateBackendOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (NettyShuffleEnvironment shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = true;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FAILED, task.getExecutionState());\n        }\n    }\n","date":"2021-04-01 14:16:24","endLine":514,"groupId":"9157","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/92/52fa674658fd235b38e72a2847c50b839e56fd.src","preCode":"    public void testStateBackendClosingOnFailure() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                CheckpointingOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (NettyShuffleEnvironment shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = true;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FAILED, task.getExecutionState());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"}],"commitId":"f4b6fe2ce5fccee69518a5ac8cd29f8c8af85435","commitMessage":"@@@[FLINK-16444][state] Separate state backend and checkpoint options\n","date":"2021-04-01 14:16:24","modifiedFileCount":"14","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-04-30 22:29:33","codes":[{"authorDate":"2021-04-30 22:29:33","commitOrder":10,"curCode":"    public void testStateBackendLoadingAndClosing() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (ShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = false;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n        }\n    }\n","date":"2021-05-03 21:15:23","endLine":474,"groupId":"102483","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateBackendLoadingAndClosing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/0466638ef43184c2eae0037f1c2d624d71db50.src","preCode":"    public void testStateBackendLoadingAndClosing() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                StateBackendOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (ShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = false;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"M"},{"authorDate":"2021-04-30 22:29:33","commitOrder":10,"curCode":"    public void testStateBackendClosingOnFailure() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (NettyShuffleEnvironment shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = true;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FAILED, task.getExecutionState());\n        }\n    }\n","date":"2021-05-03 21:15:23","endLine":515,"groupId":"102483","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateBackendClosingOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/0466638ef43184c2eae0037f1c2d624d71db50.src","preCode":"    public void testStateBackendClosingOnFailure() throws Exception {\n        Configuration taskManagerConfig = new Configuration();\n        taskManagerConfig.setString(\n                StateBackendOptions.STATE_BACKEND, TestMemoryStateBackendFactory.class.getName());\n\n        StreamConfig cfg = new StreamConfig(new Configuration());\n        cfg.setStateKeySerializer(mock(TypeSerializer.class));\n        cfg.setOperatorID(new OperatorID(4711L, 42L));\n        TestStreamSource<Long, MockSourceFunction> streamSource =\n                new TestStreamSource<>(new MockSourceFunction());\n        cfg.setStreamOperator(streamSource);\n        cfg.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n        try (NettyShuffleEnvironment shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build()) {\n            Task task =\n                    createTask(\n                            StateBackendTestSource.class,\n                            shuffleEnvironment,\n                            cfg,\n                            taskManagerConfig);\n\n            StateBackendTestSource.fail = true;\n            task.startTaskThread();\n\n            \r\n            task.getExecutingThread().join();\n\n            \r\n            verify(TestStreamSource.operatorStateBackend).close();\n            verify(TestStreamSource.keyedStateBackend).close();\n            verify(TestStreamSource.rawOperatorStateInputs).close();\n            verify(TestStreamSource.rawKeyedStateInputs).close();\n            \r\n            verify(TestStreamSource.operatorStateBackend).dispose();\n            verify(TestStreamSource.keyedStateBackend).dispose();\n\n            assertEquals(ExecutionState.FAILED, task.getExecutionState());\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"9253543f1f95b78f9d98224defad4e73d77fe0d5","commitMessage":"@@@[FLINK-22535][runtime] CleanUp is invoked for task even when the task fail during the restore\n","date":"2021-05-03 21:15:23","modifiedFileCount":"3","status":"M","submitter":"Anton Kalashnikov"}]
