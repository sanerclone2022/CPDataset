[{"authorTime":"2016-03-13 08:40:15","codes":[{"authorDate":"2016-03-13 08:40:15","commitOrder":1,"curCode":"\tpublic void testFailedRunThenSuccessfulRun() {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (ProgramInvocationException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-07-12 06:00:38","endLine":129,"groupId":"24054","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/4340ca2ee0db9eef4e0eef9d2af38b84860f8b.src","preCode":"\tpublic void testFailedRunThenSuccessfulRun() {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (ProgramInvocationException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2016-03-13 08:40:15","commitOrder":1,"curCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2016-07-12 06:00:38","endLine":215,"groupId":"43478","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/4340ca2ee0db9eef4e0eef9d2af38b84860f8b.src","preCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"a7274d5661421a66dcb998efd72b547301e1dc0f","commitMessage":"@@@[FLINK-3190] failure rate restart strategy\n\nAdd toString method to Time\n\nReintroduce org.apache.flink.streaming.api.windowing.time.Time for backwards compatibility\n\nRemove Duration from FailureRateRestarStrategy\n\nThis closes #1954.\n","date":"2016-07-12 06:00:38","modifiedFileCount":"7","status":"B","submitter":"Michal Fijolek"},{"authorTime":"2018-02-20 20:41:45","codes":[{"authorDate":"2018-02-20 20:41:45","commitOrder":2,"curCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":114,"groupId":"18846","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d8/1274d497341a059f332b5983373816f4b61df8.src","preCode":"\tpublic void testFailedRunThenSuccessfulRun() {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (ProgramInvocationException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-02-20 20:41:45","commitOrder":2,"curCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","date":"2018-02-22 01:19:38","endLine":198,"groupId":"43478","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d8/1274d497341a059f332b5983373816f4b61df8.src","preCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(\n\t\t\t\t\t\"localhost\", cluster.getLeaderRPCPort());\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"cb08aca3585bde903bc879b2009c7abdcd225019","commitMessage":"@@@[FLINK-8703][tests] Migrate tests to MiniClusterResource (batch #1)\n\nThis closes #5535.\n","date":"2018-02-22 01:19:38","modifiedFileCount":"16","status":"M","submitter":"zentol"},{"authorTime":"2019-01-03 10:10:20","codes":[{"authorDate":"2019-01-03 10:10:20","commitOrder":3,"curCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper1.failuresBeforeSuccess = 1;\n\t\t}\n\t}\n","date":"2019-01-03 10:24:28","endLine":116,"groupId":"18846","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/de1f4645b30c379d494d7f7e7d8cd676341efa.src","preCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-01-03 10:10:20","commitOrder":3,"curCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper3.failuresBeforeSuccess = 3;\n\t\t}\n\t}\n","date":"2019-01-03 10:24:28","endLine":204,"groupId":"43478","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/de1f4645b30c379d494d7f7e7d8cd676341efa.src","preCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"f6995f01ef748e4992a37defd60197d1ab4bd00e","commitMessage":"@@@[FLINK-11181][tests] Fix SimpleRecoveryFailureRateStrategyITBase test error\n\nThis colses #7316\n","date":"2019-01-03 10:24:28","modifiedFileCount":"2","status":"M","submitter":"hequn8128"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":4,"curCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper1.failuresBeforeSuccess = 1;\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":114,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/f17816b8000be4e2464a5db842a3ecec68e2fd.src","preCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\t\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper1.failuresBeforeSuccess = 1;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":4,"curCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper3.failuresBeforeSuccess = 3;\n\t\t}\n\t}\n","date":"2019-08-27 20:27:23","endLine":200,"groupId":"43478","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/f17816b8000be4e2464a5db842a3ecec68e2fd.src","preCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\t\t\tenv.getConfig().disableSysoutLogging();\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper3.failuresBeforeSuccess = 3;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"},{"authorTime":"2020-12-23 19:55:52","codes":[{"authorDate":"2020-12-23 19:55:52","commitOrder":5,"curCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<>())\n\t\t\t\t\t\t.reduce(Long::sum)\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<>())\n\t\t\t\t\t\t.reduce((ReduceFunction<Long>) Long::sum)\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t} finally {\n\t\t\tFailingMapper1.failuresBeforeSuccess = 1;\n\t\t}\n\t}\n","date":"2020-12-24 01:10:09","endLine":100,"groupId":"51300","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/35/8391c2dda3ad372e8b98757ac1b9eb20f6bb1f.src","preCode":"\tpublic void testFailedRunThenSuccessfulRun() throws Exception {\n\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\ttry {\n\t\t\t\t\tJobExecutionResult res = env.execute();\n\t\t\t\t\tString msg = res == null ? \"null result\" : \"result in \" + res.getNetRuntime() + \" ms\";\n\t\t\t\t\tfail(\"The program should have failed, but returned \" + msg);\n\t\t\t\t}\n\t\t\t\tcatch (JobExecutionException e) {\n\t\t\t\t\t\r\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\r\n\t\t\t{\n\t\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\t\tenv.setParallelism(4);\n\t\t\t\tenv.setRestartStrategy(RestartStrategies.noRestart());\n\n\t\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t\t.rebalance()\n\t\t\t\t\t\t.map(new FailingMapper1<Long>())\n\t\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\t\texecuteAndRunAssertions(env);\n\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (long l : resultCollection) {\n\t\t\t\t\tsum += l;\n\t\t\t\t}\n\t\t\t\tassertEquals(55, sum);\n\t\t\t}\n\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper1.failuresBeforeSuccess = 1;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-12-23 19:55:52","commitOrder":5,"curCode":"\tpublic void testRestartMultipleTimes() throws Exception {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<>())\n\t\t\t\t\t.reduce(Long::sum)\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t} finally {\n\t\t\tFailingMapper3.failuresBeforeSuccess = 3;\n\t\t}\n\t}\n","date":"2020-12-24 01:10:09","endLine":168,"groupId":"52901","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/35/8391c2dda3ad372e8b98757ac1b9eb20f6bb1f.src","preCode":"\tpublic void testRestartMultipleTimes() {\n\t\ttry {\n\t\t\tList<Long> resultCollection = new ArrayList<Long>();\n\n\t\t\tExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\t\tenv.setParallelism(4);\n\t\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n\t\t\tenv.generateSequence(1, 10)\n\t\t\t\t\t.rebalance()\n\t\t\t\t\t.map(new FailingMapper3<Long>())\n\t\t\t\t\t.reduce(new ReduceFunction<Long>() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Long reduce(Long value1, Long value2) {\n\t\t\t\t\t\t\treturn value1 + value2;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.output(new LocalCollectionOutputFormat<Long>(resultCollection));\n\n\t\t\texecuteAndRunAssertions(env);\n\n\t\t\tlong sum = 0;\n\t\t\tfor (long l : resultCollection) {\n\t\t\t\tsum += l;\n\t\t\t}\n\t\t\tassertEquals(55, sum);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t} finally {\n\t\t\tFailingMapper3.failuresBeforeSuccess = 3;\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"97d59157b78f74610eac968e5f392ad41d07c0a3","commitMessage":"@@@[hotfix][tests] Cleanup SimpleRecoveryITCaseBase\n","date":"2020-12-24 01:10:09","modifiedFileCount":"1","status":"M","submitter":"Chesnay Schepler"},{"authorTime":"2021-03-26 18:45:34","codes":[{"authorDate":"2021-03-26 18:45:34","commitOrder":6,"curCode":"    public void testFailedRunThenSuccessfulRun() throws Exception {\n\n        try {\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                try {\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper1<>())\n                            .reduce(Long::sum)\n                            .collect();\n                    fail(\"The program should have failed, but run successfully\");\n                } catch (JobExecutionException e) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                List<Long> resultCollection =\n                        env.generateSequence(1, 10)\n                                .rebalance()\n                                .map(new FailingMapper1<>())\n                                .reduce((ReduceFunction<Long>) Long::sum)\n                                .collect();\n\n                long sum = 0;\n                for (long l : resultCollection) {\n                    sum += l;\n                }\n                assertEquals(55, sum);\n            }\n\n        } finally {\n            FailingMapper1.failuresBeforeSuccess = 1;\n        }\n    }\n","date":"2021-03-31 18:46:23","endLine":89,"groupId":"52901","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/208fcf30f5b9f1644e27fcb04eef80f894fbcd.src","preCode":"    public void testFailedRunThenSuccessfulRun() throws Exception {\n\n        try {\n            List<Long> resultCollection = new ArrayList<>();\n\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                env.generateSequence(1, 10)\n                        .rebalance()\n                        .map(new FailingMapper1<>())\n                        .reduce(Long::sum)\n                        .output(new LocalCollectionOutputFormat<>(resultCollection));\n\n                try {\n                    JobExecutionResult res = env.execute();\n                    String msg =\n                            res == null\n                                    ? \"null result\"\n                                    : \"result in \" + res.getNetRuntime() + \" ms\";\n                    fail(\"The program should have failed, but returned \" + msg);\n                } catch (JobExecutionException e) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                env.generateSequence(1, 10)\n                        .rebalance()\n                        .map(new FailingMapper1<>())\n                        .reduce((ReduceFunction<Long>) Long::sum)\n                        .output(new LocalCollectionOutputFormat<>(resultCollection));\n\n                executeAndRunAssertions(env);\n\n                long sum = 0;\n                for (long l : resultCollection) {\n                    sum += l;\n                }\n                assertEquals(55, sum);\n            }\n\n        } finally {\n            FailingMapper1.failuresBeforeSuccess = 1;\n        }\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2021-03-26 18:45:34","commitOrder":6,"curCode":"    public void testRestartMultipleTimes() throws Exception {\n        try {\n            ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n            env.setParallelism(4);\n            env.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n            List<Long> resultCollection =\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper3<>())\n                            .reduce(Long::sum)\n                            .collect();\n\n            long sum = 0;\n            for (long l : resultCollection) {\n                sum += l;\n            }\n            assertEquals(55, sum);\n        } finally {\n            FailingMapper3.failuresBeforeSuccess = 3;\n        }\n    }\n","date":"2021-03-31 18:46:23","endLine":139,"groupId":"52901","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/208fcf30f5b9f1644e27fcb04eef80f894fbcd.src","preCode":"    public void testRestartMultipleTimes() throws Exception {\n        try {\n            List<Long> resultCollection = new ArrayList<>();\n\n            ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n            env.setParallelism(4);\n            env.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n            env.generateSequence(1, 10)\n                    .rebalance()\n                    .map(new FailingMapper3<>())\n                    .reduce(Long::sum)\n                    .output(new LocalCollectionOutputFormat<>(resultCollection));\n\n            executeAndRunAssertions(env);\n\n            long sum = 0;\n            for (long l : resultCollection) {\n                sum += l;\n            }\n            assertEquals(55, sum);\n        } finally {\n            FailingMapper3.failuresBeforeSuccess = 3;\n        }\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"d5ac263d6c176951a50c7c1cd4c2decb996f0f6f","commitMessage":"@@@[FLINK-21609][tests] Remove usage of LocalCollectionOutpuFormat from SimpleRecoveryITCaseBase\n\nThe LocalCollectionOutputFormat does not work well together with restarts because it records results\nfrom different attempts. Hence.  instead of using this format we now use the collect() call in the\nSimpleRecoveryITCaseBase.\n\nThis closes #15389.\n","date":"2021-03-31 18:46:23","modifiedFileCount":"1","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2021-03-26 19:17:45","codes":[{"authorDate":"2021-03-26 18:45:34","commitOrder":7,"curCode":"    public void testFailedRunThenSuccessfulRun() throws Exception {\n\n        try {\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                try {\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper1<>())\n                            .reduce(Long::sum)\n                            .collect();\n                    fail(\"The program should have failed, but run successfully\");\n                } catch (JobExecutionException e) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                List<Long> resultCollection =\n                        env.generateSequence(1, 10)\n                                .rebalance()\n                                .map(new FailingMapper1<>())\n                                .reduce((ReduceFunction<Long>) Long::sum)\n                                .collect();\n\n                long sum = 0;\n                for (long l : resultCollection) {\n                    sum += l;\n                }\n                assertEquals(55, sum);\n            }\n\n        } finally {\n            FailingMapper1.failuresBeforeSuccess = 1;\n        }\n    }\n","date":"2021-03-31 18:46:23","endLine":89,"groupId":"101179","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedRunThenSuccessfulRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/56/208fcf30f5b9f1644e27fcb04eef80f894fbcd.src","preCode":"    public void testFailedRunThenSuccessfulRun() throws Exception {\n\n        try {\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                try {\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper1<>())\n                            .reduce(Long::sum)\n                            .collect();\n                    fail(\"The program should have failed, but run successfully\");\n                } catch (JobExecutionException e) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n                env.setParallelism(4);\n                env.setRestartStrategy(RestartStrategies.noRestart());\n\n                List<Long> resultCollection =\n                        env.generateSequence(1, 10)\n                                .rebalance()\n                                .map(new FailingMapper1<>())\n                                .reduce((ReduceFunction<Long>) Long::sum)\n                                .collect();\n\n                long sum = 0;\n                for (long l : resultCollection) {\n                    sum += l;\n                }\n                assertEquals(55, sum);\n            }\n\n        } finally {\n            FailingMapper1.failuresBeforeSuccess = 1;\n        }\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2021-03-26 19:17:45","commitOrder":7,"curCode":"    public void testRestartMultipleTimes() throws Exception {\n        try {\n            ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n            env.setParallelism(4);\n\n            List<Long> resultCollection =\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper3<>())\n                            .reduce(Long::sum)\n                            .collect();\n\n            long sum = 0;\n            for (long l : resultCollection) {\n                sum += l;\n            }\n            assertEquals(55, sum);\n        } finally {\n            FailingMapper3.failuresBeforeSuccess = 3;\n        }\n    }\n","date":"2021-03-31 18:46:36","endLine":149,"groupId":"101179","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testRestartMultipleTimes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ea/c522282ab71eb48345fc3cb5a89d3da140fc02.src","preCode":"    public void testRestartMultipleTimes() throws Exception {\n        try {\n            ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n            env.setParallelism(4);\n            env.setRestartStrategy(RestartStrategies.fixedDelayRestart(5, 100));\n\n            List<Long> resultCollection =\n                    env.generateSequence(1, 10)\n                            .rebalance()\n                            .map(new FailingMapper3<>())\n                            .reduce(Long::sum)\n                            .collect();\n\n            long sum = 0;\n            for (long l : resultCollection) {\n                sum += l;\n            }\n            assertEquals(55, sum);\n        } finally {\n            FailingMapper3.failuresBeforeSuccess = 3;\n        }\n    }\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/recovery/SimpleRecoveryITCaseBase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"2fc5de72487777f106d4bcac5bc567bef4b706ea","commitMessage":"@@@[hotfix] Make SimpleRecoveryITCaseBase.testRestartMultipleTimes restart strategy agnostic\n","date":"2021-03-31 18:46:36","modifiedFileCount":"3","status":"M","submitter":"Till Rohrmann"}]
