[{"authorTime":"2018-07-17 02:51:44","codes":[{"authorDate":"2018-07-17 02:51:44","commitOrder":1,"curCode":"\tpublic void testCommitStagedFilesInCorrectOrder() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\t\r\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness = createRescalingTestSink(\n\t\t\t\toutDir, 1, 0, 100L, 10L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 2), 2L));\n\t\t\tcheckLocalFs(outDir, 1, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 3), 3L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.snapshot(1L, 1L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 4), 4L));\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 5), 5L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 6), 6L));\n\t\t\tcheckLocalFs(outDir, 3, 0);                    \r\n\n\t\t\ttestHarness.snapshot(2L, 2L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 7), 7L));\n\t\t\tcheckLocalFs(outDir, 4, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\n\t\t\ttestHarness.snapshot(3L, 3L);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(1L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 3, 1);\n\n\t\t\tint fileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-1.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-2.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-3.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(3L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 0, 4);\n\n\t\t\tfileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-1\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-2\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-3\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\t\t}\n\t}\n","date":"2018-07-17 02:54:02","endLine":276,"groupId":"51320","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitStagedFilesInCorrectOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b6/f73ac11cb855abaa01f3eaa5cab5ff5f46c4e3.src","preCode":"\tpublic void testCommitStagedFilesInCorrectOrder() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\t\r\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness = createRescalingTestSink(\n\t\t\t\toutDir, 1, 0, 100L, 10L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 2), 2L));\n\t\t\tcheckLocalFs(outDir, 1, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 3), 3L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.snapshot(1L, 1L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 4), 4L));\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 5), 5L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 6), 6L));\n\t\t\tcheckLocalFs(outDir, 3, 0);                    \r\n\n\t\t\ttestHarness.snapshot(2L, 2L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 7), 7L));\n\t\t\tcheckLocalFs(outDir, 4, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\n\t\t\ttestHarness.snapshot(3L, 3L);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(1L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 3, 1);\n\n\t\t\tint fileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-1.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-2.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-3.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(3L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 0, 4);\n\n\t\t\tfileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-1\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-2\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-3\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/LocalStreamingFileSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"},{"authorDate":"2018-07-17 02:51:44","commitOrder":1,"curCode":"\tpublic void testClosingOnSnapshot() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness =\n\t\t\t\t\tcreateRescalingTestSink(outDir, 1, 0, 100L, 2L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test2\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test3\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.snapshot(0L, 1L);\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(0L);\n\t\t\tcheckLocalFs(outDir, 0, 3);\n\n\t\t\ttestHarness.snapshot(1L, 0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test4\", 10), 10L));\n\t\t\tcheckLocalFs(outDir, 1, 3);\n\t\t}\n\n\t\t\r\n\t\tcheckLocalFs(outDir, 1, 3);\n\t}\n","date":"2018-07-17 02:54:02","endLine":403,"groupId":"51318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClosingOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b6/f73ac11cb855abaa01f3eaa5cab5ff5f46c4e3.src","preCode":"\tpublic void testClosingOnSnapshot() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness =\n\t\t\t\t\tcreateRescalingTestSink(outDir, 1, 0, 100L, 2L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test2\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test3\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.snapshot(0L, 1L);\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(0L);\n\t\t\tcheckLocalFs(outDir, 0, 3);\n\n\t\t\ttestHarness.snapshot(1L, 0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test4\", 10), 10L));\n\t\t\tcheckLocalFs(outDir, 1, 3);\n\t\t}\n\n\t\t\r\n\t\tcheckLocalFs(outDir, 1, 3);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/LocalStreamingFileSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"B"}],"commitId":"0bbc91eb1b23fa535e28fa8403f8040db46ebf98","commitMessage":"@@@[FLINK-9750] [DataStream API] Add new StreamingFileSink on top of the ResumableWriter.\n","date":"2018-07-17 02:54:02","modifiedFileCount":"1","status":"B","submitter":"kkloudas"},{"authorTime":"2018-07-17 17:52:02","codes":[{"authorDate":"2018-07-17 17:52:02","commitOrder":2,"curCode":"\tpublic void testCommitStagedFilesInCorrectOrder() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\t\r\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness = TestUtils.createRescalingTestSink(\n\t\t\t\toutDir, 1, 0, 100L, 10L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 2), 2L));\n\t\t\tTestUtils.checkLocalFs(outDir, 1, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 3), 3L));\n\t\t\tTestUtils.checkLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.snapshot(1L, 1L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 4), 4L));\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 5), 5L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 6), 6L));\n\t\t\tTestUtils.checkLocalFs(outDir, 3, 0);                    \r\n\n\t\t\ttestHarness.snapshot(2L, 2L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 7), 7L));\n\t\t\tTestUtils.checkLocalFs(outDir, 4, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\n\t\t\ttestHarness.snapshot(3L, 3L);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(1L);\t\t\t\t\t\t\t\r\n\t\t\tTestUtils.checkLocalFs(outDir, 3, 1);\n\n\t\t\tint fileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-1.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-2.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-3.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(3L);\t\t\t\t\t\t\t\r\n\t\t\tTestUtils.checkLocalFs(outDir, 0, 4);\n\n\t\t\tfileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-1\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-2\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-3\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\t\t}\n\t}\n","date":"2018-07-20 22:12:29","endLine":271,"groupId":"103062","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitStagedFilesInCorrectOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/942e95d4637be2f65487bc44c9ba5bcb627e5b.src","preCode":"\tpublic void testCommitStagedFilesInCorrectOrder() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\t\r\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness = createRescalingTestSink(\n\t\t\t\toutDir, 1, 0, 100L, 10L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 2), 2L));\n\t\t\tcheckLocalFs(outDir, 1, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 3), 3L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.snapshot(1L, 1L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 4), 4L));\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 5), 5L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 6), 6L));\n\t\t\tcheckLocalFs(outDir, 3, 0);                    \r\n\n\t\t\ttestHarness.snapshot(2L, 2L);\n\n\t\t\t\r\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 7), 7L));\n\t\t\tcheckLocalFs(outDir, 4, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\n\t\t\ttestHarness.snapshot(3L, 3L);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(1L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 3, 1);\n\n\t\t\tint fileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-1.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-2.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().contains(\".part-0-3.inprogress\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(3L);\t\t\t\t\t\t\t\r\n\t\t\tcheckLocalFs(outDir, 0, 4);\n\n\t\t\tfileCounter = 0;\n\t\t\tfor (Map.Entry<File, String> fileContents : getFileContentByPath(outDir).entrySet()) {\n\t\t\t\tif (fileContents.getKey().getName().equals(\"part-0-0\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@1\\ntest1@2\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-1\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@3\\ntest1@4\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-2\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@5\\ntest1@6\\n\", fileContents.getValue());\n\t\t\t\t} else if (fileContents.getKey().getName().equals(\"part-0-3\")) {\n\t\t\t\t\tfileCounter++;\n\t\t\t\t\tAssert.assertEquals(\"test1@7\\n\", fileContents.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t\tAssert.assertEquals(4L, fileCounter);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/LocalStreamingFileSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2018-07-17 17:52:02","commitOrder":2,"curCode":"\tpublic void testClosingOnSnapshot() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\ttry (\n\t\t\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness =\n\t\t\t\t\t\tTestUtils.createRescalingTestSink(outDir, 1, 0, 100L, 2L)\n\t\t) {\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test2\", 1), 1L));\n\t\t\tTestUtils.checkLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\t\t\tTestUtils.checkLocalFs(outDir, 2, 0);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test3\", 1), 1L));\n\t\t\tTestUtils.checkLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.snapshot(0L, 1L);\n\t\t\tTestUtils.checkLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(0L);\n\t\t\tTestUtils.checkLocalFs(outDir, 0, 3);\n\n\t\t\ttestHarness.snapshot(1L, 0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test4\", 10), 10L));\n\t\t\tTestUtils.checkLocalFs(outDir, 1, 3);\n\t\t}\n\n\t\t\r\n\t\tTestUtils.checkLocalFs(outDir, 1, 3);\n\t}\n","date":"2018-07-20 22:12:29","endLine":399,"groupId":"103062","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClosingOnSnapshot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/942e95d4637be2f65487bc44c9ba5bcb627e5b.src","preCode":"\tpublic void testClosingOnSnapshot() throws Exception {\n\t\tfinal File outDir = TEMP_FOLDER.newFolder();\n\n\t\ttry (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Object> testHarness =\n\t\t\t\t\tcreateRescalingTestSink(outDir, 1, 0, 100L, 2L)) {\n\n\t\t\ttestHarness.setup();\n\t\t\ttestHarness.open();\n\n\t\t\ttestHarness.setProcessingTime(0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test1\", 1), 1L));\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test2\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\t\r\n\t\t\ttestHarness.setProcessingTime(101L);\n\t\t\tcheckLocalFs(outDir, 2, 0);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test3\", 1), 1L));\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.snapshot(0L, 1L);\n\t\t\tcheckLocalFs(outDir, 3, 0);\n\n\t\t\ttestHarness.notifyOfCompletedCheckpoint(0L);\n\t\t\tcheckLocalFs(outDir, 0, 3);\n\n\t\t\ttestHarness.snapshot(1L, 0L);\n\n\t\t\ttestHarness.processElement(new StreamRecord<>(Tuple2.of(\"test4\", 10), 10L));\n\t\t\tcheckLocalFs(outDir, 1, 3);\n\t\t}\n\n\t\t\r\n\t\tcheckLocalFs(outDir, 1, 3);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/LocalStreamingFileSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"b56c75ca375049b1d2c80d2d0945ae1ae04eb39e","commitMessage":"@@@[FLINK-9903] [DataStream API] Refactor StreamingFileSink / add bulk encoders\n\n* Add supports for bulk encoders.\n* Expose more options in the rolling policy and\n* Allows to return any object as bucket id from the bucketer.\n","date":"2018-07-20 22:12:29","modifiedFileCount":"14","status":"M","submitter":"kkloudas"}]
