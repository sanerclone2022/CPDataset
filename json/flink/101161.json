[{"authorTime":"2020-09-24 06:05:10","codes":[{"authorDate":"2021-08-10 22:10:33","commitOrder":2,"curCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription apply(\n                        SharedObjects shared,\n                        Consumer<Configuration> confConsumer,\n                        Consumer<StreamExecutionEnvironment> envConsumer) {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","date":"2021-09-03 18:26:40","endLine":250,"groupId":"33085","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"COMPLEX_GRAPH_BUILDER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/eb/2ab1aceeb702ec06bf35a4571016d252dfb378.src","preCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription apply(\n                        SharedObjects shared,\n                        Consumer<Configuration> confConsumer,\n                        Consumer<StreamExecutionEnvironment> envConsumer) {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","realPath":"flink-tests/src/test/java/org/apache/flink/runtime/operators/lifecycle/graph/TestJobBuilders.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2020-09-24 06:05:10","commitOrder":2,"curCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","date":"2020-10-03 04:19:44","endLine":336,"groupId":"32235","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nAryInputStreamOperation","params":"(finalDataStream<?>...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/f4114532be9e9c983b6229118a8506a7b743a1.src","preCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SourceNAryInputChainingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"NB"}],"commitId":"f6e784772dc89e197efe6d7a5f52a513ced6682a","commitMessage":"@@@[FLINK-21090] Add tests for stop-with-savepoint and FLIP-147\n","date":"2021-09-03 18:26:40","modifiedFileCount":"1","status":"M","submitter":"Roman Khachatryan"},{"authorTime":"2020-09-24 06:05:10","codes":[{"authorDate":"2021-09-02 19:07:45","commitOrder":3,"curCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription build(\n                        SharedObjects shared,\n                        Consumer<Configuration> confConsumer,\n                        Consumer<StreamExecutionEnvironment> envConsumer) {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","date":"2021-09-03 18:26:41","endLine":251,"groupId":"33085","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"COMPLEX_GRAPH_BUILDER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4a/feec7a63d8cc33c3ee1345119c0ce8752a714d.src","preCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription apply(\n                        SharedObjects shared,\n                        Consumer<Configuration> confConsumer,\n                        Consumer<StreamExecutionEnvironment> envConsumer) {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","realPath":"flink-tests/src/test/java/org/apache/flink/runtime/operators/lifecycle/graph/TestJobBuilders.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-09-24 06:05:10","commitOrder":3,"curCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","date":"2020-10-03 04:19:44","endLine":336,"groupId":"32235","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nAryInputStreamOperation","params":"(finalDataStream<?>...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/f4114532be9e9c983b6229118a8506a7b743a1.src","preCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SourceNAryInputChainingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"}],"commitId":"36f607c9fdff11e67cd1768bb48295f83da3e350","commitMessage":"@@@[FLINK-21090] Minor code improvements\n\n* Do not extend from the TriFunction\n* Use non deprecated watermark assigners\n* Log exceptions in case of a global termination state\n\nThis closes #16773\n","date":"2021-09-03 18:26:41","modifiedFileCount":"5","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-09-24 06:05:10","codes":[{"authorDate":"2021-09-07 04:13:28","commitOrder":4,"curCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription build(\n                        SharedObjects shared,\n                        ThrowingConsumer<Configuration, Exception> confConsumer,\n                        ThrowingConsumer<StreamExecutionEnvironment, Exception> envConsumer)\n                        throws Exception {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","date":"2021-09-08 23:58:23","endLine":254,"groupId":"101161","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"COMPLEX_GRAPH_BUILDER","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7b/b921635ab57d104a496f6e11939f5d05d2b05b.src","preCode":"            new TestingGraphBuilder() {\n                @Override\n                public TestJobWithDescription build(\n                        SharedObjects shared,\n                        Consumer<Configuration> confConsumer,\n                        Consumer<StreamExecutionEnvironment> envConsumer) {\n\n                    TestEventQueue eventQueue = TestEventQueue.createShared(shared);\n                    TestCommandDispatcher commandQueue = TestCommandDispatcher.createShared(shared);\n\n                    StreamExecutionEnvironment env = prepareEnv(confConsumer, envConsumer);\n\n                    \r\n                    String unitedSourceLeft = OP_ID_HASH_PREFIX + \"1\";\n                    String unitedSourceRight = OP_ID_HASH_PREFIX + \"2\";\n                    String connectedSource = OP_ID_HASH_PREFIX + \"3\";\n                    String multiSource = OP_ID_HASH_PREFIX + \"4\";\n                    String mapForward = OP_ID_HASH_PREFIX + \"5\";\n                    String mapKeyed = OP_ID_HASH_PREFIX + \"6\";\n                    String mapTwoInput = OP_ID_HASH_PREFIX + \"7\";\n                    String multipleInput = OP_ID_HASH_PREFIX + \"8\";\n\n                    \r\n                    \r\n                    DataStream<TestDataElement> unitedSources =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    unitedSourceLeft, eventQueue, commandQueue))\n                                    .setUidHash(unitedSourceLeft)\n                                    .assignTimestampsAndWatermarks(createWmAssigner())\n                                    .union(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    unitedSourceRight,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(unitedSourceRight)\n                                                    .assignTimestampsAndWatermarks(\n                                                            createWmAssigner()));\n                    SingleOutputStreamOperator<TestDataElement> sideSource =\n                            env.addSource(\n                                            new TestEventSource(\n                                                    multiSource, eventQueue, commandQueue))\n                                    .setUidHash(multiSource)\n                                    .assignTimestampsAndWatermarks(createWmAssigner());\n\n                    DataStream<?>[] inputs = new DataStream[] {unitedSources, sideSource};\n                    final MultipleInputTransformation<TestDataElement> multipleInputsTransform =\n                            new MultipleInputTransformation<>(\n                                    \"MultipleInputOperator\",\n                                    new MultiInputTestOperatorFactory(\n                                            inputs.length, eventQueue, multipleInput),\n                                    TypeInformation.of(TestDataElement.class),\n                                    env.getParallelism());\n                    for (DataStream<?> input : inputs) {\n                        multipleInputsTransform.addInput(input.getTransformation());\n                    }\n                    multipleInputsTransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n                    env.addOperator(multipleInputsTransform);\n\n                    SingleOutputStreamOperator<TestDataElement> multipleSources =\n                            new MultipleConnectedStreams(env)\n                                    .transform(multipleInputsTransform)\n                                    .setUidHash(multiSource);\n\n                    SingleOutputStreamOperator<TestDataElement> forwardTransform =\n                            multipleSources\n                                    .startNewChain()\n                                    .transform(\n                                            \"transform-1-forward\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapForward, eventQueue))\n                                    .setUidHash(mapForward);\n\n                    SingleOutputStreamOperator<TestDataElement> keyedTransform =\n                            forwardTransform\n                                    .startNewChain()\n                                    .keyBy(e -> e)\n                                    .transform(\n                                            \"transform-2-keyed\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new OneInputTestStreamOperatorFactory(\n                                                    mapKeyed, eventQueue))\n                                    .setUidHash(mapKeyed);\n\n                    SingleOutputStreamOperator<TestDataElement> twoInputTransform =\n                            keyedTransform\n                                    .startNewChain()\n                                    .connect(\n                                            env.addSource(\n                                                            new TestEventSource(\n                                                                    connectedSource,\n                                                                    eventQueue,\n                                                                    commandQueue))\n                                                    .setUidHash(connectedSource))\n                                    .transform(\n                                            \"transform-3-two-input\",\n                                            TypeInformation.of(TestDataElement.class),\n                                            new TwoInputTestStreamOperator(mapTwoInput, eventQueue))\n                                    .setUidHash(mapTwoInput);\n\n                    twoInputTransform.addSink(new DiscardingSink<>());\n\n                    Map<String, Integer> operatorsNumberOfInputs = new HashMap<>();\n                    operatorsNumberOfInputs.put(mapForward, 1);\n                    operatorsNumberOfInputs.put(mapKeyed, 1);\n                    operatorsNumberOfInputs.put(mapTwoInput, 2);\n                    operatorsNumberOfInputs.put(multipleInput, 2);\n\n                    return new TestJobWithDescription(\n                            env.getStreamGraph().getJobGraph(),\n                            new HashSet<>(\n                                    asList(unitedSourceLeft, unitedSourceRight, connectedSource)),\n                            new HashSet<>(asList(mapForward, mapKeyed, mapTwoInput, multipleInput)),\n                            new HashSet<>(\n                                    asList(\n                                            unitedSourceLeft,\n                                            unitedSourceRight,\n                                            connectedSource,\n                                            mapForward,\n                                            mapKeyed,\n                                            mapTwoInput,\n                                            multipleInput)),\n                            operatorsNumberOfInputs,\n                            eventQueue,\n                            commandQueue);\n                }\n\n                @Override\n                public String toString() {\n                    return \"complex graph\";\n                }\n            };\n","realPath":"flink-tests/src/test/java/org/apache/flink/runtime/operators/lifecycle/graph/TestJobBuilders.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2020-09-24 06:05:10","commitOrder":4,"curCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","date":"2020-10-03 04:19:44","endLine":336,"groupId":"101161","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nAryInputStreamOperation","params":"(finalDataStream<?>...inputs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b1/f4114532be9e9c983b6229118a8506a7b743a1.src","preCode":"\tprivate static DataStream<Long> nAryInputStreamOperation(final DataStream<?>... inputs) {\n\n\t\tfinal StreamExecutionEnvironment env = inputs[0].getExecutionEnvironment();\n\n\t\t\r\n\n\t\tfinal MultipleInputTransformation<Long> transform = new MultipleInputTransformation<>(\n\t\t\t\"MultipleInputOperator\", new NAryUnionOpFactory(inputs.length), Types.LONG, env.getParallelism());\n\t\tfor (DataStream<?> input : inputs) {\n\t\t\ttransform.addInput(input.getTransformation());\n\t\t}\n\t\ttransform.setChainingStrategy(ChainingStrategy.HEAD_WITH_SOURCES);\n\t\tenv.addOperator(transform);\n\n\t\treturn new MultipleConnectedStreams(env).transform(transform);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SourceNAryInputChainingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"}],"commitId":"c740f9269ab2836a69cc3fac9dc4a670f6aa86d2","commitMessage":"@@@[FLINK-24160][tests] Use FS checkpoint storage in PartiallyFinishedSourcesITCase\n\nThis closes #17165.\n","date":"2021-09-08 23:58:23","modifiedFileCount":"4","status":"M","submitter":"Roman Khachatryan"}]
