[{"authorTime":"2015-07-07 17:07:05","codes":[{"authorDate":"2015-06-22 18:26:44","commitOrder":5,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\r\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2015-07-21 00:52:45","endLine":267,"groupId":"11630","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/61/9709260b0f0d7c22453a458aaf37a27b75e36b.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\r\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CoStreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"B"},{"authorDate":"2015-07-07 17:07:05","commitOrder":5,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2015-07-07 18:42:29","endLine":238,"groupId":"11630","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a8/26effe0d5ecb2de64f3fab14168fe5c68a8d39.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/StreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"NB"}],"commitId":"a2eb6cc8774ab43475829b0b691e62739fbbe88b","commitMessage":"@@@[FLINK-1967] Introduce (Event)time in Streaming\n\nThis introduces an additional timestamp field in StreamRecord. When using a\nSourceFunction and an auto-timestamp interval is set using the\nExecutionConfig.  the timestamp is automatically set to System.currentTimeMillis()\nupon element emission. The timestamp can be manually set using an\nEventTimeSourceFunction.\n\nThis also changes the signature of the StreamOperators. They now get\na StreamRecord instead of the unwrapped value. This is necessary for\nthem to access the timestamp. Before.  the StreamTask would unwrap the\nvalue from the StreamRecord.  now this is moved one layer higher.\n\nThis also introduces watermarks to keep track of processing. At\na configurable interval the sources will emit watermarks that signify\nthat no records with a lower timestamp will be emitted in the future by\nthis source. The timestamps are broadcast.  stream inputs wait for watermark\nevents on all input channels and forward the watermark to the\nStreamOperator once the watermark advances on all inputs. Operators are\nresponsible for forwarding the watermark once they know that no elements\nwith a previous timestamp will be emitted (this is mostly relevant for\nbuffering operations such as windows). Right now.  all operators simply\nforward the watermark they receive.\n\nWhen using an EventTimeSourceFunction the system does not\nautomatically emit timestamps.  the user is required to manually emit\nwatermarks using the SourceContext.\n\nNo watermarks will be emitted unless\nExecutionConfig.setAutoWatermarkInterval is used to set a watermark\ninterval.\n\nPer default timestamps and watermarks are completely disabled.  there is\na switch in ExecutionConfig (enableTimstamps()) to enable them. This\nmeans that.  out-of-box.  the performance is not changed by adding this\nnew feature. If it is not used.\n\nThis commit contains fixes for other stuff that was discovered while\nimplementing the feature. See Jira issue numbers and descriptions below.\n\n[FLINK-2290/2295] Fix CoReader Event Handling and Checkpointing\n\nThis changes CoReader (now CoStreamingRecordReader) to reuse\nUnionGate for the input multiplexing. This way it will not lock in on\none specific input side and read events from both input sides.\n\nThis also enables an event listener for checkpoint barriers so that the\nTwoInputTask now reacts to those and correctly forwards them.\n\nThen.  this adds CoStreamCheckpointintITCase to verify that checkpointing\nworks in topologies with TwoInputStreamTasks.\n\nThis also adds tests for OneInputStreamTask and TwoInputStreamTask\nthat check whether:\n - whether open()/close() of RichFunctions are correctly\n   called\n - Watermarks are correctly forwarded\n - Supersteps/checkpoint barriers are correctly forwarded and the\n   blocking of inputs works correctly\n\nAdd proper tests for Stream Operators\n\nThese test whether:\n - open()/close() on RichFunctions are called\n - Timestamps of emitted elements match the timestamp of the input\n   element\n - Watermarks are correctly forwarded\n\n[FLINK-2301] Fix Behaviour of BarrierBuffer and add Tests\n\nBefore.  a CheckpointBarrier from a more recent Checkpoint would also\ntrigger unblocking while waiting on an older CheckpointBarrier. Now. \na CheckpointBarrier from a newer checkpoint will unblock all channels\nand start a new wait on the new Checkpoint.\n\nThe tests for OneInputStreamTask and TwoInputStreamTask check whether\nthe buffer behaves correctly when receiving CheckpointBarriers from more\nrecent checkpoints while still waiting on an older CheckpointBarrier.\n","date":"2015-07-21 00:52:45","modifiedFileCount":"97","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2015-10-05 21:57:04","codes":[{"authorDate":"2015-10-05 21:57:04","commitOrder":6,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2015-10-16 21:26:10","endLine":186,"groupId":"42821","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/03a1f3724ce3240ab1c18373656e3165096485.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CoStreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2015-10-05 21:57:04","commitOrder":6,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2015-10-16 21:26:10","endLine":169,"groupId":"42821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/2a6798eef839453e7d5a13db96363101dd46ac.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index.value() < numElements) {\n\t\t\t\tchar first = (char) ((index.value() % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex.update(index.value() + step);\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/StreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"479bec0b2b44315196c1f1cddeb114c79d1717db","commitMessage":"@@@[FLINK-2808] [streaming] Refactor and extend state backend abstraction\n","date":"2015-10-16 21:26:10","modifiedFileCount":"98","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2015-10-05 21:57:04","codes":[{"authorDate":"2016-12-20 21:53:13","commitOrder":7,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Random rnd = new Random();\n\t\t\tfinal StringBuilder stringBuilder = new StringBuilder();\n\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\tfinal int step = getRuntimeContext().getNumberOfParallelSubtasks();\n\t\t\tif (index < 0) {\n\t\t\t\t\r\n\t\t\t\tindex =getRuntimeContext().getIndexOfThisSubtask();\n\t\t\t}\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\t\r\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\n\t\t\t\tif (numCompletedCheckpoints < 2) {\n\t\t\t\t\t\r\n\t\t\t\t\tif (index < checkpointLatestAt) {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tThread.sleep(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\r\n\t\t\t\t\t\twhile (isRunning && numCompletedCheckpoints < 2) {\n\t\t\t\t\t\t\tThread.sleep(5);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2016-12-21 00:01:44","endLine":205,"groupId":"101636","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/a00b943861be546f55c00bb705128e51ddb13e.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/CoStreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2015-10-05 21:57:04","commitOrder":7,"curCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","date":"2015-10-16 21:26:10","endLine":169,"groupId":"101636","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(SourceContext<String>ctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/99/2a6798eef839453e7d5a13db96363101dd46ac.src","preCode":"\t\tpublic void run(SourceContext<String> ctx) throws Exception {\n\t\t\tfinal Object lockingObject = ctx.getCheckpointLock();\n\n\t\t\twhile (isRunning && index < numElements) {\n\t\t\t\tchar first = (char) ((index % 40) + 40);\n\n\t\t\t\tstringBuilder.setLength(0);\n\t\t\t\tstringBuilder.append(first);\n\n\t\t\t\tString result = randomString(stringBuilder, rnd);\n\n\t\t\t\tsynchronized (lockingObject) {\n\t\t\t\t\tindex += step;\n\t\t\t\t\tctx.collect(result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/checkpointing/StreamCheckpointingITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"}],"commitId":"a26b0f0826dd84cded650280f3b8262e628814da","commitMessage":"@@@[hotfix] [tests] Speed up CoStreamCheckpointingITCase\n","date":"2016-12-21 00:01:44","modifiedFileCount":"1","status":"M","submitter":"Stephan Ewen"}]
