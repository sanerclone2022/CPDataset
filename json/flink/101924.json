[{"authorTime":"2018-06-26 17:46:06","codes":[{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\t123456,\n\t\t\t\tDateTime.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\t123456L,\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","date":"2018-07-03 21:40:44","endLine":69,"groupId":"38073","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateRandomUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/c5bf8180a2bbe5bc578ddb276b324228d261cd.src","preCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\t123456,\n\t\t\t\tDateTime.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\t123456L,\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"MB"},{"authorDate":"2018-06-26 17:46:06","commitOrder":2,"curCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","date":"2018-07-03 21:40:44","endLine":89,"groupId":"38073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateRandomSimpleUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/c5bf8180a2bbe5bc578ddb276b324228d261cd.src","preCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"c34c7e4127c8947d68e2b960cd84206e59d479b3","commitMessage":"@@@[FLINK-9444] [formats] Add full SQL support for Avro formats\n\nThis PR adds full support of Apache Avro records for the Table API & SQL. It adds (de)serialization schemas to the row type for both specific and generic records. It converts all Avro types to Flink types and vice versa. It supports both physical and logical Avro types. Both an Avro class or a Avro schema string can be used for format initialization.\n\nThis closes #6218.\nThis closes #6082.\n","date":"2018-07-03 21:40:44","modifiedFileCount":"24","status":"M","submitter":"Timo Walther"},{"authorTime":"2018-06-26 17:46:06","codes":[{"authorDate":"2020-09-12 00:13:53","commitOrder":3,"curCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\t123456L,\n\t\t\t\tDateTime.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\t123456L,\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","date":"2020-09-15 03:46:09","endLine":69,"groupId":"38073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateRandomUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/db/0452cfef6864c857d9133bf308dd147b32c58c.src","preCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\t123456,\n\t\t\t\tDateTime.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\t123456L,\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-06-26 17:46:06","commitOrder":3,"curCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","date":"2018-07-03 21:40:44","endLine":89,"groupId":"38073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateRandomSimpleUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/c5bf8180a2bbe5bc578ddb276b324228d261cd.src","preCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"6ac804852237aa36a0477757a3cdacd9b69e7dc5","commitMessage":"@@@[hotfix] Fix time-micros and timestamp-micros handling\n","date":"2020-09-15 03:46:09","modifiedFileCount":"11","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2018-06-26 17:46:06","codes":[{"authorDate":"2020-09-10 16:28:25","commitOrder":4,"curCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\tLocalTime.ofSecondOfDay(0).plus(123456L, ChronoUnit.MICROS),\n\t\t\t\tInstant.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\tInstant.ofEpochSecond(0).plus(123456L, ChronoUnit.MICROS),\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","date":"2020-09-15 03:46:09","endLine":69,"groupId":"101924","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateRandomUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/b530b1133e18f5778c6137a63f34c844f4665b.src","preCode":"\tpublic static User generateRandomUser(Random rnd) {\n\t\treturn new User(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd),\n\t\t\t\tLocalDate.parse(\"2014-03-01\"),\n\t\t\t\tLocalTime.parse(\"12:12:12\"),\n\t\t\t\t123456L,\n\t\t\t\tDateTime.parse(\"2014-03-01T12:12:12.321Z\"),\n\t\t\t\t123456L,\n\t\t\t\tByteBuffer.wrap(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()),\n\t\t\t\tnew Fixed2(BigDecimal.valueOf(2000, 2).unscaledValue().toByteArray()));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-06-26 17:46:06","commitOrder":4,"curCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","date":"2018-07-03 21:40:44","endLine":89,"groupId":"101924","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateRandomSimpleUser","params":"(Randomrnd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/c5bf8180a2bbe5bc578ddb276b324228d261cd.src","preCode":"\tpublic static SimpleUser generateRandomSimpleUser(Random rnd) {\n\t\treturn new SimpleUser(\n\t\t\t\tgenerateRandomString(rnd, 50),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextInt(),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomString(rnd, 6),\n\t\t\t\trnd.nextBoolean() ? null : rnd.nextLong(),\n\t\t\t\trnd.nextDouble(),\n\t\t\t\tnull,\n\t\t\t\trnd.nextBoolean(),\n\t\t\t\tgenerateRandomStringList(rnd, 20, 30),\n\t\t\t\tgenerateRandomBooleanList(rnd, 20),\n\t\t\t\trnd.nextBoolean() ? null : generateRandomStringList(rnd, 20, 20),\n\t\t\t\tgenerateRandomColor(rnd),\n\t\t\t\tnew HashMap<>(),\n\t\t\t\tgenerateRandomFixed16(rnd),\n\t\t\t\tgenerateRandomUnion(rnd),\n\t\t\t\tgenerateRandomAddress(rnd),\n\t\t\t\tgenerateRandomBytes(rnd));\n\t}\n","realPath":"flink-formats/flink-avro/src/test/java/org/apache/flink/formats/avro/utils/TestDataGenerator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"115f85220abb89f3b9d179e0ea2e3b6a3be4c7af","commitMessage":"@@@[FLINK-18192] Upgrade avro to 1.10\n\nThis commit upgrades the default version of avro that flink-avro will use. It should be possible to downgrade the avro version in a user job as the binary format is compatible and we do not expose any dependencies on avro in the API.\n\nAdditionally this commit fixes handling of logical types: time-micros and timestamp-micros as well as interpretation of timestamp-millis in the AvroRowDataDeserializationSchema.\n","date":"2020-09-15 03:46:09","modifiedFileCount":"18","status":"M","submitter":"Dawid Wysakowicz"}]
