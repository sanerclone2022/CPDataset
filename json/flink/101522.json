[{"authorTime":"2017-09-28 14:09:20","codes":[{"authorDate":"2017-09-20 14:35:34","commitOrder":2,"curCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.timeWindow(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2017-09-25 18:06:51","endLine":584,"groupId":"25043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessdWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/4f8ffb5d7c239b970713e31ae56ea0280b78f3.src","preCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.timeWindow(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"NB"},{"authorDate":"2017-09-28 14:09:20","commitOrder":2,"curCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2017-10-12 17:12:33","endLine":621,"groupId":"6243","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessAllWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7f/3fe8b1baefce0bdd172749830916f2868e355f.src","preCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"B"}],"commitId":"39682c456a211a773014474e696babff898a76fe","commitMessage":"@@@[FLINK-7660] Support sideOutput in ProcessAllWindowFunction\n","date":"2017-10-12 17:12:33","modifiedFileCount":"7","status":"M","submitter":"Bowen Li"},{"authorTime":"2020-09-21 18:40:06","codes":[{"authorDate":"2020-09-21 18:40:06","commitOrder":3,"curCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2020-10-01 23:03:44","endLine":870,"groupId":"25043","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessdWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/6eb53eab2d389fd7d8e562a3bd77c2722b6b42.src","preCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.timeWindow(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":838,"status":"M"},{"authorDate":"2020-09-21 18:40:06","commitOrder":3,"curCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2020-10-01 23:03:44","endLine":906,"groupId":"18321","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessAllWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/6eb53eab2d389fd7d8e562a3bd77c2722b6b42.src","preCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":873,"status":"M"}],"commitId":"1175364cc9f5bc6018d4c3f231d24cb8ff5e6341","commitMessage":"@@@[FLINK-19317] Make EventTime the default TimeCharacteristic\n\nThis is part of the FLIP-134 (Batch execution for the DataStream API)\nwork.\n\nEvent time is the only sensible time characteristic for batch\nprocessing. We therefore change the default value of the\nTimeCharacteristic from ProcessingTime to EventTime. This means the\nDataStream API programs that were using event time before now just work\nwithout manually changing this setting. Processing-time programs will\nalso still work.  because using processing-time timers is not dependent\non the TimeCharacteristic. DataStream programs that don't set a\nTimestampAssigner or WatermarkStrategy will also still work if they\ndon't use operations that don't rely on (event-time) timestamps.  This\nis true for both BATCH and STREAMING execution mode.\n\nWith this change.  users don't need to call\nsetStreamTimeCharacteristic(EventTime) anymore. We will make sure they\nlearn of this by deprecating the method in a follow-up commit.\n\nThe only real user-visible change of this is that programs that used the\nKeyedStream.timeWindow()/DataStream.timeWindow() operation.  which is\ndependent on the TimeCharacteristic will now use event time by default.\nWe don't think this operation is useful because the behaviour can be\nsurprising. We recommend users always use an explicit processing-time\nwindow or event-time window.\n\nWe also change the default watermark interval from 0 (disabled) to 200\nto match the previous behaviour of calling\nsetStreamTimeCharacteristic(EventTime).\n","date":"2020-10-01 23:03:44","modifiedFileCount":"18","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":4,"curCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2020-10-01 23:03:45","endLine":865,"groupId":"101522","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessdWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/00fae6771ac1d945227ab8bb41fd90b3ba35a0.src","preCode":"\tpublic void testProcessdWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(3);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.keyBy(new TestKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessWindowFunction<Integer, Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Integer integer, Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tout.collect(integer);\n\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(integer));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":4,"curCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","date":"2020-10-01 23:03:45","endLine":900,"groupId":"101522","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessAllWindowFunctionSideOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/00fae6771ac1d945227ab8bb41fd90b3ba35a0.src","preCode":"\tpublic void testProcessAllWindowFunctionSideOutput() throws Exception {\n\t\tTestListResultSink<Integer> resultSink = new TestListResultSink<>();\n\t\tTestListResultSink<String> sideOutputResultSink = new TestListResultSink<>();\n\n\t\tStreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tsee.setParallelism(1);\n\t\tsee.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tDataStream<Integer> dataStream = see.fromCollection(elements);\n\n\t\tOutputTag<String> sideOutputTag = new OutputTag<String>(\"side\"){};\n\n\t\tSingleOutputStreamOperator<Integer> windowOperator = dataStream\n\t\t\t\t.assignTimestampsAndWatermarks(new TestWatermarkAssigner())\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.milliseconds(1), Time.milliseconds(1)))\n\t\t\t\t.process(new ProcessAllWindowFunction<Integer, Integer, TimeWindow>() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context context, Iterable<Integer> elements, Collector<Integer> out) throws Exception {\n\t\t\t\t\t\tfor (Integer e : elements) {\n\t\t\t\t\t\t\tout.collect(e);\n\t\t\t\t\t\t\tcontext.output(sideOutputTag, \"sideout-\" + String.valueOf(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\twindowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);\n\t\twindowOperator.addSink(resultSink);\n\t\tsee.execute();\n\n\t\tassertEquals(Arrays.asList(\"sideout-1\", \"sideout-2\", \"sideout-5\"), sideOutputResultSink.getSortedResult());\n\t\tassertEquals(Arrays.asList(1, 2, 5), resultSink.getSortedResult());\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/SideOutputITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
