[{"authorTime":"2019-07-31 15:46:59","codes":[{"authorDate":"2019-07-31 15:46:59","commitOrder":1,"curCode":"\tpublic TableSource<Row> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createInputFormatTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","date":"2019-08-02 06:45:36","endLine":114,"groupId":"45585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/27bf31318222a60e816d812c6b0abbebca7d55.src","preCode":"\tpublic TableSource<Row> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createInputFormatTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2019-07-31 15:46:59","commitOrder":1,"curCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","date":"2019-08-02 06:45:36","endLine":135,"groupId":"45585","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/27bf31318222a60e816d812c6b0abbebca7d55.src","preCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"b83a2531641a0e39e0e1c37a78f355eec636de79","commitMessage":"@@@[FLINK-12966][hive] finalize package name of Hive table source/sink\n\nfinalize package name of Hive table source/sink from org.apache.flink.batch.connector to org.apache.flink.connector.\n\nThis closes #9290.\n","date":"2019-08-02 06:45:36","modifiedFileCount":"2","status":"B","submitter":"zjuwangg"},{"authorTime":"2019-07-31 15:46:59","codes":[{"authorDate":"2019-11-14 21:20:36","commitOrder":2,"curCode":"\tpublic TableSource<BaseRow> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createInputFormatTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","date":"2019-12-02 14:36:40","endLine":88,"groupId":"45585","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/19/1721badcfcde05991c5624148a84a0a77e5e5f.src","preCode":"\tpublic TableSource<Row> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createInputFormatTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-07-31 15:46:59","commitOrder":2,"curCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","date":"2019-08-02 06:45:36","endLine":135,"groupId":"45585","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/27bf31318222a60e816d812c6b0abbebca7d55.src","preCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"1f9cd8ac6fda1eee0c3f8899b8101ede182f2c93","commitMessage":"@@@[FLINK-14135][hive] Introduce HiveVectorizedOrcSplitReader to hive\n\nThis closes #10022\n","date":"2019-12-02 14:36:40","modifiedFileCount":"7","status":"M","submitter":"JingsongLi"},{"authorTime":"2019-12-03 11:32:24","codes":[{"authorDate":"2019-12-03 11:32:24","commitOrder":3,"curCode":"\tpublic TableSource<BaseRow> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createHiveTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","date":"2019-12-03 11:32:24","endLine":88,"groupId":"28107","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/70ec2907392960578db5a5bbc04ea726ae274b.src","preCode":"\tpublic TableSource<BaseRow> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createInputFormatTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-12-03 11:32:24","commitOrder":3,"curCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","date":"2019-12-03 11:32:24","endLine":109,"groupId":"28107","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(ObjectPathtablePath@CatalogTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/70ec2907392960578db5a5bbc04ea726ae274b.src","preCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.valueOf(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"afd5f1f23726d520b61f46f37961c97cd91c48fa","commitMessage":"@@@[FLINK-14800][hive] Introduce parallelism inference for HiveTableSource\n\nThis closes #10210\n","date":"2019-12-03 11:32:24","modifiedFileCount":"4","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-02-11 16:50:49","codes":[{"authorDate":"2020-02-11 16:50:49","commitOrder":4,"curCode":"\tpublic TableSource<BaseRow> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createHiveTableSource(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-02-22 11:49:38","endLine":78,"groupId":"3471","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/17b719f4bad1177d17703c7fd9d159fe87a21c.src","preCode":"\tpublic TableSource<BaseRow> createTableSource(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createHiveTableSource(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-02-11 16:50:49","commitOrder":4,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-02-22 11:49:38","endLine":99,"groupId":"3471","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/17b719f4bad1177d17703c7fd9d159fe87a21c.src","preCode":"\tpublic TableSink<Row> createTableSink(ObjectPath tablePath, CatalogTable table) {\n\t\tPreconditions.checkNotNull(table);\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(tablePath, table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(table);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"4e92bdb186e6abc1d5e033ebfb4978e94af20cc7","commitMessage":"@@@[FLINK-15912][table] Support create table source/sink by context in hive connector\n","date":"2020-02-22 11:49:38","modifiedFileCount":"4","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-02-11 16:50:49","codes":[{"authorDate":"2020-02-25 19:46:56","commitOrder":5,"curCode":"\tpublic TableSource<BaseRow> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-02-25 19:46:56","endLine":81,"groupId":"27574","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2a/3582d22783f7d935045ed0ef1ccf46035ed01c.src","preCode":"\tpublic TableSource<BaseRow> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createHiveTableSource(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-02-11 16:50:49","commitOrder":5,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-02-22 11:49:38","endLine":99,"groupId":"3471","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/17b719f4bad1177d17703c7fd9d159fe87a21c.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"fa3f56461fb5fb6157cc3f639c36582da24a0fb3","commitMessage":"@@@[FLINK-16179][hive] Use configuration from TableFactory in hive connector (#11201)\n\n","date":"2020-02-25 19:46:56","modifiedFileCount":"3","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-02-11 16:50:49","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":6,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<BaseRow> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-02-11 16:50:49","commitOrder":6,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-02-22 11:49:38","endLine":99,"groupId":"3471","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/17b719f4bad1177d17703c7fd9d159fe87a21c.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"f6225304d5e1a783e0048241f395da0bb64a5ddf","commitMessage":"@@@[FLINK-16996][hive] Refactor Hive connector to use new data structures\n\nThis closes #11925\n","date":"2020-04-29 14:14:46","modifiedFileCount":"8","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-05-15 18:17:44","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":7,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-15 18:17:44","commitOrder":7,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-05-18 00:48:59","endLine":97,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/0460b38888c0b2765774f6d2bba8da7f65fc39.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"547c168a8978a80072187a80d84d53d6e7f02260","commitMessage":"@@@[FLINK-14255][hive] Integrate hive to streaming file sink\n\nThis closes #12168\n","date":"2020-05-18 00:48:59","modifiedFileCount":"7","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-05-18 02:16:22","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":8,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-18 02:16:22","commitOrder":8,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-05-18 03:32:10","endLine":95,"groupId":"3471","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"770d7c7d051cd39ff204aea23d6c038728c87808","commitMessage":"@@@Revert \"[FLINK-14255][hive] Integrate hive to streaming file sink\"\n\nThis reverts commit 547c168a8978a80072187a80d84d53d6e7f02260.\n\nI'm reverting these three related commits because it is important to\nhave confidence in our testing and to clearly separate the addition of\nthe Bucket State upgrade test from changing the serializer.\n","date":"2020-05-18 03:32:10","modifiedFileCount":"7","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-05-18 12:10:58","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":9,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-18 12:10:58","commitOrder":9,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-05-18 12:10:58","endLine":97,"groupId":"0","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/0460b38888c0b2765774f6d2bba8da7f65fc39.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn createOutputFormatTableSink(context.getObjectIdentifier().toObjectPath(), table);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"1f668dd3df1a3d9bb8837c05ebdd5e473c55b1ea","commitMessage":"@@@[FLINK-14255][hive] Integrate hive with parquet and orc format to streaming file sink\n\n\nThis closes #12206","date":"2020-05-18 12:10:58","modifiedFileCount":"10","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-05-18 17:13:18","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":10,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-18 17:13:18","commitOrder":10,"curCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-05-19 12:35:58","endLine":99,"groupId":"20336","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/b16c55c3b8b030f5647bd210768530d42e219c.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"4ba1d37a14f9bd7b3596bfe8d5dbe3056bb6214f","commitMessage":"@@@[FLINK-14255][hive] Integrate mapred record writer to hive streaming sink\n\nThis closes #12220\n","date":"2020-05-19 12:35:58","modifiedFileCount":"5","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-05-25 21:42:25","codes":[{"authorDate":"2020-04-29 11:28:33","commitOrder":11,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-04-29 14:14:46","endLine":81,"groupId":"27574","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1b/149212609587bd69b934bcb99806d69a9a7c09.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-25 21:42:25","commitOrder":11,"curCode":"\tpublic TableSink createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-05-26 13:46:28","endLine":98,"groupId":"20336","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0b/b78b865358bfa72e14e662485d9955c8f71daa.src","preCode":"\tpublic TableSink<Row> createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"808c87d3ac76da2ee6c810ecf15bbcd6aee14614","commitMessage":"@@@[hotfix] Remove generic row for HiveTableFactory\n\nThis closes #12324\n","date":"2020-05-26 13:46:28","modifiedFileCount":"1","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-10-12 15:17:18","codes":[{"authorDate":"2020-10-12 15:17:18","commitOrder":12,"curCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-10-14 11:39:55","endLine":79,"groupId":"48679","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/c97d09997a2ff3a60b84ef662ce663bc7224a8.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-10-12 15:17:18","commitOrder":12,"curCode":"\tpublic TableSink createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-10-14 11:39:55","endLine":100,"groupId":"0","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ee/c97d09997a2ff3a60b84ef662ce663bc7224a8.src","preCode":"\tpublic TableSink createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\tif (!isGeneric) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"e6d7f97e63a727566125489e527f1dabb225d91e","commitMessage":"@@@[FLINK-18999][hive] Temporary generic table doesn't work with HiveCatalog\n","date":"2020-10-14 11:39:55","modifiedFileCount":"5","status":"M","submitter":"Rui Li"},{"authorTime":"2020-10-28 09:54:12","codes":[{"authorDate":"2020-10-28 09:54:12","commitOrder":13,"curCode":"\tpublic TableSource createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\tthrow new UnsupportedOperationException(\"Hive table should be resolved by HiveDynamicTableFactory.\");\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","date":"2020-10-28 09:54:12","endLine":65,"groupId":"48679","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/1f57b46fbd5908e16924dcda7049214ef7bb6c.src","preCode":"\tpublic TableSource<RowData> createTableSource(TableSourceFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\treturn new HiveTableSource(\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getConfiguration(),\n\t\t\t\t\tcontext.getObjectIdentifier().toObjectPath(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSource(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-10-28 09:54:12","commitOrder":13,"curCode":"\tpublic TableSink createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\tthrow new UnsupportedOperationException(\"Hive table should be resolved by HiveDynamicTableFactory.\");\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","date":"2020-10-28 09:54:12","endLine":80,"groupId":"48679","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bd/1f57b46fbd5908e16924dcda7049214ef7bb6c.src","preCode":"\tpublic TableSink createTableSink(TableSinkFactory.Context context) {\n\t\tCatalogTable table = checkNotNull(context.getTable());\n\t\tPreconditions.checkArgument(table instanceof CatalogTableImpl);\n\n\t\tboolean isGeneric = Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n\t\t\r\n\t\tif (!isGeneric && !context.isTemporary()) {\n\t\t\treturn new HiveTableSink(\n\t\t\t\t\tcontext.getConfiguration().get(\n\t\t\t\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_WRITER),\n\t\t\t\t\tcontext.isBounded(),\n\t\t\t\t\tnew JobConf(hiveConf),\n\t\t\t\t\tcontext.getObjectIdentifier(),\n\t\t\t\t\ttable);\n\t\t} else {\n\t\t\treturn TableFactoryUtil.findAndCreateTableSink(context);\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"0a14ad1cc47c4c6d4de0d5c90d3cd9578ca2536c","commitMessage":"@@@[FLINK-19789][hive] Migrate Hive connector to new table source sink interface\n\nThis closes #13771","date":"2020-10-28 09:54:12","modifiedFileCount":"10","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2021-01-26 18:31:20","codes":[{"authorDate":"2021-01-26 18:31:20","commitOrder":14,"curCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric = Boolean.parseBoolean(table.getOptions().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","date":"2021-02-04 23:07:04","endLine":63,"groupId":"37355","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/b3213272667c283c75199c0dc778d7eb10c661.src","preCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-01-26 18:31:20","commitOrder":14,"curCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric = Boolean.parseBoolean(table.getOptions().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","date":"2021-02-04 23:07:04","endLine":79,"groupId":"37355","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/b3213272667c283c75199c0dc778d7eb10c661.src","preCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getProperties().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"59c807e40258f70ceef009142ac55865b58dea29","commitMessage":"@@@[FLINK-21149][table-common] Remove deprecated CatalogBaseTable.getProperties()\n\nThis closes #14759.\n","date":"2021-02-04 23:07:04","modifiedFileCount":"22","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-03-05 18:21:03","codes":[{"authorDate":"2021-03-05 18:21:03","commitOrder":15,"curCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getOptions().get(CatalogPropertiesUtil.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","date":"2021-03-11 17:29:27","endLine":64,"groupId":"37355","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/28/667932a0d9cff5ba246ef2aba8c49b331703f1.src","preCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric = Boolean.parseBoolean(table.getOptions().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-03-05 18:21:03","commitOrder":15,"curCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getOptions().get(CatalogPropertiesUtil.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","date":"2021-03-11 17:29:27","endLine":81,"groupId":"37355","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/28/667932a0d9cff5ba246ef2aba8c49b331703f1.src","preCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric = Boolean.parseBoolean(table.getOptions().get(CatalogConfig.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"9035273e2cbde2296fbe3e8e03565d50594a641e","commitMessage":"@@@[hotfix][table-common] Move CatalogConfig to CatalogPropertiesUtil\n","date":"2021-03-11 17:29:27","modifiedFileCount":"19","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-04-15 09:12:16","codes":[{"authorDate":"2021-04-15 09:12:16","commitOrder":16,"curCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isHiveTable = HiveCatalog.isHiveTable(table.getOptions());\n\n        \r\n        if (isHiveTable && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Legacy TableSource for Hive is deprecated. Hive table source should be created by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","date":"2021-04-15 09:12:16","endLine":63,"groupId":"101144","id":31,"instanceNumber":1,"isCurCommit":1,"methodName":"createTableSource","params":"(TableSourceFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/99f6b1d7e173fcc3a86eca77eca36a810f2121.src","preCode":"    public TableSource createTableSource(TableSourceFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getOptions().get(CatalogPropertiesUtil.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSource(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-04-15 09:12:16","commitOrder":16,"curCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isHiveTable = HiveCatalog.isHiveTable(table.getOptions());\n\n        \r\n        if (isHiveTable && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Legacy TableSink for Hive is deprecated. Hive table sink should be created by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","date":"2021-04-15 09:12:16","endLine":79,"groupId":"101144","id":32,"instanceNumber":2,"isCurCommit":1,"methodName":"createTableSink","params":"(TableSinkFactory.Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/45/99f6b1d7e173fcc3a86eca77eca36a810f2121.src","preCode":"    public TableSink createTableSink(TableSinkFactory.Context context) {\n        CatalogTable table = checkNotNull(context.getTable());\n        Preconditions.checkArgument(table instanceof CatalogTableImpl);\n\n        boolean isGeneric =\n                Boolean.parseBoolean(table.getOptions().get(CatalogPropertiesUtil.IS_GENERIC));\n\n        \r\n        if (!isGeneric && !context.isTemporary()) {\n            throw new UnsupportedOperationException(\n                    \"Hive table should be resolved by HiveDynamicTableFactory.\");\n        } else {\n            return TableFactoryUtil.findAndCreateTableSink(context);\n        }\n    }\n","realPath":"flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"5b9e7882207357120717966d8bf7efd53c53ede5","commitMessage":"@@@[FLINK-21660][hive] Stop using is_generic to differentiate hive and flink tables (#15155)\n\n","date":"2021-04-15 09:12:16","modifiedFileCount":"24","status":"M","submitter":"Rui Li"}]
