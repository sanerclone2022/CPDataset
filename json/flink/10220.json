[{"authorTime":"2021-08-16 11:28:39","codes":[{"authorDate":"2021-08-16 11:28:39","commitOrder":1,"curCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","date":"2021-08-16 23:23:35","endLine":1013,"groupId":"29892","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertKafkaSource","params":"(ScanTableSource.ScanRuntimeProviderprovider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/75/08749cf012fe53395ac6a911d6348d8fc44a72.src","preCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"B"},{"authorDate":"2021-08-16 11:28:39","commitOrder":1,"curCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","date":"2021-08-16 23:23:35","endLine":661,"groupId":"29892","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKafkaSource","params":"(ScanTableSource.ScanRuntimeProviderprovider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/38ebc342fcf182aa435a9be76bef694e4229f8.src","preCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"B"}],"commitId":"4c8f3a7036f5aecfba88381c50b285566bcbcbd5","commitMessage":"@@@[FLINK-22914][connector/kafka] Use FLIP-27 KafkaSource in table connector\n\nThis closes #16809\n","date":"2021-08-16 23:23:35","modifiedFileCount":"5","status":"B","submitter":"Qingsheng Ren"},{"authorTime":"2021-08-16 11:28:39","codes":[{"authorDate":"2021-09-14 15:24:10","commitOrder":2,"curCode":"    private KafkaSource<?> assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n        return (KafkaSource<?>) sourceTransformation.getSource();\n    }\n","date":"2021-09-15 20:45:59","endLine":1045,"groupId":"10220","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertKafkaSource","params":"(ScanTableSource.ScanRuntimeProviderprovider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a0/cc3cfe5a5998af51fe3fa95bf4f2ff45ca9622.src","preCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1031,"status":"M"},{"authorDate":"2021-08-16 11:28:39","commitOrder":2,"curCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","date":"2021-08-16 23:23:35","endLine":661,"groupId":"10220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertKafkaSource","params":"(ScanTableSource.ScanRuntimeProviderprovider)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/38ebc342fcf182aa435a9be76bef694e4229f8.src","preCode":"    private void assertKafkaSource(ScanTableSource.ScanRuntimeProvider provider) {\n        assertThat(provider, instanceOf(DataStreamScanProvider.class));\n        final DataStreamScanProvider dataStreamScanProvider = (DataStreamScanProvider) provider;\n        final Transformation<RowData> transformation =\n                dataStreamScanProvider\n                        .produceDataStream(StreamExecutionEnvironment.createLocalEnvironment())\n                        .getTransformation();\n        assertThat(transformation, instanceOf(SourceTransformation.class));\n        SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>\n                sourceTransformation =\n                        (SourceTransformation<RowData, KafkaPartitionSplit, KafkaSourceEnumState>)\n                                transformation;\n        assertThat(sourceTransformation.getSource(), instanceOf(KafkaSource.class));\n    }\n","realPath":"flink-connectors/flink-connector-kafka/src/test/java/org/apache/flink/streaming/connectors/kafka/table/UpsertKafkaDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":648,"status":"N"}],"commitId":"f3ef860de6e82cce5c87b923a0096d0674c84ce7","commitMessage":"@@@[FLINK-24277][connector/kafka] Remove auto-generated group id in Kafka table source\n","date":"2021-09-15 20:45:59","modifiedFileCount":"3","status":"M","submitter":"Qingsheng Ren"}]
