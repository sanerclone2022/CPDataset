[{"authorTime":"2016-03-04 00:37:36","codes":[{"authorDate":"2016-02-16 01:41:15","commitOrder":2,"curCode":"\tprivate void runValidTests(AscendingTimestampExtractor<Long> extractor) {\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, -1L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\t\t\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 99999L));\n\t\t\n\t\t\n\t}\n","date":"2016-02-17 18:35:36","endLine":80,"groupId":"31222","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runValidTests","params":"(AscendingTimestampExtractor<Long>extractor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/1eeb98d0e9937c3be94717040f283ef36cc7d9.src","preCode":"\tprivate void runValidTests(AscendingTimestampExtractor<Long> extractor) {\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, -1L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\t\t\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 99999L));\n\t\t\n\t\t\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/AscendingTimestampExtractorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"},{"authorDate":"2016-03-04 00:37:36","commitOrder":2,"curCode":"\tprivate void runValidTests(BoundedOutOfOrdernessTimestampExtractor<Long> extractor) {\n\t\tassertEquals(new Watermark(Long.MIN_VALUE), extractor.getCurrentWatermark());\n\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\n\t\tassertEquals(new Watermark(10L), extractor.getCurrentWatermark());\n\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\n\t\tassertEquals(new Watermark(490L), extractor.getCurrentWatermark());\n\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 0L));\n\t\tassertEquals(new Watermark(Long.MAX_VALUE - 11), extractor.getCurrentWatermark());\n\t}\n","date":"2016-04-28 21:48:20","endLine":82,"groupId":"42667","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runValidTests","params":"(BoundedOutOfOrdernessTimestampExtractor<Long>extractor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/a3812ac4ffb83ca3b27d31fedcf07b7489b181.src","preCode":"\tprivate void runValidTests(BoundedOutOfOrdernessTimestampExtractor<Long> extractor) {\n\t\tassertEquals(new Watermark(Long.MIN_VALUE), extractor.getCurrentWatermark());\n\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\n\t\tassertEquals(new Watermark(10L), extractor.getCurrentWatermark());\n\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\n\t\tassertEquals(new Watermark(490L), extractor.getCurrentWatermark());\n\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 0L));\n\t\tassertEquals(new Watermark(Long.MAX_VALUE - 11), extractor.getCurrentWatermark());\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/BoundedOutOfOrdernessTimestampExtractorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"6225aa6fbdc742f23770ba1f373c7a0f9e7e32d7","commitMessage":"@@@[FLINK-3428] Adds a fixed time trailing watermark extractor.\n\nThis closes #1764\n","date":"2016-04-28 21:48:20","modifiedFileCount":"6","status":"M","submitter":"kl0u"},{"authorTime":"2021-02-10 03:57:00","codes":[{"authorDate":"2016-02-16 01:41:15","commitOrder":3,"curCode":"\tprivate void runValidTests(AscendingTimestampExtractor<Long> extractor) {\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, -1L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\t\t\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 99999L));\n\t\t\n\t\t\n\t}\n","date":"2016-02-17 18:35:36","endLine":80,"groupId":"103108","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runValidTests","params":"(AscendingTimestampExtractor<Long>extractor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/1eeb98d0e9937c3be94717040f283ef36cc7d9.src","preCode":"\tprivate void runValidTests(AscendingTimestampExtractor<Long> extractor) {\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, -1L));\n\t\tassertEquals(13L, extractor.extractTimestamp(13L, 0L));\n\t\tassertEquals(14L, extractor.extractTimestamp(14L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\t\tassertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\t\t\n\t\tassertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 99999L));\n\t\t\n\t\t\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/AscendingTimestampExtractorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2021-02-10 03:57:00","commitOrder":3,"curCode":"    private void runValidTests(BoundedOutOfOrdernessTimestampExtractor<Long> extractor) {\n        assertEquals(Watermark.UNINITIALIZED, extractor.getCurrentWatermark());\n\n        assertEquals(13L, extractor.extractTimestamp(13L, 0L));\n        assertEquals(13L, extractor.extractTimestamp(13L, 0L));\n        assertEquals(14L, extractor.extractTimestamp(14L, 0L));\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\n        assertEquals(new Watermark(10L), extractor.getCurrentWatermark());\n\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n        assertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\n        assertEquals(new Watermark(490L), extractor.getCurrentWatermark());\n\n        assertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 0L));\n        assertEquals(new Watermark(Long.MAX_VALUE - 11), extractor.getCurrentWatermark());\n    }\n","date":"2021-03-12 02:16:01","endLine":84,"groupId":"103108","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"runValidTests","params":"(BoundedOutOfOrdernessTimestampExtractor<Long>extractor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f0/8b7d2054b51cba6ca64ed43e7ba881f3801cbf.src","preCode":"    private void runValidTests(BoundedOutOfOrdernessTimestampExtractor<Long> extractor) {\n        assertEquals(new Watermark(Long.MIN_VALUE), extractor.getCurrentWatermark());\n\n        assertEquals(13L, extractor.extractTimestamp(13L, 0L));\n        assertEquals(13L, extractor.extractTimestamp(13L, 0L));\n        assertEquals(14L, extractor.extractTimestamp(14L, 0L));\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n\n        assertEquals(new Watermark(10L), extractor.getCurrentWatermark());\n\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n        assertEquals(20L, extractor.extractTimestamp(20L, 0L));\n        assertEquals(500L, extractor.extractTimestamp(500L, 0L));\n\n        assertEquals(new Watermark(490L), extractor.getCurrentWatermark());\n\n        assertEquals(Long.MAX_VALUE - 1, extractor.extractTimestamp(Long.MAX_VALUE - 1, 0L));\n        assertEquals(new Watermark(Long.MAX_VALUE - 11), extractor.getCurrentWatermark());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/BoundedOutOfOrdernessTimestampExtractorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"c0405bd88e4ce3a678f7d1675bdeff2e7ef0cf25","commitMessage":"@@@[FLINK-19801][streaming] Adding Watermark#UNINITIALIZED.\n\nThis special watermark can be used to reflect the state of an subtask/gate/channel that hasn't received a watermark yet. It will be used in later rescaling recovery commits.\n","date":"2021-03-12 02:16:01","modifiedFileCount":"2","status":"M","submitter":"Arvid Heise"}]
