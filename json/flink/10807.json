[{"authorTime":"2020-06-09 10:47:15","codes":[{"authorDate":"2020-06-09 10:47:15","commitOrder":1,"curCode":"\tpublic void testDefaultConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch7Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(null));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","date":"2020-06-11 17:02:46","endLine":115,"groupId":"2998","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/c3135fa93cdc43f65a66dd0fc3c1ec9e5698f1.src","preCode":"\tpublic void testDefaultConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch7DynamicSink testSink = new Elasticsearch7DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch7Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(null));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2020-06-09 10:47:15","commitOrder":1,"curCode":"\tpublic void testDefaultConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch6Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(null));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","date":"2020-06-11 17:02:46","endLine":115,"groupId":"2998","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/36/d8f6df777e985a63b08fb42630749cad634b7b.src","preCode":"\tpublic void testDefaultConfig() {\n\t\tfinal TableSchema schema = createTestSchema();\n\t\tConfiguration configuration = new Configuration();\n\t\tconfiguration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n\t\tconfiguration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n\t\tconfiguration.setString(ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n\t\tBuilderProvider provider = new BuilderProvider();\n\t\tfinal Elasticsearch6DynamicSink testSink = new Elasticsearch6DynamicSink(\n\t\t\tnew DummyEncodingFormat(),\n\t\t\tnew Elasticsearch6Configuration(configuration, this.getClass().getClassLoader()),\n\t\t\tschema,\n\t\t\tprovider\n\t\t);\n\n\t\ttestSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n\t\tverify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n\t\tverify(provider.builderSpy).setBulkFlushBackoff(false);\n\t\tverify(provider.builderSpy).setBulkFlushInterval(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxActions(1000);\n\t\tverify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n\t\tverify(provider.builderSpy).setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(null));\n\t\tverify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"}],"commitId":"3d764dc7b21dde54e0bcd61e51546daa77ce3f12","commitMessage":"@@@[FLINK-16495][elasticsearch][table] Improve default flush strategy for new Elasticsearch sink for better out-of-box\n\nThe default flush strategy for old Elasticsearch sink is no flush interval and 5MB buffered size and 1000 rows.\nThe new default flush strategy for new Elasticsearch sink is '1s' flush interval and '1000' buffered rows and '2mb' buffered size.\n\nThis closes #12536\n","date":"2020-06-11 17:02:46","modifiedFileCount":"12","status":"B","submitter":"Jark Wu"},{"authorTime":"2021-06-30 16:32:46","codes":[{"authorDate":"2021-06-30 16:32:46","commitOrder":2,"curCode":"    public void testDefaultConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchConnectorOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchConnectorOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch7DynamicSink testSink =\n                new Elasticsearch7DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch7Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(null));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","date":"2021-07-12 18:56:17","endLine":123,"groupId":"10807","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/54/c75741fa5c6df8ae6b5bd30db0ec388400666a.src","preCode":"    public void testDefaultConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch7DynamicSink testSink =\n                new Elasticsearch7DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch7Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(new Elasticsearch7DynamicSink.DefaultRestClientFactory(null));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-06-30 16:32:46","commitOrder":2,"curCode":"    public void testDefaultConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchConnectorOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchConnectorOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchConnectorOptions.HOSTS_OPTION.key(),\n                SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch6DynamicSink testSink =\n                new Elasticsearch6DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch6Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(null));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","date":"2021-07-12 18:56:17","endLine":123,"groupId":"10807","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/54222e06380a48a3a6176d8b2c882743001fba.src","preCode":"    public void testDefaultConfig() {\n        final TableSchema schema = createTestSchema();\n        Configuration configuration = new Configuration();\n        configuration.setString(ElasticsearchOptions.INDEX_OPTION.key(), INDEX);\n        configuration.setString(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), DOC_TYPE);\n        configuration.setString(\n                ElasticsearchOptions.HOSTS_OPTION.key(), SCHEMA + \"://\" + HOSTNAME + \":\" + PORT);\n\n        BuilderProvider provider = new BuilderProvider();\n        final Elasticsearch6DynamicSink testSink =\n                new Elasticsearch6DynamicSink(\n                        new DummyEncodingFormat(),\n                        new Elasticsearch6Configuration(\n                                configuration, this.getClass().getClassLoader()),\n                        schema,\n                        provider);\n\n        testSink.getSinkRuntimeProvider(new MockSinkContext()).createSinkFunction();\n\n        verify(provider.builderSpy).setFailureHandler(new NoOpFailureHandler());\n        verify(provider.builderSpy).setBulkFlushBackoff(false);\n        verify(provider.builderSpy).setBulkFlushInterval(1000);\n        verify(provider.builderSpy).setBulkFlushMaxActions(1000);\n        verify(provider.builderSpy).setBulkFlushMaxSizeMb(2);\n        verify(provider.builderSpy)\n                .setRestClientFactory(new Elasticsearch6DynamicSink.DefaultRestClientFactory(null));\n        verify(provider.sinkSpy, never()).disableFlushOnCheckpoint();\n    }\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"2dbb3de221339edf120dac3fbbd6e13c3e54af11","commitMessage":"@@@[FLINK-23064][connector-elasticsearch] Make connector options PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"11","status":"M","submitter":"Ingo B?rk"}]
