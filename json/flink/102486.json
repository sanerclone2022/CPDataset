[{"authorTime":"2019-11-01 18:52:15","codes":[{"authorDate":"2019-11-01 18:52:15","commitOrder":1,"curCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2019-11-17 13:47:17","endLine":906,"groupId":"4256","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/710e30767d028b79587eaa50b9b13ae9456c92.src","preCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":897,"status":"B"},{"authorDate":"2019-11-01 18:52:15","commitOrder":1,"curCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal Runnable completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2019-11-17 13:47:17","endLine":929,"groupId":"21965","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/710e30767d028b79587eaa50b9b13ae9456c92.src","preCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal Runnable completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"B"}],"commitId":"2c8b4ef572f05bf4740b7e204af1e5e709cd945c","commitMessage":"@@@[FLINK-14553][runtime] Respect non-blocking output in StreamTask#processInput\n\nThe non-blocking output was introduced in FLINK-14396 and FLINK-14498 to solve the problem of handling the checkpoint barrier in the case of backpressure.\n\nIn order to make the whole process through.  StreamInputProcessor should be allowed to process input elements if the output is also available.\n\nThe default core size of LocalBufferPool for ResultPartition should also be increased by 1 in order not to cause stuck problem and impact the performance. \nand this tiny memory overhead could be ignored in practice.\n","date":"2019-11-17 13:47:17","modifiedFileCount":"15","status":"B","submitter":"Zhijiang"},{"authorTime":"2019-11-27 20:39:15","codes":[{"authorDate":"2019-11-01 18:52:15","commitOrder":2,"curCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2019-11-17 13:47:17","endLine":906,"groupId":"4256","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/710e30767d028b79587eaa50b9b13ae9456c92.src","preCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":897,"status":"N"},{"authorDate":"2019-11-27 20:39:15","commitOrder":2,"curCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal RunnableWithException completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2019-12-03 21:24:00","endLine":894,"groupId":"46563","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1e/64718cdb5ff9eb14d1a5f7383d20029a63e5a1.src","preCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal Runnable completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":874,"status":"M"}],"commitId":"c41e0879160e4e3088abe6496d3827d479d802df","commitMessage":"@@@[FLINK-14935][task. runtime] Use RunnableWithException in the Mailbox\n\nThis allows mailbox action to throw an exception.\n","date":"2019-12-03 21:24:00","modifiedFileCount":"11","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-03-20 13:14:35","codes":[{"authorDate":"2020-03-20 13:14:35","commitOrder":3,"curCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":983,"groupId":"23305","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"},{"authorDate":"2020-03-20 13:14:35","commitOrder":3,"curCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal RunnableWithException completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":1008,"groupId":"45095","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testProcessWithUnAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal AvailabilityTestStreamTask task = new AvailabilityTestStreamTask<>(environment, inputProcessor);\n\t\t\tfinal MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n\t\t\tfinal RunnableWithException completeFutureTask = () -> {\n\t\t\t\tassertEquals(1, inputProcessor.currentNumProcessCalls);\n\t\t\t\tassertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n\t\t\t\tenvironment.getWriter(1).getAvailableFuture().complete(null);\n\t\t\t};\n\n\t\t\texecutor.submit(() -> {\n\t\t\t\texecutor.submit(completeFutureTask, \"This task will complete the future to resume process input action.\"); },\n\t\t\t\t\"This task will submit another task to execute after processing input once.\");\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":986,"status":"M"}],"commitId":"7dafd1cd65ba8977d923482a810c907ed7d37b59","commitMessage":"@@@[FLINK-16690][tests] Refactor StreamTaskTest to reuse TestTaskBuilder and MockStreamTaskBuilder\n\nThis closes #11459\n","date":"2020-03-21 22:10:58","modifiedFileCount":"5","status":"M","submitter":"Zhijiang"},{"authorTime":"2020-12-31 00:43:10","codes":[{"authorDate":"2020-03-20 13:14:35","commitOrder":4,"curCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":983,"groupId":"23305","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"N"},{"authorDate":"2020-12-31 00:43:10","commitOrder":4,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTime = 42;\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        Thread.sleep(sleepTime + 1);\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            executor.submit(\n                    () -> {\n                        executor.submit(\n                                completeFutureTask,\n                                \"This task will complete the future to resume process input action.\");\n                    },\n                    \"This task will submit another task to execute after processing input once.\");\n\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTime));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-06 15:49:23","endLine":1282,"groupId":"30055","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ff/cf60334b942c10730f21fe6a4c9b6aced55d43.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            executor.submit(\n                    () -> {\n                        executor.submit(\n                                completeFutureTask,\n                                \"This task will complete the future to resume process input action.\");\n                    },\n                    \"This task will submit another task to execute after processing input once.\");\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1245,"status":"M"}],"commitId":"9c68f02c5635b1e2e426a8da52c23c84d0bf4fdf","commitMessage":"@@@[FLINK-20717][metrics] Provide new backPressuredTimeMsPerSecond metric\n","date":"2021-01-06 15:49:23","modifiedFileCount":"8","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-01-06 21:57:53","codes":[{"authorDate":"2020-03-20 13:14:35","commitOrder":5,"curCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","date":"2020-03-21 22:10:58","endLine":983,"groupId":"23305","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/16/28e4c055d7ba6e22b7b27cd747adb6bf9334aa.src","preCode":"\tpublic void testProcessWithAvailableOutput() throws Exception {\n\t\ttry (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n\t\t\tfinal int numberOfProcessCalls = 10;\n\t\t\tfinal AvailabilityTestInputProcessor inputProcessor = new AvailabilityTestInputProcessor(numberOfProcessCalls);\n\t\t\tfinal StreamTask task = new MockStreamTaskBuilder(environment)\n\t\t\t\t.setStreamInputProcessor(inputProcessor)\n\t\t\t\t.build();\n\n\t\t\ttask.invoke();\n\t\t\tassertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"N"},{"authorDate":"2021-01-06 21:57:53","commitOrder":5,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            \r\n            executor.submit(\n                    () ->\n                            new WaitingThread(\n                                            executor,\n                                            completeFutureTask,\n                                            sleepTimeInsideMail,\n                                            sleepTimeOutsideMail)\n                                    .start(),\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1340,"groupId":"45095","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cd/1e24c86b098575a772e02de407beac2b2dccf2.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTime = 42;\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        Thread.sleep(sleepTime + 1);\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            executor.submit(\n                    () -> {\n                        executor.submit(\n                                completeFutureTask,\n                                \"This task will complete the future to resume process input action.\");\n                    },\n                    \"This task will submit another task to execute after processing input once.\");\n\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTime));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"M"}],"commitId":"2931750f1219be6ee8136f1a0794175a574d170c","commitMessage":"@@@[FLINK-20868][task][metrics] Pause the idle/back pressure timers during processing mailbox actions\n\nFLINK-20717 introduced a bug.  where any time spent on processing mails.  when task is idle or\nback pressured.  will be accounted to idle or back pressured time instead of the busy time.\n\nThe fix is to assign idle or back pressure timer to the suspenssion marker and pause this\ntimer when MailboxProcessor is running mails.\n","date":"2021-01-08 01:37:37","modifiedFileCount":"5","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-01-07 18:43:00","codes":[{"authorDate":"2021-01-07 18:43:00","commitOrder":6,"curCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1242,"groupId":"23305","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/207a773082e253683abdcad36182856edbe355.src","preCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, true})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"M"},{"authorDate":"2021-01-07 18:43:00","commitOrder":6,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail);\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1346,"groupId":"22565","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/207a773082e253683abdcad36182856edbe355.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        try (final MockEnvironment environment = setupEnvironment(new boolean[] {true, false})) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            \r\n            executor.submit(\n                    () ->\n                            new WaitingThread(\n                                            executor,\n                                            completeFutureTask,\n                                            sleepTimeInsideMail,\n                                            sleepTimeOutsideMail)\n                                    .start(),\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1295,"status":"M"}],"commitId":"93a88a59a84015edf9e6f8d68dabed7ebd3aed18","commitMessage":"@@@[hotfix][test] Use varargs in StreamTaskTest#setupEnvironment\n","date":"2021-01-08 01:37:37","modifiedFileCount":"1","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-02-08 18:42:01","codes":[{"authorDate":"2021-01-07 18:43:00","commitOrder":7,"curCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1242,"groupId":"23305","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/207a773082e253683abdcad36182856edbe355.src","preCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"N"},{"authorDate":"2021-02-08 18:42:01","commitOrder":7,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail,\n                            ioMetricGroup.getBackPressuredTimePerSecond());\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","date":"2021-02-09 16:30:58","endLine":1451,"groupId":"6964","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/f1585493fee9990abe4b5427f7d8da319fc193.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail);\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1398,"status":"M"}],"commitId":"10f4ed0579eaf4f079008a16d7bf6300de3d4e09","commitMessage":"@@@[FLINK-20957][task][tests] Make sure we enter the measured sleep after the Task thread started measuring backPressure/idle time\n\nMake sure that the Task thread actually starts measuring the backpressure before\nwe start the measured sleep. The WaitingThread is started from within the mailbox\nso we should first wait until mailbox loop starts idling before we enter the\nmeasured sleep\n\nBug was easy to reproduce/verify after modifying `WaitingThread` starting sequence from:\n```\nexecutor.submit(\n  waitingThread::start. \n  \"This task will submit another task to execute after processing input once.\");\n```\nto:\n```\nexecutor.submit(() -> {\n    waitingThread.start();\n    Thread.sleep(10);\n  }. \n  \"This task will submit another task to execute after processing input once.\");\n```\n","date":"2021-02-09 16:30:58","modifiedFileCount":"2","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2021-07-28 00:41:07","codes":[{"authorDate":"2021-01-07 18:43:00","commitOrder":8,"curCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1242,"groupId":"23305","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/207a773082e253683abdcad36182856edbe355.src","preCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"N"},{"authorDate":"2021-07-28 00:41:07","commitOrder":8,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail,\n                            ioMetricGroup.getBackPressuredTimePerSecond());\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","date":"2021-07-29 20:01:28","endLine":1513,"groupId":"6964","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/db/c2f25c565c3b8632fe4e9b276f8433958bf103.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail,\n                            ioMetricGroup.getBackPressuredTimePerSecond());\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1460,"status":"M"}],"commitId":"230f659e790785fd6b8b7660a0bfee5807718b0b","commitMessage":"@@@[FLINK-23452][streaming] Integration ThroughputCalculator in StreamTask for the calculation of the subtask level throughput\n","date":"2021-07-29 20:01:28","modifiedFileCount":"14","status":"M","submitter":"Anton Kalashnikov"},{"authorTime":"2021-08-26 23:12:25","codes":[{"authorDate":"2021-01-07 18:43:00","commitOrder":9,"curCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","date":"2021-01-08 01:37:37","endLine":1242,"groupId":"102486","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessWithAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/207a773082e253683abdcad36182856edbe355.src","preCode":"    public void testProcessWithAvailableOutput() throws Exception {\n        try (final MockEnvironment environment = setupEnvironment(true, true)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n\n            task.invoke();\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"N"},{"authorDate":"2021-08-26 23:12:25","commitOrder":9,"curCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertFalse(task.mailboxProcessor.isDefaultActionAvailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail,\n                            ioMetricGroup.getBackPressuredTimePerSecond());\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","date":"2021-08-27 16:00:15","endLine":1504,"groupId":"102486","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessWithUnAvailableOutput","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e3/8c459af793a415caf85107121d05e04b69b788.src","preCode":"    public void testProcessWithUnAvailableOutput() throws Exception {\n        final long sleepTimeOutsideMail = 42;\n        final long sleepTimeInsideMail = 44;\n\n        @Nullable WaitingThread waitingThread = null;\n        try (final MockEnvironment environment = setupEnvironment(true, false)) {\n            final int numberOfProcessCalls = 10;\n            final AvailabilityTestInputProcessor inputProcessor =\n                    new AvailabilityTestInputProcessor(numberOfProcessCalls);\n            final StreamTask task =\n                    new MockStreamTaskBuilder(environment)\n                            .setStreamInputProcessor(inputProcessor)\n                            .build();\n            final MailboxExecutor executor = task.mailboxProcessor.getMainMailboxExecutor();\n            TaskIOMetricGroup ioMetricGroup =\n                    task.getEnvironment().getMetricGroup().getIOMetricGroup();\n\n            final RunnableWithException completeFutureTask =\n                    () -> {\n                        assertEquals(1, inputProcessor.currentNumProcessCalls);\n                        assertTrue(task.mailboxProcessor.isDefaultActionUnavailable());\n                        environment.getWriter(1).getAvailableFuture().complete(null);\n                    };\n\n            waitingThread =\n                    new WaitingThread(\n                            executor,\n                            completeFutureTask,\n                            sleepTimeInsideMail,\n                            sleepTimeOutsideMail,\n                            ioMetricGroup.getBackPressuredTimePerSecond());\n            \r\n            executor.submit(\n                    waitingThread::start,\n                    \"This task will submit another task to execute after processing input once.\");\n\n            long startTs = System.currentTimeMillis();\n\n            task.invoke();\n            long totalDuration = System.currentTimeMillis() - startTs;\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    greaterThanOrEqualTo(sleepTimeOutsideMail));\n            assertThat(\n                    ioMetricGroup.getBackPressuredTimePerSecond().getCount(),\n                    Matchers.lessThanOrEqualTo(totalDuration - sleepTimeInsideMail));\n            assertThat(ioMetricGroup.getIdleTimeMsPerSecond().getCount(), is(0L));\n            assertEquals(numberOfProcessCalls, inputProcessor.currentNumProcessCalls);\n        } finally {\n            if (waitingThread != null) {\n                waitingThread.join();\n            }\n        }\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"M"}],"commitId":"93292a64d10e01d66735843d26a82890628172f3","commitMessage":"@@@[hotfix][runtime] Invert MailboxProcessor#isDefaultUnactionAvailable to MailboxProcessor#isDefaultActionAvailable\n","date":"2021-08-27 16:00:15","modifiedFileCount":"4","status":"M","submitter":"Fabian Paul"}]
