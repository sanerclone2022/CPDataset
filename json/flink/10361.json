[{"authorTime":"2021-08-16 18:08:31","codes":[{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n\n        return topics.parallelStream()\n                .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                .filter(Objects::nonNull)\n                .flatMap(\n                        metadata ->\n                                toTopicPartitions(metadata, parallelism, rangeGenerator).stream())\n                .collect(toSet());\n    }\n","date":"2021-08-17 05:35:59","endLine":53,"groupId":"6969","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSubscribedTopicPartitions","params":"(PulsarAdminpulsarAdmin@RangeGeneratorrangeGenerator@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/51/95fc7a2a8535b0f6a1979c26fde51b67cf9407.src","preCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n\n        return topics.parallelStream()\n                .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                .filter(Objects::nonNull)\n                .flatMap(\n                        metadata ->\n                                toTopicPartitions(metadata, parallelism, rangeGenerator).stream())\n                .collect(toSet());\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/impl/TopicListSubscriber.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2021-08-16 18:08:31","commitOrder":1,"curCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n        try {\n            return pulsarAdmin\n                    .namespaces()\n                    .getTopics(namespace)\n                    .parallelStream()\n                    .filter(this::matchesSubscriptionMode)\n                    .filter(topic -> topicPattern.matcher(topic).find())\n                    .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                    .filter(Objects::nonNull)\n                    .flatMap(\n                            metadata ->\n                                    toTopicPartitions(metadata, parallelism, rangeGenerator)\n                                            .stream())\n                    .collect(toSet());\n        } catch (PulsarAdminException e) {\n            if (e.getStatusCode() == 404) {\n                \r\n                return Collections.emptySet();\n            } else {\n                \r\n                throw new IllegalStateException(e);\n            }\n        }\n    }\n","date":"2021-08-17 05:35:59","endLine":82,"groupId":"6969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSubscribedTopicPartitions","params":"(PulsarAdminpulsarAdmin@RangeGeneratorrangeGenerator@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dd/520e41505126ea07b7f90ded054ed3bb7425e0.src","preCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n        try {\n            return pulsarAdmin\n                    .namespaces()\n                    .getTopics(namespace)\n                    .parallelStream()\n                    .filter(this::matchesSubscriptionMode)\n                    .filter(topic -> topicPattern.matcher(topic).find())\n                    .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                    .filter(Objects::nonNull)\n                    .flatMap(\n                            metadata ->\n                                    toTopicPartitions(metadata, parallelism, rangeGenerator)\n                                            .stream())\n                    .collect(toSet());\n        } catch (PulsarAdminException e) {\n            if (e.getStatusCode() == 404) {\n                \r\n                return Collections.emptySet();\n            } else {\n                \r\n                throw new IllegalStateException(e);\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/impl/TopicPatternSubscriber.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"c675f786c51038801161e861826d1c54654f0dde","commitMessage":"@@@[FLINK-20731] Introduce new pulsar source connector for flink.\n","date":"2021-08-17 05:35:59","modifiedFileCount":"3","status":"B","submitter":"Yufan Sheng"},{"authorTime":"2021-09-03 15:45:04","codes":[{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n\n        return topics.parallelStream()\n                .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                .filter(Objects::nonNull)\n                .flatMap(\n                        metadata -> {\n                            List<TopicRange> ranges = rangeGenerator.range(metadata, parallelism);\n                            return toTopicPartitions(metadata, ranges).stream();\n                        })\n                .collect(toSet());\n    }\n","date":"2021-09-08 22:00:28","endLine":56,"groupId":"10361","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getSubscribedTopicPartitions","params":"(PulsarAdminpulsarAdmin@RangeGeneratorrangeGenerator@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/5617ebe5006db28e3ce08f5538f219831936c0.src","preCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n\n        return topics.parallelStream()\n                .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                .filter(Objects::nonNull)\n                .flatMap(\n                        metadata ->\n                                toTopicPartitions(metadata, parallelism, rangeGenerator).stream())\n                .collect(toSet());\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/impl/TopicListSubscriber.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-09-03 15:45:04","commitOrder":2,"curCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n        try {\n            return pulsarAdmin\n                    .namespaces()\n                    .getTopics(namespace)\n                    .parallelStream()\n                    .filter(this::matchesSubscriptionMode)\n                    .filter(topic -> topicPattern.matcher(topic).find())\n                    .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                    .filter(Objects::nonNull)\n                    .flatMap(\n                            metadata -> {\n                                List<TopicRange> ranges =\n                                        rangeGenerator.range(metadata, parallelism);\n                                return toTopicPartitions(metadata, ranges).stream();\n                            })\n                    .collect(toSet());\n        } catch (PulsarAdminException e) {\n            if (e.getStatusCode() == 404) {\n                \r\n                return Collections.emptySet();\n            } else {\n                \r\n                throw new IllegalStateException(e);\n            }\n        }\n    }\n","date":"2021-09-08 22:00:28","endLine":86,"groupId":"10361","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getSubscribedTopicPartitions","params":"(PulsarAdminpulsarAdmin@RangeGeneratorrangeGenerator@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/47/2dbde3e352b22eac507e5bb7c420d59777bed4.src","preCode":"    public Set<TopicPartition> getSubscribedTopicPartitions(\n            PulsarAdmin pulsarAdmin, RangeGenerator rangeGenerator, int parallelism) {\n        try {\n            return pulsarAdmin\n                    .namespaces()\n                    .getTopics(namespace)\n                    .parallelStream()\n                    .filter(this::matchesSubscriptionMode)\n                    .filter(topic -> topicPattern.matcher(topic).find())\n                    .map(topic -> queryTopicMetadata(pulsarAdmin, topic))\n                    .filter(Objects::nonNull)\n                    .flatMap(\n                            metadata ->\n                                    toTopicPartitions(metadata, parallelism, rangeGenerator)\n                                            .stream())\n                    .collect(toSet());\n        } catch (PulsarAdminException e) {\n            if (e.getStatusCode() == 404) {\n                \r\n                return Collections.emptySet();\n            } else {\n                \r\n                throw new IllegalStateException(e);\n            }\n        }\n    }\n","realPath":"flink-connectors/flink-connector-pulsar/src/main/java/org/apache/flink/connector/pulsar/source/enumerator/subscriber/impl/TopicPatternSubscriber.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"1ca7353b8f91cee62bd78e24fd5af346fe5220ec","commitMessage":"@@@[FLINK-23848][connector/pulsar] Fix the consumer not found.\n","date":"2021-09-08 22:00:28","modifiedFileCount":"23","status":"M","submitter":"Yufan Sheng"}]
