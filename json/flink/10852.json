[{"authorTime":"2020-05-16 02:06:46","codes":[{"authorDate":"2020-06-09 16:40:16","commitOrder":2,"curCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-06-09 19:27:39","endLine":132,"groupId":"11283","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch7Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/0c894b257cb059b02c4883920e5ac6e00ccc33.src","preCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2020-05-16 02:06:46","commitOrder":2,"curCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-05-17 22:34:47","endLine":133,"groupId":"11283","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch6Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/c90b5ebfe63930ee1ff394beaca1f6bba45e16.src","preCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"NB"}],"commitId":"bed750f0d5fd8e161f27edf979dd8961158699c1","commitMessage":"@@@[FLINK-18208] Fix flink ES connector typos\n\nThis closes #12543\n","date":"2020-06-09 19:27:39","modifiedFileCount":"2","status":"M","submitter":"liuyongvs"},{"authorTime":"2020-06-09 10:47:15","codes":[{"authorDate":"2020-06-09 10:47:15","commitOrder":3,"curCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-06-11 17:02:46","endLine":135,"groupId":"39409","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch7Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/e2cfbcf8aecc0634024ed4343fae53b04bad3f.src","preCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-06-09 10:47:15","commitOrder":3,"curCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-06-11 17:02:46","endLine":136,"groupId":"39409","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch6Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/07/1bbb6a48f72b6bab382123423f3e7912106103.src","preCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxActions().map(maxActions -> maxActions >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushMaxActions().get())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushMaxSize().map(maxSize -> maxSize >= 1024 * 1024).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1mb character. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"3d764dc7b21dde54e0bcd61e51546daa77ce3f12","commitMessage":"@@@[FLINK-16495][elasticsearch][table] Improve default flush strategy for new Elasticsearch sink for better out-of-box\n\nThe default flush strategy for old Elasticsearch sink is no flush interval and 5MB buffered size and 1000 rows.\nThe new default flush strategy for new Elasticsearch sink is '1s' flush interval and '1000' buffered rows and '2mb' buffered size.\n\nThis closes #12536\n","date":"2020-06-11 17:02:46","modifiedFileCount":"12","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-29 16:56:34","codes":[{"authorDate":"2020-06-29 16:56:34","commitOrder":4,"curCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-07-07 15:26:08","endLine":135,"groupId":"39409","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch7Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/081880ef89856ffb833dc39eeb7ce0e55a8095.src","preCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-06-29 16:56:34","commitOrder":4,"curCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","date":"2020-07-07 15:26:08","endLine":136,"groupId":"39409","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch6Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/70/b8d38b2ce9a61dfe8c1360851300d172f7259a.src","preCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1 character. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"9cfd8b1c8a42f9559c2272d7f440b903d5f4dd75","commitMessage":"@@@[hotfix][elasticsearch] Fix validation message for 'sink.bulk-flush.max-actions' of Elasticsearch\n\nThis closes #12790\n","date":"2020-07-07 15:26:08","modifiedFileCount":"4","status":"M","submitter":"liuyongvs"},{"authorTime":"2020-07-10 16:41:08","codes":[{"authorDate":"2020-07-10 16:41:08","commitOrder":5,"curCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t\tif (config.getUsername().isPresent() && !StringUtils.isNullOrWhitespaceOnly(config.getUsername().get())) {\n\t\t\tvalidate(\n\t\t\t\tconfig.getPassword().isPresent() && !StringUtils.isNullOrWhitespaceOnly(config.getPassword().get()),\n\t\t\t\t() -> String.format(\n\t\t\t\t\t\"'%s' and '%s' must be set at the same time. Got: username '%s' and password '%s'\",\n\t\t\t\t\tUSERNAME_OPTION.key(),\n\t\t\t\t\tPASSWORD_OPTION.key(),\n\t\t\t\t\tconfig.getUsername().get(),\n\t\t\t\t\tconfig.getPassword().orElse(\"\")\n\t\t\t\t));\n\t\t}\n\t}\n","date":"2020-07-10 16:41:08","endLine":151,"groupId":"10852","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch7Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a6/8a0efa9f0255f1b8950b35c850ae77defcb796.src","preCode":"\tprivate void validate(Elasticsearch7Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-07-10 16:41:08","commitOrder":5,"curCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t\tif (config.getUsername().isPresent() && !StringUtils.isNullOrWhitespaceOnly(config.getUsername().get())) {\n\t\t\tvalidate(\n\t\t\t\tconfig.getPassword().isPresent() && !StringUtils.isNullOrWhitespaceOnly(config.getPassword().get()),\n\t\t\t\t() -> String.format(\n\t\t\t\t\t\"'%s' and '%s' must be set at the same time. Got: username '%s' and password '%s'\",\n\t\t\t\t\tUSERNAME_OPTION.key(),\n\t\t\t\t\tPASSWORD_OPTION.key(),\n\t\t\t\t\tconfig.getUsername().get(),\n\t\t\t\t\tconfig.getPassword().orElse(\"\")\n\t\t\t\t));\n\t\t}\n\t}\n","date":"2020-07-10 16:41:08","endLine":152,"groupId":"10852","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validate","params":"(Elasticsearch6Configurationconfig@ConfigurationoriginalConfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5f/b576979a53748f0a3b037d34eebc6a183f9d11.src","preCode":"\tprivate void validate(Elasticsearch6Configuration config, Configuration originalConfiguration) {\n\t\tconfig.getFailureHandler(); \r\n\t\tconfig.getHosts(); \r\n\t\tvalidate(\n\t\t\tconfig.getIndex().length() >= 1,\n\t\t\t() -> String.format(\"'%s' must not be empty\", INDEX_OPTION.key()));\n\t\tint maxActions = config.getBulkFlushMaxActions();\n\t\tvalidate(\n\t\t\tmaxActions == -1 || maxActions >= 1,\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_MAX_ACTIONS_OPTION.key(),\n\t\t\t\tmaxActions)\n\t\t);\n\t\tlong maxSize = config.getBulkFlushMaxByteSize();\n\t\tlong mb1 = 1024 * 1024;\n\t\tvalidate(\n\t\t\tmaxSize == -1 || (maxSize >= mb1 && maxSize % mb1 == 0),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be in MB granularity. Got: %s\",\n\t\t\t\tBULK_FLASH_MAX_SIZE_OPTION.key(),\n\t\t\t\toriginalConfiguration.get(BULK_FLASH_MAX_SIZE_OPTION).toHumanReadableString())\n\t\t);\n\t\tvalidate(\n\t\t\tconfig.getBulkFlushBackoffRetries().map(retries -> retries >= 1).orElse(true),\n\t\t\t() -> String.format(\n\t\t\t\t\"'%s' must be at least 1. Got: %s\",\n\t\t\t\tBULK_FLUSH_BACKOFF_MAX_RETRIES_OPTION.key(),\n\t\t\t\tconfig.getBulkFlushBackoffRetries().get())\n\t\t);\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"ee653778689023ddfdf007d5bde1daad8fbbc081","commitMessage":"@@@[FLINK-18361][es][table] Support username and password options for new Elasticsearch connector\n\nCo-authored-by: zhisheng17 <zhisheng2018@gmail.com>\n\nThis closes #12715","date":"2020-07-10 16:41:08","modifiedFileCount":"10","status":"M","submitter":"Yangze Guo"}]
