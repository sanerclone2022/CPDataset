[{"authorTime":"2020-07-30 21:09:26","codes":[{"authorDate":"2020-11-07 14:28:54","commitOrder":2,"curCode":"\tprivate static DeserializationSchema<RowData> createDeserializationSchema(Map<String, String> options) {\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\treturn scanSourceMock.valueFormat\n\t\t\t.createRuntimeDecoder(\n\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\tSCHEMA.toRowDataType());\n\t}\n","date":"2020-11-08 17:57:22","endLine":111,"groupId":"42069","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/4440c863b8802c73889bea45dc251a4c6eb122.src","preCode":"\tprivate static DeserializationSchema<RowData> createDeserializationSchema(Map<String, String> options) {\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\treturn scanSourceMock.valueFormat\n\t\t\t.createRuntimeDecoder(\n\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\tSCHEMA.toRowDataType());\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/test/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2020-07-30 21:09:26","commitOrder":2,"curCode":"\tpublic void testDeserializationSchema() {\n\t\tfinal AvroRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew AvroRowDataDeserializationSchema(\n\t\t\t\t\t\tConfluentRegistryAvroDeserializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(ROW_TYPE),\n\t\t\t\t\t\t\t\tREGISTRY_URL),\n\t\t\t\t\t\tAvroToRowDataConverters.createRowConverter(ROW_TYPE),\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE));\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(getDefaultOptions());\n\t\tassertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-07-30 21:09:26","endLine":93,"groupId":"15674","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeserializationSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/db/fcc794c3eeeeddc7e9585be9984c1d91ae296d.src","preCode":"\tpublic void testDeserializationSchema() {\n\t\tfinal AvroRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew AvroRowDataDeserializationSchema(\n\t\t\t\t\t\tConfluentRegistryAvroDeserializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(ROW_TYPE),\n\t\t\t\t\t\t\t\tREGISTRY_URL),\n\t\t\t\t\t\tAvroToRowDataConverters.createRowConverter(ROW_TYPE),\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE));\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(getDefaultOptions());\n\t\tassertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/test/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"NB"}],"commitId":"bff7da11cb0148ab6e63acac7844deb922458999","commitMessage":"@@@[FLINK-18774][debezium-avro] Improve debezium-avro format implementation\n","date":"2020-11-08 17:57:22","modifiedFileCount":"13","status":"M","submitter":"Jark Wu"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":3,"curCode":"    private static DeserializationSchema<RowData> createDeserializationSchema(\n            Map<String, String> options) {\n        final DynamicTableSource actualSource = createTableSource(SCHEMA, options);\n        assertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        return scanSourceMock.valueFormat.createRuntimeDecoder(\n                ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());\n    }\n","date":"2021-03-24 04:35:35","endLine":103,"groupId":"102307","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/2c925fbef4591eb7f43c2e25230f620f999339.src","preCode":"    private static DeserializationSchema<RowData> createDeserializationSchema(\n            Map<String, String> options) {\n        final DynamicTableSource actualSource = createTableSource(options);\n        assertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        return scanSourceMock.valueFormat.createRuntimeDecoder(\n                ScanRuntimeProviderContext.INSTANCE, SCHEMA.toRowDataType());\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/test/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":3,"curCode":"    public void testDeserializationSchema() {\n        final AvroRowDataDeserializationSchema expectedDeser =\n                new AvroRowDataDeserializationSchema(\n                        ConfluentRegistryAvroDeserializationSchema.forGeneric(\n                                AvroSchemaConverter.convertToSchema(ROW_TYPE), REGISTRY_URL),\n                        AvroToRowDataConverters.createRowConverter(ROW_TYPE),\n                        InternalTypeInfo.of(ROW_TYPE));\n\n        final DynamicTableSource actualSource = createTableSource(SCHEMA, getDefaultOptions());\n        assertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","date":"2021-03-24 04:35:35","endLine":91,"groupId":"102307","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeserializationSchema","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/71c82c69f0917a94d014092f1bd31c2691d519.src","preCode":"    public void testDeserializationSchema() {\n        final AvroRowDataDeserializationSchema expectedDeser =\n                new AvroRowDataDeserializationSchema(\n                        ConfluentRegistryAvroDeserializationSchema.forGeneric(\n                                AvroSchemaConverter.convertToSchema(ROW_TYPE), REGISTRY_URL),\n                        AvroToRowDataConverters.createRowConverter(ROW_TYPE),\n                        InternalTypeInfo.of(ROW_TYPE));\n\n        final DynamicTableSource actualSource = createTableSource(getDefaultOptions());\n        assertThat(actualSource, instanceOf(TestDynamicTableFactory.DynamicTableSourceMock.class));\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/test/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"}]
