[{"authorTime":"2017-12-02 02:19:29","codes":[{"authorDate":"2017-12-02 02:19:29","commitOrder":1,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(\"Tuple3<Integer, Long, String>\");\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2018-01-11 00:14:15","endLine":63,"groupId":"41045","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndStringTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/b5186a478dad7dc98e2d98ba177c8379255caf.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(\"Tuple3<Integer, Long, String>\");\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2017-12-02 02:19:29","commitOrder":1,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2018-01-11 00:14:15","endLine":83,"groupId":"41045","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndTypeInformationTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/b5186a478dad7dc98e2d98ba177c8379255caf.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"244f03f363a6eea709cd45f8e9f495f0ac4eca62","commitMessage":"@@@[hotfix] [tests] Refactor TypeHintITCase to extend AbstractTestBase\n","date":"2018-01-11 00:14:15","modifiedFileCount":"1","status":"B","submitter":"Till Rohrmann"},{"authorTime":"2017-12-02 02:19:29","codes":[{"authorDate":"2018-05-04 23:15:51","commitOrder":2,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TypeHint<Tuple3<Integer, Long, String>>(){});\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2018-05-05 00:48:16","endLine":64,"groupId":"41045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndStringTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/43cc01fd4c9c26e5824e61f5898bcf9e4ec9de.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(\"Tuple3<Integer, Long, String>\");\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-12-02 02:19:29","commitOrder":2,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2018-01-11 00:14:15","endLine":83,"groupId":"41045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndTypeInformationTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/62/b5186a478dad7dc98e2d98ba177c8379255caf.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"c8fa8d025684c2225824c54a7285bbfdec7cfddc","commitMessage":"@@@[FLINK-9292] [core] Remove TypeInfoParser (part 1)\n","date":"2018-05-05 00:48:16","modifiedFileCount":"26","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2019-08-21 16:38:00","codes":[{"authorDate":"2019-08-21 16:38:00","commitOrder":3,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TypeHint<Tuple3<Integer, Long, String>>(){});\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2019-08-27 20:27:23","endLine":63,"groupId":"101352","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndStringTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/6faadeab9c5a1dc1850641c9fe3d4f2662f07c.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndStringTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TypeHint<Tuple3<Integer, Long, String>>(){});\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-08-21 16:38:00","commitOrder":3,"curCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","date":"2019-08-27 20:27:23","endLine":82,"groupId":"101352","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentityMapWithMissingTypesAndTypeInformationTypeHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/6faadeab9c5a1dc1850641c9fe3d4f2662f07c.src","preCode":"\tpublic void testIdentityMapWithMissingTypesAndTypeInformationTypeHint() throws Exception {\n\t\tfinal ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().disableSysoutLogging();\n\n\t\tDataSet<Tuple3<Integer, Long, String>> ds = CollectionDataSets.getSmall3TupleDataSet(env);\n\t\tDataSet<Tuple3<Integer, Long, String>> identityMapDs = ds\n\t\t\t\r\n\t\t\t.map(new Mapper<Tuple3<Integer, Long, String>, Tuple3<Integer, Long, String>>())\n\t\t\t.returns(new TupleTypeInfo<Tuple3<Integer, Long, String>>(BasicTypeInfo.INT_TYPE_INFO, BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO));\n\t\tList<Tuple3<Integer, Long, String>> result = identityMapDs\n\t\t\t.collect();\n\n\t\tString expectedResult = \"(2,2,Hello)\\n\" +\n\t\t\t\"(3,2,Hello world)\\n\" +\n\t\t\t\"(1,1,Hi)\\n\";\n\n\t\tcompareResultAsText(result, expectedResult);\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/operators/TypeHintITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"c30e84fb8df9cb6ab6a38cde40b9c3b83c4e8954","commitMessage":"@@@[FLINK-13794][client] Remove unused logic of printStatusDuringExecution\n","date":"2019-08-27 20:27:23","modifiedFileCount":"67","status":"M","submitter":"tison"}]
