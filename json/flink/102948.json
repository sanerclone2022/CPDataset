[{"authorTime":"2021-03-05 21:05:36","codes":[{"authorDate":"2021-03-05 21:05:36","commitOrder":1,"curCode":"    public void testMultiChannelTrailingInflightData() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(3, handler);\n\n        BufferOrEvent[] sequence =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBuffer(1),\n                        createBuffer(2),\n                        createBarrier(1, 1),\n                        createBarrier(1, 2),\n                        createBarrier(1, 0),\n                        createBuffer(2),\n                        createBuffer(1),\n                        createBuffer(0),\n                        createBarrier(2, 1),\n                        createBuffer(1),\n                        createBuffer(1),\n                        createEndOfPartition(1),\n                        createBuffer(0),\n                        createBuffer(2),\n                        createBarrier(2, 2),\n                        createBuffer(2),\n                        createEndOfPartition(2),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        \r\n        assertInflightData();\n    }\n","date":"2021-03-31 14:27:07","endLine":389,"groupId":"22997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiChannelTrailingInflightData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/e6237617a6bb2a59138dcbe4edc9d73e999f8a.src","preCode":"    public void testMultiChannelTrailingInflightData() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(3, handler);\n\n        BufferOrEvent[] sequence =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBuffer(1),\n                        createBuffer(2),\n                        createBarrier(1, 1),\n                        createBarrier(1, 2),\n                        createBarrier(1, 0),\n                        createBuffer(2),\n                        createBuffer(1),\n                        createBuffer(0),\n                        createBarrier(2, 1),\n                        createBuffer(1),\n                        createBuffer(1),\n                        createEndOfPartition(1),\n                        createBuffer(0),\n                        createBuffer(2),\n                        createBarrier(2, 2),\n                        createBuffer(2),\n                        createEndOfPartition(2),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        \r\n        assertInflightData();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/UnalignedCheckpointsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"B"},{"authorDate":"2021-03-05 21:05:36","commitOrder":1,"curCode":"    public void testSingleChannelAbortCheckpoint() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(1, handler);\n        final BufferOrEvent[] sequence1 =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBarrier(1, 0),\n                        createBuffer(0),\n                        createBarrier(2, 0),\n                        createCancellationBarrier(4, 0));\n\n        assertOutput(sequence1);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(4L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n\n        final BufferOrEvent[] sequence2 =\n                addSequence(\n                        inputGate,\n                        createBarrier(5, 0),\n                        createBuffer(0),\n                        createCancellationBarrier(6, 0),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence2);\n        assertEquals(5L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(6L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n    }\n","date":"2021-03-31 14:27:07","endLine":603,"groupId":"44058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleChannelAbortCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/e6237617a6bb2a59138dcbe4edc9d73e999f8a.src","preCode":"    public void testSingleChannelAbortCheckpoint() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(1, handler);\n        final BufferOrEvent[] sequence1 =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBarrier(1, 0),\n                        createBuffer(0),\n                        createBarrier(2, 0),\n                        createCancellationBarrier(4, 0));\n\n        assertOutput(sequence1);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(4L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n\n        final BufferOrEvent[] sequence2 =\n                addSequence(\n                        inputGate,\n                        createBarrier(5, 0),\n                        createBuffer(0),\n                        createCancellationBarrier(6, 0),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence2);\n        assertEquals(5L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(6L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/UnalignedCheckpointsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"B"}],"commitId":"77bf1055a00a64b02e440355c993ffc9e221525c","commitMessage":"@@@[FLINK-19682][checkpoint] Actively timeout checkpoint barriers on inputs\n\nThis closes #15313\n","date":"2021-03-31 14:27:07","modifiedFileCount":"18","status":"B","submitter":"Dawid Wysakowicz"},{"authorTime":"2021-03-05 21:05:36","codes":[{"authorDate":"2021-07-15 19:40:11","commitOrder":2,"curCode":"    public void testMultiChannelTrailingInflightData() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(3, handler, false);\n\n        BufferOrEvent[] sequence =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBuffer(1),\n                        createBuffer(2),\n                        createBarrier(1, 1),\n                        createBarrier(1, 2),\n                        createBarrier(1, 0),\n                        createBuffer(2),\n                        createBuffer(1),\n                        createBuffer(0),\n                        createBarrier(2, 1),\n                        createBuffer(1),\n                        createBuffer(1),\n                        createEndOfPartition(1),\n                        createBuffer(0),\n                        createBuffer(2),\n                        createBarrier(2, 2),\n                        createBuffer(2),\n                        createEndOfPartition(2),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        \r\n        assertInflightData();\n    }\n","date":"2021-07-28 18:47:48","endLine":390,"groupId":"102948","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiChannelTrailingInflightData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/93/4c6c06fa25e66ce08223292c9a2cf71ec49771.src","preCode":"    public void testMultiChannelTrailingInflightData() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(3, handler);\n\n        BufferOrEvent[] sequence =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBuffer(1),\n                        createBuffer(2),\n                        createBarrier(1, 1),\n                        createBarrier(1, 2),\n                        createBarrier(1, 0),\n                        createBuffer(2),\n                        createBuffer(1),\n                        createBuffer(0),\n                        createBarrier(2, 1),\n                        createBuffer(1),\n                        createBuffer(1),\n                        createEndOfPartition(1),\n                        createBuffer(0),\n                        createBuffer(2),\n                        createBarrier(2, 2),\n                        createBuffer(2),\n                        createEndOfPartition(2),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        \r\n        assertInflightData();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/UnalignedCheckpointsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"},{"authorDate":"2021-03-05 21:05:36","commitOrder":2,"curCode":"    public void testSingleChannelAbortCheckpoint() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(1, handler);\n        final BufferOrEvent[] sequence1 =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBarrier(1, 0),\n                        createBuffer(0),\n                        createBarrier(2, 0),\n                        createCancellationBarrier(4, 0));\n\n        assertOutput(sequence1);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(4L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n\n        final BufferOrEvent[] sequence2 =\n                addSequence(\n                        inputGate,\n                        createBarrier(5, 0),\n                        createBuffer(0),\n                        createCancellationBarrier(6, 0),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence2);\n        assertEquals(5L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(6L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n    }\n","date":"2021-03-31 14:27:07","endLine":603,"groupId":"102948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleChannelAbortCheckpoint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/59/e6237617a6bb2a59138dcbe4edc9d73e999f8a.src","preCode":"    public void testSingleChannelAbortCheckpoint() throws Exception {\n        ValidatingCheckpointHandler handler = new ValidatingCheckpointHandler(1);\n        inputGate = createInputGate(1, handler);\n        final BufferOrEvent[] sequence1 =\n                addSequence(\n                        inputGate,\n                        createBuffer(0),\n                        createBarrier(1, 0),\n                        createBuffer(0),\n                        createBarrier(2, 0),\n                        createCancellationBarrier(4, 0));\n\n        assertOutput(sequence1);\n        assertEquals(2L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(4L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n\n        final BufferOrEvent[] sequence2 =\n                addSequence(\n                        inputGate,\n                        createBarrier(5, 0),\n                        createBuffer(0),\n                        createCancellationBarrier(6, 0),\n                        createBuffer(0),\n                        createEndOfPartition(0));\n\n        assertOutput(sequence2);\n        assertEquals(5L, channelStateWriter.getLastStartedCheckpointId());\n        assertEquals(6L, handler.getLastCanceledCheckpointId());\n        assertInflightData();\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/UnalignedCheckpointsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"7c902745fff13e70908d32084d2888a69e13fc8b","commitMessage":"@@@[FLINK-23460] Use a global feature flag in the CheckpointBarrierHandler\n","date":"2021-07-28 18:47:48","modifiedFileCount":"21","status":"M","submitter":"Dawid Wysakowicz"}]
