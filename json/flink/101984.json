[{"authorTime":"2020-10-10 11:10:15","codes":[{"authorDate":"2020-05-21 16:21:22","commitOrder":4,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","date":"2020-05-21 16:21:22","endLine":554,"groupId":"23359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@Map<String@Object>partSpec@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/a997ed0e4e0335130c38ec7be0d0a435ec7249.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"NB"},{"authorDate":"2020-10-10 11:10:15","commitOrder":4,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(\n\t\t\t\t\t\tfieldTypes,\n\t\t\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new)),\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, testPath, 0, Long.MAX_VALUE), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","date":"2020-10-13 10:32:07","endLine":521,"groupId":"35942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@List<String>partitionKeys@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/42/626d28f0ed6e0958399c21a8d21798bf850415.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(\n\t\t\t\t\t\tfieldTypes,\n\t\t\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new)),\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, testPath, 0, Long.MAX_VALUE), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"B"}],"commitId":"8da968e8d0b1bb13e79d227236f814db69eb31a7","commitMessage":"@@@[FLINK-19414][parquet] Introduce ParquetColumnarRowInputFormat\n","date":"2020-10-13 10:32:07","modifiedFileCount":"4","status":"M","submitter":"JingsongLi"},{"authorTime":"2020-10-29 15:42:08","codes":[{"authorDate":"2020-05-21 16:21:22","commitOrder":5,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","date":"2020-05-21 16:21:22","endLine":554,"groupId":"23359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@Map<String@Object>partSpec@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/a997ed0e4e0335130c38ec7be0d0a435ec7249.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"N"},{"authorDate":"2020-10-29 15:42:08","commitOrder":5,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tRowType rowType = RowType.of(\n\t\t\t\tfieldTypes,\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n\n\t\tint[] projected = new int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27};\n\n\t\tRowType producedType = new RowType(Arrays.stream(projected)\n\t\t\t\t.mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tproducedType,\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, testPath, 0, Long.MAX_VALUE), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","date":"2020-10-29 15:42:08","endLine":525,"groupId":"35942","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@List<String>partitionKeys@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/fe757f0dcbf571f7e276bf990fec869b1d9ae8.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tRowType.of(\n\t\t\t\t\t\tfieldTypes,\n\t\t\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new)),\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, testPath, 0, Long.MAX_VALUE), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"68361845c25f85e13526d3634d5437cb37050cfc","commitMessage":"@@@[FLINK-19599][table] Introduce Filesystem format factories to integrate new FileSource to table\n\nThis closes #13605","date":"2020-10-29 15:42:08","modifiedFileCount":"10","status":"M","submitter":"Jingsong Lee"},{"authorTime":"2020-10-26 03:00:26","codes":[{"authorDate":"2020-05-21 16:21:22","commitOrder":6,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","date":"2020-05-21 16:21:22","endLine":554,"groupId":"23359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@Map<String@Object>partSpec@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/a997ed0e4e0335130c38ec7be0d0a435ec7249.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"N"},{"authorDate":"2020-10-26 03:00:26","commitOrder":6,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tRowType rowType = RowType.of(\n\t\t\t\tfieldTypes,\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n\n\t\tint[] projected = new int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27};\n\n\t\tRowType producedType = new RowType(Arrays.stream(projected)\n\t\t\t\t.mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tproducedType,\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, new FileSourceSplit(\"id\", testPath, 0, Long.MAX_VALUE)), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","date":"2020-11-03 23:33:28","endLine":529,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@List<String>partitionKeys@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/39/86f3fd815d91ed2d8c366f3df6332fc83ef073.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tRowType rowType = RowType.of(\n\t\t\t\tfieldTypes,\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n\n\t\tint[] projected = new int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27};\n\n\t\tRowType producedType = new RowType(Arrays.stream(projected)\n\t\t\t\t.mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tproducedType,\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, testPath, 0, Long.MAX_VALUE), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"}],"commitId":"a2849b327635233d34686a9ab95cf3486ac08ae5","commitMessage":"@@@[FLINK-19802][connector files] Let BulkFormat createReader and restoreReader methods accept Splits directly\n\nThis is a step in supporting File Sources for BulkFormats that need subclasses of FileSourceSplit.\n","date":"2020-11-03 23:33:28","modifiedFileCount":"19","status":"M","submitter":"Stephan Ewen"},{"authorTime":"2020-11-04 18:06:28","codes":[{"authorDate":"2020-05-21 16:21:22","commitOrder":7,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","date":"2020-05-21 16:21:22","endLine":554,"groupId":"101984","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@Map<String@Object>partSpec@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/be/a997ed0e4e0335130c38ec7be0d0a435ec7249.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tMap<String, Object> partSpec,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\t\tParquetColumnarRowSplitReader reader = ParquetSplitReaderUtil.genPartColumnarRowReader(\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\tnew Configuration(),\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new),\n\t\t\t\tArrays.stream(fieldTypes)\n\t\t\t\t\t\t.map(TypeConversions::fromLogicalToDataType)\n\t\t\t\t\t\t.toArray(DataType[]::new),\n\t\t\t\tpartSpec,\n\t\t\t\tnew int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27},\n\t\t\t\trowGroupSize,\n\t\t\t\tnew Path(testPath.getPath()),\n\t\t\t\t0,\n\t\t\t\tLong.MAX_VALUE);\n\t\tint i = 0;\n\t\twhile (!reader.reachedEnd()) {\n\t\t\tColumnarRowData row = reader.nextRecord();\n\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treader.close();\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/vector/ParquetColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"N"},{"authorDate":"2020-11-04 18:06:28","commitOrder":7,"curCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tRowType rowType = RowType.of(\n\t\t\t\tfieldTypes,\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n\n\t\tint[] projected = new int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27};\n\n\t\tRowType producedType = new RowType(Arrays.stream(projected)\n\t\t\t\t.mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n\n\t\tParquetColumnarRowInputFormat<FileSourceSplit> format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tproducedType,\n\t\t\t\tpartitionKeys,\n\t\t\t\tPartitionFieldExtractor.forFileSystem(\"my_default_value\"),\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, new FileSourceSplit(\"id\", testPath, 0, Long.MAX_VALUE)), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","date":"2020-11-04 18:06:28","endLine":528,"groupId":"101984","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"innerTestPartitionValues","params":"(PathtestPath@List<String>partitionKeys@booleannullPartValue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c9/25b5fee04ed14050279b78352b053f2b3e9040.src","preCode":"\tprivate void innerTestPartitionValues(\n\t\t\tPath testPath,\n\t\t\tList<String> partitionKeys,\n\t\t\tboolean nullPartValue) throws IOException {\n\t\tLogicalType[] fieldTypes = new LogicalType[]{\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew BooleanType(),\n\t\t\t\tnew DateType(),\n\t\t\t\tnew TimestampType(9),\n\t\t\t\tnew DoubleType(),\n\t\t\t\tnew TinyIntType(),\n\t\t\t\tnew SmallIntType(),\n\t\t\t\tnew IntType(),\n\t\t\t\tnew BigIntType(),\n\t\t\t\tnew FloatType(),\n\t\t\t\tnew DecimalType(5, 0),\n\t\t\t\tnew DecimalType(15, 0),\n\t\t\t\tnew DecimalType(20, 0),\n\t\t\t\tnew VarCharType(VarCharType.MAX_LENGTH)};\n\n\t\tRowType rowType = RowType.of(\n\t\t\t\tfieldTypes,\n\t\t\t\tIntStream.range(0, 28).mapToObj(i -> \"f\" + i).toArray(String[]::new));\n\n\t\tint[] projected = new int[]{7, 2, 4, 15, 19, 20, 21, 22, 23, 18, 16, 17, 24, 25, 26, 27};\n\n\t\tRowType producedType = new RowType(Arrays.stream(projected)\n\t\t\t\t.mapToObj(i -> rowType.getFields().get(i)).collect(Collectors.toList()));\n\n\t\tParquetColumnarRowInputFormat format = ParquetColumnarRowInputFormat.createPartitionedFormat(\n\t\t\t\tnew Configuration(),\n\t\t\t\tproducedType,\n\t\t\t\tpartitionKeys,\n\t\t\t\t\"my_default_value\",\n\t\t\t\tPartitionValueConverter.DEFAULT,\n\t\t\t\t500,\n\t\t\t\tfalse,\n\t\t\t\ttrue);\n\n\t\tAtomicInteger cnt = new AtomicInteger(0);\n\t\tforEachRemaining(format.createReader(EMPTY_CONF, new FileSourceSplit(\"id\", testPath, 0, Long.MAX_VALUE)), row -> {\n\t\t\tint i = cnt.get();\n\t\t\t\r\n\t\t\tassertEquals(i, row.getDouble(0), 0);\n\t\t\tassertEquals((byte) i, row.getByte(1));\n\t\t\tassertEquals(i, row.getInt(2));\n\n\t\t\t\r\n\t\t\tif (nullPartValue) {\n\t\t\t\tfor (int j = 3; j < 16; j++) {\n\t\t\t\t\tassertTrue(row.isNullAt(j));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertTrue(row.getBoolean(3));\n\t\t\t\tassertEquals(9, row.getByte(4));\n\t\t\t\tassertEquals(10, row.getShort(5));\n\t\t\t\tassertEquals(11, row.getInt(6));\n\t\t\t\tassertEquals(12, row.getLong(7));\n\t\t\t\tassertEquals(13, row.getFloat(8), 0);\n\t\t\t\tassertEquals(6.6, row.getDouble(9), 0);\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tSqlDateTimeUtils.dateToInternal(Date.valueOf(\"2020-11-23\")),\n\t\t\t\t\t\trow.getInt(10));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tLocalDateTime.of(1999, 1, 1, 1, 1),\n\t\t\t\t\t\trow.getTimestamp(11, 9).toLocalDateTime());\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(24), 5, 0),\n\t\t\t\t\t\trow.getDecimal(12, 5, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(25), 15, 0),\n\t\t\t\t\t\trow.getDecimal(13, 15, 0));\n\t\t\t\tassertEquals(\n\t\t\t\t\t\tDecimalData.fromBigDecimal(new BigDecimal(26), 20, 0),\n\t\t\t\t\t\trow.getDecimal(14, 20, 0));\n\t\t\t\tassertEquals(\"f27\", row.getString(15).toString());\n\t\t\t}\n\t\t\tcnt.incrementAndGet();\n\t\t});\n\t}\n","realPath":"flink-formats/flink-parquet/src/test/java/org/apache/flink/formats/parquet/ParquetColumnarRowInputFormatTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"}],"commitId":"c9f29a77581f1d542717b15e8cc557f24a8d1e3a","commitMessage":"@@@[FLINK-19960][table] Introduce PartitionFieldExtractor to extract partition field from split\n\nThis closes #13919","date":"2020-11-04 18:06:28","modifiedFileCount":"5","status":"M","submitter":"Jingsong Lee"}]
