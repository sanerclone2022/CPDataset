[{"authorTime":"2019-08-20 22:12:01","codes":[{"authorDate":"2019-08-20 22:12:01","commitOrder":1,"curCode":"\tprivate void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n\t\tassertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n\t\tassertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n\t\tassertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n\t\tassertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n\t\tassertEquals(keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n\t\tfor (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n\t\t\tassertEquals(keySpace.nextIndexNodes[i - 1], SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n\t\t}\n\t\tfor (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n\t\t\tassertEquals(keySpace.prevIndexNodes[i - 1],\n\t\t\t\tSkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n\t\t}\n\t\tint keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n\t\tMemorySegment keyDataSegment = MemorySegmentFactory.wrap(keySpace.keyData);\n\t\tassertEquals(0, memorySegment.compare(keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n\t}\n","date":"2019-11-08 01:31:48","endLine":116,"groupId":"22607","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyGetKeySpace","params":"(KeySpacekeySpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/d2d1850f05cd98b61e88e9c48053f99a24cb18.src","preCode":"\tprivate void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n\t\tassertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n\t\tassertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n\t\tassertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n\t\tassertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n\t\tassertEquals(keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n\t\tfor (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n\t\t\tassertEquals(keySpace.nextIndexNodes[i - 1], SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n\t\t}\n\t\tfor (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n\t\t\tassertEquals(keySpace.prevIndexNodes[i - 1],\n\t\t\t\tSkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n\t\t}\n\t\tint keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n\t\tMemorySegment keyDataSegment = MemorySegmentFactory.wrap(keySpace.keyData);\n\t\tassertEquals(0, memorySegment.compare(keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n\t}\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2019-08-20 22:12:01","commitOrder":1,"curCode":"\tprivate void verifyGetValueSpace(ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n\t\tassertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n\t\tassertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n\t\tassertEquals(valueSpace.nextValuePointer, SkipListUtils.getNextValuePointer(memorySegment, offset));\n\t\tassertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n\t\tint valueDataOffset = SkipListUtils.getValueMetaLen();\n\t\tMemorySegment valueDataSegment = MemorySegmentFactory.wrap(valueSpace.valueData);\n\t\tassertEquals(0,\n\t\t\tmemorySegment.compare(valueDataSegment, offset + valueDataOffset, 0, valueSpace.valueData.length));\n\t}\n","date":"2019-11-08 01:31:48","endLine":146,"groupId":"22611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyGetValueSpace","params":"(ValueSpacevalueSpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3e/d2d1850f05cd98b61e88e9c48053f99a24cb18.src","preCode":"\tprivate void verifyGetValueSpace(ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n\t\tassertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n\t\tassertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n\t\tassertEquals(valueSpace.nextValuePointer, SkipListUtils.getNextValuePointer(memorySegment, offset));\n\t\tassertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n\t\tint valueDataOffset = SkipListUtils.getValueMetaLen();\n\t\tMemorySegment valueDataSegment = MemorySegmentFactory.wrap(valueSpace.valueData);\n\t\tassertEquals(0,\n\t\t\tmemorySegment.compare(valueDataSegment, offset + valueDataOffset, 0, valueSpace.valueData.length));\n\t}\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"}],"commitId":"525f3c9c45f8534f1782986781140473909116a8","commitMessage":"@@@[FLINK-12697][state backends] Support on-disk state storage for spill-able heap backend\n","date":"2019-11-08 01:31:48","modifiedFileCount":"4","status":"B","submitter":"Yu Li"},{"authorTime":"2021-02-19 17:12:54","codes":[{"authorDate":"2021-02-19 17:12:54","commitOrder":2,"curCode":"    private void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n        assertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n        assertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n        assertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n        assertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n        assertEquals(\n                keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n        for (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.nextIndexNodes[i - 1],\n                    SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n        }\n        for (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.prevIndexNodes[i - 1],\n                    SkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n        }\n        int keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n        MemorySegment keyDataSegment = MemorySegmentFactory.wrapHeapSegment(keySpace.keyData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n    }\n","date":"2021-02-21 09:12:32","endLine":130,"groupId":"22607","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyGetKeySpace","params":"(KeySpacekeySpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/acb376440afa5cf1d559319c441fed2a8762d6.src","preCode":"    private void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n        assertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n        assertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n        assertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n        assertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n        assertEquals(\n                keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n        for (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.nextIndexNodes[i - 1],\n                    SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n        }\n        for (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.prevIndexNodes[i - 1],\n                    SkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n        }\n        int keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n        MemorySegment keyDataSegment = MemorySegmentFactory.wrap(keySpace.keyData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-02-19 17:12:54","commitOrder":2,"curCode":"    private void verifyGetValueSpace(\n            ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n        assertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n        assertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n        assertEquals(\n                valueSpace.nextValuePointer,\n                SkipListUtils.getNextValuePointer(memorySegment, offset));\n        assertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n        int valueDataOffset = SkipListUtils.getValueMetaLen();\n        MemorySegment valueDataSegment = MemorySegmentFactory.wrapHeapSegment(valueSpace.valueData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        valueDataSegment,\n                        offset + valueDataOffset,\n                        0,\n                        valueSpace.valueData.length));\n    }\n","date":"2021-02-21 09:12:32","endLine":168,"groupId":"22611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyGetValueSpace","params":"(ValueSpacevalueSpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/96/acb376440afa5cf1d559319c441fed2a8762d6.src","preCode":"    private void verifyGetValueSpace(\n            ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n        assertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n        assertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n        assertEquals(\n                valueSpace.nextValuePointer,\n                SkipListUtils.getNextValuePointer(memorySegment, offset));\n        assertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n        int valueDataOffset = SkipListUtils.getValueMetaLen();\n        MemorySegment valueDataSegment = MemorySegmentFactory.wrap(valueSpace.valueData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        valueDataSegment,\n                        offset + valueDataOffset,\n                        0,\n                        valueSpace.valueData.length));\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"86015c766ba186f18c2b3b41c3900ea4f809a1c2","commitMessage":"@@@[FLINK-21417][core] Update MemorySegmentFactory with explicit segment types.\n\nThis closes #14966\n","date":"2021-02-21 09:12:32","modifiedFileCount":"118","status":"M","submitter":"Xintong Song"},{"authorTime":"2021-02-22 14:11:51","codes":[{"authorDate":"2021-02-22 14:11:51","commitOrder":3,"curCode":"    private void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n        assertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n        assertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n        assertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n        assertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n        assertEquals(\n                keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n        for (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.nextIndexNodes[i - 1],\n                    SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n        }\n        for (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.prevIndexNodes[i - 1],\n                    SkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n        }\n        int keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n        MemorySegment keyDataSegment = MemorySegmentFactory.wrap(keySpace.keyData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n    }\n","date":"2021-02-22 14:18:02","endLine":130,"groupId":"10123","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyGetKeySpace","params":"(KeySpacekeySpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/9fec0ecef62b84be6c92ccc771f5fb1d7482a0.src","preCode":"    private void verifyGetKeySpace(KeySpace keySpace, MemorySegment memorySegment, int offset) {\n        assertEquals(keySpace.level, SkipListUtils.getLevel(memorySegment, offset));\n        assertEquals(keySpace.status, SkipListUtils.getNodeStatus(memorySegment, offset));\n        assertEquals(keySpace.keyData.length, SkipListUtils.getKeyLen(memorySegment, offset));\n        assertEquals(keySpace.valuePointer, SkipListUtils.getValuePointer(memorySegment, offset));\n        assertEquals(\n                keySpace.nextKeyPointer, SkipListUtils.getNextKeyPointer(memorySegment, offset));\n        for (int i = 1; i <= keySpace.nextIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.nextIndexNodes[i - 1],\n                    SkipListUtils.getNextIndexNode(memorySegment, offset, i));\n        }\n        for (int i = 1; i <= keySpace.prevIndexNodes.length; i++) {\n            assertEquals(\n                    keySpace.prevIndexNodes[i - 1],\n                    SkipListUtils.getPrevIndexNode(memorySegment, offset, keySpace.level, i));\n        }\n        int keyDataOffset = SkipListUtils.getKeyDataOffset(keySpace.level);\n        MemorySegment keyDataSegment = MemorySegmentFactory.wrapHeapSegment(keySpace.keyData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        keyDataSegment, offset + keyDataOffset, 0, keySpace.keyData.length));\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-02-22 14:11:51","commitOrder":3,"curCode":"    private void verifyGetValueSpace(\n            ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n        assertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n        assertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n        assertEquals(\n                valueSpace.nextValuePointer,\n                SkipListUtils.getNextValuePointer(memorySegment, offset));\n        assertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n        int valueDataOffset = SkipListUtils.getValueMetaLen();\n        MemorySegment valueDataSegment = MemorySegmentFactory.wrap(valueSpace.valueData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        valueDataSegment,\n                        offset + valueDataOffset,\n                        0,\n                        valueSpace.valueData.length));\n    }\n","date":"2021-02-22 14:18:02","endLine":168,"groupId":"10123","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"verifyGetValueSpace","params":"(ValueSpacevalueSpace@MemorySegmentmemorySegment@intoffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/67/9fec0ecef62b84be6c92ccc771f5fb1d7482a0.src","preCode":"    private void verifyGetValueSpace(\n            ValueSpace valueSpace, MemorySegment memorySegment, int offset) {\n        assertEquals(valueSpace.version, SkipListUtils.getValueVersion(memorySegment, offset));\n        assertEquals(valueSpace.keyPointer, SkipListUtils.getKeyPointer(memorySegment, offset));\n        assertEquals(\n                valueSpace.nextValuePointer,\n                SkipListUtils.getNextValuePointer(memorySegment, offset));\n        assertEquals(valueSpace.valueData.length, SkipListUtils.getValueLen(memorySegment, offset));\n        int valueDataOffset = SkipListUtils.getValueMetaLen();\n        MemorySegment valueDataSegment = MemorySegmentFactory.wrapHeapSegment(valueSpace.valueData);\n        assertEquals(\n                0,\n                memorySegment.compare(\n                        valueDataSegment,\n                        offset + valueDataOffset,\n                        0,\n                        valueSpace.valueData.length));\n    }\n","realPath":"flink-state-backends/flink-statebackend-heap-spillable/src/test/java/org/apache/flink/runtime/state/heap/SkipListUtilsTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"b81392665950c22ed347abcab611050a7fd1ae38","commitMessage":"@@@Revert FLINK-21417 due to performance regression.\n\n- 86015c766ba186f18c2b3b41c3900ea4f809a1c2: \"[FLINK-21417][core] Update MemorySegmentFactory with explicit segment types.\"\n- 1d0f5e5bc4e4926554a2f381b96ee4d569de8af5: \"[FLINK-21417][core] Re-abstract wrapping methods for memory segments.\"\n- 94362fa8917618ea3fa2a46b072abe528034070d: \"[FLINK-21417][core] Seprate OffHeapMemorySegment into DirectMemorySegment and UnsafeMemorySegment.\"\n- 046f950a820b35fde6f411fb90f42ab1b5eaaeff: \"[FLINK-21417][core] Turn HybridMemorySegment into OffHeapMemorySegment.\"\n- 10df8703a24b040481d1f56db5a74a3964c350c9: \"[FLINK-21417][core] Move some access methods from HybridMemorySegment to MemorySegment.\n- 0a664e1869e62005c37de2de0c19148468f1f059: \"[FLINK-21417][core] Migrate on-heap use cases of HybridMemorySegment to HeapMemorySegment.\"\n","date":"2021-02-22 14:18:02","modifiedFileCount":"118","status":"M","submitter":"Xintong Song"}]
