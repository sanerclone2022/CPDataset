[{"authorTime":"2020-05-13 21:15:03","codes":[{"authorDate":"2020-10-28 22:05:50","commitOrder":6,"curCode":"\tprivate FileWriterBucketState deserializeV1(DataInputView dataInputView) throws IOException {\n\t\tString bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\tSimpleVersionedStringSerializer.INSTANCE,\n\t\t\t\tdataInputView);\n\t\tString bucketPathStr = dataInputView.readUTF();\n\t\tlong creationTime = dataInputView.readLong();\n\n\t\t\r\n\t\tInProgressFileRecoverable current = null;\n\t\tif (dataInputView.readBoolean()) {\n\t\t\tcurrent = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\t\tinProgressFileRecoverableSerializer,\n\t\t\t\t\tdataInputView);\n\t\t}\n\n\t\treturn new FileWriterBucketState(\n\t\t\t\tbucketId,\n\t\t\t\tnew Path(bucketPathStr),\n\t\t\t\tcreationTime,\n\t\t\t\tcurrent);\n\t}\n","date":"2020-11-05 17:59:56","endLine":125,"groupId":"33686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeV1","params":"(DataInputViewdataInputView)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a4/0cddb9b5d351d8cc96b6d3daa9c88615f2a8ae.src","preCode":"\tprivate FileWriterBucketState deserializeV1(DataInputView dataInputView) throws IOException {\n\t\tString bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\tSimpleVersionedStringSerializer.INSTANCE,\n\t\t\t\tdataInputView);\n\t\tString bucketPathStr = dataInputView.readUTF();\n\t\tlong creationTime = dataInputView.readLong();\n\n\t\t\r\n\t\tInProgressFileRecoverable current = null;\n\t\tif (dataInputView.readBoolean()) {\n\t\t\tcurrent = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\t\tinProgressFileRecoverableSerializer,\n\t\t\t\t\tdataInputView);\n\t\t}\n\n\t\treturn new FileWriterBucketState(\n\t\t\t\tbucketId,\n\t\t\t\tnew Path(bucketPathStr),\n\t\t\t\tcreationTime,\n\t\t\t\tcurrent);\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/main/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketStateSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2020-05-13 21:15:03","commitOrder":6,"curCode":"\tprivate BucketState<BucketID> deserializeV1(DataInputView in) throws IOException {\n\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> commitableSerializer = getCommitableSerializer();\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.ResumeRecoverable> resumableSerializer = getResumableSerializer();\n\n\t\tfinal BucketID bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(bucketIdSerializer, in);\n\t\tfinal String bucketPathStr = in.readUTF();\n\t\tfinal long creationTime = in.readLong();\n\n\t\t\r\n\t\tInProgressFileWriter.InProgressFileRecoverable current = null;\n\t\tif (in.readBoolean()) {\n\t\t\tcurrent =\n\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(\n\t\t\t\t\tSimpleVersionedSerialization.readVersionAndDeSerialize(resumableSerializer, in));\n\t\t}\n\n\t\tfinal int committableVersion = in.readInt();\n\t\tfinal int numCheckpoints = in.readInt();\n\t\tfinal HashMap<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingFileRecoverablePerCheckpoint = new HashMap<>(numCheckpoints);\n\n\t\tfor (int i = 0; i < numCheckpoints; i++) {\n\t\t\tfinal long checkpointId = in.readLong();\n\t\t\tfinal int noOfResumables = in.readInt();\n\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pendingFileRecoverables = new ArrayList<>(noOfResumables);\n\t\t\tfor (int j = 0; j < noOfResumables; j++) {\n\t\t\t\tfinal byte[] bytes = new byte[in.readInt()];\n\t\t\t\tin.readFully(bytes);\n\t\t\t\tpendingFileRecoverables.add(\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(commitableSerializer.deserialize(committableVersion, bytes)));\n\t\t\t}\n\t\t\tpendingFileRecoverablePerCheckpoint.put(checkpointId, pendingFileRecoverables);\n\t\t}\n\n\t\treturn new BucketState<>(\n\t\t\tbucketId,\n\t\t\tnew Path(bucketPathStr),\n\t\t\tcreationTime,\n\t\t\tcurrent,\n\t\t\tpendingFileRecoverablePerCheckpoint);\n\t}\n","date":"2020-05-18 22:09:50","endLine":168,"groupId":"32742","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeV1","params":"(DataInputViewin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/63a037d4bf54dcd7fd3068ff3d1f6902e111af.src","preCode":"\tprivate BucketState<BucketID> deserializeV1(DataInputView in) throws IOException {\n\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> commitableSerializer = getCommitableSerializer();\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.ResumeRecoverable> resumableSerializer = getResumableSerializer();\n\n\t\tfinal BucketID bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(bucketIdSerializer, in);\n\t\tfinal String bucketPathStr = in.readUTF();\n\t\tfinal long creationTime = in.readLong();\n\n\t\t\r\n\t\tInProgressFileWriter.InProgressFileRecoverable current = null;\n\t\tif (in.readBoolean()) {\n\t\t\tcurrent =\n\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(\n\t\t\t\t\tSimpleVersionedSerialization.readVersionAndDeSerialize(resumableSerializer, in));\n\t\t}\n\n\t\tfinal int committableVersion = in.readInt();\n\t\tfinal int numCheckpoints = in.readInt();\n\t\tfinal HashMap<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingFileRecoverablePerCheckpoint = new HashMap<>(numCheckpoints);\n\n\t\tfor (int i = 0; i < numCheckpoints; i++) {\n\t\t\tfinal long checkpointId = in.readLong();\n\t\t\tfinal int noOfResumables = in.readInt();\n\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pendingFileRecoverables = new ArrayList<>(noOfResumables);\n\t\t\tfor (int j = 0; j < noOfResumables; j++) {\n\t\t\t\tfinal byte[] bytes = new byte[in.readInt()];\n\t\t\t\tin.readFully(bytes);\n\t\t\t\tpendingFileRecoverables.add(\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(commitableSerializer.deserialize(committableVersion, bytes)));\n\t\t\t}\n\t\t\tpendingFileRecoverablePerCheckpoint.put(checkpointId, pendingFileRecoverables);\n\t\t}\n\n\t\treturn new BucketState<>(\n\t\t\tbucketId,\n\t\t\tnew Path(bucketPathStr),\n\t\t\tcreationTime,\n\t\t\tcurrent,\n\t\t\tpendingFileRecoverablePerCheckpoint);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"NB"}],"commitId":"1f5055c473c45348b794ff9c9ed8f0759d32a691","commitMessage":"@@@[FLINK-19758] Add unified FileSink based on new Sink API\n","date":"2020-11-05 17:59:56","modifiedFileCount":"0","status":"M","submitter":"Yun Gao"},{"authorTime":"2020-05-13 21:15:03","codes":[{"authorDate":"2020-11-25 23:29:38","commitOrder":7,"curCode":"\tprivate FileWriterBucketState deserializeV1(DataInputView in) throws IOException {\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> commitableSerializer = getCommitableSerializer();\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.ResumeRecoverable> resumableSerializer = getResumableSerializer();\n\n\t\treturn internalDeserialize(\n\t\t\t\tin,\n\t\t\t\tdataInputView -> new OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(\n\t\t\t\t\t\tSimpleVersionedSerialization.readVersionAndDeSerialize(resumableSerializer, dataInputView)),\n\t\t\t\t(version, bytes) -> new OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(\n\t\t\t\t\t\tcommitableSerializer.deserialize(version, bytes)));\n\t}\n","date":"2020-11-30 22:18:17","endLine":135,"groupId":"101012","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeV1","params":"(DataInputViewin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/9ee0def1acc90d0fe27529a7b6b74faa030c75.src","preCode":"\tprivate FileWriterBucketState deserializeV1(DataInputView dataInputView) throws IOException {\n\t\tString bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\tSimpleVersionedStringSerializer.INSTANCE,\n\t\t\t\tdataInputView);\n\t\tString bucketPathStr = dataInputView.readUTF();\n\t\tlong creationTime = dataInputView.readLong();\n\n\t\t\r\n\t\tInProgressFileRecoverable current = null;\n\t\tif (dataInputView.readBoolean()) {\n\t\t\tcurrent = SimpleVersionedSerialization.readVersionAndDeSerialize(\n\t\t\t\t\tinProgressFileRecoverableSerializer,\n\t\t\t\t\tdataInputView);\n\t\t}\n\n\t\treturn new FileWriterBucketState(\n\t\t\t\tbucketId,\n\t\t\t\tnew Path(bucketPathStr),\n\t\t\t\tcreationTime,\n\t\t\t\tcurrent);\n\t}\n","realPath":"flink-connectors/flink-connector-files/src/main/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketStateSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-05-13 21:15:03","commitOrder":7,"curCode":"\tprivate BucketState<BucketID> deserializeV1(DataInputView in) throws IOException {\n\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> commitableSerializer = getCommitableSerializer();\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.ResumeRecoverable> resumableSerializer = getResumableSerializer();\n\n\t\tfinal BucketID bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(bucketIdSerializer, in);\n\t\tfinal String bucketPathStr = in.readUTF();\n\t\tfinal long creationTime = in.readLong();\n\n\t\t\r\n\t\tInProgressFileWriter.InProgressFileRecoverable current = null;\n\t\tif (in.readBoolean()) {\n\t\t\tcurrent =\n\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(\n\t\t\t\t\tSimpleVersionedSerialization.readVersionAndDeSerialize(resumableSerializer, in));\n\t\t}\n\n\t\tfinal int committableVersion = in.readInt();\n\t\tfinal int numCheckpoints = in.readInt();\n\t\tfinal HashMap<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingFileRecoverablePerCheckpoint = new HashMap<>(numCheckpoints);\n\n\t\tfor (int i = 0; i < numCheckpoints; i++) {\n\t\t\tfinal long checkpointId = in.readLong();\n\t\t\tfinal int noOfResumables = in.readInt();\n\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pendingFileRecoverables = new ArrayList<>(noOfResumables);\n\t\t\tfor (int j = 0; j < noOfResumables; j++) {\n\t\t\t\tfinal byte[] bytes = new byte[in.readInt()];\n\t\t\t\tin.readFully(bytes);\n\t\t\t\tpendingFileRecoverables.add(\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(commitableSerializer.deserialize(committableVersion, bytes)));\n\t\t\t}\n\t\t\tpendingFileRecoverablePerCheckpoint.put(checkpointId, pendingFileRecoverables);\n\t\t}\n\n\t\treturn new BucketState<>(\n\t\t\tbucketId,\n\t\t\tnew Path(bucketPathStr),\n\t\t\tcreationTime,\n\t\t\tcurrent,\n\t\t\tpendingFileRecoverablePerCheckpoint);\n\t}\n","date":"2020-05-18 22:09:50","endLine":168,"groupId":"101012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeV1","params":"(DataInputViewin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/58/63a037d4bf54dcd7fd3068ff3d1f6902e111af.src","preCode":"\tprivate BucketState<BucketID> deserializeV1(DataInputView in) throws IOException {\n\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> commitableSerializer = getCommitableSerializer();\n\t\tfinal SimpleVersionedSerializer<RecoverableWriter.ResumeRecoverable> resumableSerializer = getResumableSerializer();\n\n\t\tfinal BucketID bucketId = SimpleVersionedSerialization.readVersionAndDeSerialize(bucketIdSerializer, in);\n\t\tfinal String bucketPathStr = in.readUTF();\n\t\tfinal long creationTime = in.readLong();\n\n\t\t\r\n\t\tInProgressFileWriter.InProgressFileRecoverable current = null;\n\t\tif (in.readBoolean()) {\n\t\t\tcurrent =\n\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedInProgressFileRecoverable(\n\t\t\t\t\tSimpleVersionedSerialization.readVersionAndDeSerialize(resumableSerializer, in));\n\t\t}\n\n\t\tfinal int committableVersion = in.readInt();\n\t\tfinal int numCheckpoints = in.readInt();\n\t\tfinal HashMap<Long, List<InProgressFileWriter.PendingFileRecoverable>> pendingFileRecoverablePerCheckpoint = new HashMap<>(numCheckpoints);\n\n\t\tfor (int i = 0; i < numCheckpoints; i++) {\n\t\t\tfinal long checkpointId = in.readLong();\n\t\t\tfinal int noOfResumables = in.readInt();\n\n\t\t\tfinal List<InProgressFileWriter.PendingFileRecoverable> pendingFileRecoverables = new ArrayList<>(noOfResumables);\n\t\t\tfor (int j = 0; j < noOfResumables; j++) {\n\t\t\t\tfinal byte[] bytes = new byte[in.readInt()];\n\t\t\t\tin.readFully(bytes);\n\t\t\t\tpendingFileRecoverables.add(\n\t\t\t\t\tnew OutputStreamBasedPartFileWriter.OutputStreamBasedPendingFileRecoverable(commitableSerializer.deserialize(committableVersion, bytes)));\n\t\t\t}\n\t\t\tpendingFileRecoverablePerCheckpoint.put(checkpointId, pendingFileRecoverables);\n\t\t}\n\n\t\treturn new BucketState<>(\n\t\t\tbucketId,\n\t\t\tnew Path(bucketPathStr),\n\t\t\tcreationTime,\n\t\t\tcurrent,\n\t\t\tpendingFileRecoverablePerCheckpoint);\n\t}\n","realPath":"flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializer.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"}],"commitId":"da1ad03d68e6c57a95d7375259247053aa8fc24e","commitMessage":"@@@[FLINK-20337] Let FileSink restore state from StreamingFileSink\n\nThe FileWriterBucketStateSerializer is bumped past version 2 to allow it\nto restore the same old versions as BucketStateSerialize (from\nStreamingFileSink).\n","date":"2020-11-30 22:18:17","modifiedFileCount":"7","status":"M","submitter":"Yun Gao"}]
