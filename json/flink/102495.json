[{"authorTime":"2021-02-08 18:39:08","codes":[{"authorDate":"2021-02-08 18:39:08","commitOrder":30,"curCode":"    private Task createSystemExitTask(final String invokableClassName, StreamOperator<?> operator)\n            throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStreamOperator(operator);\n        streamConfig.setTimeCharacteristic(TimeCharacteristic.ProcessingTime); \r\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClassName,\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                new IOManagerAsync(),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                taskManagerRuntimeInfo,\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                new NoOpResultPartitionConsumableNotifier(),\n                mock(PartitionProducerStateChecker.class),\n                Executors.directExecutor());\n    }\n","date":"2021-02-08 18:39:08","endLine":210,"groupId":"24217","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSystemExitTask","params":"(finalStringinvokableClassName@StreamOperator<?>operator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/dc1a4e3b25121541b1eeb36308b5915f0d7c4d.src","preCode":"    private Task createSystemExitTask(final String invokableClassName, StreamOperator<?> operator)\n            throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStreamOperator(operator);\n        streamConfig.setTimeCharacteristic(TimeCharacteristic.ProcessingTime); \r\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClassName,\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                new IOManagerAsync(),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                taskManagerRuntimeInfo,\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                new NoOpResultPartitionConsumableNotifier(),\n                mock(PartitionProducerStateChecker.class),\n                Executors.directExecutor());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskSystemExitTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"MB"},{"authorDate":"2021-02-08 18:39:08","commitOrder":30,"curCode":"    public void testConcurrentAsyncCheckpointCannotFailFinishedStreamTask() throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        final NoOpStreamOperator<Long> noOpStreamOperator = new NoOpStreamOperator<>();\n\n        final StateBackend blockingStateBackend = new BlockingStateBackend();\n\n        streamConfig.setStreamOperator(noOpStreamOperator);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStateBackend(blockingStateBackend);\n\n        final long checkpointId = 0L;\n        final long checkpointTimestamp = 0L;\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        BlockingStreamTask.class.getName(),\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        final Task task =\n                new Task(\n                        jobInformation,\n                        taskInformation,\n                        new ExecutionAttemptID(),\n                        new AllocationID(),\n                        0,\n                        0,\n                        Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                        Collections.<InputGateDeploymentDescriptor>emptyList(),\n                        MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                        new IOManagerAsync(),\n                        shuffleEnvironment,\n                        new KvStateService(new KvStateRegistry(), null, null),\n                        mock(BroadcastVariableManager.class),\n                        new TaskEventDispatcher(),\n                        ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                        new TestTaskStateManager(),\n                        mock(TaskManagerActions.class),\n                        mock(InputSplitProvider.class),\n                        mock(CheckpointResponder.class),\n                        new NoOpTaskOperatorEventGateway(),\n                        new TestGlobalAggregateManager(),\n                        TestingClassLoaderLease.newBuilder().build(),\n                        mock(FileCache.class),\n                        taskManagerRuntimeInfo,\n                        UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                        new NoOpResultPartitionConsumableNotifier(),\n                        mock(PartitionProducerStateChecker.class),\n                        Executors.directExecutor());\n\n        CompletableFuture<Void> taskRun =\n                CompletableFuture.runAsync(() -> task.run(), TestingUtils.defaultExecutor());\n\n        \r\n        RUN_LATCH.await();\n\n        \r\n        task.triggerCheckpointBarrier(\n                checkpointId,\n                checkpointTimestamp,\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                false);\n\n        \r\n        taskRun.get();\n\n        \r\n        if (task.getFailureCause() != null) {\n            throw new Exception(\"Task failed\", task.getFailureCause());\n        }\n\n        \r\n        assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n    }\n","date":"2021-02-08 18:39:08","endLine":215,"groupId":"11528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentAsyncCheckpointCannotFailFinishedStreamTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e9/39590a8bc37664839b848b0bc9ea3f74977276.src","preCode":"    public void testConcurrentAsyncCheckpointCannotFailFinishedStreamTask() throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        final NoOpStreamOperator<Long> noOpStreamOperator = new NoOpStreamOperator<>();\n\n        final StateBackend blockingStateBackend = new BlockingStateBackend();\n\n        streamConfig.setStreamOperator(noOpStreamOperator);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStateBackend(blockingStateBackend);\n\n        final long checkpointId = 0L;\n        final long checkpointTimestamp = 0L;\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        BlockingStreamTask.class.getName(),\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        final Task task =\n                new Task(\n                        jobInformation,\n                        taskInformation,\n                        new ExecutionAttemptID(),\n                        new AllocationID(),\n                        0,\n                        0,\n                        Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                        Collections.<InputGateDeploymentDescriptor>emptyList(),\n                        MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                        new IOManagerAsync(),\n                        shuffleEnvironment,\n                        new KvStateService(new KvStateRegistry(), null, null),\n                        mock(BroadcastVariableManager.class),\n                        new TaskEventDispatcher(),\n                        ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                        new TestTaskStateManager(),\n                        mock(TaskManagerActions.class),\n                        mock(InputSplitProvider.class),\n                        mock(CheckpointResponder.class),\n                        new NoOpTaskOperatorEventGateway(),\n                        new TestGlobalAggregateManager(),\n                        TestingClassLoaderLease.newBuilder().build(),\n                        mock(FileCache.class),\n                        taskManagerRuntimeInfo,\n                        UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                        new NoOpResultPartitionConsumableNotifier(),\n                        mock(PartitionProducerStateChecker.class),\n                        Executors.directExecutor());\n\n        CompletableFuture<Void> taskRun =\n                CompletableFuture.runAsync(() -> task.run(), TestingUtils.defaultExecutor());\n\n        \r\n        RUN_LATCH.await();\n\n        \r\n        task.triggerCheckpointBarrier(\n                checkpointId,\n                checkpointTimestamp,\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                false);\n\n        \r\n        taskRun.get();\n\n        \r\n        if (task.getFailureCause() != null) {\n            throw new Exception(\"Task failed\", task.getFailureCause());\n        }\n\n        \r\n        assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTerminationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"MB"}],"commitId":"7ea786ac6af7286eb147449729316418b38cdafe","commitMessage":"@@@[FLINK-21303][coordination] Remove LogicalSlot#getPhysicalSlotNumber\n\n","date":"2021-02-08 18:39:08","modifiedFileCount":"25","status":"M","submitter":"SteNicholas"},{"authorTime":"2021-02-24 03:34:00","codes":[{"authorDate":"2021-02-08 18:39:08","commitOrder":31,"curCode":"    private Task createSystemExitTask(final String invokableClassName, StreamOperator<?> operator)\n            throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStreamOperator(operator);\n        streamConfig.setTimeCharacteristic(TimeCharacteristic.ProcessingTime); \r\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClassName,\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                new IOManagerAsync(),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                taskManagerRuntimeInfo,\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                new NoOpResultPartitionConsumableNotifier(),\n                mock(PartitionProducerStateChecker.class),\n                Executors.directExecutor());\n    }\n","date":"2021-02-08 18:39:08","endLine":210,"groupId":"102495","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSystemExitTask","params":"(finalStringinvokableClassName@StreamOperator<?>operator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/dc1a4e3b25121541b1eeb36308b5915f0d7c4d.src","preCode":"    private Task createSystemExitTask(final String invokableClassName, StreamOperator<?> operator)\n            throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStreamOperator(operator);\n        streamConfig.setTimeCharacteristic(TimeCharacteristic.ProcessingTime); \r\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        invokableClassName,\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        return new Task(\n                jobInformation,\n                taskInformation,\n                new ExecutionAttemptID(),\n                new AllocationID(),\n                0,\n                0,\n                Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                Collections.<InputGateDeploymentDescriptor>emptyList(),\n                MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                new IOManagerAsync(),\n                shuffleEnvironment,\n                new KvStateService(new KvStateRegistry(), null, null),\n                mock(BroadcastVariableManager.class),\n                new TaskEventDispatcher(),\n                ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                new TestTaskStateManager(),\n                mock(TaskManagerActions.class),\n                mock(InputSplitProvider.class),\n                mock(CheckpointResponder.class),\n                new NoOpTaskOperatorEventGateway(),\n                new TestGlobalAggregateManager(),\n                TestingClassLoaderLease.newBuilder().build(),\n                mock(FileCache.class),\n                taskManagerRuntimeInfo,\n                UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                new NoOpResultPartitionConsumableNotifier(),\n                mock(PartitionProducerStateChecker.class),\n                Executors.directExecutor());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskSystemExitTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"},{"authorDate":"2021-02-24 03:34:00","commitOrder":31,"curCode":"    public void testConcurrentAsyncCheckpointCannotFailFinishedStreamTask() throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        final NoOpStreamOperator<Long> noOpStreamOperator = new NoOpStreamOperator<>();\n\n        final StateBackend blockingStateBackend = new BlockingStateBackend();\n\n        streamConfig.setStreamOperator(noOpStreamOperator);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStateBackend(blockingStateBackend);\n\n        final long checkpointId = 0L;\n        final long checkpointTimestamp = 0L;\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        BlockingStreamTask.class.getName(),\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        final Task task =\n                new Task(\n                        jobInformation,\n                        taskInformation,\n                        new ExecutionAttemptID(),\n                        new AllocationID(),\n                        0,\n                        0,\n                        Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                        Collections.<InputGateDeploymentDescriptor>emptyList(),\n                        MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                        new IOManagerAsync(),\n                        shuffleEnvironment,\n                        new KvStateService(new KvStateRegistry(), null, null),\n                        mock(BroadcastVariableManager.class),\n                        new TaskEventDispatcher(),\n                        ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                        new TestTaskStateManager(),\n                        mock(TaskManagerActions.class),\n                        mock(InputSplitProvider.class),\n                        mock(CheckpointResponder.class),\n                        new NoOpTaskOperatorEventGateway(),\n                        new TestGlobalAggregateManager(),\n                        TestingClassLoaderLease.newBuilder().build(),\n                        mock(FileCache.class),\n                        taskManagerRuntimeInfo,\n                        UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                        new NoOpResultPartitionConsumableNotifier(),\n                        mock(PartitionProducerStateChecker.class),\n                        Executors.directExecutor());\n\n        CompletableFuture<Void> taskRun =\n                CompletableFuture.runAsync(() -> task.run(), TestingUtils.defaultExecutor());\n\n        \r\n        RUN_LATCH.await();\n\n        \r\n        task.triggerCheckpointBarrier(\n                checkpointId,\n                checkpointTimestamp,\n                CheckpointOptions.forCheckpointWithDefaultLocation());\n\n        \r\n        taskRun.get();\n\n        \r\n        if (task.getFailureCause() != null) {\n            throw new Exception(\"Task failed\", task.getFailureCause());\n        }\n\n        \r\n        assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n    }\n","date":"2021-02-25 01:57:36","endLine":214,"groupId":"102495","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentAsyncCheckpointCannotFailFinishedStreamTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/bc/504bc4c3bb5de7a2cf20a6928930ab6ec0a238.src","preCode":"    public void testConcurrentAsyncCheckpointCannotFailFinishedStreamTask() throws Exception {\n        final Configuration taskConfiguration = new Configuration();\n        final StreamConfig streamConfig = new StreamConfig(taskConfiguration);\n        final NoOpStreamOperator<Long> noOpStreamOperator = new NoOpStreamOperator<>();\n\n        final StateBackend blockingStateBackend = new BlockingStateBackend();\n\n        streamConfig.setStreamOperator(noOpStreamOperator);\n        streamConfig.setOperatorID(new OperatorID());\n        streamConfig.setStateBackend(blockingStateBackend);\n\n        final long checkpointId = 0L;\n        final long checkpointTimestamp = 0L;\n\n        final JobInformation jobInformation =\n                new JobInformation(\n                        new JobID(),\n                        \"Test Job\",\n                        new SerializedValue<>(new ExecutionConfig()),\n                        new Configuration(),\n                        Collections.emptyList(),\n                        Collections.emptyList());\n\n        final TaskInformation taskInformation =\n                new TaskInformation(\n                        new JobVertexID(),\n                        \"Test Task\",\n                        1,\n                        1,\n                        BlockingStreamTask.class.getName(),\n                        taskConfiguration);\n\n        final TaskManagerRuntimeInfo taskManagerRuntimeInfo = new TestingTaskManagerRuntimeInfo();\n\n        final ShuffleEnvironment<?, ?> shuffleEnvironment =\n                new NettyShuffleEnvironmentBuilder().build();\n\n        final Task task =\n                new Task(\n                        jobInformation,\n                        taskInformation,\n                        new ExecutionAttemptID(),\n                        new AllocationID(),\n                        0,\n                        0,\n                        Collections.<ResultPartitionDeploymentDescriptor>emptyList(),\n                        Collections.<InputGateDeploymentDescriptor>emptyList(),\n                        MemoryManagerBuilder.newBuilder().setMemorySize(32L * 1024L).build(),\n                        new IOManagerAsync(),\n                        shuffleEnvironment,\n                        new KvStateService(new KvStateRegistry(), null, null),\n                        mock(BroadcastVariableManager.class),\n                        new TaskEventDispatcher(),\n                        ExternalResourceInfoProvider.NO_EXTERNAL_RESOURCES,\n                        new TestTaskStateManager(),\n                        mock(TaskManagerActions.class),\n                        mock(InputSplitProvider.class),\n                        mock(CheckpointResponder.class),\n                        new NoOpTaskOperatorEventGateway(),\n                        new TestGlobalAggregateManager(),\n                        TestingClassLoaderLease.newBuilder().build(),\n                        mock(FileCache.class),\n                        taskManagerRuntimeInfo,\n                        UnregisteredMetricGroups.createUnregisteredTaskMetricGroup(),\n                        new NoOpResultPartitionConsumableNotifier(),\n                        mock(PartitionProducerStateChecker.class),\n                        Executors.directExecutor());\n\n        CompletableFuture<Void> taskRun =\n                CompletableFuture.runAsync(() -> task.run(), TestingUtils.defaultExecutor());\n\n        \r\n        RUN_LATCH.await();\n\n        \r\n        task.triggerCheckpointBarrier(\n                checkpointId,\n                checkpointTimestamp,\n                CheckpointOptions.forCheckpointWithDefaultLocation(),\n                false);\n\n        \r\n        taskRun.get();\n\n        \r\n        if (task.getFailureCause() != null) {\n            throw new Exception(\"Task failed\", task.getFailureCause());\n        }\n\n        \r\n        assertEquals(ExecutionState.FINISHED, task.getExecutionState());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTerminationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"44e962715b9411b8a00a420d3043e0cc32a0f565","commitMessage":"@@@[FLINK-21453][checkpointing][refactor] Replace advanceToEndOfTime with new CheckpointType.SAVEPOINT_TERMINATE\n","date":"2021-02-25 01:57:36","modifiedFileCount":"63","status":"M","submitter":"Piotr Nowojski"}]
