[{"authorTime":"2020-04-08 17:31:57","codes":[{"authorDate":"2020-04-08 17:31:57","commitOrder":1,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","date":"2020-04-08 17:31:57","endLine":68,"groupId":"34541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/57/0fa2c1a49732dd29add8a82fbb8e118391fd2b.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/ExternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2020-04-08 17:31:57","commitOrder":1,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","date":"2020-04-08 17:31:57","endLine":83,"groupId":"34541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/9377005f86e012299f8512efafa7ffa78f1b3f.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"562e7711914e58f152288b512bbf05ec3a1cfbfa","commitMessage":"@@@[FLINK-16602][k8s] Rework the internal & external Service\n\n1.The REST service serves REST traffic while the internal service serves internal requests from TMs to JM.\n2.The REST service is always created but the internal service is only created in non-high availability setup.\n\nCo-authored-by: felixzheng <felixzheng@tencent.com>\n\nThis closes #11456 .","date":"2020-04-08 17:31:57","modifiedFileCount":"10","status":"B","submitter":"Canbin Zheng"},{"authorTime":"2020-04-08 17:31:57","codes":[{"authorDate":"2020-04-10 21:33:08","commitOrder":2,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.withNewTargetPort(kubernetesJobManagerParameters.getRestBindPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","date":"2020-04-18 23:34:47","endLine":69,"groupId":"34541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/81/9f7e10d59553bb48c4d3bd1d209b94a8996a40.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/ExternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-04-08 17:31:57","commitOrder":2,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","date":"2020-04-08 17:31:57","endLine":83,"groupId":"34541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/9377005f86e012299f8512efafa7ffa78f1b3f.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"7a7aaec9745461da9590c61f6ba75be64388d397","commitMessage":"@@@[FLINK-16600][k8s] Respect the rest.bind-port config option for the Kubernetes setup\n\nThis closes #11705 .\n","date":"2020-04-18 23:34:47","modifiedFileCount":"6","status":"M","submitter":"felixzheng"},{"authorTime":"2020-04-08 17:31:57","codes":[{"authorDate":"2020-05-13 09:22:44","commitOrder":3,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.withAnnotations(kubernetesJobManagerParameters.getRestServiceAnnotations())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.withNewTargetPort(kubernetesJobManagerParameters.getRestBindPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","date":"2020-05-16 11:06:09","endLine":70,"groupId":"30230","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6e/02ef6d4f290bf7ee339695a8c0e762f42cb7e0.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.withNewTargetPort(kubernetesJobManagerParameters.getRestBindPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/ExternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-04-08 17:31:57","commitOrder":3,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","date":"2020-04-08 17:31:57","endLine":83,"groupId":"34541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6c/9377005f86e012299f8512efafa7ffa78f1b3f.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"da16f9ed5c99b2c060cf4f2818fac3b6fd546a4a","commitMessage":"@@@[FLINK-16624][k8s] Support user-specified annotations for the rest Service\n\nThis closes #12105 .\n","date":"2020-05-16 11:06:09","modifiedFileCount":"5","status":"M","submitter":"felixzheng"},{"authorTime":"2020-05-26 01:23:10","codes":[{"authorDate":"2020-05-26 01:23:10","commitOrder":4,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tgetExternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.withAnnotations(kubernetesJobManagerParameters.getRestServiceAnnotations())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.withNewTargetPort(kubernetesJobManagerParameters.getRestBindPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","date":"2020-05-26 01:23:10","endLine":69,"groupId":"102400","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/3b6cf247cef0c851fe6241722c0fa93668e277.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tfinal String serviceName =\n\t\t\tKubernetesUtils.getRestServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service externalService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.withAnnotations(kubernetesJobManagerParameters.getRestServiceAnnotations())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withType(kubernetesJobManagerParameters.getRestServiceExposedType().name())\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.REST_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRestPort())\n\t\t\t\t\t.withNewTargetPort(kubernetesJobManagerParameters.getRestBindPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\treturn Collections.singletonList(externalService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/ExternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-05-26 01:23:10","commitOrder":4,"curCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(\n\t\t\tJobManagerOptions.ADDRESS,\n\t\t\tgetNamespacedInternalServiceName(serviceName, namespace));\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","date":"2020-05-26 01:23:10","endLine":84,"groupId":"102400","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildAccompanyingKubernetesResources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/14/1b1d57364e5b8b8697a65fa3f271809e3a2078.src","preCode":"\tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n\n\t\tfinal Service headlessService = new ServiceBuilder()\n\t\t\t.withApiVersion(Constants.API_VERSION)\n\t\t\t.withNewMetadata()\n\t\t\t\t.withName(serviceName)\n\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n\t\t\t\t.endMetadata()\n\t\t\t.withNewSpec()\n\t\t\t\t.withClusterIP(Constants.HEADLESS_SERVICE_CLUSTER_IP)\n\t\t\t\t.withSelector(kubernetesJobManagerParameters.getLabels())\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.JOB_MANAGER_RPC_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getRPCPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.addNewPort()\n\t\t\t\t\t.withName(Constants.BLOB_SERVER_PORT_NAME)\n\t\t\t\t\t.withPort(kubernetesJobManagerParameters.getBlobServerPort())\n\t\t\t\t\t.endPort()\n\t\t\t\t.endSpec()\n\t\t\t.build();\n\n\t\t\r\n\t\tfinal String namespace = kubernetesJobManagerParameters.getNamespace();\n\t\tkubernetesJobManagerParameters.getFlinkConfiguration().setString(JobManagerOptions.ADDRESS, serviceName + \".\" + namespace);\n\n\t\treturn Collections.singletonList(headlessService);\n\t}\n","realPath":"flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"b19058a11097b9e5aa8a412c0c63abc5b1f61a61","commitMessage":"@@@[FLINK-17230] Fix incorrect returned address of Endpoint for external Service of ClusterIP type\n\nThis closes #12277 .","date":"2020-05-26 01:23:10","modifiedFileCount":"10","status":"M","submitter":"Canbin Zheng"}]
