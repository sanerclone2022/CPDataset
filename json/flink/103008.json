[{"authorTime":"2020-11-27 18:43:04","codes":[{"authorDate":"2021-01-26 20:06:57","commitOrder":2,"curCode":"    public void testBatchJobType() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.fromElements(\"test\").addSink(new DiscardingSink<>());\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        assertEquals(JobType.BATCH, jobGraph.getJobType());\n    }\n","date":"2021-01-29 20:52:53","endLine":734,"groupId":"53478","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchJobType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/c14265d6604e11b25c6f2e17098a11fc9ead58.src","preCode":"    public void testBatchJobType() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.fromElements(\"test\").addSink(new DiscardingSink<>());\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        assertEquals(JobType.BATCH, jobGraph.getJobType());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"B"},{"authorDate":"2020-11-27 18:43:04","commitOrder":2,"curCode":"\tpublic void testPartitionTypesInBatchMode() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRuntimeMode(RuntimeExecutionMode.BATCH);\n\t\tenv.setParallelism(4);\n\t\tenv.disableOperatorChaining();\n\t\tDataStream<Integer> source = env.fromElements(1);\n\t\tsource\n\t\t\t\r\n\t\t\t.map(value -> value).setParallelism(1)\n\t\t\t.rescale()\n\t\t\t.map(value -> value)\n\t\t\t.rebalance()\n\t\t\t.map(value -> value)\n\t\t\t.keyBy(value -> value)\n\t\t\t.map(value -> value)\n\t\t\t.addSink(new DiscardingSink<>());\n\n\t\tJobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n\t\tList<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n\t\tassertThat(verticesSorted.get(0) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n\t\tassertThat(verticesSorted.get(1) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(2) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(3) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(4) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n\t}\n","date":"2020-11-30 16:20:51","endLine":650,"groupId":"53478","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionTypesInBatchMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/52/39c84d4addfb64c19547ede8f6fa886febe8ee.src","preCode":"\tpublic void testPartitionTypesInBatchMode() {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setRuntimeMode(RuntimeExecutionMode.BATCH);\n\t\tenv.setParallelism(4);\n\t\tenv.disableOperatorChaining();\n\t\tDataStream<Integer> source = env.fromElements(1);\n\t\tsource\n\t\t\t\r\n\t\t\t.map(value -> value).setParallelism(1)\n\t\t\t.rescale()\n\t\t\t.map(value -> value)\n\t\t\t.rebalance()\n\t\t\t.map(value -> value)\n\t\t\t.keyBy(value -> value)\n\t\t\t.map(value -> value)\n\t\t\t.addSink(new DiscardingSink<>());\n\n\t\tJobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n\t\tList<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n\t\tassertThat(verticesSorted.get(0) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n\t\tassertThat(verticesSorted.get(1) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(2) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(3) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.BLOCKING));\n\t\tassertThat(verticesSorted.get(4) ,\n\t\t\thasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"NB"}],"commitId":"95f8b61b60d57e2ddb7d4f43fa7e96cb95348d75","commitMessage":"@@@[FLINK-21099] Introduce JobType to distinguish between batch and streaming jobs\n","date":"2021-01-29 20:52:53","modifiedFileCount":"10","status":"M","submitter":"Robert Metzger"},{"authorTime":"2021-07-22 17:31:18","codes":[{"authorDate":"2021-01-26 20:06:57","commitOrder":3,"curCode":"    public void testBatchJobType() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.fromElements(\"test\").addSink(new DiscardingSink<>());\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        assertEquals(JobType.BATCH, jobGraph.getJobType());\n    }\n","date":"2021-01-29 20:52:53","endLine":734,"groupId":"103008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchJobType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/43/c14265d6604e11b25c6f2e17098a11fc9ead58.src","preCode":"    public void testBatchJobType() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.fromElements(\"test\").addSink(new DiscardingSink<>());\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        assertEquals(JobType.BATCH, jobGraph.getJobType());\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"N"},{"authorDate":"2021-07-22 17:31:18","commitOrder":3,"curCode":"    public void testPartitionTypesInBatchMode() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.setParallelism(4);\n        env.disableOperatorChaining();\n        DataStream<Integer> source = env.fromElements(1);\n        source\n                \r\n                .map(value -> value)\n                .setParallelism(1)\n                .rescale()\n                .map(value -> value)\n                .rebalance()\n                .map(value -> value)\n                .keyBy(value -> value)\n                .map(value -> value)\n                .addSink(new DiscardingSink<>());\n\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n        assertThat(\n                verticesSorted.get(0) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(1) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(2) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(3) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(4) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n    }\n","date":"2021-07-23 22:11:22","endLine":773,"groupId":"103008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionTypesInBatchMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/37/c566b67c04ebc4d7781f1a64ac41dc369cf922.src","preCode":"    public void testPartitionTypesInBatchMode() {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setRuntimeMode(RuntimeExecutionMode.BATCH);\n        env.setParallelism(4);\n        env.disableOperatorChaining();\n        DataStream<Integer> source = env.fromElements(1);\n        source\n                \r\n                .map(value -> value)\n                .setParallelism(1)\n                .rescale()\n                .map(value -> value)\n                .rebalance()\n                .map(value -> value)\n                .keyBy(value -> value)\n                .map(value -> value)\n                .addSink(new DiscardingSink<>());\n\n        JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph());\n        List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n        assertThat(\n                verticesSorted.get(0) ,\n                hasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n        assertThat(\n                verticesSorted.get(1) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(2) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(3) ,\n                hasOutputPartitionType(ResultPartitionType.BLOCKING));\n        assertThat(\n                verticesSorted.get(4) ,\n                hasOutputPartitionType(ResultPartitionType.PIPELINED_BOUNDED));\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"}],"commitId":"0139222030d5e3dac2b9ffe7200c758ab6153fff","commitMessage":"@@@[FLINK-23402][streaming-java] Default to GlobalStreamExchangeMode.ALL_EDGES_BLOCKING in batch mode\n","date":"2021-07-23 22:11:22","modifiedFileCount":"3","status":"M","submitter":"Timo Walther"}]
