[{"authorTime":"2018-04-12 08:47:03","codes":[{"authorDate":"2018-04-12 08:47:03","commitOrder":1,"curCode":"\tpublic void testKeyedWithBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\t\tnew TestKeyedBroadcastProcessFunction(100000L, expected));\n\n\t\toutput\n\t\t\t\t.addSink(new TestSink(expected.size()))\n\t\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","date":"2018-04-12 23:04:30","endLine":100,"groupId":"37603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyedWithBroadcastTranslation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/0061400342e88ce75a2d2193b845c62ad824c5.src","preCode":"\tpublic void testKeyedWithBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\t\tnew TestKeyedBroadcastProcessFunction(100000L, expected));\n\n\t\toutput\n\t\t\t\t.addSink(new TestSink(expected.size()))\n\t\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/BroadcastStateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2018-04-12 08:47:03","commitOrder":1,"curCode":"\tpublic void testBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\tnew TestBroadcastProcessFunction());\n\n\t\toutput\n\t\t\t.addSink(new TestSink(0))\n\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","date":"2018-04-12 23:04:30","endLine":152,"groupId":"30050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastTranslation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/0061400342e88ce75a2d2193b845c62ad824c5.src","preCode":"\tpublic void testBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\tnew TestBroadcastProcessFunction());\n\n\t\toutput\n\t\t\t.addSink(new TestSink(0))\n\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/BroadcastStateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"f3d4011f80b3d6b25e55a354d1a41928074f02a0","commitMessage":"@@@[FLINK-9152] Add simple ITCase for non-keyed Broadcast Connect translation\n","date":"2018-04-12 23:04:30","modifiedFileCount":"1","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testKeyedWithBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\t\tnew TestKeyedBroadcastProcessFunction(100000L, expected));\n\n\t\toutput\n\t\t\t\t.addSink(new TestSink(expected.size()))\n\t\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","date":"2020-10-01 23:03:45","endLine":99,"groupId":"101524","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyedWithBroadcastTranslation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/2d2b885615ad32ed667ba631b38261219c70b1.src","preCode":"\tpublic void testKeyedWithBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}).keyBy((KeySelector<Long, Long>) value -> value);\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\t\tnew TestKeyedBroadcastProcessFunction(100000L, expected));\n\n\t\toutput\n\t\t\t\t.addSink(new TestSink(expected.size()))\n\t\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/BroadcastStateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":2,"curCode":"\tpublic void testBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\tnew TestBroadcastProcessFunction());\n\n\t\toutput\n\t\t\t.addSink(new TestSink(0))\n\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","date":"2020-10-01 23:03:45","endLine":150,"groupId":"101524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastTranslation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/18/2d2b885615ad32ed667ba631b38261219c70b1.src","preCode":"\tpublic void testBroadcastTranslation() throws Exception {\n\n\t\tfinal MapStateDescriptor<Long, String> utterDescriptor = new MapStateDescriptor<>(\n\t\t\t\"broadcast-state\", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO\n\t\t);\n\n\t\tfinal Map<Long, String> expected = new HashMap<>();\n\t\texpected.put(0L, \"test:0\");\n\t\texpected.put(1L, \"test:1\");\n\t\texpected.put(2L, \"test:2\");\n\t\texpected.put(3L, \"test:3\");\n\t\texpected.put(4L, \"test:4\");\n\t\texpected.put(5L, \"test:5\");\n\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\n\t\tfinal DataStream<Long> srcOne = env.generateSequence(0L, 5L)\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -8500904795760316195L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(Long element, long previousElementTimestamp) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal DataStream<String> srcTwo = env.fromCollection(expected.values())\n\t\t\t.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {\n\n\t\t\t\tprivate static final long serialVersionUID = -2148318224248467213L;\n\n\t\t\t\t@Override\n\t\t\t\tpublic long extractTimestamp(String element, long previousElementTimestamp) {\n\t\t\t\t\treturn Long.parseLong(element.split(\":\")[1]);\n\t\t\t\t}\n\t\t\t});\n\n\t\tfinal BroadcastStream<String> broadcast = srcTwo.broadcast(utterDescriptor);\n\n\t\t\r\n\t\tfinal DataStream<String> output = srcOne.connect(broadcast).process(\n\t\t\tnew TestBroadcastProcessFunction());\n\n\t\toutput\n\t\t\t.addSink(new TestSink(0))\n\t\t\t.setParallelism(1);\n\t\tenv.execute();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/runtime/BroadcastStateITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
