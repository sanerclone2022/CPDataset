[{"authorTime":"2017-01-25 03:08:28","codes":[{"authorDate":"2017-01-25 03:08:28","commitOrder":1,"curCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-01-26 02:56:23","endLine":481,"groupId":"40935","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateEventTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/2a2f14f237e3aa2a9c932df5b05a2d1d36c506.src","preCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"B"},{"authorDate":"2017-01-25 03:08:28","commitOrder":1,"curCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-01-26 02:56:23","endLine":510,"groupId":"40935","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f7/2a2f14f237e3aa2a9c932df5b05a2d1d36c506.src","preCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = \n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator = \n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"B"}],"commitId":"1542260d52238e87de4fa040e6079465777e8263","commitMessage":"@@@[FLINK-5630] [streaming api] Followups to the AggregateFunction\n\n  - Add a RichAggregateFunction\n  - Document generic type parameters\n  - Allowing different input/output types for the cases where an additional window apply function is specified\n  - Adding the aggregate() methods to the Scala API\n  - Adding the window translation tests\n","date":"2017-01-26 02:56:23","modifiedFileCount":"7","status":"B","submitter":"Stephan Ewen"},{"authorTime":"2017-06-01 19:17:25","codes":[{"authorDate":"2017-06-01 19:17:25","commitOrder":2,"curCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","date":"2017-06-08 16:42:41","endLine":636,"groupId":"6322","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateEventTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/48ed4da3b56a5fafa0a272494e5fb2711ce41d.src","preCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =\n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":608,"status":"M"},{"authorDate":"2017-06-01 19:17:25","commitOrder":2,"curCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","date":"2017-06-08 16:42:41","endLine":667,"groupId":"6322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/87/48ed4da3b56a5fafa0a272494e5fb2711ce41d.src","preCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(new TupleKeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform =\n\t\t\t\t(OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple2<String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple2<String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"}],"commitId":"bcaf816dc5313c6c7de1e3436cc87036fd2ea3d0","commitMessage":"@@@[FLINK-6783] Changed passing index of type argument while extracting return type.\n","date":"2017-06-08 16:42:41","modifiedFileCount":"17","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":533,"groupId":"102816","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregateEventTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/871406ac51fcb92088b16ceba657da0961f6c8.src","preCode":"\tpublic void testAggregateEventTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":563,"groupId":"102816","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAggregateProcessingTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/871406ac51fcb92088b16ceba657da0961f6c8.src","preCode":"\tpublic void testAggregateProcessingTime() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);\n\n\t\tDataStream<Tuple3<String, String, Integer>> source = env.fromElements(\n\t\t\tTuple3.of(\"hello\", \"hallo\", 1),\n\t\t\tTuple3.of(\"hello\", \"hallo\", 2));\n\n\t\tDataStream<Integer> window1 = source\n\t\t\t\t.keyBy(new Tuple3KeySelector())\n\t\t\t\t.window(SlidingProcessingTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.aggregate(new DummyAggregationFunction());\n\n\t\tfinal OneInputTransformation<Tuple3<String, String, Integer>, Integer> transform =\n\t\t\t(OneInputTransformation<Tuple3<String, String, Integer>, Integer>) window1.getTransformation();\n\n\t\tfinal OneInputStreamOperator<Tuple3<String, String, Integer>, Integer> operator = transform.getOperator();\n\n\t\tAssert.assertTrue(operator instanceof WindowOperator);\n\t\tWindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?> winOperator =\n\t\t\t\t(WindowOperator<String, Tuple3<String, String, Integer>, ?, ?, ?>) operator;\n\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingProcessingTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(\n\t\t\t\twinOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple3<>(\"hello\", \"hallo\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":536,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
