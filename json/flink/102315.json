[{"authorTime":"2020-07-30 21:09:26","codes":[{"authorDate":"2020-09-01 16:33:27","commitOrder":2,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\tDynamicTableFactory.Context context,\n\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new DebeziumAvroSerializationSchema(rowType, schemaRegistryURL, subject.get());\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-08 17:57:22","endLine":121,"groupId":"14360","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d5/d522ac023be7f13c885f1445341ed30e0d17a4.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\tDynamicTableFactory.Context context,\n\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new DebeziumAvroSerializationSchema(rowType, schemaRegistryURL, subject.get());\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2020-07-30 21:09:26","commitOrder":2,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new AvroRowDataSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\tConfluentRegistryAvroSerializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tsubject.get(),\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(rowType),\n\t\t\t\t\t\t\t\tschemaRegistryURL),\n\t\t\t\t\t\tRowDataToAvroConverters.createRowConverter(rowType));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.insertOnly();\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-07-30 21:09:26","endLine":125,"groupId":"40691","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/134254e75e9794cd6687db601c7612686d14e8.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new AvroRowDataSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\tConfluentRegistryAvroSerializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tsubject.get(),\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(rowType),\n\t\t\t\t\t\t\t\tschemaRegistryURL),\n\t\t\t\t\t\tRowDataToAvroConverters.createRowConverter(rowType));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.insertOnly();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"}],"commitId":"edec6aa895568c6dfa47e73d10071cda3b57015a","commitMessage":"@@@[FLINK-18774][debezium-avro] Support debezium avro format\n\nThis closes #13296\n","date":"2020-11-08 17:57:22","modifiedFileCount":"1","status":"M","submitter":"caozhen1937"},{"authorTime":"2020-11-07 14:28:54","codes":[{"authorDate":"2020-11-07 14:28:54","commitOrder":3,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\n\t\t\t\t\"Option '%s.%s' is required for serialization\",\n\t\t\t\tIDENTIFIER,\n\t\t\t\tSCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new DebeziumAvroSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\tschemaRegistryURL,\n\t\t\t\t\tsubject.get());\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-08 17:57:22","endLine":126,"groupId":"14360","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/49/4108c1861c092d6df1e7cac372c743a5cd4621.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\n\t\t\t\t\"Option '%s.%s' is required for serialization\",\n\t\t\t\tIDENTIFIER,\n\t\t\t\tSCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new DebeziumAvroSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\tschemaRegistryURL,\n\t\t\t\t\tsubject.get());\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"MB"},{"authorDate":"2020-11-07 14:28:54","commitOrder":3,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new AvroRowDataSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\tConfluentRegistryAvroSerializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tsubject.get(),\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(rowType),\n\t\t\t\t\t\t\t\tschemaRegistryURL),\n\t\t\t\t\t\tRowDataToAvroConverters.createConverter(rowType));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.insertOnly();\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-08 17:57:22","endLine":125,"groupId":"40691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/01c004959069f33ea0b0223f7fd05078e1329e.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\n\t\tString schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n\t\tOptional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n\t\tif (!subject.isPresent()) {\n\t\t\tthrow new ValidationException(String.format(\"Option %s.%s is required for serialization\",\n\t\t\t\t\tIDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n\t\t}\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context,\n\t\t\t\t\tDataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new AvroRowDataSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\tConfluentRegistryAvroSerializationSchema.forGeneric(\n\t\t\t\t\t\t\t\tsubject.get(),\n\t\t\t\t\t\t\t\tAvroSchemaConverter.convertToSchema(rowType),\n\t\t\t\t\t\t\t\tschemaRegistryURL),\n\t\t\t\t\t\tRowDataToAvroConverters.createConverter(rowType));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.insertOnly();\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"MB"}],"commitId":"bff7da11cb0148ab6e63acac7844deb922458999","commitMessage":"@@@[FLINK-18774][debezium-avro] Improve debezium-avro format implementation\n","date":"2020-11-08 17:57:22","modifiedFileCount":"13","status":"M","submitter":"Jark Wu"},{"authorTime":"2021-06-22 15:39:40","codes":[{"authorDate":"2021-06-22 15:39:40","commitOrder":4,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get());\n            }\n        };\n    }\n","date":"2021-06-24 14:48:11","endLine":120,"groupId":"14360","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/66bfbaf4ada270694868842510b252d64384f7.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n        Optional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get());\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-06-22 15:39:40","commitOrder":4,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                subject.get(),\n                                AvroSchemaConverter.convertToSchema(rowType),\n                                schemaRegistryURL),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","date":"2021-06-24 14:48:11","endLine":121,"groupId":"40691","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/9fdbaa0fc39b31f075ec045e930c3a070ac4cb.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(SCHEMA_REGISTRY_URL);\n        Optional<String> subject = formatOptions.getOptional(SCHEMA_REGISTRY_SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SCHEMA_REGISTRY_SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                subject.get(),\n                                AvroSchemaConverter.convertToSchema(rowType),\n                                schemaRegistryURL),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"6c70f8805f1c0929eecfe4fd0e0d4912e9576cb6","commitMessage":"@@@[FLINK-21229][avro-confluent-registry] Shorten RegistryAvroOptions\n","date":"2021-06-24 14:48:11","modifiedFileCount":"8","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-04-29 15:31:51","codes":[{"authorDate":"2021-06-22 15:39:40","commitOrder":5,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get());\n            }\n        };\n    }\n","date":"2021-06-24 14:48:11","endLine":120,"groupId":"14360","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/66bfbaf4ada270694868842510b252d64384f7.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get());\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2021-04-29 15:31:51","commitOrder":5,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        Map<String, ?> optionalPropertiesMap = buildOptionalPropertiesMap(formatOptions);\n\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        optionalPropertiesMap.isEmpty()\n                                ? ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                        subject.get(),\n                                        AvroSchemaConverter.convertToSchema(rowType),\n                                        schemaRegistryURL)\n                                : ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                        subject.get(),\n                                        AvroSchemaConverter.convertToSchema(rowType),\n                                        schemaRegistryURL,\n                                        optionalPropertiesMap),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","date":"2021-06-24 14:48:11","endLine":148,"groupId":"41868","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d8/465e7abb9fedf017fa6caf3b13c726b59462c3.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                subject.get(),\n                                AvroSchemaConverter.convertToSchema(rowType),\n                                schemaRegistryURL),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"cf80dd305ee3d2c091babf904f8a4809ab85ea63","commitMessage":"@@@[FLINK-21229][avro-confluent-registry] Add Confluent schema registry SSL support\n","date":"2021-06-24 14:48:11","modifiedFileCount":"6","status":"M","submitter":"Lars Bachmann"},{"authorTime":"2021-07-21 20:39:15","codes":[{"authorDate":"2021-07-21 20:39:15","commitOrder":6,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        Map<String, ?> optionalPropertiesMap = buildOptionalPropertiesMap(formatOptions);\n\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get(), optionalPropertiesMap);\n            }\n        };\n    }\n","date":"2021-08-02 23:08:23","endLine":134,"groupId":"102315","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/db/b07904959f55064f0e7bc5330da4eec7906d0c.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option '%s.%s' is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new DebeziumAvroSerializationSchema(\n                        rowType, schemaRegistryURL, subject.get());\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/debezium/DebeziumAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-07-21 20:39:15","commitOrder":6,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        Map<String, ?> optionalPropertiesMap = buildOptionalPropertiesMap(formatOptions);\n\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                subject.get(),\n                                AvroSchemaConverter.convertToSchema(rowType),\n                                schemaRegistryURL,\n                                optionalPropertiesMap),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","date":"2021-08-02 23:08:23","endLine":141,"groupId":"102315","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2b/37e36495553cb1758944f299a4e129a97fe1bc.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n\n        String schemaRegistryURL = formatOptions.get(URL);\n        Optional<String> subject = formatOptions.getOptional(SUBJECT);\n        Map<String, ?> optionalPropertiesMap = buildOptionalPropertiesMap(formatOptions);\n\n        if (!subject.isPresent()) {\n            throw new ValidationException(\n                    String.format(\n                            \"Option %s.%s is required for serialization\",\n                            IDENTIFIER, SUBJECT.key()));\n        }\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new AvroRowDataSerializationSchema(\n                        rowType,\n                        optionalPropertiesMap.isEmpty()\n                                ? ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                        subject.get(),\n                                        AvroSchemaConverter.convertToSchema(rowType),\n                                        schemaRegistryURL)\n                                : ConfluentRegistryAvroSerializationSchema.forGeneric(\n                                        subject.get(),\n                                        AvroSchemaConverter.convertToSchema(rowType),\n                                        schemaRegistryURL,\n                                        optionalPropertiesMap),\n                        RowDataToAvroConverters.createConverter(rowType));\n            }\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.insertOnly();\n            }\n        };\n    }\n","realPath":"flink-formats/flink-avro-confluent-registry/src/main/java/org/apache/flink/formats/avro/registry/confluent/RegistryAvroFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"78db0e7c50235d7f5ae83225ac11192f5b121f7a","commitMessage":"@@@[FLINK-23450][avro-confluent-registry] Set properties map for DebeziumAvroFormat\n\nThis closes #16565.\n","date":"2021-08-02 23:08:23","modifiedFileCount":"6","status":"M","submitter":"Timo Walther"}]
