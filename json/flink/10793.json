[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = table.getRegionLocator().getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = table.getRegionLocator().getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getTableName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","date":"2020-09-28 22:08:46","endLine":265,"groupId":"29478","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputSplits","params":"(finalintminNumSplits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/4f437905b9a65956cfa344af385a1745433d15.src","preCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = table.getRegionLocator().getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = table.getRegionLocator().getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getTableName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/main/java/org/apache/flink/connector/hbase1/source/AbstractTableInputFormat.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = regionLocator.getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = regionLocator.getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getName().getName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","date":"2020-09-28 22:08:46","endLine":265,"groupId":"8689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputSplits","params":"(finalintminNumSplits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/24/b7f643fe98d857fada9b0f7d9877096b2528ed.src","preCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = regionLocator.getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = regionLocator.getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getName().getName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/main/java/org/apache/flink/connector/hbase2/source/AbstractTableInputFormat.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2020-11-10 10:28:25","codes":[{"authorDate":"2020-11-10 10:28:25","commitOrder":2,"curCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = table.getRegionLocator().getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\"Unexpected region keys: {} appeared in HBase table: {}, all region information are: {}.\",\n\t\t\t\t\t\tkeys,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t\ttable.getRegionLocator().getAllRegionLocations());\n\t\t\t\tthrow new IOException(\"HBase Table expects at least one region in scan,\" +\n\t\t\t\t\t\t\" please check the HBase table status in HBase cluster\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = table.getRegionLocator().getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getTableName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","date":"2020-11-10 10:28:25","endLine":271,"groupId":"10793","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createInputSplits","params":"(finalintminNumSplits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5e/1c6c6c846349a75e9064f42ae03ebff948fc1d.src","preCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = table.getRegionLocator().getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = table.getRegionLocator().getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getTableName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/main/java/org/apache/flink/connector/hbase1/source/AbstractTableInputFormat.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2020-11-10 10:28:25","commitOrder":2,"curCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = regionLocator.getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\"Unexpected region keys: {} appeared in HBase table: {}, all region information are: {}.\",\n\t\t\t\t\t\tkeys,\n\t\t\t\t\t\ttable,\n\t\t\t\t\t\tregionLocator.getAllRegionLocations());\n\t\t\t\tthrow new IOException(\"HBase Table expects at least one region in scan,\" +\n\t\t\t\t\t\t\" please check the HBase table status in HBase cluster\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = regionLocator.getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getName().getName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","date":"2020-11-10 10:28:25","endLine":271,"groupId":"10793","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createInputSplits","params":"(finalintminNumSplits)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/b84758165bf92523a98e7a72421e7dcfef50de.src","preCode":"\tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n\t\ttry {\n\t\t\tinitTable();\n\n\t\t\t\r\n\t\t\tfinal Pair<byte[][], byte[][]> keys = regionLocator.getStartEndKeys();\n\t\t\tif (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {\n\t\t\t\tthrow new IOException(\"Expecting at least one region.\");\n\t\t\t}\n\t\t\tfinal byte[] startRow = scan.getStartRow();\n\t\t\tfinal byte[] stopRow = scan.getStopRow();\n\t\t\tfinal boolean scanWithNoLowerBound = startRow.length == 0;\n\t\t\tfinal boolean scanWithNoUpperBound = stopRow.length == 0;\n\n\t\t\tfinal List<TableInputSplit> splits = new ArrayList<>(minNumSplits);\n\t\t\tfor (int i = 0; i < keys.getFirst().length; i++) {\n\t\t\t\tfinal byte[] startKey = keys.getFirst()[i];\n\t\t\t\tfinal byte[] endKey = keys.getSecond()[i];\n\t\t\t\tfinal String regionLocation = regionLocator.getRegionLocation(startKey, false).getHostnamePort();\n\t\t\t\t\r\n\t\t\t\tif (!includeRegionInScan(startKey, endKey)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\r\n\t\t\t\tfinal String[] hosts = new String[]{regionLocation};\n\n\t\t\t\t\r\n\t\t\t\tboolean isLastRegion = endKey.length == 0;\n\t\t\t\tif ((scanWithNoLowerBound || isLastRegion || Bytes.compareTo(startRow, endKey) < 0) &&\n\t\t\t\t\t(scanWithNoUpperBound || Bytes.compareTo(stopRow, startKey) > 0)) {\n\n\t\t\t\t\tfinal byte[] splitStart = scanWithNoLowerBound || Bytes.compareTo(startKey, startRow) >= 0 ? startKey : startRow;\n\t\t\t\t\tfinal byte[] splitStop = (scanWithNoUpperBound || Bytes.compareTo(endKey, stopRow) <= 0)\n\t\t\t\t\t\t&& !isLastRegion ? endKey : stopRow;\n\t\t\t\t\tint id = splits.size();\n\t\t\t\t\tfinal TableInputSplit split = new TableInputSplit(id, hosts, table.getName().getName(), splitStart, splitStop);\n\t\t\t\t\tsplits.add(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\tLOG.info(\"Created \" + splits.size() + \" splits\");\n\t\t\tfor (TableInputSplit split : splits) {\n\t\t\t\tlogSplitInfo(\"created\", split);\n\t\t\t}\n\t\t\treturn splits.toArray(new TableInputSplit[splits.size()]);\n\t\t} finally {\n\t\t\tcloseTable();\n\t\t}\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/main/java/org/apache/flink/connector/hbase2/source/AbstractTableInputFormat.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"a9a00325109a3060ddc11de94c057025522cd619","commitMessage":"@@@[FLINK-18570][hbase] improve log and exception message for hbase e2e test SQLClientHBaseITCase\n\n","date":"2020-11-10 10:28:25","modifiedFileCount":"2","status":"M","submitter":"Leonard Xu"}]
