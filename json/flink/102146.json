[{"authorTime":"2020-08-12 11:11:58","codes":[{"authorDate":"2020-09-01 13:28:57","commitOrder":2,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(DynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new CanalJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\n\t}\n","date":"2020-09-01 13:28:57","endLine":120,"groupId":"14360","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/01/12b8a67711e28dc5120354d962ef4faa25ac83.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(DynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new CanalJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2020-08-12 11:11:58","commitOrder":2,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new MaxwellJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-08-12 11:11:58","endLine":120,"groupId":"14360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e3/df0434cc10ac0c0849b90c680ee9ca1e158fe9.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new MaxwellJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"}],"commitId":"853e1906c3fe3a3931c650c5ca6965a0d460240e","commitMessage":"@@@[FLINK-18824][json][table] Support serialization for canal-json format\n\nThis closes #13122","date":"2020-09-01 13:28:57","modifiedFileCount":"2","status":"M","submitter":"caozhen"},{"authorTime":"2020-11-11 10:58:04","codes":[{"authorDate":"2020-11-11 10:58:04","commitOrder":3,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tvalidateEncodingFormatOptions(formatOptions);\n\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\t\tJsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n\t\tString mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(DynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new CanalJsonSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\ttimestampFormat,\n\t\t\t\t\t\tmapNullKeyMode,\n\t\t\t\t\t\tmapNullKeyLiteral\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t}\n","date":"2020-11-11 10:58:04","endLine":137,"groupId":"14360","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/41/eb86c02471bbe62f8f7c7e8c1ec2e48f5bd258.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(DynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new CanalJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-11-11 10:58:04","commitOrder":3,"curCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tvalidateEncodingFormatOptions(formatOptions);\n\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\t\tJsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n\t\tString mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new MaxwellJsonSerializationSchema(\n\t\t\t\t\t\trowType,\n\t\t\t\t\t\ttimestampFormat,\n\t\t\t\t\t\tmapNullKeyMode,\n\t\t\t\t\t\tmapNullKeyLiteral\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-11 10:58:04","endLine":131,"groupId":"14360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4f/37723d5e88174d749f0c5acecda47fef9fe550.src","preCode":"\tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n\t\t\tDynamicTableFactory.Context context,\n\t\t\tReadableConfig formatOptions) {\n\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n\n\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n\n\t\t\t@Override\n\t\t\tpublic ChangelogMode getChangelogMode() {\n\t\t\t\treturn ChangelogMode.newBuilder()\n\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n\t\t\t\t\t.build();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n\t\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {\n\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n\t\t\t\treturn new MaxwellJsonSerializationSchema(\n\t\t\t\t\trowType,\n\t\t\t\t\ttimestampFormat);\n\t\t\t}\n\t\t};\n\t}\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"ba7c232cd2519995b693376cdf08b028e8f2e260","commitMessage":"@@@[FLINK-19912][json] Fix JSON format fails to serialize map value with null keys\n\nThis closes #13972","date":"2020-11-11 10:58:04","modifiedFileCount":"19","status":"M","submitter":"wangxlong"},{"authorTime":"2021-01-13 20:15:49","codes":[{"authorDate":"2021-01-13 20:15:49","commitOrder":4,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new CanalJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","date":"2021-01-13 20:15:49","endLine":114,"groupId":"14360","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e4/3dd1c50cdd7e18f47cbb0738bc80f450661b55.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new CanalJsonSerializationSchema(\n                        rowType, timestampFormat, mapNullKeyMode, mapNullKeyLiteral);\n            }\n        };\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-01-13 20:15:49","commitOrder":4,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new MaxwellJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","date":"2021-01-13 20:15:49","endLine":132,"groupId":"14360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c8/d47f0a6e3a23c4831184103fc2cc60a0dc3aa0.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new MaxwellJsonSerializationSchema(\n                        rowType, timestampFormat, mapNullKeyMode, mapNullKeyLiteral);\n            }\n        };\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"5b9f4db30e5afcf23588f44da767aaa218df1207","commitMessage":"@@@[FLINK-20861][json] Introduce an option for serializing DECIMALs in JSON as plain number instead of scientific notation\n\nThis closes #14604","date":"2021-01-13 20:15:49","modifiedFileCount":"17","status":"M","submitter":"LM Kang"},{"authorTime":"2021-06-30 18:15:34","codes":[{"authorDate":"2021-06-30 18:15:34","commitOrder":5,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonFormatOptionsUtil.getTimestampFormat(formatOptions);\n        JsonFormatOptions.MapNullKeyMode mapNullKeyMode =\n                JsonFormatOptionsUtil.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new CanalJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","date":"2021-07-12 18:56:17","endLine":115,"groupId":"102146","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/a3419fef0f19c17fa0db785c8262eb6f915e37.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new CanalJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-06-30 18:15:34","commitOrder":5,"curCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonFormatOptionsUtil.getTimestampFormat(formatOptions);\n        JsonFormatOptions.MapNullKeyMode mapNullKeyMode =\n                JsonFormatOptionsUtil.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new MaxwellJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","date":"2021-07-12 18:56:17","endLine":111,"groupId":"102146","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createEncodingFormat","params":"(DynamicTableFactory.Contextcontext@ReadableConfigformatOptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d3/7222bcc2485ed3bfebada0ec6bf2b39cf430bb.src","preCode":"    public EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n            DynamicTableFactory.Context context, ReadableConfig formatOptions) {\n        FactoryUtil.validateFactoryOptions(this, formatOptions);\n        validateEncodingFormatOptions(formatOptions);\n\n        TimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n        JsonOptions.MapNullKeyMode mapNullKeyMode = JsonOptions.getMapNullKeyMode(formatOptions);\n        String mapNullKeyLiteral = formatOptions.get(JSON_MAP_NULL_KEY_LITERAL);\n\n        final boolean encodeDecimalAsPlainNumber =\n                formatOptions.get(ENCODE_DECIMAL_AS_PLAIN_NUMBER);\n\n        return new EncodingFormat<SerializationSchema<RowData>>() {\n\n            @Override\n            public ChangelogMode getChangelogMode() {\n                return ChangelogMode.newBuilder()\n                        .addContainedKind(RowKind.INSERT)\n                        .addContainedKind(RowKind.UPDATE_BEFORE)\n                        .addContainedKind(RowKind.UPDATE_AFTER)\n                        .addContainedKind(RowKind.DELETE)\n                        .build();\n            }\n\n            @Override\n            public SerializationSchema<RowData> createRuntimeEncoder(\n                    DynamicTableSink.Context context, DataType consumedDataType) {\n                final RowType rowType = (RowType) consumedDataType.getLogicalType();\n                return new MaxwellJsonSerializationSchema(\n                        rowType,\n                        timestampFormat,\n                        mapNullKeyMode,\n                        mapNullKeyLiteral,\n                        encodeDecimalAsPlainNumber);\n            }\n        };\n    }\n","realPath":"flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"4fb9287e1d9da63d49d963e2120d79cf822f028c","commitMessage":"@@@[FLINK-23064][format-json] Make JsonOptions PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"17","status":"M","submitter":"Ingo B?rk"}]
