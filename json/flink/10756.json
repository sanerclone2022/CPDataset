[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSinkFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(ROWKEY, STRING())\n\t\t\t.field(FAMILY1, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL3, BIGINT())))\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSink sink = createTableSink(schema, getAllOptions());\n\t\tassertTrue(sink instanceof HBaseDynamicTableSink);\n\t\tHBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n\t\tassertEquals(0, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(\n\t\t\tnew DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\n\t\tHBaseOptions expectedHBaseOptions = HBaseOptions.builder()\n\t\t\t.setTableName(\"testHBastTable\")\n\t\t\t.setZkQuorum(\"localhost:2181\")\n\t\t\t.setZkNodeParent(\"/flink\")\n\t\t\t.build();\n\t\tHBaseOptions actualHBaseOptions = hbaseSink.getHBaseOptions();\n\t\tassertEquals(expectedHBaseOptions, actualHBaseOptions);\n\n\t\tHBaseWriteOptions expectedWriteOptions = HBaseWriteOptions.builder()\n\t\t\t.setBufferFlushMaxRows(1000)\n\t\t\t.setBufferFlushIntervalMillis(1000)\n\t\t\t.setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n\t\t\t.build();\n\t\tHBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n\t\tassertEquals(expectedWriteOptions, actualWriteOptions);\n\t}\n","date":"2020-09-28 22:08:46","endLine":190,"groupId":"13664","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/9a/901c3d05395f562737a683b679f849a884387d.src","preCode":"\tpublic void testTableSinkFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(ROWKEY, STRING())\n\t\t\t.field(FAMILY1, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL3, BIGINT())))\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSink sink = createTableSink(schema, getAllOptions());\n\t\tassertTrue(sink instanceof HBaseDynamicTableSink);\n\t\tHBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n\t\tassertEquals(0, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(\n\t\t\tnew DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\n\t\tHBaseOptions expectedHBaseOptions = HBaseOptions.builder()\n\t\t\t.setTableName(\"testHBastTable\")\n\t\t\t.setZkQuorum(\"localhost:2181\")\n\t\t\t.setZkNodeParent(\"/flink\")\n\t\t\t.build();\n\t\tHBaseOptions actualHBaseOptions = hbaseSink.getHBaseOptions();\n\t\tassertEquals(expectedHBaseOptions, actualHBaseOptions);\n\n\t\tHBaseWriteOptions expectedWriteOptions = HBaseWriteOptions.builder()\n\t\t\t.setBufferFlushMaxRows(1000)\n\t\t\t.setBufferFlushIntervalMillis(1000)\n\t\t\t.setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n\t\t\t.build();\n\t\tHBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n\t\tassertEquals(expectedWriteOptions, actualWriteOptions);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSinkFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(ROWKEY, STRING())\n\t\t\t.field(FAMILY1, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL3, BIGINT())))\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSink sink = createTableSink(schema, getAllOptions());\n\t\tassertTrue(sink instanceof HBaseDynamicTableSink);\n\t\tHBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n\t\tassertEquals(0, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(\n\t\t\tnew DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\n\t\tHBaseWriteOptions expectedWriteOptions = HBaseWriteOptions.builder()\n\t\t\t.setBufferFlushMaxRows(1000)\n\t\t\t.setBufferFlushIntervalMillis(1000)\n\t\t\t.setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n\t\t\t.build();\n\t\tHBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n\t\tassertEquals(expectedWriteOptions, actualWriteOptions);\n\t}\n","date":"2020-09-28 22:08:46","endLine":181,"groupId":"13664","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/94/530b5007173ea1185e43fbaa19f41ce2bb880b.src","preCode":"\tpublic void testTableSinkFactory() {\n\t\tTableSchema schema = TableSchema.builder()\n\t\t\t.field(ROWKEY, STRING())\n\t\t\t.field(FAMILY1, ROW(\n\t\t\t\tFIELD(COL1, DOUBLE()),\n\t\t\t\tFIELD(COL2, INT())))\n\t\t\t.field(FAMILY2, ROW(\n\t\t\t\tFIELD(COL1, INT()),\n\t\t\t\tFIELD(COL3, BIGINT())))\n\t\t\t.field(FAMILY3, ROW(\n\t\t\t\tFIELD(COL2, BOOLEAN()),\n\t\t\t\tFIELD(COL3, STRING())))\n\t\t\t.field(FAMILY4, ROW(\n\t\t\t\tFIELD(COL1, DECIMAL(10, 3)),\n\t\t\t\tFIELD(COL2, TIMESTAMP(3)),\n\t\t\t\tFIELD(COL3, DATE()),\n\t\t\t\tFIELD(COL4, TIME())))\n\t\t\t.build();\n\n\t\tDynamicTableSink sink = createTableSink(schema, getAllOptions());\n\t\tassertTrue(sink instanceof HBaseDynamicTableSink);\n\t\tHBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n\t\tHBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n\t\tassertEquals(0, hbaseSchema.getRowKeyIndex());\n\t\tassertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n\t\tassertArrayEquals(new String[]{\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n\t\tassertArrayEquals(new String[]{\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n\t\tassertArrayEquals(new String[]{\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n\t\tassertArrayEquals(new DataType[]{DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n\t\tassertArrayEquals(new DataType[]{INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n\t\tassertArrayEquals(new DataType[]{BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n\t\tassertArrayEquals(\n\t\t\tnew DataType[]{DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n\t\t\thbaseSchema.getQualifierDataTypes(\"f4\"));\n\n\t\tHBaseWriteOptions expectedWriteOptions = HBaseWriteOptions.builder()\n\t\t\t.setBufferFlushMaxRows(1000)\n\t\t\t.setBufferFlushIntervalMillis(1000)\n\t\t\t.setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n\t\t\t.build();\n\t\tHBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n\t\tassertEquals(expectedWriteOptions, actualWriteOptions);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2021-01-14 20:26:32","codes":[{"authorDate":"2021-01-14 20:26:32","commitOrder":2,"curCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","date":"2021-01-14 20:26:32","endLine":211,"groupId":"13664","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/3c/51f31b64afc0585b7e5b6cab47b37a5e3ddc1b.src","preCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        HBaseOptions expectedHBaseOptions =\n                HBaseOptions.builder()\n                        .setTableName(\"testHBastTable\")\n                        .setZkQuorum(\"localhost:2181\")\n                        .setZkNodeParent(\"/flink\")\n                        .build();\n        HBaseOptions actualHBaseOptions = hbaseSink.getHBaseOptions();\n        assertEquals(expectedHBaseOptions, actualHBaseOptions);\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-01-14 20:26:32","commitOrder":2,"curCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","date":"2021-01-14 20:26:32","endLine":211,"groupId":"13664","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a7/847bb8e7842f2643f9a5118390ad7b8dceafa0.src","preCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"39dbd75b1c7e063ca4f6bb771e21f909e3fd15ff","commitMessage":"@@@[FLINK-20812][hbase] Support 'properties.*' option to pass through all the HBase properties\n\nThis closes #14536","date":"2021-01-14 20:26:32","modifiedFileCount":"14","status":"M","submitter":"zhaown"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":3,"curCode":"    public void testTableSinkFactory() {\n        ResolvedSchema schema =\n                ResolvedSchema.of(\n                        Column.physical(ROWKEY, STRING()),\n                        Column.physical(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT()))),\n                        Column.physical(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT()))),\n                        Column.physical(\n                                FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING()))),\n                        Column.physical(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME()))));\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","date":"2021-03-24 04:35:35","endLine":210,"groupId":"10756","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/e30b0ef9f731868cb04af619ced127647ee4a9.src","preCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":3,"curCode":"    public void testTableSinkFactory() {\n        ResolvedSchema schema =\n                ResolvedSchema.of(\n                        Column.physical(ROWKEY, STRING()),\n                        Column.physical(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT()))),\n                        Column.physical(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT()))),\n                        Column.physical(\n                                FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING()))),\n                        Column.physical(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME()))));\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","date":"2021-03-24 04:35:35","endLine":213,"groupId":"10756","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testTableSinkFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/0f900ab3c93f31c066c5e1f6e33610e2919d10.src","preCode":"    public void testTableSinkFactory() {\n        TableSchema schema =\n                TableSchema.builder()\n                        .field(ROWKEY, STRING())\n                        .field(FAMILY1, ROW(FIELD(COL1, DOUBLE()), FIELD(COL2, INT())))\n                        .field(FAMILY2, ROW(FIELD(COL1, INT()), FIELD(COL3, BIGINT())))\n                        .field(FAMILY3, ROW(FIELD(COL2, BOOLEAN()), FIELD(COL3, STRING())))\n                        .field(\n                                FAMILY4,\n                                ROW(\n                                        FIELD(COL1, DECIMAL(10, 3)),\n                                        FIELD(COL2, TIMESTAMP(3)),\n                                        FIELD(COL3, DATE()),\n                                        FIELD(COL4, TIME())))\n                        .build();\n\n        DynamicTableSink sink = createTableSink(schema, getAllOptions());\n        assertTrue(sink instanceof HBaseDynamicTableSink);\n        HBaseDynamicTableSink hbaseSink = (HBaseDynamicTableSink) sink;\n\n        HBaseTableSchema hbaseSchema = hbaseSink.getHBaseTableSchema();\n        assertEquals(0, hbaseSchema.getRowKeyIndex());\n        assertEquals(Optional.of(STRING()), hbaseSchema.getRowKeyDataType());\n\n        assertArrayEquals(new String[] {\"f1\", \"f2\", \"f3\", \"f4\"}, hbaseSchema.getFamilyNames());\n        assertArrayEquals(new String[] {\"c1\", \"c2\"}, hbaseSchema.getQualifierNames(\"f1\"));\n        assertArrayEquals(new String[] {\"c1\", \"c3\"}, hbaseSchema.getQualifierNames(\"f2\"));\n        assertArrayEquals(new String[] {\"c2\", \"c3\"}, hbaseSchema.getQualifierNames(\"f3\"));\n        assertArrayEquals(\n                new String[] {\"c1\", \"c2\", \"c3\", \"c4\"}, hbaseSchema.getQualifierNames(\"f4\"));\n\n        assertArrayEquals(\n                new DataType[] {DOUBLE(), INT()}, hbaseSchema.getQualifierDataTypes(\"f1\"));\n        assertArrayEquals(\n                new DataType[] {INT(), BIGINT()}, hbaseSchema.getQualifierDataTypes(\"f2\"));\n        assertArrayEquals(\n                new DataType[] {BOOLEAN(), STRING()}, hbaseSchema.getQualifierDataTypes(\"f3\"));\n        assertArrayEquals(\n                new DataType[] {DECIMAL(10, 3), TIMESTAMP(3), DATE(), TIME()},\n                hbaseSchema.getQualifierDataTypes(\"f4\"));\n\n        \r\n        org.apache.hadoop.conf.Configuration expectedConfiguration =\n                HBaseConfigurationUtil.getHBaseConfiguration();\n        expectedConfiguration.set(HConstants.ZOOKEEPER_QUORUM, \"localhost:2181\");\n        expectedConfiguration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, \"/flink\");\n        expectedConfiguration.set(\"hbase.security.authentication\", \"kerberos\");\n\n        org.apache.hadoop.conf.Configuration actualConfiguration = hbaseSink.getConfiguration();\n\n        assertEquals(\n                IteratorUtils.toList(expectedConfiguration.iterator()),\n                IteratorUtils.toList(actualConfiguration.iterator()));\n\n        \r\n        assertEquals(\"testHBastTable\", hbaseSink.getTableName());\n\n        HBaseWriteOptions expectedWriteOptions =\n                HBaseWriteOptions.builder()\n                        .setBufferFlushMaxRows(1000)\n                        .setBufferFlushIntervalMillis(1000)\n                        .setBufferFlushMaxSizeInBytes(2 * 1024 * 1024)\n                        .build();\n        HBaseWriteOptions actualWriteOptions = hbaseSink.getWriteOptions();\n        assertEquals(expectedWriteOptions, actualWriteOptions);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseDynamicTableFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"}]
