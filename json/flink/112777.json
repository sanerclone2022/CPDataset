[{"authorTime":"2017-03-21 22:00:24","codes":[{"authorDate":"2017-03-21 22:00:24","commitOrder":1,"curCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontainsInAnyOrder(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-23 23:29:01","endLine":524,"groupId":"24010","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/c7b3eb9415cfed7ad5989621aa40b3d9cc5963.src","preCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontainsInAnyOrder(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"B"},{"authorDate":"2017-03-21 22:00:24","commitOrder":1,"curCode":"\tprivate  void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontainsInAnyOrder(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-23 23:29:01","endLine":577,"groupId":"21817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"(TimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ab/c7b3eb9415cfed7ad5989621aa40b3d9cc5963.src","preCode":"\tprivate  void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontainsInAnyOrder(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"}],"commitId":"3c4b156527e9ca7cb2dafdda706913e91d688133","commitMessage":"@@@[hotfix] Add EvictingWindowOperatorContractTest\n\nThe existing WindowOperatorContractTest is turned into a test base while\nRegularWindowOperatorContract test tests WindowOperator and\nEvictingWindowOperatorTest tests EvictingWindowOperator. For this to\nwork.  the base tests now always use List windows and we have specific\ntests for reducing/folding windows in RegularWindowOperatorContractTest.\n\nThis also patches in the missing side output support for\nEvictingWindowOperator.\n","date":"2017-03-23 23:29:01","modifiedFileCount":"3","status":"B","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-23 00:02:15","codes":[{"authorDate":"2017-03-23 00:02:15","commitOrder":2,"curCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-23 23:29:01","endLine":525,"groupId":"24010","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/ea8b1e25243b465967fbb63047a9d6f8576ec4.src","preCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"MB"},{"authorDate":"2017-03-23 00:02:15","commitOrder":2,"curCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-23 23:29:01","endLine":578,"groupId":"21817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"(TimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/ea8b1e25243b465967fbb63047a9d6f8576ec4.src","preCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"MB"}],"commitId":"25d52e4df216dc54d2d82e1f0b449871bda4ba74","commitMessage":"@@@[hotfix] Fix various small issues in WindowOperatorContractTest\n","date":"2017-03-23 23:29:01","modifiedFileCount":"1","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2017-03-06 12:07:18","codes":[{"authorDate":"2017-03-06 12:07:18","commitOrder":3,"curCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(4, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-25 23:59:17","endLine":529,"groupId":"24010","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/ab505873556fc6ca7cc3435664112acb73c14c.src","preCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2017-03-06 12:07:18","commitOrder":3,"curCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(4, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2017-03-25 23:59:17","endLine":582,"groupId":"10165","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"(TimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fa/ab505873556fc6ca7cc3435664112acb73c14c.src","preCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(3, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).apply(anyInt(), anyTimeWindow(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).apply(eq(0), eq(new TimeWindow(0, 2)), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"M"}],"commitId":"fad201bfb0b1f2757f68f7b3ffaf97a486eb93e8","commitMessage":"@@@[FLINK-5929] Allow Access to Per-Window State in ProcessWindowFunction\n","date":"2017-03-25 23:59:17","modifiedFileCount":"24","status":"M","submitter":"Seth Wiesman"},{"authorTime":"2018-10-08 19:39:20","codes":[{"authorDate":"2018-10-08 19:39:20","commitOrder":4,"curCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2018-10-08 19:39:20","endLine":589,"groupId":"24010","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/65e79b3dc209c9bbdec1c8e8a5b39bf8d35aa1.src","preCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(4, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"},{"authorDate":"2018-10-08 19:39:20","commitOrder":4,"curCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2018-10-08 19:39:20","endLine":641,"groupId":"24011","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"(TimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e0/65e79b3dc209c9bbdec1c8e8a5b39bf8d35aa1.src","preCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgumentAt(4, Collector.class);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":601,"status":"M"}],"commitId":"a2826ccded5b20374e71dc8377a119e692559647","commitMessage":"@@@[FLINK-10208][build] Bump mockito to 2.21.0 / powermock to 2.0.0-beta.5\n\n","date":"2018-10-08 19:39:20","modifiedFileCount":"36","status":"M","submitter":"Chesnay Schepler"},{"authorTime":"2019-12-05 01:41:26","codes":[{"authorDate":"2019-12-05 01:41:26","commitOrder":5,"curCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(streamRecord(\"Hallo\", 1L), streamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":589,"groupId":"112777","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/90/81036c64c36b44dbf5adb95259918f49cb9770.src","preCode":"\tpublic void testEmittingFromWindowFunction() throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<TriggerResult>() {\n\t\t\t@Override\n\t\t\tpublic TriggerResult answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\treturn TriggerResult.FIRE;\n\t\t\t}\n\t\t}).when(mockTrigger).onElement(Matchers.<Integer>anyObject(), anyLong(), anyTimeWindow(), anyTriggerContext());\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"},{"authorDate":"2019-12-05 01:41:26","commitOrder":5,"curCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(streamRecord(\"Hallo\", 1L), streamRecord(\"Ciao\", 1L)));\n\t}\n","date":"2019-12-05 17:16:58","endLine":641,"groupId":"112777","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmittingFromWindowFunction","params":"(TimeDomainAdaptortimeAdaptor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/90/81036c64c36b44dbf5adb95259918f49cb9770.src","preCode":"\tprivate void testEmittingFromWindowFunction(TimeDomainAdaptor timeAdaptor) throws Exception {\n\n\t\tWindowAssigner<Integer, TimeWindow> mockAssigner = mockTimeWindowAssigner();\n\t\tTrigger<Integer, TimeWindow> mockTrigger = mockTrigger();\n\t\tInternalWindowFunction<Iterable<Integer>, String, Integer, TimeWindow> mockWindowFunction = mockWindowFunction();\n\n\t\tKeyedOneInputStreamOperatorTestHarness<Integer, Integer, String> testHarness =\n\t\t\t\tcreateWindowOperator(mockAssigner, mockTrigger, 0L, mockWindowFunction);\n\n\t\ttestHarness.open();\n\n\t\twhen(mockAssigner.assignWindows(anyInt(), anyLong(), anyAssignerContext()))\n\t\t\t\t.thenReturn(Collections.singletonList(new TimeWindow(0, 2)));\n\n\t\tdoAnswer(new Answer<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void answer(InvocationOnMock invocation) throws Exception {\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tCollector<String> out = invocation.getArgument(4);\n\t\t\t\tout.collect(\"Hallo\");\n\t\t\t\tout.collect(\"Ciao\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).when(mockWindowFunction).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\ttimeAdaptor.shouldRegisterTimerOnElement(mockTrigger, 1);\n\n\t\ttestHarness.processElement(new StreamRecord<>(0, 0L));\n\n\t\tverify(mockWindowFunction, never()).process(anyInt(), anyTimeWindow(), anyInternalWindowContext(), anyIntIterable(), WindowOperatorContractTest.<String>anyCollector());\n\t\tassertTrue(testHarness.extractOutputStreamRecords().isEmpty());\n\n\t\ttimeAdaptor.shouldFireOnTime(mockTrigger);\n\n\t\ttimeAdaptor.advanceTime(testHarness, 1L);\n\n\t\tverify(mockWindowFunction, times(1)).process(eq(0), eq(new TimeWindow(0, 2)), anyInternalWindowContext(), intIterable(0), WindowOperatorContractTest.<String>anyCollector());\n\n\t\tassertThat(testHarness.extractOutputStreamRecords(),\n\t\t\t\tcontains(isStreamRecord(\"Hallo\", 1L), isStreamRecord(\"Ciao\", 1L)));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorContractTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":601,"status":"M"}],"commitId":"23e62e4aa997b937943ab192a00608b1c681c683","commitMessage":"@@@[minor] Rename StreamRecordMatchers.isStreamRecord() to streamRecord()\n","date":"2019-12-05 17:16:58","modifiedFileCount":"3","status":"M","submitter":"Aljoscha Krettek"}]
