[{"authorTime":"2020-10-19 15:49:14","codes":[{"authorDate":"2020-10-19 15:49:14","commitOrder":2,"curCode":"\tpublic void testApplicationIsStoppedWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertThat(applicationExecutionFuture.isCancelled(), is(true));\n\t}\n","date":"2020-10-26 21:25:17","endLine":338,"groupId":"16302","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationIsStoppedWhenStoppingBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/0fc032880b55ff7e4e7ccda421f35e12958ff6.src","preCode":"\tpublic void testApplicationIsStoppedWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertThat(applicationExecutionFuture.isCancelled(), is(true));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"MB"},{"authorDate":"2020-10-19 15:49:14","commitOrder":2,"curCode":"\tpublic void testErrorHandlerIsCalledWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t2, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\t}\n","date":"2020-10-26 21:25:17","endLine":362,"groupId":"16302","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlerIsCalledWhenStoppingBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0d/0fc032880b55ff7e4e7ccda421f35e12958ff6.src","preCode":"\tpublic void testErrorHandlerIsCalledWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t2, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"B"}],"commitId":"f29a18e0f01c5bddffb8fa60c7b769b8c418f453","commitMessage":"@@@[FLINK-19154] ApplicationDispatcherBootstrap cleans up HA data only on FAILED.  CANCELLED.  SUCCEEDED\n\nDepending on the status with which a job got terminated.  we may\nwant to shutdown the cluster and clean up all HA data.  or not. To\nbe able to differentiate between the different termination reasons\nwe add the ApplicationFailureException.\n\nIn addition.  to be able to shutdown the cluster without cleaning up\nthe HA data.  we need to be able to terminate the dispatcher's shutdown future\nwith an exception. This is what the new error handler pass in the\nApplicationDispatcherBootstrap does. We chose to pass the FatalErrorHandler\nas a constructor argument because this allows for more robust code.\n\nThis closes #13699\n","date":"2020-10-26 21:25:17","modifiedFileCount":"15","status":"M","submitter":"Kostas Kloudas"},{"authorTime":"2020-10-22 02:55:44","codes":[{"authorDate":"2020-10-22 02:55:44","commitOrder":3,"curCode":"\tpublic void testApplicationIsStoppedWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, dispatcherBuilder.build(), scheduledExecutor, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertThat(applicationExecutionFuture.isCancelled(), is(true));\n\t}\n","date":"2020-10-26 21:25:43","endLine":327,"groupId":"101751","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplicationIsStoppedWhenStoppingBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testApplicationIsStoppedWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t3, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tScheduledFuture<?> applicationExecutionFuture = bootstrap.getApplicationExecutionFuture();\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertThat(applicationExecutionFuture.isCancelled(), is(true));\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2020-10-22 02:55:44","commitOrder":3,"curCode":"\tpublic void testErrorHandlerIsCalledWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t2, dispatcherBuilder.build(), scheduledExecutor, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture = bootstrap.getClusterShutdownFuture();\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\t}\n","date":"2020-10-26 21:25:43","endLine":350,"groupId":"101751","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testErrorHandlerIsCalledWhenStoppingBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/09/c8dbec4c9d8f262684317c5567d745b38988c0.src","preCode":"\tpublic void testErrorHandlerIsCalledWhenStoppingBootstrap() throws Exception {\n\t\tfinal TestingDispatcherGateway.Builder dispatcherBuilder = new TestingDispatcherGateway.Builder()\n\t\t\t\t.setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get()))\n\t\t\t\t.setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING));\n\n\t\t\r\n\t\t\r\n\t\tfinal CompletableFuture<Void> errorHandlerFuture = new CompletableFuture<>();\n\t\tfinal ApplicationDispatcherBootstrap bootstrap = createApplicationDispatcherBootstrap(\n\t\t\t\t2, errorHandlerFuture::completeExceptionally);\n\n\t\tfinal CompletableFuture<Acknowledge> shutdownFuture =\n\t\t\t\tbootstrap.runApplicationAndShutdownClusterAsync(dispatcherBuilder.build(), scheduledExecutor);\n\n\t\tbootstrap.stop();\n\n\t\t\r\n\t\tassertException(errorHandlerFuture, CancellationException.class);\n\n\t\t\r\n\t\tassertException(shutdownFuture, CancellationException.class);\n\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/deployment/application/ApplicationDispatcherBootstrapTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"c5ec0b0abe09e097f0e79f126b749be22bee437a","commitMessage":"@@@[FLINK-19154] Merge ApplicationDispatcherBootstrap#initialize() with constructor.\n","date":"2020-10-26 21:25:43","modifiedFileCount":"17","status":"M","submitter":"Kostas Kloudas"}]
