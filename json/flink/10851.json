[{"authorTime":"2020-05-16 02:06:46","codes":[{"authorDate":"2020-05-16 02:06:40","commitOrder":2,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidateOptions(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-05-17 22:34:39","endLine":103,"groupId":"39410","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/05/5989b1b0eb18b55e177433ae8d1eecfb42dba0.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidateOptions(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"NB"},{"authorDate":"2020-05-16 02:06:46","commitOrder":2,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-05-17 22:34:47","endLine":104,"groupId":"39410","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/c90b5ebfe63930ee1ff394beaca1f6bba45e16.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"}],"commitId":"ccd2d531d1cb577113d5021efd6277031eeef9d1","commitMessage":"@@@[FLINK-17027] Introduce a new Elasticsearch 6 connector with new property keys\n\nThis closes #12184\n","date":"2020-05-17 22:34:47","modifiedFileCount":"0","status":"M","submitter":"Dawid Wysakowicz"},{"authorTime":"2020-06-01 10:32:40","codes":[{"authorDate":"2020-06-01 10:32:40","commitOrder":3,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidateOptions(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-06-01 10:32:40","endLine":103,"groupId":"39410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ae/7a9fd1a4488ffb078275a5cf0c9a3462143b3e.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidateOptions(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-06-01 10:32:40","commitOrder":3,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-06-01 10:32:40","endLine":104,"groupId":"39410","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/d9c8932921504998b3daf4221749564d25ce18.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal SinkFormat<SerializationSchema<RowData>> format = helper.discoverSinkFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"64de78e36500b5a8c8720639ded4d1c5f963ad41","commitMessage":"@@@[FLINK-17887][table][connector] Improve interface of ScanFormatFactory and SinkFormatFactory\n\n\nWe improved the interfaces with the following changes:\n1. Have a common interface DynamicTableSource.Context.  and make Context of ScanTableSource and LookupTableSource extend it.  and rename them to LookupContext and ScanContext\n2. Change parameter of ScanFormat.createScanFormat from ScanTableSource.Context to DynamicTableSource.Context\n3. Rename ScanFormat.createScanFormat to DecodingFormat#createRuntimeDecoder()\n4. Rename SinkFormat.createSinkFormat to EncodingFormat#createRuntimeEncoder()\n5. Rename ScanFormatFactory to DecodingFormatFactory\n6. Rename SinkFormatFactory to EncodingFormatFactory\n\nThis closes #12320","date":"2020-06-01 10:32:40","modifiedFileCount":"48","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-01 10:32:40","codes":[{"authorDate":"2020-06-09 16:40:16","commitOrder":4,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-06-09 19:27:39","endLine":103,"groupId":"10851","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/32/0c894b257cb059b02c4883920e5ac6e00ccc33.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch7Configuration config = new Elasticsearch7Configuration(configuration, context.getClassLoader());\n\n\t\tvalidateOptions(config, configuration);\n\n\t\treturn new Elasticsearch7DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch7/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch7DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-06-01 10:32:40","commitOrder":4,"curCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","date":"2020-06-01 10:32:40","endLine":104,"groupId":"10851","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDynamicTableSink","params":"(Contextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c5/d9c8932921504998b3daf4221749564d25ce18.src","preCode":"\tpublic DynamicTableSink createDynamicTableSink(Context context) {\n\t\tTableSchema tableSchema = context.getCatalogTable().getSchema();\n\t\tElasticsearchValidationUtils.validatePrimaryKey(tableSchema);\n\t\tfinal FactoryUtil.TableFactoryHelper helper = FactoryUtil.createTableFactoryHelper(this, context);\n\n\t\tfinal EncodingFormat<SerializationSchema<RowData>> format = helper.discoverEncodingFormat(\n\t\t\tSerializationFormatFactory.class,\n\t\t\tFORMAT_OPTION);\n\n\t\thelper.validate();\n\t\tConfiguration configuration = new Configuration();\n\t\tcontext.getCatalogTable()\n\t\t\t.getOptions()\n\t\t\t.forEach(configuration::setString);\n\t\tElasticsearch6Configuration config = new Elasticsearch6Configuration(configuration, context.getClassLoader());\n\n\t\tvalidate(config, configuration);\n\n\t\treturn new Elasticsearch6DynamicSink(\n\t\t\tformat,\n\t\t\tconfig,\n\t\t\tTableSchemaUtils.getPhysicalSchema(tableSchema));\n\t}\n","realPath":"flink-connectors/flink-connector-elasticsearch6/src/main/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"}],"commitId":"bed750f0d5fd8e161f27edf979dd8961158699c1","commitMessage":"@@@[FLINK-18208] Fix flink ES connector typos\n\nThis closes #12543\n","date":"2020-06-09 19:27:39","modifiedFileCount":"2","status":"M","submitter":"liuyongvs"}]
