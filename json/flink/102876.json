[{"authorTime":"2019-11-19 11:56:16","codes":[{"authorDate":"2019-11-19 11:56:16","commitOrder":3,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","date":"2020-02-27 15:06:01","endLine":92,"groupId":"24871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@SingleInputGateFactory.ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/aa/1a160e49caa62430e55bfdee4d5ad0b1cee7d8.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2019-11-19 11:56:16","commitOrder":3,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","date":"2020-02-27 15:06:01","endLine":235,"groupId":"52531","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/dc/a505d727d8b7222637329d94553db21c5b248f.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"MB"}],"commitId":"92253f2e15090f5dac8cfc68c49727b62da23b8c","commitMessage":"@@@[FLINK-14818][benchmark] Fix InputGate setup logic of StreamNetworkBenchmarkEnvironment\n\nBefore this change.  in network benchmark (for example 1000 channels benchmark with 4 record writers) StreamNetworkBenchmarkEnvironment#createInputGate was creating 1000 input gates with 4 input channels each.  which doesn't make much sense. This commit is changing that to a single receiver with 4 input gates and each with 1000 channels.\n\nIt is achieved by providing testing implementations of InputChannels.  which are using channel index for requesting subpartitions from ResultPartition.  instead of subpartition index. Thanks to that.  we can map a single ResultPartition with N subpartitions.  to a single instance of InputGate with N channels.\n\nThe change also influences the benchmark results.  overall.  the performance goes down a bit because of the decrease of floating buffers and the followings are benchmark results before and after this change:\n\n------------------------------------------------------------------Before----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17079.534 ?  830.532  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    599.664 ?   13.325  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100. 100ms  thrpt   30  45629.898 ? 1623.455  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100. 100ms. SSL  thrpt   30   9817.421 ?  216.075  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000. 1ms  thrpt   30  25442.152 ?  968.340  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000. 100ms  thrpt   30  27944.285 ?  518.106  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000. 100ms. SSL  thrpt   30   7820.549 ?  895.862  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     13.184 ?    0.093   ms/op\n\n------------------------------------------------------------------After-----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17345.574 ?  370.647  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    608.881 ?   12.054  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100. 100ms  thrpt   30  41732.518 ? 1109.436  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100. 100ms. SSL  thrpt   30   9689.525 ?  202.895  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000. 1ms  thrpt   30  24106.705 ? 2952.364  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000. 100ms  thrpt   30  27509.665 ? 3246.965  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000. 100ms. SSL  thrpt   30   7691.287 ?  927.775  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     12.758 ?    0.147   ms/op\n","date":"2020-02-27 15:06:01","modifiedFileCount":"3","status":"M","submitter":"kevin.cyj"},{"authorTime":"2020-05-08 14:17:28","codes":[{"authorDate":"2020-05-08 14:17:28","commitOrder":4,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-05-12 15:55:58","endLine":90,"groupId":"24871","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@SingleInputGateFactory.ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/804cf967e0b5cdb5c9d85e724933afbe941b1b.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-05-08 14:17:28","commitOrder":4,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-05-12 15:55:58","endLine":235,"groupId":"52531","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b4/53051406f8027cbdf3869180e0e259b75456d1.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics,\n\t\t\t\tnetworkBufferPool);\n\t\t}\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"bcf7e287f52aa3d5eae9fc49938c85be676382b9","commitMessage":"@@@[hotfix][network] Maintain MemorySegmentProvider from InputChannel to SingleInputGate\n","date":"2020-05-12 15:55:58","modifiedFileCount":"15","status":"M","submitter":"Zhijiang"},{"authorTime":"2020-04-30 18:19:27","codes":[{"authorDate":"2020-05-08 14:17:28","commitOrder":5,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-05-12 15:55:58","endLine":90,"groupId":"24871","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@SingleInputGateFactory.ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/21/804cf967e0b5cdb5c9d85e724933afbe941b1b.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-04-30 18:19:27","commitOrder":5,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-05-12 15:55:58","endLine":235,"groupId":"52531","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/de/b6096f6bca08209cb91d7c370601c3b5ccd3fb.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"d7525baf093035c9b0fe125602814833388d1973","commitMessage":"@@@[FLINK-16536][network][checkpointing] Implement InputChannel state recovery for unaligned checkpoint\n\nDuring recovery process for unaligned checkpoint.  the input channel state should also be recovered besides with existing operator states.\n\nWe considered three guarantees during the implementation:\n1. Make input recovery happen after the output recovery for providing more floating buffers on output side firstly.\n2. Make partition request happen after input recovery for avoiding new data overtaking the previous state data.\n3. Introduce a dedicated single IO executor for unspilling the channel state one by one.  to avoid potential random IO.\n\nThis closes #11687.\n","date":"2020-05-12 15:55:58","modifiedFileCount":"33","status":"M","submitter":"Zhijiang"},{"authorTime":"2020-05-12 19:32:35","codes":[{"authorDate":"2020-05-12 19:32:35","commitOrder":6,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-08-13 17:48:01","endLine":91,"groupId":"24871","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@SingleInputGateFactory.ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/94746efba5d1d533f1fd854c0dfffd7d4f963f.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-05-12 19:32:35","commitOrder":6,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-08-13 17:48:01","endLine":237,"groupId":"52531","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0e/c13209a2090d2a3b58c144692d59c978bcccea.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"444fc346dc943d6606a0b27bf023d51993ffe114","commitMessage":"@@@[FLINK-18728][network] Make initialCredit of RemoteInputChannel final\n\nThe filed initialCredit of RemoteInputChannel is set only once and can be accessed by multi threads. This patch makes the filed final and moves the initialization to the constructor of RemoteInputChannel to avoid potential thread safety issues.\n\nThis closes #12994.\n","date":"2020-08-13 17:48:01","modifiedFileCount":"12","status":"M","submitter":"kevin.cyj"},{"authorTime":"2020-10-04 16:21:06","codes":[{"authorDate":"2020-05-12 19:32:35","commitOrder":7,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-08-13 17:48:01","endLine":91,"groupId":"102876","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@SingleInputGateFactory.ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8f/94746efba5d1d533f1fd854c0dfffd7d4f963f.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\treturn new TestLocalInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\treturn new TestRemoteInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-10-04 16:21:06","commitOrder":7,"curCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","date":"2020-10-06 19:24:48","endLine":238,"groupId":"102876","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createKnownInputChannel","params":"(SingleInputGateinputGate@intindex@NettyShuffleDescriptorinputChannelDescriptor@ChannelStatisticschannelStatistics@InputChannelMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/e5bf27685dbc6c80ea774bab076b751b9707af.src","preCode":"\tprotected InputChannel createKnownInputChannel(\n\t\t\tSingleInputGate inputGate,\n\t\t\tint index,\n\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n\t\t\tChannelStatistics channelStatistics,\n\t\t\tInputChannelMetrics metrics) {\n\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n\t\t\t\r\n\t\t\tchannelStatistics.numLocalChannels++;\n\t\t\treturn new LocalRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tpartitionManager,\n\t\t\t\ttaskEventPublisher,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tmetrics);\n\t\t} else {\n\t\t\t\r\n\t\t\tchannelStatistics.numRemoteChannels++;\n\t\t\treturn new RemoteRecoveredInputChannel(\n\t\t\t\tinputGate,\n\t\t\t\tindex,\n\t\t\t\tpartitionId,\n\t\t\t\tinputChannelDescriptor.getConnectionId(),\n\t\t\t\tconnectionManager,\n\t\t\t\tpartitionRequestInitialBackoff,\n\t\t\t\tpartitionRequestMaxBackoff,\n\t\t\t\tnetworkBuffersPerChannel,\n\t\t\t\tmetrics);\n\t\t}\n\t}\n","realPath":"flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"b072d257655eb78736f1d4e76abb5176ec74ae73","commitMessage":"@@@[FLINK-19027][network] Assign exclusive buffers to LocalRecoveredInputChannel.\n\nIf a local channel does not receive a buffer during recovery.  a live lock may occur where the local channel cannot recover because it is waiting for a buffer but upstream operators are fully backpressured and cannot release a buffer.\nIt's important to treat LocalRecoveredInputChannel like RemoteInputChannels and assign exclusive buffers for recovery to avoid this situation.\n\nNote that due to FLINK-13203.  it still possible to run into the livelock if the sink is deployed after upstream tasks take all buffers. However.  it's a) much more unlikely and b) if FLINK-13203 gets resolved.  this will then automatically also fix it for recovery.\n","date":"2020-10-06 19:24:48","modifiedFileCount":"7","status":"M","submitter":"Arvid Heise"}]
