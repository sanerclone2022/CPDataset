[{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-01-29 20:45:17","commitOrder":2,"curCode":"    private CheckpointedInputGate setupInputGateWithAlternatingController(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            AbstractInvokable abstractInvokable,\n            RecordingChannelStateWriter stateWriter)\n            throws Exception {\n        ConnectionManager connectionManager = new TestingConnectionManager();\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .setChannelStateWriter(stateWriter)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        SingleCheckpointBarrierHandler barrierHandler =\n                AlternatingControllerTest.barrierHandler(\n                        singleInputGate, abstractInvokable, stateWriter);\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-01-30 18:01:43","endLine":302,"groupId":"17915","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInputGateWithAlternatingController","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@AbstractInvokableabstractInvokable@RecordingChannelStateWriterstateWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1f/fc850e992159f7157f3e2932c0b4c229711613.src","preCode":"    private CheckpointedInputGate setupInputGateWithAlternatingController(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            AbstractInvokable abstractInvokable,\n            RecordingChannelStateWriter stateWriter)\n            throws Exception {\n        ConnectionManager connectionManager = new TestingConnectionManager();\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .setChannelStateWriter(stateWriter)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        SingleCheckpointBarrierHandler barrierHandler =\n                AlternatingControllerTest.barrierHandler(\n                        singleInputGate, abstractInvokable, stateWriter);\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"B"},{"authorDate":"2020-10-08 18:37:13","commitOrder":2,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"45072","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"NB"}],"commitId":"a23744795d95c18c62cb6c0156e33f019a9adbb2","commitMessage":"@@@[FLINK-20654][network] Fix incorrect spilling/persisting logic in RemoteInputChannel\n\nThis commit fixes a bug where RemoteInputChannel was incorrectly deciding which\nbuffers should be spilled.  if it has received an obsoleted CheckpointBarrier. \nthat hasn't been cancelled (yet?).\n","date":"2021-01-30 18:01:43","modifiedFileCount":"3","status":"M","submitter":"Piotr Nowojski"},{"authorTime":"2020-10-08 18:37:13","codes":[{"authorDate":"2021-03-09 20:18:46","commitOrder":3,"curCode":"    private CheckpointedInputGate setupInputGateWithAlternatingController(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            AbstractInvokable abstractInvokable,\n            RecordingChannelStateWriter stateWriter)\n            throws Exception {\n        ConnectionManager connectionManager = new TestingConnectionManager();\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .setChannelStateWriter(stateWriter)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        SingleCheckpointBarrierHandler barrierHandler =\n                TestBarrierHandlerFactory.forTarget(abstractInvokable)\n                        .create(singleInputGate, stateWriter);\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","date":"2021-03-31 14:27:07","endLine":397,"groupId":"102880","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupInputGateWithAlternatingController","params":"(intnumberOfChannels@NetworkBufferPoolnetworkBufferPool@AbstractInvokableabstractInvokable@RecordingChannelStateWriterstateWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f1/b7b86c578b2849b0a0378ed570c5c9986ae366.src","preCode":"    private CheckpointedInputGate setupInputGateWithAlternatingController(\n            int numberOfChannels,\n            NetworkBufferPool networkBufferPool,\n            AbstractInvokable abstractInvokable,\n            RecordingChannelStateWriter stateWriter)\n            throws Exception {\n        ConnectionManager connectionManager = new TestingConnectionManager();\n        SingleInputGate singleInputGate =\n                new SingleInputGateBuilder()\n                        .setBufferPoolFactory(\n                                networkBufferPool.createBufferPool(\n                                        numberOfChannels, Integer.MAX_VALUE))\n                        .setSegmentProvider(networkBufferPool)\n                        .setChannelFactory(\n                                (builder, gate) ->\n                                        builder.setConnectionManager(connectionManager)\n                                                .buildRemoteChannel(gate))\n                        .setNumberOfChannels(numberOfChannels)\n                        .setChannelStateWriter(stateWriter)\n                        .build();\n        singleInputGate.setup();\n        MailboxExecutorImpl mailboxExecutor =\n                new MailboxExecutorImpl(\n                        new TaskMailboxImpl(), 0, StreamTaskActionExecutor.IMMEDIATE);\n\n        SingleCheckpointBarrierHandler barrierHandler =\n                AlternatingControllerTest.barrierHandler(\n                        singleInputGate, abstractInvokable, stateWriter);\n        CheckpointedInputGate checkpointedInputGate =\n                new CheckpointedInputGate(\n                        singleInputGate,\n                        barrierHandler,\n                        mailboxExecutor,\n                        UpstreamRecoveryTracker.forInputGate(singleInputGate));\n        for (int i = 0; i < numberOfChannels; i++) {\n            ((RemoteInputChannel) checkpointedInputGate.getChannel(i)).requestSubpartition(0);\n        }\n        return checkpointedInputGate;\n    }\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/checkpointing/CheckpointedInputGateTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"},{"authorDate":"2020-10-08 18:37:13","commitOrder":3,"curCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","date":"2020-10-10 01:06:13","endLine":127,"groupId":"102880","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildGate","params":"(NetworkBufferPoolnetworkBufferPool@intnumberOfChannels)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/15/816595e73f5cccef24c3b83a9c0640cafb4c23.src","preCode":"\tprivate SingleInputGate buildGate(NetworkBufferPool networkBufferPool, int numberOfChannels) throws IOException {\n\t\tSingleInputGate gate = new SingleInputGateBuilder()\n\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteRecoveredChannel)\n\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(numberOfChannels, Integer.MAX_VALUE))\n\t\t\t.setSegmentProvider(networkBufferPool)\n\t\t\t.setNumberOfChannels(numberOfChannels)\n\t\t\t.build();\n\t\tgate.setup();\n\t\treturn gate;\n\t}\n","realPath":"flink-runtime/src/test/java/org/apache/flink/runtime/state/ChannelPersistenceITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"2d02c27fe8ac283329d21dc6173c7ed95a50543e","commitMessage":"@@@[refactor][checkpoint] Extracted test builders for CheckpointedInputGate and\nCheckpointBarrierHandler\n","date":"2021-03-31 14:27:07","modifiedFileCount":"2","status":"M","submitter":"Dawid Wysakowicz"}]
