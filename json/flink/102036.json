[{"authorTime":"2019-11-14 21:20:16","codes":[{"authorDate":"2019-11-14 21:20:16","commitOrder":1,"curCode":"\tpublic void testReadFileWithSelectFields() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\n\t\tMap<String, Object> partSpec = new HashMap<>();\n\t\tpartSpec.put(\"f1\", 1);\n\t\tpartSpec.put(\"f3\", 3L);\n\t\tpartSpec.put(\"f5\", \"f5\");\n\t\tpartSpec.put(\"f8\", BigDecimal.valueOf(5.333));\n\t\tpartSpec.put(\"f13\", \"f13\");\n\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {8, 1, 3, 0, 5, 2},\n\t\t\t\t\tnew DataType[] {\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.BIGINT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.DECIMAL(10, 5), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.INT()\n\t\t\t\t\t},\n\t\t\t\t\tpartSpec,\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(3));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(5));\n\t\t\t\t\ttotalF0 += row.getInt(3);\n\t\t\t\t\tAssert.assertNotNull(row.getString(5).toString());\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(4));\n\t\t\t\t\tAssert.assertEquals(Decimal.castFrom(5.333, 10, 5), row.getDecimal(0, 10, 5));\n\t\t\t\t\tAssert.assertEquals(1, row.getInt(1));\n\t\t\t\t\tAssert.assertEquals(3, row.getLong(2));\n\t\t\t\t\tAssert.assertEquals(\"f5\", row.getString(4).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","date":"2019-12-02 11:28:54","endLine":211,"groupId":"48283","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFileWithSelectFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/709c1d640f42ee48765330b04e37d3a1ea2667.src","preCode":"\tpublic void testReadFileWithSelectFields() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\n\t\tMap<String, Object> partSpec = new HashMap<>();\n\t\tpartSpec.put(\"f1\", 1);\n\t\tpartSpec.put(\"f3\", 3L);\n\t\tpartSpec.put(\"f5\", \"f5\");\n\t\tpartSpec.put(\"f8\", BigDecimal.valueOf(5.333));\n\t\tpartSpec.put(\"f13\", \"f13\");\n\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {8, 1, 3, 0, 5, 2},\n\t\t\t\t\tnew DataType[] {\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.BIGINT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.DECIMAL(10, 5), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.INT()\n\t\t\t\t\t},\n\t\t\t\t\tpartSpec,\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(3));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(5));\n\t\t\t\t\ttotalF0 += row.getInt(3);\n\t\t\t\t\tAssert.assertNotNull(row.getString(5).toString());\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(4));\n\t\t\t\t\tAssert.assertEquals(Decimal.castFrom(5.333, 10, 5), row.getDecimal(0, 10, 5));\n\t\t\t\t\tAssert.assertEquals(1, row.getInt(1));\n\t\t\t\t\tAssert.assertEquals(3, row.getLong(2));\n\t\t\t\t\tAssert.assertEquals(\"f5\", row.getString(4).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","realPath":"flink-formats/flink-orc/src/test/java/org/apache/flink/orc/OrcColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2019-11-14 21:20:16","commitOrder":1,"curCode":"\tpublic void testReadFileWithPartitionValues() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {2, 0, 1},\n\t\t\t\t\ttestSchemaFlat,\n\t\t\t\t\tnew HashMap<>(),\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertNotNull(row.getString(0).toString());\n\t\t\t\t\ttotalF0 += row.getInt(1);\n\t\t\t\t\tAssert.assertNotNull(row.getString(2).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","date":"2019-12-02 11:28:54","endLine":243,"groupId":"46272","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadFileWithPartitionValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7d/709c1d640f42ee48765330b04e37d3a1ea2667.src","preCode":"\tpublic void testReadFileWithPartitionValues() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {2, 0, 1},\n\t\t\t\t\ttestSchemaFlat,\n\t\t\t\t\tnew HashMap<>(),\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertNotNull(row.getString(0).toString());\n\t\t\t\t\ttotalF0 += row.getInt(1);\n\t\t\t\t\tAssert.assertNotNull(row.getString(2).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","realPath":"flink-formats/flink-orc/src/test/java/org/apache/flink/orc/OrcColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"ab6893201dbabab1c44a052b23821b78f18ed9b3","commitMessage":"@@@[FLINK-14135][orc] Introduce OrcColumnarRowSplitReader to orc\n","date":"2019-12-02 11:28:54","modifiedFileCount":"0","status":"B","submitter":"JingsongLi"},{"authorTime":"2020-04-29 11:27:33","codes":[{"authorDate":"2020-04-29 11:27:33","commitOrder":2,"curCode":"\tpublic void testReadFileWithSelectFields() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\n\t\tMap<String, Object> partSpec = new HashMap<>();\n\t\tpartSpec.put(\"f1\", 1);\n\t\tpartSpec.put(\"f3\", 3L);\n\t\tpartSpec.put(\"f5\", \"f5\");\n\t\tpartSpec.put(\"f8\", BigDecimal.valueOf(5.333));\n\t\tpartSpec.put(\"f13\", \"f13\");\n\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {8, 1, 3, 0, 5, 2},\n\t\t\t\t\tnew DataType[] {\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.BIGINT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.DECIMAL(10, 5), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.INT()\n\t\t\t\t\t},\n\t\t\t\t\tpartSpec,\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tRowData row = reader.nextRecord(null);\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(3));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(5));\n\t\t\t\t\ttotalF0 += row.getInt(3);\n\t\t\t\t\tAssert.assertNotNull(row.getString(5).toString());\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(4));\n\t\t\t\t\tAssert.assertEquals(DecimalDataUtils.castFrom(5.333, 10, 5), row.getDecimal(0, 10, 5));\n\t\t\t\t\tAssert.assertEquals(1, row.getInt(1));\n\t\t\t\t\tAssert.assertEquals(3, row.getLong(2));\n\t\t\t\t\tAssert.assertEquals(\"f5\", row.getString(4).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","date":"2020-04-29 14:14:41","endLine":214,"groupId":"102036","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFileWithSelectFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/70325602c6a304be2e2d89861022f7ede3f3da.src","preCode":"\tpublic void testReadFileWithSelectFields() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\n\t\tMap<String, Object> partSpec = new HashMap<>();\n\t\tpartSpec.put(\"f1\", 1);\n\t\tpartSpec.put(\"f3\", 3L);\n\t\tpartSpec.put(\"f5\", \"f5\");\n\t\tpartSpec.put(\"f8\", BigDecimal.valueOf(5.333));\n\t\tpartSpec.put(\"f13\", \"f13\");\n\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {8, 1, 3, 0, 5, 2},\n\t\t\t\t\tnew DataType[] {\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.BIGINT(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.DECIMAL(10, 5), \r\n\t\t\t\t\t\t\t DataTypes.STRING(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.INT(),\n\t\t\t\t\t\t\t DataTypes.STRING(), \r\n\t\t\t\t\t\t\t DataTypes.INT()\n\t\t\t\t\t},\n\t\t\t\t\tpartSpec,\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(3));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(5));\n\t\t\t\t\ttotalF0 += row.getInt(3);\n\t\t\t\t\tAssert.assertNotNull(row.getString(5).toString());\n\n\t\t\t\t\t\r\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(4));\n\t\t\t\t\tAssert.assertEquals(Decimal.castFrom(5.333, 10, 5), row.getDecimal(0, 10, 5));\n\t\t\t\t\tAssert.assertEquals(1, row.getInt(1));\n\t\t\t\t\tAssert.assertEquals(3, row.getLong(2));\n\t\t\t\t\tAssert.assertEquals(\"f5\", row.getString(4).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","realPath":"flink-formats/flink-orc/src/test/java/org/apache/flink/orc/OrcColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-04-29 11:27:33","commitOrder":2,"curCode":"\tpublic void testReadFileWithPartitionValues() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {2, 0, 1},\n\t\t\t\t\ttestSchemaFlat,\n\t\t\t\t\tnew HashMap<>(),\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tRowData row = reader.nextRecord(null);\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertNotNull(row.getString(0).toString());\n\t\t\t\t\ttotalF0 += row.getInt(1);\n\t\t\t\t\tAssert.assertNotNull(row.getString(2).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","date":"2020-04-29 14:14:41","endLine":246,"groupId":"102036","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadFileWithPartitionValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/cc/70325602c6a304be2e2d89861022f7ede3f3da.src","preCode":"\tpublic void testReadFileWithPartitionValues() throws IOException {\n\t\tFileInputSplit[] splits = createSplits(testFileFlat, 4);\n\n\t\tlong cnt = 0;\n\t\tlong totalF0 = 0;\n\t\t\r\n\t\tfor (FileInputSplit split : splits) {\n\n\t\t\ttry (OrcColumnarRowSplitReader reader = createReader(\n\t\t\t\t\tnew int[] {2, 0, 1},\n\t\t\t\t\ttestSchemaFlat,\n\t\t\t\t\tnew HashMap<>(),\n\t\t\t\t\tsplit)) {\n\t\t\t\t\r\n\t\t\t\twhile (!reader.reachedEnd()) {\n\t\t\t\t\tBaseRow row = reader.nextRecord(null);\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(0));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(1));\n\t\t\t\t\tAssert.assertFalse(row.isNullAt(2));\n\t\t\t\t\tAssert.assertNotNull(row.getString(0).toString());\n\t\t\t\t\ttotalF0 += row.getInt(1);\n\t\t\t\t\tAssert.assertNotNull(row.getString(2).toString());\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\r\n\t\tassertEquals(1920800, cnt);\n\t\tassertEquals(1844737280400L, totalF0);\n\t}\n","realPath":"flink-formats/flink-orc/src/test/java/org/apache/flink/orc/OrcColumnarRowSplitReaderTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"b8fa6f6b8f31ff5e092147b1c6dad8bba555f048","commitMessage":"@@@[FLINK-16996][orc] Refactor ORC connector to use new data structures\n\nThis closes #11925\n","date":"2020-04-29 14:14:41","modifiedFileCount":"16","status":"M","submitter":"Jark Wu"}]
