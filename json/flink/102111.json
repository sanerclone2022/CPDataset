[{"authorTime":"2020-05-15 09:17:23","codes":[{"authorDate":"2020-05-15 09:17:23","commitOrder":1,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.sourceValueFormat\n\t\t\t\t.createScanFormat(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-05-15 09:17:23","endLine":117,"groupId":"3037","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/38378bc420e764d524efb65f39b785a1e689a0.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.sourceValueFormat\n\t\t\t\t.createScanFormat(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2020-05-15 09:17:23","commitOrder":1,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.sinkValueFormat\n\t\t\t\t.createSinkFormat(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-05-15 09:17:23","endLine":133,"groupId":"22430","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/76/38378bc420e764d524efb65f39b785a1e689a0.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.sinkValueFormat\n\t\t\t\t.createSinkFormat(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"2f76042f3cc80bf5468fe383b0c57887840efffb","commitMessage":"@@@[FLINK-17629][json] Implement format factory for JSON serialization and deserialization schema\n\nThis closes #12140","date":"2020-05-15 09:17:23","modifiedFileCount":"2","status":"B","submitter":"Danny Chan"},{"authorTime":"2020-06-01 10:32:40","codes":[{"authorDate":"2020-06-01 10:32:40","commitOrder":2,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-06-01 10:32:40","endLine":117,"groupId":"3037","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/df03ea7bb2aa5d340a7a37c9764d2ac18894f6.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.sourceValueFormat\n\t\t\t\t.createScanFormat(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-06-01 10:32:40","commitOrder":2,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-06-01 10:32:40","endLine":133,"groupId":"3037","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8d/df03ea7bb2aa5d340a7a37c9764d2ac18894f6.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.sinkValueFormat\n\t\t\t\t.createSinkFormat(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"64de78e36500b5a8c8720639ded4d1c5f963ad41","commitMessage":"@@@[FLINK-17887][table][connector] Improve interface of ScanFormatFactory and SinkFormatFactory\n\n\nWe improved the interfaces with the following changes:\n1. Have a common interface DynamicTableSource.Context.  and make Context of ScanTableSource and LookupTableSource extend it.  and rename them to LookupContext and ScanContext\n2. Change parameter of ScanFormat.createScanFormat from ScanTableSource.Context to DynamicTableSource.Context\n3. Rename ScanFormat.createScanFormat to DecodingFormat#createRuntimeDecoder()\n4. Rename SinkFormat.createSinkFormat to EncodingFormat#createRuntimeEncoder()\n5. Rename ScanFormatFactory to DecodingFormatFactory\n6. Rename SinkFormatFactory to EncodingFormatFactory\n\nThis closes #12320","date":"2020-06-01 10:32:40","modifiedFileCount":"48","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-17 21:32:10","codes":[{"authorDate":"2020-06-17 21:32:10","commitOrder":3,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-06-17 21:47:28","endLine":137,"groupId":"3037","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/d75e963fd0b9fc1147ea5bcf4705a2df74440f.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-06-17 21:32:10","commitOrder":3,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-06-17 21:47:28","endLine":154,"groupId":"3037","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/d75e963fd0b9fc1147ea5bcf4705a2df74440f.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"c42a2f9cd6fcf50ff79f030f9b7c7bbe30d64a0f","commitMessage":"@@@[FLINK-18299][json] Fix the non SQL standard timestamp format in JSON format\n\n\nThe current timestamp format in JSON format is not SQL standard which uses RFC-3339. This commit changes the default behavior to parse/generate timestamp using SQL standard. Besides.  it introduces an option \"json.timestamp-format.standard\" to have the ability to fallback to ISO standard. \n\nThis closes #12661","date":"2020-06-17 21:47:28","modifiedFileCount":"19","status":"M","submitter":"Shengkai"},{"authorTime":"2020-06-17 21:32:10","codes":[{"authorDate":"2020-06-23 18:07:17","commitOrder":4,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tWrapperTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-07-09 16:39:41","endLine":137,"groupId":"3037","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d1/c26be52cb8496601338f3f2b1d0c9df64ccac3.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-06-17 21:32:10","commitOrder":4,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-06-17 21:47:28","endLine":154,"groupId":"3037","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/d75e963fd0b9fc1147ea5bcf4705a2df74440f.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"584dca179f178e977b07ba0c1ba2a38b0672113b","commitMessage":"@@@[FLINK-17000][table] Ensure that every logical type can be represented as TypeInformation\n\nIntroduces a WrapperTypeInfo that can replace most (if not all) TypeInformation classes\nin the Blink planner. It is backed by logical types and uses internal serializers.\n\nThis closes #12852.\n","date":"2020-07-09 16:39:41","modifiedFileCount":"21","status":"M","submitter":"Timo Walther"},{"authorTime":"2020-06-17 21:32:10","codes":[{"authorDate":"2020-07-10 15:40:59","commitOrder":5,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-07-21 20:44:25","endLine":137,"groupId":"3037","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5c/07479334c7cfd9c9cc7041e08bccd341ec2e2b.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tWrapperTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2020-06-17 21:32:10","commitOrder":5,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-06-17 21:47:28","endLine":154,"groupId":"3037","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/df/d75e963fd0b9fc1147ea5bcf4705a2df74440f.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"758b1bdd57c46f51db7a2bc2e7fd73f4932fe0cf","commitMessage":"@@@[FLINK-18537][table] Replace RowDataTypeInfo with InternalTypeInfo\n\nTypeInformation is a legacy class for the sole purpose of creating a\nTypeSerializer. Instances of TypeInformation are not required in the\ntable ecosystem but sometimes enforced by interfaces of other modules\n(such as org.apache.flink.api.dag.Transformation). Therefore.  we\nintroduce InternalTypeInfo which acts as an adapter whenever type\ninformation is required. Instances of InternalTypeInfo should only\nbe created for passing it to interfaces that require type information.\nThe class should not be used as a replacement for a LogicalType.\nInformation such as the arity of a row type.  field types.  field names.  etc.\nshould be derived from the LogicalType directly.\n\nThis closes #12900.\n","date":"2020-07-21 20:44:25","modifiedFileCount":"90","status":"M","submitter":"Timo Walther"},{"authorTime":"2020-11-11 10:58:04","codes":[{"authorDate":"2020-07-10 15:40:59","commitOrder":6,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-07-21 20:44:25","endLine":137,"groupId":"3037","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5c/07479334c7cfd9c9cc7041e08bccd341ec2e2b.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2020-11-11 10:58:04","commitOrder":6,"curCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(\n\t\t\t\tROW_TYPE,\n\t\t\t\tTimestampFormat.ISO_8601,\n\t\t\t\tJsonOptions.MapNullKeyMode.LITERAL,\n\t\t\t\t\"null\");\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","date":"2020-11-11 10:58:04","endLine":176,"groupId":"3037","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/44/1050cf6be02ef116e3a2731c2ece4f15421892.src","preCode":"\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataSerializationSchema expectedSer = new JsonRowDataSerializationSchema(ROW_TYPE,\n\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n\t\tSerializationSchema<RowData> actualSer = sinkMock.valueFormat\n\t\t\t\t.createRuntimeEncoder(\n\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedSer, actualSer);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"ba7c232cd2519995b693376cdf08b028e8f2e260","commitMessage":"@@@[FLINK-19912][json] Fix JSON format fails to serialize map value with null keys\n\nThis closes #13972","date":"2020-11-11 10:58:04","modifiedFileCount":"19","status":"M","submitter":"wangxlong"},{"authorTime":"2021-01-13 20:15:49","codes":[{"authorDate":"2020-07-10 15:40:59","commitOrder":7,"curCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","date":"2020-07-21 20:44:25","endLine":137,"groupId":"3037","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5c/07479334c7cfd9c9cc7041e08bccd341ec2e2b.src","preCode":"\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n\t\t\t\tnew JsonRowDataDeserializationSchema(\n\t\t\t\t\t\tROW_TYPE,\n\t\t\t\t\t\tInternalTypeInfo.of(ROW_TYPE),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tTimestampFormat.ISO_8601);\n\n\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.valueFormat\n\t\t\t\t.createRuntimeDecoder(\n\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n\t\t\t\t\t\tSCHEMA.toRowDataType());\n\n\t\tassertEquals(expectedDeser, actualDeser);\n\t}\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-01-13 20:15:49","commitOrder":7,"curCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        ROW_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        final DynamicTableSink actualSink = createTableSink(options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), SCHEMA.toRowDataType());\n\n        assertEquals(expectedSer, actualSer);\n    }\n","date":"2021-01-13 20:15:49","endLine":190,"groupId":"3037","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ff/c64e45d3c770600ab676fb84c88eee0f235361.src","preCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        ROW_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\");\n\n        final DynamicTableSink actualSink = createTableSink(options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), SCHEMA.toRowDataType());\n\n        assertEquals(expectedSer, actualSer);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"5b9f4db30e5afcf23588f44da767aaa218df1207","commitMessage":"@@@[FLINK-20861][json] Introduce an option for serializing DECIMALs in JSON as plain number instead of scientific notation\n\nThis closes #14604","date":"2021-01-13 20:15:49","modifiedFileCount":"17","status":"M","submitter":"LM Kang"},{"authorTime":"2021-03-18 19:13:17","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":8,"curCode":"    private void testSchemaDeserializationSchema(Map<String, String> options) {\n        final JsonRowDataDeserializationSchema expectedDeser =\n                new JsonRowDataDeserializationSchema(\n                        PHYSICAL_TYPE,\n                        InternalTypeInfo.of(PHYSICAL_TYPE),\n                        false,\n                        true,\n                        TimestampFormat.ISO_8601);\n\n        final DynamicTableSource actualSource = createTableSource(SCHEMA, options);\n        assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","date":"2021-03-24 04:35:35","endLine":159,"groupId":"3037","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/03/6fdbebe9bad8aead77bcfbd04e8810cb6eab85.src","preCode":"    private void testSchemaDeserializationSchema(Map<String, String> options) {\n        final JsonRowDataDeserializationSchema expectedDeser =\n                new JsonRowDataDeserializationSchema(\n                        ROW_TYPE,\n                        InternalTypeInfo.of(ROW_TYPE),\n                        false,\n                        true,\n                        TimestampFormat.ISO_8601);\n\n        final DynamicTableSource actualSource = createTableSource(options);\n        assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2021-03-18 19:13:17","commitOrder":8,"curCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        PHYSICAL_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        final DynamicTableSink actualSink = createTableSink(SCHEMA, options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), PHYSICAL_DATA_TYPE);\n\n        assertEquals(expectedSer, actualSer);\n    }\n","date":"2021-03-24 04:35:35","endLine":180,"groupId":"11494","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/03/6fdbebe9bad8aead77bcfbd04e8810cb6eab85.src","preCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        ROW_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        final DynamicTableSink actualSink = createTableSink(options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), SCHEMA.toRowDataType());\n\n        assertEquals(expectedSer, actualSer);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"73338e22bd0567169ce2636c8f9e3b87df783385","commitMessage":"@@@[FLINK-21913][table][connectors] Update DynamicTableFactory.Context to use ResolvedCatalogTable\n\nThis closes #15316.\n","date":"2021-03-24 04:35:35","modifiedFileCount":"45","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-06-30 18:15:34","codes":[{"authorDate":"2021-03-18 19:13:17","commitOrder":9,"curCode":"    private void testSchemaDeserializationSchema(Map<String, String> options) {\n        final JsonRowDataDeserializationSchema expectedDeser =\n                new JsonRowDataDeserializationSchema(\n                        PHYSICAL_TYPE,\n                        InternalTypeInfo.of(PHYSICAL_TYPE),\n                        false,\n                        true,\n                        TimestampFormat.ISO_8601);\n\n        final DynamicTableSource actualSource = createTableSource(SCHEMA, options);\n        assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","date":"2021-03-24 04:35:35","endLine":159,"groupId":"102111","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSchemaDeserializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/03/6fdbebe9bad8aead77bcfbd04e8810cb6eab85.src","preCode":"    private void testSchemaDeserializationSchema(Map<String, String> options) {\n        final JsonRowDataDeserializationSchema expectedDeser =\n                new JsonRowDataDeserializationSchema(\n                        PHYSICAL_TYPE,\n                        InternalTypeInfo.of(PHYSICAL_TYPE),\n                        false,\n                        true,\n                        TimestampFormat.ISO_8601);\n\n        final DynamicTableSource actualSource = createTableSource(SCHEMA, options);\n        assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n        TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n\n        DeserializationSchema<RowData> actualDeser =\n                scanSourceMock.valueFormat.createRuntimeDecoder(\n                        ScanRuntimeProviderContext.INSTANCE, SCHEMA.toPhysicalRowDataType());\n\n        assertEquals(expectedDeser, actualDeser);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2021-06-30 18:15:34","commitOrder":9,"curCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        PHYSICAL_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonFormatOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        final DynamicTableSink actualSink = createTableSink(SCHEMA, options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), PHYSICAL_DATA_TYPE);\n\n        assertEquals(expectedSer, actualSer);\n    }\n","date":"2021-07-12 18:56:17","endLine":181,"groupId":"102111","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testSchemaSerializationSchema","params":"(Map<String@String>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8e/39a316338fee5f2f43a3669f98aef5e4fc7e2d.src","preCode":"    private void testSchemaSerializationSchema(Map<String, String> options) {\n        final JsonRowDataSerializationSchema expectedSer =\n                new JsonRowDataSerializationSchema(\n                        PHYSICAL_TYPE,\n                        TimestampFormat.ISO_8601,\n                        JsonOptions.MapNullKeyMode.LITERAL,\n                        \"null\",\n                        true);\n\n        final DynamicTableSink actualSink = createTableSink(SCHEMA, options);\n        assert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n        TestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n                (TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n\n        SerializationSchema<RowData> actualSer =\n                sinkMock.valueFormat.createRuntimeEncoder(\n                        new SinkRuntimeProviderContext(false), PHYSICAL_DATA_TYPE);\n\n        assertEquals(expectedSer, actualSer);\n    }\n","realPath":"flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"4fb9287e1d9da63d49d963e2120d79cf822f028c","commitMessage":"@@@[FLINK-23064][format-json] Make JsonOptions PublicEvolving\n","date":"2021-07-12 18:56:17","modifiedFileCount":"17","status":"M","submitter":"Ingo B?rk"}]
