[{"authorTime":"2017-07-04 19:49:55","codes":[{"authorDate":"2017-07-04 19:49:55","commitOrder":1,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2017-07-19 17:33:35","endLine":191,"groupId":"12560","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2017-07-04 19:49:55","commitOrder":1,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\t\r\n\t\t\r\n\t\texpectedException.expectCause(\n\t\t\tMatchers.<Throwable>hasProperty(\"cause\",\n\t\t\t\thasProperty(\"class\",\n\t\t\t\t\thasProperty(\"canonicalName\", equalTo(\n\t\t\t\t\t\t\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\")))));\n\n\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2017-07-19 17:33:35","endLine":214,"groupId":"7646","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\t\r\n\t\t\r\n\t\texpectedException.expectCause(\n\t\t\tMatchers.<Throwable>hasProperty(\"cause\",\n\t\t\t\thasProperty(\"class\",\n\t\t\t\t\thasProperty(\"canonicalName\", equalTo(\n\t\t\t\t\t\t\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\")))));\n\n\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"5ac1324b9eb89afb87de7810e7bd4b1209b544b6","commitMessage":"@@@[FLINK-7102] improve ClassLoaderITCase\n\n* ClassLoaderITCase unnecessarily runs multiple tests in a single test case\n* ClassLoaderITCase#testDisposeSavepointWithCustomKvState() does not cancel its\n  job (thus the order of execution of test cases defines the outcome)\n* ClassLoaderITCase uses e.getCause().getCause() which may cause\n  {{NullPointerException}}s hiding the original error\n\nThis closes #4255.\n","date":"2017-07-19 17:33:35","modifiedFileCount":"1","status":"B","submitter":"Nico Kruber"},{"authorTime":"2018-04-05 17:49:48","codes":[{"authorDate":"2017-07-04 19:49:55","commitOrder":2,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2017-07-19 17:33:35","endLine":191,"groupId":"12560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/98/bb0eadd32513267471e218b8349445ffa2d97d.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"N"},{"authorDate":"2018-04-05 17:49:48","commitOrder":2,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\n\t\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\t\tcandidate -> candidate.getClass().getCanonicalName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\"));\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\tthrow e;\n\t\t\t\t} else {\n\t\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t\t}\n\t\t\t} catch (NoClassDefFoundError expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-04-19 15:58:15","endLine":235,"groupId":"12560","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/08/9ade443a7b444a739ed4f8416c92dd85a710f8.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\t\r\n\t\t\r\n\t\texpectedException.expectCause(\n\t\t\tMatchers.<Throwable>hasProperty(\"cause\",\n\t\t\t\thasProperty(\"class\",\n\t\t\t\t\thasProperty(\"canonicalName\", equalTo(\n\t\t\t\t\t\t\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\")))));\n\n\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"674a2d3464cc5628961f3b9628713b9515ba6c6f","commitMessage":"@@@[FLINK-8704][tests] Port ClassLoaderITCase to flip6\n\nThis closes #5780.\n","date":"2018-04-19 15:58:15","modifiedFileCount":"1","status":"M","submitter":"zentol"},{"authorTime":"2018-10-22 22:00:40","codes":[{"authorDate":"2018-10-22 22:00:40","commitOrder":3,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2018-10-24 22:04:20","endLine":197,"groupId":"7215","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/503d7e370c7690d96c76c836cdf87740b61ecb.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2018-10-22 22:00:40","commitOrder":3,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\n\t\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\t\tcandidate -> candidate.getClass().getCanonicalName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\"));\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\tthrow e;\n\t\t\t\t} else {\n\t\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t\t}\n\t\t\t} catch (NoClassDefFoundError expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2018-10-24 22:04:20","endLine":232,"groupId":"12560","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/503d7e370c7690d96c76c836cdf87740b61ecb.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\ttestCluster,\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\n\t\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\t\tcandidate -> candidate.getClass().getCanonicalName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\"));\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\tthrow e;\n\t\t\t\t} else {\n\t\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t\t}\n\t\t\t} catch (NoClassDefFoundError expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"bf64740b308c3272de51befdab5bd7374db71407","commitMessage":"@@@[FLINK-10637] Use MiniClusterResource for tests in flink-runtime\n\nRename MiniClusterResource into MiniClusterWithClientResource and move base functionality\nin the form of MiniClusterResource into flink-runtime. The new base class simply starts a\nMiniCluster with random ports.\n\nMoreover.  this commit lets almost all tests in flink-runtime use the MiniClusterResource\nto guarantee that there are no port conflicts between concurrently executed tests.\n\nThis closes #6899.\n","date":"2018-10-24 22:04:20","modifiedFileCount":"56","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2019-09-23 11:01:37","codes":[{"authorDate":"2018-10-22 22:00:40","commitOrder":4,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2018-10-24 22:04:20","endLine":197,"groupId":"7215","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/503d7e370c7690d96c76c836cdf87740b61ecb.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"},{"authorDate":"2019-09-23 11:01:37","commitOrder":4,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-10-02 22:10:37","endLine":233,"groupId":"7215","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/aa408741db720ff2dd9324c66472650faecc8f.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\n\t\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\t\tcandidate -> candidate.getClass().getCanonicalName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram.SuccessException\"));\n\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\tthrow e;\n\t\t\t\t} else {\n\t\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t\t}\n\t\t\t} catch (NoClassDefFoundError expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"c552f74b0daf76b80e85b6eb062c80e23e532315","commitMessage":"@@@[FLINK-13515][test] Fix ClassLoaderITCase fails on Java 11\n","date":"2019-10-02 22:10:37","modifiedFileCount":"1","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-09-25 10:20:10","codes":[{"authorDate":"2019-09-25 10:20:10","commitOrder":5,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-10-02 22:10:37","endLine":197,"groupId":"7215","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-09-25 10:20:10","commitOrder":5,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-10-02 22:10:37","endLine":233,"groupId":"7215","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws IOException, ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.<URL>emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"2a182ffc1946fac7d2dcf7d16c408c53ef61466e","commitMessage":"@@@[hotfix][test] Clean up unnecessary type argument declarations in ClassLoaderITCase\n","date":"2019-10-02 22:10:37","modifiedFileCount":"1","status":"M","submitter":"sunhaibotb"},{"authorTime":"2019-11-05 10:50:41","codes":[{"authorDate":"2019-09-25 10:20:10","commitOrder":6,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-10-02 22:10:37","endLine":197,"groupId":"7215","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/7e/cf4887e84800ed11126fe15c00e71b83a48212.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"},{"authorDate":"2019-11-05 10:50:41","commitOrder":6,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tfail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-11-05 23:04:48","endLine":229,"groupId":"7215","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/2d/8afc0f78222ffb968358bec123d96608aeff2f.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tAssert.fail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"ef3dd92c13aeae581d96f814890599bbd54da0a0","commitMessage":"@@@[FLINK-14371][tests] Enable ClassLoaderITCase to pass with NG scheduler\n\nAlso annotate it with AlsoRunWithSchedulerNG category.\n\nThis closes #10071.\n","date":"2019-11-05 23:04:48","modifiedFileCount":"1","status":"M","submitter":"Zhu Zhu"},{"authorTime":"2019-09-09 19:02:28","codes":[{"authorDate":"2019-09-09 19:02:28","commitOrder":7,"curCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = PackagedProgram.newBuilder().setJarFile(new File(STREAMING_PROG_JAR_FILE)).build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","date":"2019-11-09 19:26:33","endLine":199,"groupId":"101661","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\tPackagedProgram streamingProg = new PackagedProgram(new File(STREAMING_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\tstreamingProg.invokeInteractiveModeForExecution();\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2019-09-09 19:02:28","commitOrder":7,"curCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = PackagedProgram.newBuilder()\n\t\t\t.setJarFile(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE))\n\t\t\t.build();\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tfail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","date":"2019-11-09 19:26:33","endLine":237,"groupId":"101661","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckpointedStreamingClassloaderJobWithCustomClassLoader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/23/280f0d54a6cbb26e1b509c5e4e79f474c49488.src","preCode":"\tpublic void testCheckpointedStreamingClassloaderJobWithCustomClassLoader() throws ProgramInvocationException {\n\t\t\r\n\t\t\r\n\t\tPackagedProgram streamingCheckpointedProg = new PackagedProgram(new File(STREAMING_CHECKPOINTED_PROG_JAR_FILE));\n\n\t\tTestStreamEnvironment.setAsContext(\n\t\t\tminiClusterResource.getMiniCluster(),\n\t\t\tparallelism,\n\t\t\tCollections.singleton(new Path(STREAMING_CHECKPOINTED_PROG_JAR_FILE)),\n\t\t\tCollections.emptyList());\n\n\t\ttry {\n\t\t\tstreamingCheckpointedProg.invokeInteractiveModeForExecution();\n\t\t} catch (Exception e) {\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tOptional<Throwable> exception = ExceptionUtils.findThrowable(e,\n\t\t\t\tcandidate -> candidate.getClass().getName().equals(\"org.apache.flink.test.classloading.jar.CheckpointedStreamingProgram$SuccessException\"));\n\n\t\t\tif (!exception.isPresent()) {\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tClass.forName(exception.get().getClass().getName());\n\t\t\t\tfail(\"Deserialization of user exception should have failed.\");\n\t\t\t} catch (ClassNotFoundException expected) {\n\t\t\t\t\r\n\t\t\t}\n\t\t}\n\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/classloading/ClassLoaderITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"c1e9aefc2449a4ea0ff3fa590cf1eb6c1cb484a2","commitMessage":"@@@[FLINK-14465] Let StandaloneJobClusterEntryPoint use the user code class loader\n\n[FLINK-14465] The PackageProgram's constructor does not throw excpetion\nany more when jarFile is null. Introducing this change is because there\nmay be no jarFile in perjob mode. All jars the user code depends on are\nin the classpaths.\n\n[FLINK-14465] ClassPathJobGraphRetriever creates PackagesProgram with user\nclass paths.\n\n[FLINK-14465] StandaloneJobClusterEntryPoint uses \"FLINK_HOME/usrlib\"\nas the job's class path. The environment variable FLINK_HOME is set\nat Dockerfile. Link the FLINK_JOB_ARTIFACTS_DIR to the FLINK_HOME/job. \nwhich makes the FlinkUserClassloader load the user class in the\nstandalone perjob mode.\n\nThis closes #10076.\n","date":"2019-11-09 19:26:33","modifiedFileCount":"22","status":"M","submitter":"GuoWei Ma"}]
