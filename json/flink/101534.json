[{"authorTime":"2020-01-22 19:26:47","codes":[{"authorDate":"2020-03-07 03:27:29","commitOrder":9,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-03-12 22:31:20","endLine":165,"groupId":"19189","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/bc2b9126c7f4bf07f7aac87c2bda77c7779f42.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/api/environment/RemoteStreamEnvironmentTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2020-01-22 19:26:47","commitOrder":9,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = ClientUtils.submitJob(clusterClient, jobGraph).getJobID();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-01-23 17:46:34","endLine":386,"groupId":"43260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/6f/291e722e98761de7d907458bad786ecb096cd6.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = ClientUtils.submitJob(clusterClient, jobGraph).getJobID();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"NB"}],"commitId":"de4c116451d8faafcb43f2463c163bbcb7e7085c","commitMessage":"@@@[FLINK-15090][tests] Move streaming env tests to flink-tests\n\n+ GetOperatorUniqueIDTest\n+ RemoteStreamEnvironmentTest\n+ ReinterpretDataStreamAsKeyedStreamITCase\n+ LocalStreamEnvironmentITCase\n","date":"2020-03-12 22:31:20","modifiedFileCount":"0","status":"M","submitter":"tison"},{"authorTime":"2020-08-15 08:29:49","codes":[{"authorDate":"2020-03-07 03:27:29","commitOrder":10,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-03-12 22:31:20","endLine":165,"groupId":"19189","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/00/bc2b9126c7f4bf07f7aac87c2bda77c7779f42.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/api/environment/RemoteStreamEnvironmentTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2020-08-15 08:29:49","commitOrder":10,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = clusterClient.submitJob(jobGraph).get();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-08-20 07:30:49","endLine":436,"groupId":"43260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/22/b78c875fb0d3d1d5a8152ab83fafed743357a5.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = ClientUtils.submitJob(clusterClient, jobGraph).getJobID();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"dfb8a3be7f0d113032a28cf6a1b296725e5562f5","commitMessage":"@@@[FLINK-15299][test] Move ClientUtils#submitJob & ClientUtils#submitJobAndWaitForResult to test scope\n\nThis closes #11469 .\n","date":"2020-08-20 07:30:49","modifiedFileCount":"28","status":"M","submitter":"tison"},{"authorTime":"2020-07-29 16:42:32","codes":[{"authorDate":"2020-07-29 16:42:32","commitOrder":11,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-09-06 18:24:52","endLine":168,"groupId":"26625","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/74/5233269aeff4e28638dadd7c80f6d3f87bcead.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/api/environment/RemoteStreamEnvironmentTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-07-29 16:42:32","commitOrder":11,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = clusterClient.submitJob(jobGraph).get();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-09-06 18:24:52","endLine":436,"groupId":"43260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/4c/a9270702df9a6e90d62e4d9b84a71521f86252.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = clusterClient.submitJob(jobGraph).get();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"65ed03936a736190f7ffcb6ba0709a99ffcb98fa","commitMessage":"@@@[FLINK-16866] Make jobsubmission non-blocking\n\nThis closes #13217\n","date":"2020-09-06 18:24:52","modifiedFileCount":"35","status":"M","submitter":"Robert Metzger"},{"authorTime":"2020-09-24 14:30:51","codes":[{"authorDate":"2020-09-24 14:30:51","commitOrder":12,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID, classLoader));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-09-25 20:00:13","endLine":168,"groupId":"101534","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/ea941f02196480014bd67c3a3a0d4907e63cba.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tassertTrue(pipeline instanceof StreamGraph);\n\n\t\t\t\t\t\tactualSavepointRestoreSettings =\n\t\t\t\t\t\t\t\tSavepointRestoreSettings.fromConfiguration(config);\n\n\t\t\t\t\t\tclusterClient = new TestClusterClient(configuration, jobID);\n\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(\n\t\t\t\t\t\t\t\tnew ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-tests/src/test/java/org/apache/flink/test/streaming/api/environment/RemoteStreamEnvironmentTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-09-24 14:30:51","commitOrder":12,"curCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = clusterClient.submitJob(jobGraph).get();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID, classLoader));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","date":"2020-09-25 20:00:13","endLine":436,"groupId":"101534","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getExecutorFactory","params":"(@NonnullConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b3/21ff682c12ed0e2e73586a979898bfd5a50c41.src","preCode":"\t\tpublic PipelineExecutorFactory getExecutorFactory(@Nonnull Configuration configuration) {\n\t\t\treturn new PipelineExecutorFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getName() {\n\t\t\t\t\treturn \"my-name\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCompatibleWith(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn TEST_EXECUTOR_NAME.equalsIgnoreCase(configuration.getString(DeploymentOptions.TARGET));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic PipelineExecutor getExecutor(@Nonnull Configuration configuration) {\n\t\t\t\t\treturn (pipeline, config, classLoader) -> {\n\t\t\t\t\t\tfinal int parallelism = config.getInteger(CoreOptions.DEFAULT_PARALLELISM);\n\t\t\t\t\t\tfinal JobGraph jobGraph = FlinkPipelineTranslationUtil.getJobGraph(plan, config, parallelism);\n\n\t\t\t\t\t\tfinal ExecutionConfigAccessor accessor = ExecutionConfigAccessor.fromConfiguration(config);\n\t\t\t\t\t\tjobGraph.addJars(accessor.getJars());\n\t\t\t\t\t\tjobGraph.setClasspaths(accessor.getClasspaths());\n\n\t\t\t\t\t\tfinal JobID jobID = clusterClient.submitJob(jobGraph).get();\n\t\t\t\t\t\treturn CompletableFuture.completedFuture(new ClusterClientJobClientAdapter<>(() -> clusterClient, jobID));\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t}\n","realPath":"flink-clients/src/test/java/org/apache/flink/client/program/ClientTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"b692300a07fce41fc8cce8823432dd6b8db0784c","commitMessage":"@@@[FLINK-19124][datastream] Remove ClassLoader parameter from JobClient methods\n","date":"2020-09-25 20:00:13","modifiedFileCount":"35","status":"M","submitter":"SteNicholas"}]
