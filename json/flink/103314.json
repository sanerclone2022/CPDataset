[{"authorTime":"2017-02-14 13:39:30","codes":[{"authorDate":"2017-02-22 21:55:17","commitOrder":3,"curCode":"\tpublic void testProcessAllWindowState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.process(new ProcessAllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context ctx, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","date":"2017-02-28 21:02:56","endLine":181,"groupId":"34210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessAllWindowState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f3/062319ce6f248fa7fede73046136401939007f.src","preCode":"\tpublic void testProcessAllWindowState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.process(new ProcessAllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context ctx, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StateDescriptorPassingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"},{"authorDate":"2017-02-14 13:39:30","commitOrder":3,"curCode":"\tpublic void testApplyWindowAllState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.apply(new AllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(TimeWindow window, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","date":"2017-02-15 19:21:07","endLine":196,"groupId":"34210","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApplyWindowAllState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/26/cb7acdc91df880023ef61b017023ef3ab30472.src","preCode":"\tpublic void testApplyWindowAllState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.apply(new AllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(TimeWindow window, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StateDescriptorPassingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"NB"}],"commitId":"788b839213811c6f2407ac6d54fef28dfa3d29a6","commitMessage":"@@@[FLINK-5157] [streaming] Introduce ProcessAllWindowFunction\n","date":"2017-02-28 21:02:56","modifiedFileCount":"7","status":"M","submitter":"Ventura Del Monte"},{"authorTime":"2020-09-21 18:40:06","codes":[{"authorDate":"2020-09-21 18:40:06","commitOrder":4,"curCode":"\tpublic void testProcessAllWindowState()  {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\t\r\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"))\n\t\t\t\t.assignTimestampsAndWatermarks(WatermarkStrategy.<File>forMonotonousTimestamps()\n\t\t\t\t\t\t.withTimestampAssigner((file, ts) -> System.currentTimeMillis()));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.milliseconds(1000)))\n\t\t\t\t.process(new ProcessAllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context ctx, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","date":"2020-10-01 23:03:44","endLine":158,"groupId":"103314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessAllWindowState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5b/bb9bb70072bb9bfbfff7c77970c098d0f857b3.src","preCode":"\tpublic void testProcessAllWindowState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.process(new ProcessAllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(Context ctx, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StateDescriptorPassingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-09-21 18:40:06","commitOrder":4,"curCode":"\tpublic void testApplyWindowAllState() {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\t\r\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"))\n\t\t\t\t.assignTimestampsAndWatermarks(WatermarkStrategy.<File>forMonotonousTimestamps()\n\t\t\t\t\t\t.withTimestampAssigner((file, ts) -> System.currentTimeMillis()));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.windowAll(TumblingEventTimeWindows.of(Time.milliseconds(1000)))\n\t\t\t\t.apply(new AllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(TimeWindow window, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","date":"2020-10-01 23:03:44","endLine":201,"groupId":"103314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApplyWindowAllState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/5b/bb9bb70072bb9bfbfff7c77970c098d0f857b3.src","preCode":"\tpublic void testApplyWindowAllState() throws Exception {\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\t\tenv.registerTypeWithKryoSerializer(File.class, JavaSerializer.class);\n\n\t\tDataStream<File> src = env.fromElements(new File(\"/\"));\n\n\t\tSingleOutputStreamOperator<?> result = src\n\t\t\t\t.timeWindowAll(Time.milliseconds(1000))\n\t\t\t\t.apply(new AllWindowFunction<File, String, TimeWindow>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void apply(TimeWindow window, Iterable<File> input, Collector<String> out) {}\n\t\t\t\t});\n\n\t\tvalidateListStateDescriptorConfigured(result);\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/StateDescriptorPassingTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"1175364cc9f5bc6018d4c3f231d24cb8ff5e6341","commitMessage":"@@@[FLINK-19317] Make EventTime the default TimeCharacteristic\n\nThis is part of the FLIP-134 (Batch execution for the DataStream API)\nwork.\n\nEvent time is the only sensible time characteristic for batch\nprocessing. We therefore change the default value of the\nTimeCharacteristic from ProcessingTime to EventTime. This means the\nDataStream API programs that were using event time before now just work\nwithout manually changing this setting. Processing-time programs will\nalso still work.  because using processing-time timers is not dependent\non the TimeCharacteristic. DataStream programs that don't set a\nTimestampAssigner or WatermarkStrategy will also still work if they\ndon't use operations that don't rely on (event-time) timestamps.  This\nis true for both BATCH and STREAMING execution mode.\n\nWith this change.  users don't need to call\nsetStreamTimeCharacteristic(EventTime) anymore. We will make sure they\nlearn of this by deprecating the method in a follow-up commit.\n\nThe only real user-visible change of this is that programs that used the\nKeyedStream.timeWindow()/DataStream.timeWindow() operation.  which is\ndependent on the TimeCharacteristic will now use event time by default.\nWe don't think this operation is useful because the behaviour can be\nsurprising. We recommend users always use an explicit processing-time\nwindow or event-time window.\n\nWe also change the default watermark interval from 0 (disabled) to 200\nto match the previous behaviour of calling\nsetStreamTimeCharacteristic(EventTime).\n","date":"2020-10-01 23:03:44","modifiedFileCount":"18","status":"M","submitter":"Aljoscha Krettek"}]
