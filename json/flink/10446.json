[{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-05-15 21:49:36","commitOrder":2,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-05-18 12:30:38","endLine":206,"groupId":"45981","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/a2/f7f77f21bbf1dd474c1b2e328edd470463cd2a.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2020-05-13 20:55:49","commitOrder":2,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":196,"groupId":"45278","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"NB"}],"commitId":"ce843a2e601cbc2ddba8d3feacaa930aea810877","commitMessage":"@@@[FLINK-17029][jdbc] Introduce a new JDBC connector with new property keys\n\nThis closes #12176\n","date":"2020-05-18 12:30:38","modifiedFileCount":"29","status":"M","submitter":"Leonard Xu"},{"authorTime":"2020-05-13 20:55:49","codes":[{"authorDate":"2020-07-03 19:37:10","commitOrder":3,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-07-30 15:10:29","endLine":223,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ec/552de4faaf988537b314428380ee9714b0eaa6.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2020-05-13 20:55:49","commitOrder":3,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-05-13 20:55:49","endLine":196,"groupId":"45278","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/69/a6ac97f1f925fcde0a5ebce17b57cc8d3cc256.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"bdaf1dbd80c57ac23e2d5530d845e483261f7518","commitMessage":"@@@[FLINK-15728][jdbc] Introduce FieldNamedPreparedStatement to support fields are bound multiple times in update statement\n\nThis closes #12882\n","date":"2020-07-30 15:10:29","modifiedFileCount":"13","status":"M","submitter":"Jark Wu"},{"authorTime":"2020-06-17 14:23:46","codes":[{"authorDate":"2020-06-17 14:23:46","commitOrder":4,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":218,"groupId":"39189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f9/353ed3385ac36eae9dbc15e36f2540b8a9ae2a.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2020-06-17 14:23:46","commitOrder":4,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-09-07 17:35:17","endLine":191,"groupId":"42270","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b7/2705f2a28cad6a6d0b3aa3970eab2e4fd93893.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\tTableResult tableResult = tEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\");\n\t\t\r\n\t\ttableResult.getJobClient().get().getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"6f2a0412c0eb00adeb494fcc1d68481bdf2dd7b8","commitMessage":"@@@[FLINK-18337][table] Introduce TableResult#await method to block until data is ready or job finished\n\nThis closes #12688.\n","date":"2020-09-07 17:35:17","modifiedFileCount":"26","status":"M","submitter":"godfreyhe"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":5,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":215,"groupId":"39189","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/13/435e86fdb7b38e1b26836b8401b4c1baa1fe08.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":5,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":188,"groupId":"42270","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/fd9433b1a6550b78dcd570f64d058c9a4d3741.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-10-27 22:06:47","commitOrder":6,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0',\" +\n\t\t\t\t\"  'sink.max-retries' = '0'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-10-27 22:06:47","endLine":216,"groupId":"26934","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/33/f98aa8e0f028939e24f32358365e15fddfe25d.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n\t\t\t.useBlinkPlanner()\n\t\t\t.inStreamingMode()\n\t\t\t.build();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3),\" +\n\t\t\t\t\"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector'='jdbc',\" +\n\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'table-name'='\" + OUTPUT_TABLE1 + \"',\" +\n\t\t\t\t\"  'sink.buffer-flush.max-rows' = '2',\" +\n\t\t\t\t\"  'sink.buffer-flush.interval' = '0'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":6,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":188,"groupId":"42270","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/fd9433b1a6550b78dcd570f64d058c9a4d3741.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"bca8e472f943f59c0b226734a7a7c889ff4ba321","commitMessage":"@@@[FLINK-19684][jdbc] Fix 'max-retries' option doesn't work when set to zero\n\nThis closes #13669","date":"2020-10-27 22:06:47","modifiedFileCount":"7","status":"M","submitter":"caozhen"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2021-06-07 23:37:43","commitOrder":7,"curCode":"    public void testUpsert() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.getConfig().enableObjectReuse();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n        Table t =\n                tEnv.fromDataStream(\n                        get4TupleDataStream(env)\n                                .assignTimestampsAndWatermarks(\n                                        new AscendingTimestampExtractor<\n                                                Tuple4<Integer, Long, String, Timestamp>>() {\n                                            @Override\n                                            public long extractAscendingTimestamp(\n                                                    Tuple4<Integer, Long, String, Timestamp>\n                                                            element) {\n                                                return element.f0;\n                                            }\n                                        }),\n                        $(\"id\"),\n                        $(\"num\"),\n                        $(\"text\"),\n                        $(\"ts\"));\n\n        tEnv.createTemporaryView(\"T\", t);\n        tEnv.executeSql(\n                \"CREATE TABLE upsertSink (\"\n                        + \"  cnt BIGINT,\"\n                        + \"  lencnt BIGINT,\"\n                        + \"  cTag INT,\"\n                        + \"  ts TIMESTAMP(3),\"\n                        + \"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + OUTPUT_TABLE1\n                        + \"',\"\n                        + \"  'sink.buffer-flush.max-rows' = '2',\"\n                        + \"  'sink.buffer-flush.interval' = '0',\"\n                        + \"  'sink.max-retries' = '0'\"\n                        + \")\");\n\n        tEnv.executeSql(\n                        \"INSERT INTO upsertSink \\n\"\n                                + \"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\"\n                                + \"FROM (\\n\"\n                                + \"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\"\n                                + \"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\"\n                                + \"  GROUP BY len, cTag\\n\"\n                                + \")\\n\"\n                                + \"GROUP BY cnt, cTag\")\n                .await();\n        check(\n                new Row[] {\n                    Row.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n                    Row.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n                    Row.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n                },\n                DB_URL,\n                OUTPUT_TABLE1,\n                new String[] {\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n    }\n","date":"2021-06-11 15:34:45","endLine":271,"groupId":"10446","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/27/783032359b382ca000e4959c233d4cefe6ca99.src","preCode":"    public void testUpsert() throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.getConfig().enableObjectReuse();\n        EnvironmentSettings envSettings =\n                EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n\n        Table t =\n                tEnv.fromDataStream(\n                        get4TupleDataStream(env)\n                                .assignTimestampsAndWatermarks(\n                                        new AscendingTimestampExtractor<\n                                                Tuple4<Integer, Long, String, Timestamp>>() {\n                                            @Override\n                                            public long extractAscendingTimestamp(\n                                                    Tuple4<Integer, Long, String, Timestamp>\n                                                            element) {\n                                                return element.f0;\n                                            }\n                                        }),\n                        $(\"id\"),\n                        $(\"num\"),\n                        $(\"text\"),\n                        $(\"ts\"));\n\n        tEnv.createTemporaryView(\"T\", t);\n        tEnv.executeSql(\n                \"CREATE TABLE upsertSink (\"\n                        + \"  cnt BIGINT,\"\n                        + \"  lencnt BIGINT,\"\n                        + \"  cTag INT,\"\n                        + \"  ts TIMESTAMP(3),\"\n                        + \"  PRIMARY KEY (cnt, cTag) NOT ENFORCED\"\n                        + \") WITH (\"\n                        + \"  'connector'='jdbc',\"\n                        + \"  'url'='\"\n                        + DB_URL\n                        + \"',\"\n                        + \"  'table-name'='\"\n                        + OUTPUT_TABLE1\n                        + \"',\"\n                        + \"  'sink.buffer-flush.max-rows' = '2',\"\n                        + \"  'sink.buffer-flush.interval' = '0',\"\n                        + \"  'sink.max-retries' = '0'\"\n                        + \")\");\n\n        tEnv.executeSql(\n                        \"INSERT INTO upsertSink \\n\"\n                                + \"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\"\n                                + \"FROM (\\n\"\n                                + \"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\"\n                                + \"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\"\n                                + \"  GROUP BY len, cTag\\n\"\n                                + \")\\n\"\n                                + \"GROUP BY cnt, cTag\")\n                .await();\n        check(\n                new Row[] {\n                    Row.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n                    Row.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n                    Row.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n                },\n                DB_URL,\n                OUTPUT_TABLE1,\n                new String[] {\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n    }\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":7,"curCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","date":"2020-10-01 23:03:45","endLine":188,"groupId":"10446","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f5/fd9433b1a6550b78dcd570f64d058c9a4d3741.src","preCode":"\tpublic void testUpsert() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.getConfig().enableObjectReuse();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env);\n\n\t\tTable t = tEnv.fromDataStream(get4TupleDataStream(env).assignTimestampsAndWatermarks(\n\t\t\tnew AscendingTimestampExtractor<Tuple4<Integer, Long, String, Timestamp>>() {\n\t\t\t\t@Override\n\t\t\t\tpublic long extractAscendingTimestamp(Tuple4<Integer, Long, String, Timestamp> element) {\n\t\t\t\t\treturn element.f0;\n\t\t\t\t}\n\t\t\t}), $(\"id\"), $(\"num\"), $(\"text\"), $(\"ts\"));\n\n\t\ttEnv.createTemporaryView(\"T\", t);\n\t\ttEnv.executeSql(\n\t\t\t\"CREATE TABLE upsertSink (\" +\n\t\t\t\t\"  cnt BIGINT,\" +\n\t\t\t\t\"  lencnt BIGINT,\" +\n\t\t\t\t\"  cTag INT,\" +\n\t\t\t\t\"  ts TIMESTAMP(3)\" +\n\t\t\t\t\") WITH (\" +\n\t\t\t\t\"  'connector.type'='jdbc',\" +\n\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n\t\t\t\t\"  'connector.table'='\" + OUTPUT_TABLE1 + \"'\" +\n\t\t\t\t\")\");\n\n\t\ttEnv.executeSql(\"INSERT INTO upsertSink \\n\" +\n\t\t\t\"SELECT cnt, COUNT(len) AS lencnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"FROM (\\n\" +\n\t\t\t\"  SELECT len, COUNT(id) as cnt, cTag, MAX(ts) AS ts\\n\" +\n\t\t\t\"  FROM (SELECT id, CHAR_LENGTH(text) AS len, (CASE WHEN id > 0 THEN 1 ELSE 0 END) cTag, ts FROM T)\\n\" +\n\t\t\t\"  GROUP BY len, cTag\\n\" +\n\t\t\t\")\\n\" +\n\t\t\t\"GROUP BY cnt, cTag\").await();\n\t\tcheck(new Row[] {\n\t\t\t\tRow.of(1, 5, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.006\")),\n\t\t\t\tRow.of(7, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.021\")),\n\t\t\t\tRow.of(9, 1, 1, Timestamp.valueOf(\"1970-01-01 00:00:00.015\"))\n\t\t}, DB_URL, OUTPUT_TABLE1, new String[]{\"cnt\", \"lencnt\", \"cTag\", \"ts\"});\n\t}\n","realPath":"flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcUpsertTableSinkITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"bd27a2e2846186f59556c38b7bf562a9b04d14ac","commitMessage":"@@@[FLINK-22744][table] Update and simplify EnvironmentSettings\n","date":"2021-06-11 15:34:45","modifiedFileCount":"33","status":"M","submitter":"Timo Walther"}]
