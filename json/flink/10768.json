[{"authorTime":"2020-08-25 19:19:04","codes":[{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSink() throws Exception {\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\tString table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n\t\ttEnv.executeSql(table2DDL);\n\n\t\tString query = \"INSERT INTO \" + TEST_TABLE_2 + \" SELECT\" +\n\t\t\t\" rowkey,\" +\n\t\t\t\" family1,\" +\n\t\t\t\" family2,\" +\n\t\t\t\" family3\" +\n\t\t\t\" FROM \" + TEST_TABLE_1;\n\n\t\ttEnv.executeSql(query).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table2DDL);\n\n\t\tTable table = batchEnv.sqlQuery(\n\t\t\t\"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3 \" +\n\t\t\t\t\"FROM \" + TEST_TABLE_2 + \" AS h\"\n\t\t);\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"1,10,Hello-1,100,1.01,false,Welt-1\\n\" +\n\t\t\t\t\"2,20,Hello-2,200,2.02,true,Welt-2\\n\" +\n\t\t\t\t\"3,30,Hello-3,300,3.03,false,Welt-3\\n\" +\n\t\t\t\t\"4,40,null,400,4.04,true,Welt-4\\n\" +\n\t\t\t\t\"5,50,Hello-5,500,5.05,false,Welt-5\\n\" +\n\t\t\t\t\"6,60,Hello-6,600,6.06,true,Welt-6\\n\" +\n\t\t\t\t\"7,70,Hello-7,700,7.07,false,Welt-7\\n\" +\n\t\t\t\t\"8,80,null,800,8.08,true,Welt-8\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","date":"2020-09-28 22:08:46","endLine":385,"groupId":"14886","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/31/95e053e619c5bf26b1781f718b867227e1e938.src","preCode":"\tpublic void testTableSink() throws Exception {\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\tString table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n\t\ttEnv.executeSql(table2DDL);\n\n\t\tString query = \"INSERT INTO \" + TEST_TABLE_2 + \" SELECT\" +\n\t\t\t\" rowkey,\" +\n\t\t\t\" family1,\" +\n\t\t\t\" family2,\" +\n\t\t\t\" family3\" +\n\t\t\t\" FROM \" + TEST_TABLE_1;\n\n\t\ttEnv.executeSql(query).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table2DDL);\n\n\t\tTable table = batchEnv.sqlQuery(\n\t\t\t\"SELECT \" +\n\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\"  h.family3.col3 \" +\n\t\t\t\t\"FROM \" + TEST_TABLE_2 + \" AS h\"\n\t\t);\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"1,10,Hello-1,100,1.01,false,Welt-1\\n\" +\n\t\t\t\t\"2,20,Hello-2,200,2.02,true,Welt-2\\n\" +\n\t\t\t\t\"3,30,Hello-3,300,3.03,false,Welt-3\\n\" +\n\t\t\t\t\"4,40,null,400,4.04,true,Welt-4\\n\" +\n\t\t\t\t\"5,50,Hello-5,500,5.05,false,Welt-5\\n\" +\n\t\t\t\t\"6,60,Hello-6,600,6.06,true,Welt-6\\n\" +\n\t\t\t\t\"7,70,Hello-7,700,7.07,false,Welt-7\\n\" +\n\t\t\t\t\"8,80,null,800,8.08,true,Welt-8\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"B"},{"authorDate":"2020-08-25 19:19:04","commitOrder":1,"curCode":"\tpublic void testTableSink() throws Exception {\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\tString table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n\t\ttEnv.executeSql(table2DDL);\n\n\t\tString query = \"INSERT INTO \" + TEST_TABLE_2 + \" SELECT\" +\n\t\t\t\t\" rowkey,\" +\n\t\t\t\t\" family1,\" +\n\t\t\t\t\" family2,\" +\n\t\t\t\t\" family3\" +\n\t\t\t\t\" FROM \" + TEST_TABLE_1;\n\n\t\t\r\n\t\ttEnv.executeSql(query).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table2DDL);\n\n\t\tTable table = batchEnv.sqlQuery(\n\t\t\t\t\"SELECT \" +\n\t\t\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\t\t\"  h.family3.col3 \" +\n\t\t\t\t\t\t\"FROM \" + TEST_TABLE_2 + \" AS h\"\n\t\t\t\t);\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"1,10,Hello-1,100,1.01,false,Welt-1\\n\" +\n\t\t\t\t\t\t\"2,20,Hello-2,200,2.02,true,Welt-2\\n\" +\n\t\t\t\t\t\t\"3,30,Hello-3,300,3.03,false,Welt-3\\n\" +\n\t\t\t\t\t\t\"4,40,null,400,4.04,true,Welt-4\\n\" +\n\t\t\t\t\t\t\"5,50,Hello-5,500,5.05,false,Welt-5\\n\" +\n\t\t\t\t\t\t\"6,60,Hello-6,600,6.06,true,Welt-6\\n\" +\n\t\t\t\t\t\t\"7,70,Hello-7,700,7.07,false,Welt-7\\n\" +\n\t\t\t\t\t\t\"8,80,null,800,8.08,true,Welt-8\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","date":"2020-09-28 22:08:46","endLine":387,"groupId":"14886","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/c6/fc1ee3d7be85cca2a8be09b35b18f7e490ab40.src","preCode":"\tpublic void testTableSink() throws Exception {\n\t\tStreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n\t\t\r\n\t\tString table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n\t\ttEnv.executeSql(table1DDL);\n\n\t\tString table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n\t\ttEnv.executeSql(table2DDL);\n\n\t\tString query = \"INSERT INTO \" + TEST_TABLE_2 + \" SELECT\" +\n\t\t\t\t\" rowkey,\" +\n\t\t\t\t\" family1,\" +\n\t\t\t\t\" family2,\" +\n\t\t\t\t\" family3\" +\n\t\t\t\t\" FROM \" + TEST_TABLE_1;\n\n\t\t\r\n\t\ttEnv.executeSql(query).await();\n\n\t\t\r\n\t\tTableEnvironment batchEnv = createBatchTableEnv();\n\t\tbatchEnv.executeSql(table2DDL);\n\n\t\tTable table = batchEnv.sqlQuery(\n\t\t\t\t\"SELECT \" +\n\t\t\t\t\t\t\"  h.rowkey, \" +\n\t\t\t\t\t\t\"  h.family1.col1, \" +\n\t\t\t\t\t\t\"  h.family2.col1, \" +\n\t\t\t\t\t\t\"  h.family2.col2, \" +\n\t\t\t\t\t\t\"  h.family3.col1, \" +\n\t\t\t\t\t\t\"  h.family3.col2, \" +\n\t\t\t\t\t\t\"  h.family3.col3 \" +\n\t\t\t\t\t\t\"FROM \" + TEST_TABLE_2 + \" AS h\"\n\t\t\t\t);\n\t\tList<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n\t\tString expected =\n\t\t\t\t\"1,10,Hello-1,100,1.01,false,Welt-1\\n\" +\n\t\t\t\t\t\t\"2,20,Hello-2,200,2.02,true,Welt-2\\n\" +\n\t\t\t\t\t\t\"3,30,Hello-3,300,3.03,false,Welt-3\\n\" +\n\t\t\t\t\t\t\"4,40,null,400,4.04,true,Welt-4\\n\" +\n\t\t\t\t\t\t\"5,50,Hello-5,500,5.05,false,Welt-5\\n\" +\n\t\t\t\t\t\t\"6,60,Hello-6,600,6.06,true,Welt-6\\n\" +\n\t\t\t\t\t\t\"7,70,Hello-7,700,7.07,false,Welt-7\\n\" +\n\t\t\t\t\t\t\"8,80,null,800,8.08,true,Welt-8\\n\";\n\n\t\tTestBaseUtils.compareResultAsText(results, expected);\n\t}\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"}],"commitId":"16c97c8db718219ed036218faf3519541f24b430","commitMessage":"@@@[FLINK-18795][hbase] Support for HBase 2\n\nThis closes #13128\n","date":"2020-09-28 22:08:46","modifiedFileCount":"5","status":"B","submitter":"Miklos Gergely"},{"authorTime":"2020-12-18 18:32:55","codes":[{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-01-08 00:17:30","endLine":424,"groupId":"14886","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/fc/8a555806cf37812deea4e55d1eb923e508d909.src","preCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"1,10,Hello-1,100,1.01,false,Welt-1\\n\"\n                        + \"2,20,Hello-2,200,2.02,true,Welt-2\\n\"\n                        + \"3,30,Hello-3,300,3.03,false,Welt-3\\n\"\n                        + \"4,40,null,400,4.04,true,Welt-4\\n\"\n                        + \"5,50,Hello-5,500,5.05,false,Welt-5\\n\"\n                        + \"6,60,Hello-6,600,6.06,true,Welt-6\\n\"\n                        + \"7,70,Hello-7,700,7.07,false,Welt-7\\n\"\n                        + \"8,80,null,800,8.08,true,Welt-8\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"},{"authorDate":"2020-12-18 18:32:55","commitOrder":2,"curCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        \r\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-01-08 00:17:30","endLine":427,"groupId":"14886","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/38/b9fe68286edf0de3b2893f3d03baffea91cfc0.src","preCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        \r\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"1,10,Hello-1,100,1.01,false,Welt-1\\n\"\n                        + \"2,20,Hello-2,200,2.02,true,Welt-2\\n\"\n                        + \"3,30,Hello-3,300,3.03,false,Welt-3\\n\"\n                        + \"4,40,null,400,4.04,true,Welt-4\\n\"\n                        + \"5,50,Hello-5,500,5.05,false,Welt-5\\n\"\n                        + \"6,60,Hello-6,600,6.06,true,Welt-6\\n\"\n                        + \"7,70,Hello-7,700,7.07,false,Welt-7\\n\"\n                        + \"8,80,null,800,8.08,true,Welt-8\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"73cdd3d0d9f6a807b3e47c09eef7983c9aa180c7","commitMessage":"@@@[FLINK-18090] Update tests for new Row.toString\n\nAll tests in modules apart from the Blink planner/runtime\nmodule have been updated.\n\nOtherwise we use a JUnit rule to make the migration of\nthe remaining tests incremental.\n\nThis closes #14568.\n","date":"2021-01-08 00:17:30","modifiedFileCount":"34","status":"M","submitter":"Timo Walther"},{"authorTime":"2021-05-11 23:29:15","codes":[{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = TableEnvironment.create(batchSettings);\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-05-18 19:59:43","endLine":281,"groupId":"10768","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/1a/d2dd2d196495dada8ff95f9e5d245a82edfaa4.src","preCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-1.4/src/test/java/org/apache/flink/connector/hbase1/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2021-05-11 23:29:15","commitOrder":3,"curCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        \r\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = TableEnvironment.create(batchSettings);\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","date":"2021-05-18 19:59:43","endLine":285,"groupId":"10768","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/d9/633161cafadb4faec63a4d8e2e9e03f2c00381.src","preCode":"    public void testTableSink() throws Exception {\n        StreamExecutionEnvironment execEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment tEnv = StreamTableEnvironment.create(execEnv, streamSettings);\n\n        \r\n        String table1DDL = createHBaseTableDDL(TEST_TABLE_1, false);\n        tEnv.executeSql(table1DDL);\n\n        String table2DDL = createHBaseTableDDL(TEST_TABLE_2, false);\n        tEnv.executeSql(table2DDL);\n\n        String query =\n                \"INSERT INTO \"\n                        + TEST_TABLE_2\n                        + \" SELECT\"\n                        + \" rowkey,\"\n                        + \" family1,\"\n                        + \" family2,\"\n                        + \" family3\"\n                        + \" FROM \"\n                        + TEST_TABLE_1;\n\n        \r\n        tEnv.executeSql(query).await();\n\n        \r\n        TableEnvironment batchEnv = createBatchTableEnv();\n        batchEnv.executeSql(table2DDL);\n\n        Table table =\n                batchEnv.sqlQuery(\n                        \"SELECT \"\n                                + \"  h.rowkey, \"\n                                + \"  h.family1.col1, \"\n                                + \"  h.family2.col1, \"\n                                + \"  h.family2.col2, \"\n                                + \"  h.family3.col1, \"\n                                + \"  h.family3.col2, \"\n                                + \"  h.family3.col3 \"\n                                + \"FROM \"\n                                + TEST_TABLE_2\n                                + \" AS h\");\n        List<Row> results = CollectionUtil.iteratorToList(table.execute().collect());\n        String expected =\n                \"+I[1, 10, Hello-1, 100, 1.01, false, Welt-1]\\n\"\n                        + \"+I[2, 20, Hello-2, 200, 2.02, true, Welt-2]\\n\"\n                        + \"+I[3, 30, Hello-3, 300, 3.03, false, Welt-3]\\n\"\n                        + \"+I[4, 40, null, 400, 4.04, true, Welt-4]\\n\"\n                        + \"+I[5, 50, Hello-5, 500, 5.05, false, Welt-5]\\n\"\n                        + \"+I[6, 60, Hello-6, 600, 6.06, true, Welt-6]\\n\"\n                        + \"+I[7, 70, Hello-7, 700, 7.07, false, Welt-7]\\n\"\n                        + \"+I[8, 80, null, 800, 8.08, true, Welt-8]\\n\";\n\n        TestBaseUtils.compareResultAsText(results, expected);\n    }\n","realPath":"flink-connectors/flink-connector-hbase-2.2/src/test/java/org/apache/flink/connector/hbase2/HBaseConnectorITCase.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"97610190fbdf4899e7d9aa8888971a0423fb7d81","commitMessage":"@@@[FLINK-22623][hbase] Drop BatchTableSource/Sink HBaseTableSource/Sink and related classes\n\nThis removes the HBaseTableSource/Sink and related classes including various HBaseInputFormats and\nHBaseSinkFunction. It is possible to read via Table & SQL API and convert the Table to DataStream API\n(or vice versa) if necessary. DataSet API is not supported anymore.\n\nThis closes #15905.\n","date":"2021-05-18 19:59:43","modifiedFileCount":"5","status":"M","submitter":"Timo Walther"}]
