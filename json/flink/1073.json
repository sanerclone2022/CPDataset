[{"authorTime":"2020-06-05 01:16:27","codes":[{"authorDate":"2020-01-21 23:46:05","commitOrder":5,"curCode":"\tpublic void testUseTempDirectories() throws Exception {\n\t\tString checkpointPath = tempFolder.newFolder().toURI().toString();\n\t\tRocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath);\n\n\t\tFile dir1 = tempFolder.newFolder();\n\t\tFile dir2 = tempFolder.newFolder();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(dir1, dir2);\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend.\n\t\t\tcreateKeyedStateBackend(\n\t\t\t\tenv,\n\t\t\t\tenv.getJobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t1,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tnew CloseableRegistry());\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())));\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-01-23 21:10:06","endLine":307,"groupId":"44784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUseTempDirectories","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5e96b5db79a0efde8b0ad78dbaeff291e20819.src","preCode":"\tpublic void testUseTempDirectories() throws Exception {\n\t\tString checkpointPath = tempFolder.newFolder().toURI().toString();\n\t\tRocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath);\n\n\t\tFile dir1 = tempFolder.newFolder();\n\t\tFile dir2 = tempFolder.newFolder();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(dir1, dir2);\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend.\n\t\t\tcreateKeyedStateBackend(\n\t\t\t\tenv,\n\t\t\t\tenv.getJobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t1,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tnew CloseableRegistry());\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())));\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"NB"},{"authorDate":"2020-06-05 01:16:27","commitOrder":5,"curCode":"\tpublic static <K> RocksDBKeyedStateBackend<K> createKeyedStateBackend(\n\t\t\tRocksDBStateBackend rocksDbBackend,\n\t\t\tEnvironment env,\n\t\t\tTypeSerializer<K> keySerializer) throws IOException {\n\n\t\treturn (RocksDBKeyedStateBackend<K>) rocksDbBackend.createKeyedStateBackend(\n\t\t\tenv,\n\t\t\tenv.getJobID(),\n\t\t\t\"test_op\",\n\t\t\tkeySerializer,\n\t\t\t1,\n\t\t\tnew KeyGroupRange(0, 0),\n\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\tCollections.emptyList(),\n\t\t\tnew CloseableRegistry());\n\t}\n","date":"2020-06-16 16:31:11","endLine":121,"groupId":"40689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createKeyedStateBackend","params":"(RocksDBStateBackendrocksDbBackend@Environmentenv@TypeSerializer<K>keySerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/ce/e56aae49ca9d05cea4947feca4334fbe53c5fa.src","preCode":"\tpublic static <K> RocksDBKeyedStateBackend<K> createKeyedStateBackend(\n\t\t\tRocksDBStateBackend rocksDbBackend,\n\t\t\tEnvironment env,\n\t\t\tTypeSerializer<K> keySerializer) throws IOException {\n\n\t\treturn (RocksDBKeyedStateBackend<K>) rocksDbBackend.createKeyedStateBackend(\n\t\t\tenv,\n\t\t\tenv.getJobID(),\n\t\t\t\"test_op\",\n\t\t\tkeySerializer,\n\t\t\t1,\n\t\t\tnew KeyGroupRange(0, 0),\n\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\tCollections.emptyList(),\n\t\t\tnew CloseableRegistry());\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBTestUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"8ca388ca0225ff22f532c8a65f97d8cfea027c22","commitMessage":"@@@[FLINK-17800][roksdb] Ensure total order seek to avoid user misuse\n","date":"2020-06-16 16:31:11","modifiedFileCount":"15","status":"M","submitter":"Yun Tang"},{"authorTime":"2021-01-22 04:15:38","codes":[{"authorDate":"2020-01-21 23:46:05","commitOrder":6,"curCode":"\tpublic void testUseTempDirectories() throws Exception {\n\t\tString checkpointPath = tempFolder.newFolder().toURI().toString();\n\t\tRocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath);\n\n\t\tFile dir1 = tempFolder.newFolder();\n\t\tFile dir2 = tempFolder.newFolder();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(dir1, dir2);\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend.\n\t\t\tcreateKeyedStateBackend(\n\t\t\t\tenv,\n\t\t\t\tenv.getJobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t1,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tnew CloseableRegistry());\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())));\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","date":"2020-01-23 21:10:06","endLine":307,"groupId":"1073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUseTempDirectories","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/e8/5e96b5db79a0efde8b0ad78dbaeff291e20819.src","preCode":"\tpublic void testUseTempDirectories() throws Exception {\n\t\tString checkpointPath = tempFolder.newFolder().toURI().toString();\n\t\tRocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath);\n\n\t\tFile dir1 = tempFolder.newFolder();\n\t\tFile dir2 = tempFolder.newFolder();\n\n\t\tassertNull(rocksDbBackend.getDbStoragePaths());\n\n\t\tfinal MockEnvironment env = getMockEnvironment(dir1, dir2);\n\t\tRocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend.\n\t\t\tcreateKeyedStateBackend(\n\t\t\t\tenv,\n\t\t\t\tenv.getJobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t1,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tenv.getTaskKvStateRegistry(),\n\t\t\t\tTtlTimeProvider.DEFAULT,\n\t\t\t\tnew UnregisteredMetricsGroup(),\n\t\t\t\tCollections.emptyList(),\n\t\t\t\tnew CloseableRegistry());\n\n\t\ttry {\n\t\t\tFile instanceBasePath = keyedBackend.getInstanceBasePath();\n\t\t\tassertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())));\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(keyedBackend);\n\t\t\tkeyedBackend.dispose();\n\t\t\tenv.close();\n\t\t}\n\t}\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"N"},{"authorDate":"2021-01-22 04:15:38","commitOrder":6,"curCode":"    public static <K> RocksDBKeyedStateBackend<K> createKeyedStateBackend(\n            EmbeddedRocksDBStateBackend rocksDbBackend,\n            Environment env,\n            TypeSerializer<K> keySerializer)\n            throws IOException {\n\n        return (RocksDBKeyedStateBackend<K>)\n                rocksDbBackend.createKeyedStateBackend(\n                        env,\n                        env.getJobID(),\n                        \"test_op\",\n                        keySerializer,\n                        1,\n                        new KeyGroupRange(0, 0),\n                        env.getTaskKvStateRegistry(),\n                        TtlTimeProvider.DEFAULT,\n                        new UnregisteredMetricsGroup(),\n                        Collections.emptyList(),\n                        new CloseableRegistry());\n    }\n","date":"2021-02-25 10:11:27","endLine":131,"groupId":"1073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createKeyedStateBackend","params":"(EmbeddedRocksDBStateBackendrocksDbBackend@Environmentenv@TypeSerializer<K>keySerializer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/20/66ada6d1678372c84dc82a6e33f1f29d42f62d.src","preCode":"    public static <K> RocksDBKeyedStateBackend<K> createKeyedStateBackend(\n            RocksDBStateBackend rocksDbBackend, Environment env, TypeSerializer<K> keySerializer)\n            throws IOException {\n\n        return (RocksDBKeyedStateBackend<K>)\n                rocksDbBackend.createKeyedStateBackend(\n                        env,\n                        env.getJobID(),\n                        \"test_op\",\n                        keySerializer,\n                        1,\n                        new KeyGroupRange(0, 0),\n                        env.getTaskKvStateRegistry(),\n                        TtlTimeProvider.DEFAULT,\n                        new UnregisteredMetricsGroup(),\n                        Collections.emptyList(),\n                        new CloseableRegistry());\n    }\n","realPath":"flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBTestUtils.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"0a76daba0a428a322f0273d7dc6a70966f62bf26","commitMessage":"@@@[FLINK-19467][runtime / state backends] Implement HashMapStateBackend and EmbeddedRocksDBStateBackend\n","date":"2021-02-25 10:11:27","modifiedFileCount":"32","status":"M","submitter":"Seth Wiesman"}]
