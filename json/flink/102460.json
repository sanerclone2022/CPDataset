[{"authorTime":"2017-10-24 18:16:08","codes":[{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","date":"2017-10-27 00:57:34","endLine":300,"groupId":"29716","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryUnknownKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"},{"authorDate":"2017-10-24 18:16:08","commitOrder":1,"curCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","date":"2017-10-27 00:57:34","endLine":622,"groupId":"1744","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializerMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/04/1544d845bf340d2471b06173f223733817b104.src","preCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"B"}],"commitId":"0c771505b84cdacf7a359c3be0efe38a30f9e660","commitMessage":"@@@[FLINK-7908][QS] Restructure the queryable state module.\n\nThe QS module is split into core and client. The core should\nbe put in the lib folder to enable queryable state.  while the\nclient is the one that the user will program against. The\nreason for the restructuring in mainly to remove the dependency\non the flink-runtime from the user's program.\n","date":"2017-10-27 00:57:34","modifiedFileCount":"23","status":"B","submitter":"kkloudas"},{"authorTime":"2018-01-23 01:11:04","codes":[{"authorDate":"2018-01-23 01:11:04","commitOrder":2,"curCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","date":"2018-02-06 18:49:44","endLine":286,"groupId":"4932","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryUnknownKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/1517c5a6525fd2219795819c8e68eebdd9e49d.src","preCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2018-01-23 01:11:04","commitOrder":2,"curCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","date":"2018-02-06 18:49:44","endLine":594,"groupId":"1744","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializerMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/8b/1517c5a6525fd2219795819c8e68eebdd9e49d.src","preCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = abstractBackend.createKeyedStateBackend(\n\t\t\t\tdummyEnv,\n\t\t\t\tnew JobID(),\n\t\t\t\t\"test_op\",\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tnumKeyGroups,\n\t\t\t\tnew KeyGroupRange(0, 0),\n\t\t\t\tregistry.createTaskRegistry(dummyEnv.getJobID(), dummyEnv.getJobVertexId()));\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"M"}],"commitId":"cef6741a91fcb83757a82a39b04d074b1a1311cf","commitMessage":"@@@[FLINK-8493] [flip6] Integrate queryable state with Flip-6\n\nAdapt KvStateRegistry to accept multiple KvStateRegistryListeners. Introduce\nthe KvStateLocationOracle to retrieve the KvStateLocation. Adapt the KvStateClientProxy\nto accept multiple KvStateLocationOracles to retrieve the KvStateLocations for\ndifferent jobs. Registered the KvStateRegistryListener and KvStateLocationOracle\nin TaskExecutor upon establishing a connection to the JobMaster.\n\nThis closes #5339.\n","date":"2018-02-06 18:49:44","modifiedFileCount":"14","status":"M","submitter":"Till Rohrmann"},{"authorTime":"2020-03-19 17:55:21","codes":[{"authorDate":"2020-03-19 17:55:21","commitOrder":3,"curCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","date":"2020-03-23 17:20:30","endLine":291,"groupId":"102460","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryUnknownKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/f396eeea2cb42f960a74c589b5db3b53f223b8.src","preCode":"\tpublic void testQueryUnknownKey() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tbackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, desc);\n\n\t\tbyte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t1238283,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE);\n\n\t\tlong requestId = Integer.MAX_VALUE + 22982L;\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, serializedKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), requestId, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\n\t\tassertEquals(requestId, response.getRequestId());\n\n\t\tassertTrue(\"Did not respond with expected failure cause\", response.getCause() instanceof UnknownKeyOrNamespaceException);\n\n\t\tassertEquals(1L, stats.getNumRequests());\n\t\tassertEquals(1L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2020-03-19 17:55:21","commitOrder":3,"curCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tbuf.release();\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","date":"2020-03-23 17:20:30","endLine":645,"groupId":"102460","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerializerMismatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/f6/f396eeea2cb42f960a74c589b5db3b53f223b8.src","preCode":"\tpublic void testSerializerMismatch() throws Exception {\n\t\tKvStateRegistry registry = new KvStateRegistry();\n\t\tAtomicKvStateRequestStats stats = new AtomicKvStateRequestStats();\n\n\t\tMessageSerializer<KvStateInternalRequest, KvStateResponse> serializer =\n\t\t\t\tnew MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(), new KvStateResponse.KvStateResponseDeserializer());\n\n\t\tKvStateServerHandler handler = new KvStateServerHandler(testServer, registry, serializer, stats);\n\t\tEmbeddedChannel channel = new EmbeddedChannel(getFrameDecoder(), handler);\n\n\t\tint numKeyGroups = 1;\n\t\tAbstractStateBackend abstractBackend = new MemoryStateBackend();\n\t\tDummyEnvironment dummyEnv = new DummyEnvironment(\"test\", 1, 0);\n\t\tdummyEnv.setKvStateRegistry(registry);\n\t\tAbstractKeyedStateBackend<Integer> backend = createKeyedStateBackend(registry, numKeyGroups, abstractBackend, dummyEnv);\n\n\t\tfinal TestRegistryListener registryListener = new TestRegistryListener();\n\t\tregistry.registerListener(dummyEnv.getJobID(), registryListener);\n\n\t\t\r\n\t\tValueStateDescriptor<Integer> desc = new ValueStateDescriptor<>(\"any\", IntSerializer.INSTANCE);\n\t\tdesc.setQueryable(\"vanilla\");\n\n\t\tValueState<Integer> state = backend.getPartitionedState(\n\t\t\t\tVoidNamespace.INSTANCE,\n\t\t\t\tVoidNamespaceSerializer.INSTANCE,\n\t\t\t\tdesc);\n\n\t\tint key = 99812822;\n\n\t\t\r\n\t\tbackend.setCurrentKey(key);\n\t\tstate.update(712828289);\n\n\t\tbyte[] wrongKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\t\"wrong-key-type\",\n\t\t\t\tStringSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tbyte[] wrongNamespace = KvStateSerializer.serializeKeyAndNamespace(\n\t\t\t\tkey,\n\t\t\t\tIntSerializer.INSTANCE,\n\t\t\t\t\"wrong-namespace-type\",\n\t\t\t\tStringSerializer.INSTANCE);\n\n\t\tassertTrue(registryListener.registrationName.equals(\"vanilla\"));\n\n\t\tKvStateInternalRequest request = new KvStateInternalRequest(registryListener.kvStateId, wrongKeyAndNamespace);\n\t\tByteBuf serRequest = MessageSerializer.serializeRequest(channel.alloc(), 182828L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tByteBuf buf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tRequestFailure response = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182828L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\t\r\n\t\trequest = new KvStateInternalRequest(registryListener.kvStateId, wrongNamespace);\n\t\tserRequest = MessageSerializer.serializeRequest(channel.alloc(), 182829L, request);\n\n\t\t\r\n\t\tchannel.writeInbound(serRequest);\n\n\t\tbuf = (ByteBuf) readInboundBlocking(channel);\n\t\tbuf.skipBytes(4); \r\n\n\t\t\r\n\t\tassertEquals(MessageType.REQUEST_FAILURE, MessageSerializer.deserializeHeader(buf));\n\t\tresponse = MessageSerializer.deserializeRequestFailure(buf);\n\t\tassertEquals(182829L, response.getRequestId());\n\t\tassertTrue(response.getCause().getMessage().contains(\"IOException\"));\n\n\t\tassertEquals(2L, stats.getNumRequests());\n\t\tassertEquals(2L, stats.getNumFailed());\n\t}\n","realPath":"flink-queryable-state/flink-queryable-state-runtime/src/test/java/org/apache/flink/queryablestate/network/KvStateServerHandlerTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"50ee6554dffee784f6dbfeaba7b18a18bdba5659","commitMessage":"@@@[FLINK-16718][tests] Fix ByteBuf leak in KvStateServerHandlerTest\n\nThis closes #11453.\n","date":"2020-03-23 17:20:30","modifiedFileCount":"1","status":"M","submitter":"Gary Yao"}]
