[{"authorTime":"2020-07-30 21:09:26","codes":[{"authorDate":"2020-07-30 21:09:26","commitOrder":1,"curCode":"\tprivate static RowDataToAvroConverter createArrayConverter(ArrayType arrayType) {\n\t\tLogicalType elementType = arrayType.getElementType();\n\t\tfinal ArrayData.ElementGetter elementGetter = ArrayData.createElementGetter(elementType);\n\t\tfinal RowDataToAvroConverter elementConverter = createConverter(arrayType.getElementType());\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema elementSchema = schema.getElementType();\n\t\t\tArrayData arrayData = (ArrayData) object;\n\t\t\tList<Object> list = new ArrayList<>();\n\t\t\tfor (int i = 0; i < arrayData.size(); ++i) {\n\t\t\t\tlist.add(elementConverter.convert(elementSchema, elementGetter.getElementOrNull(arrayData, i)));\n\t\t\t}\n\t\t\treturn list;\n\t\t};\n\t}\n","date":"2020-07-30 21:09:26","endLine":182,"groupId":"26621","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createArrayConverter","params":"(ArrayTypearrayType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/fb2d261e6a0afa5f20eadd6e5ab62bde4a22ff.src","preCode":"\tprivate static RowDataToAvroConverter createArrayConverter(ArrayType arrayType) {\n\t\tLogicalType elementType = arrayType.getElementType();\n\t\tfinal ArrayData.ElementGetter elementGetter = ArrayData.createElementGetter(elementType);\n\t\tfinal RowDataToAvroConverter elementConverter = createConverter(arrayType.getElementType());\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema elementSchema = schema.getElementType();\n\t\t\tArrayData arrayData = (ArrayData) object;\n\t\t\tList<Object> list = new ArrayList<>();\n\t\t\tfor (int i = 0; i < arrayData.size(); ++i) {\n\t\t\t\tlist.add(elementConverter.convert(elementSchema, elementGetter.getElementOrNull(arrayData, i)));\n\t\t\t}\n\t\t\treturn list;\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/RowDataToAvroConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"},{"authorDate":"2020-07-30 21:09:26","commitOrder":1,"curCode":"\tprivate static RowDataToAvroConverter createMapConverter(LogicalType type) {\n\t\tLogicalType valueType = extractValueTypeToAvroMap(type);\n\t\tfinal ArrayData.ElementGetter valueGetter = ArrayData.createElementGetter(valueType);\n\t\tfinal RowDataToAvroConverter valueConverter = createConverter(valueType);\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema valueSchema = schema.getValueType();\n\t\t\tfinal MapData mapData = (MapData) object;\n\t\t\tfinal ArrayData keyArray = mapData.keyArray();\n\t\t\tfinal ArrayData valueArray = mapData.valueArray();\n\t\t\tfinal Map<Object, Object> map = new HashMap<>(mapData.size());\n\t\t\tfor (int i = 0; i < mapData.size(); ++i) {\n\t\t\t\tfinal String key = keyArray.getString(i).toString();\n\t\t\t\tfinal Object value = valueConverter.convert(valueSchema, valueGetter.getElementOrNull(valueArray, i));\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t\treturn map;\n\t\t};\n\t}\n","date":"2020-07-30 21:09:26","endLine":202,"groupId":"39068","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapConverter","params":"(LogicalTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/0a/fb2d261e6a0afa5f20eadd6e5ab62bde4a22ff.src","preCode":"\tprivate static RowDataToAvroConverter createMapConverter(LogicalType type) {\n\t\tLogicalType valueType = extractValueTypeToAvroMap(type);\n\t\tfinal ArrayData.ElementGetter valueGetter = ArrayData.createElementGetter(valueType);\n\t\tfinal RowDataToAvroConverter valueConverter = createConverter(valueType);\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema valueSchema = schema.getValueType();\n\t\t\tfinal MapData mapData = (MapData) object;\n\t\t\tfinal ArrayData keyArray = mapData.keyArray();\n\t\t\tfinal ArrayData valueArray = mapData.valueArray();\n\t\t\tfinal Map<Object, Object> map = new HashMap<>(mapData.size());\n\t\t\tfor (int i = 0; i < mapData.size(); ++i) {\n\t\t\t\tfinal String key = keyArray.getString(i).toString();\n\t\t\t\tfinal Object value = valueConverter.convert(valueSchema, valueGetter.getElementOrNull(valueArray, i));\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t\treturn map;\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/RowDataToAvroConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"1c09c23810cf844001dd70d3b78a7a60b49611c7","commitMessage":"@@@[FLINK-16048][avro] Support read/write confluent schema registry avro data from Kafka\n\n","date":"2020-07-30 21:09:26","modifiedFileCount":"11","status":"B","submitter":"Danny Chan"},{"authorTime":"2020-11-20 20:11:28","codes":[{"authorDate":"2020-11-20 20:11:28","commitOrder":2,"curCode":"\tprivate static RowDataToAvroConverter createArrayConverter(ArrayType arrayType) {\n\t\tLogicalType elementType = arrayType.getElementType();\n\t\tfinal ArrayData.ElementGetter elementGetter = ArrayData.createElementGetter(elementType);\n\t\tfinal RowDataToAvroConverter elementConverter = createConverter(arrayType.getElementType());\n\n\t\treturn new RowDataToAvroConverter() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic Object convert(Schema schema, Object object) {\n\t\t\t\tfinal Schema elementSchema = schema.getElementType();\n\t\t\t\tArrayData arrayData = (ArrayData) object;\n\t\t\t\tList<Object> list = new ArrayList<>();\n\t\t\t\tfor (int i = 0; i < arrayData.size(); ++i) {\n\t\t\t\t\tlist.add(elementConverter.convert(\n\t\t\t\t\t\telementSchema,\n\t\t\t\t\t\telementGetter.getElementOrNull(arrayData, i)));\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-26 00:43:34","endLine":257,"groupId":"101972","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createArrayConverter","params":"(ArrayTypearrayType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/82f38db87df3528dabec5c8719ba7bfde2ad8e.src","preCode":"\tprivate static RowDataToAvroConverter createArrayConverter(ArrayType arrayType) {\n\t\tLogicalType elementType = arrayType.getElementType();\n\t\tfinal ArrayData.ElementGetter elementGetter = ArrayData.createElementGetter(elementType);\n\t\tfinal RowDataToAvroConverter elementConverter = createConverter(arrayType.getElementType());\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema elementSchema = schema.getElementType();\n\t\t\tArrayData arrayData = (ArrayData) object;\n\t\t\tList<Object> list = new ArrayList<>();\n\t\t\tfor (int i = 0; i < arrayData.size(); ++i) {\n\t\t\t\tlist.add(elementConverter.convert(elementSchema, elementGetter.getElementOrNull(arrayData, i)));\n\t\t\t}\n\t\t\treturn list;\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/RowDataToAvroConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-11-20 20:11:28","commitOrder":2,"curCode":"\tprivate static RowDataToAvroConverter createMapConverter(LogicalType type) {\n\t\tLogicalType valueType = extractValueTypeToAvroMap(type);\n\t\tfinal ArrayData.ElementGetter valueGetter = ArrayData.createElementGetter(valueType);\n\t\tfinal RowDataToAvroConverter valueConverter = createConverter(valueType);\n\n\t\treturn new RowDataToAvroConverter() {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\t@Override\n\t\t\tpublic Object convert(Schema schema, Object object) {\n\t\t\t\tfinal Schema valueSchema = schema.getValueType();\n\t\t\t\tfinal MapData mapData = (MapData) object;\n\t\t\t\tfinal ArrayData keyArray = mapData.keyArray();\n\t\t\t\tfinal ArrayData valueArray = mapData.valueArray();\n\t\t\t\tfinal Map<Object, Object> map = new HashMap<>(mapData.size());\n\t\t\t\tfor (int i = 0; i < mapData.size(); ++i) {\n\t\t\t\t\tfinal String key = keyArray.getString(i).toString();\n\t\t\t\t\tfinal Object value = valueConverter.convert(\n\t\t\t\t\t\tvalueSchema,\n\t\t\t\t\t\tvalueGetter.getElementOrNull(valueArray, i));\n\t\t\t\t\tmap.put(key, value);\n\t\t\t\t}\n\t\t\t\treturn map;\n\t\t\t}\n\t\t};\n\t}\n","date":"2020-11-26 00:43:34","endLine":283,"groupId":"101972","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMapConverter","params":"(LogicalTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/48/82f38db87df3528dabec5c8719ba7bfde2ad8e.src","preCode":"\tprivate static RowDataToAvroConverter createMapConverter(LogicalType type) {\n\t\tLogicalType valueType = extractValueTypeToAvroMap(type);\n\t\tfinal ArrayData.ElementGetter valueGetter = ArrayData.createElementGetter(valueType);\n\t\tfinal RowDataToAvroConverter valueConverter = createConverter(valueType);\n\n\t\treturn (schema, object) -> {\n\t\t\tfinal Schema valueSchema = schema.getValueType();\n\t\t\tfinal MapData mapData = (MapData) object;\n\t\t\tfinal ArrayData keyArray = mapData.keyArray();\n\t\t\tfinal ArrayData valueArray = mapData.valueArray();\n\t\t\tfinal Map<Object, Object> map = new HashMap<>(mapData.size());\n\t\t\tfor (int i = 0; i < mapData.size(); ++i) {\n\t\t\t\tfinal String key = keyArray.getString(i).toString();\n\t\t\t\tfinal Object value = valueConverter.convert(valueSchema, valueGetter.getElementOrNull(valueArray, i));\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t\treturn map;\n\t\t};\n\t}\n","realPath":"flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/RowDataToAvroConverters.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"9abe38ee8de583c04e4dc1ee383ac5354ba6270c","commitMessage":"@@@[hotfix] Shade avro in sql-avro jars\n","date":"2020-11-26 00:43:34","modifiedFileCount":"1","status":"M","submitter":"Dawid Wysakowicz"}]
