[{"authorTime":"2016-11-24 15:14:48","codes":[{"authorDate":"2017-02-22 21:55:17","commitOrder":2,"curCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessAllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-02-28 21:02:56","endLine":498,"groupId":"12038","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceWithEvictorAndProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/34/eac9e384c84a5572db9f1e54b1a7574e344dd5.src","preCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessAllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"B"},{"authorDate":"2016-11-24 15:14:48","commitOrder":2,"curCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(0)\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tTuple tuple,\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2017-02-18 00:15:51","endLine":1377,"groupId":"31801","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceWithEvictorAndProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/b8/99948d41885679ed66c150f45b3e604bc9bfd6.src","preCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(0)\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tTuple tuple,\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":1340,"status":"NB"}],"commitId":"788b839213811c6f2407ac6d54fef28dfa3d29a6","commitMessage":"@@@[FLINK-5157] [streaming] Introduce ProcessAllWindowFunction\n","date":"2017-02-28 21:02:56","modifiedFileCount":"7","status":"M","submitter":"Ventura Del Monte"},{"authorTime":"2020-09-29 02:16:11","codes":[{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessAllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":427,"groupId":"102760","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReduceWithEvictorAndProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/84/f1ccd82d9ad6943385f4b4bf602aa8f657cacd.src","preCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.windowAll(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessAllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/AllWindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2020-09-29 02:16:11","commitOrder":3,"curCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(0)\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tTuple tuple,\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","date":"2020-10-01 23:03:45","endLine":996,"groupId":"102760","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceWithEvictorAndProcessFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-flink-10-0.7/blobInfo/CC_OUT/blobs/65/871406ac51fcb92088b16ceba657da0961f6c8.src","preCode":"\tpublic void testReduceWithEvictorAndProcessFunction() throws Exception {\n\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);\n\n\t\tDataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of(\"hello\", 1), Tuple2.of(\"hello\", 2));\n\n\t\tDummyReducer reducer = new DummyReducer();\n\n\t\tDataStream<Tuple2<String, Integer>> window1 = source\n\t\t\t\t.keyBy(0)\n\t\t\t\t.window(SlidingEventTimeWindows.of(Time.of(1, TimeUnit.SECONDS), Time.of(100, TimeUnit.MILLISECONDS)))\n\t\t\t\t.evictor(CountEvictor.of(100))\n\t\t\t\t.reduce(\n\t\t\t\t\t\treducer,\n\t\t\t\t\t\tnew ProcessWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void process(\n\t\t\t\t\t\t\t\t\tTuple tuple,\n\t\t\t\t\t\t\t\t\tContext context,\n\t\t\t\t\t\t\t\t\tIterable<Tuple2<String, Integer>> elements,\n\t\t\t\t\t\t\t\t\tCollector<Tuple2<String, Integer>> out) throws Exception {\n\t\t\t\t\t\t\t\tfor (Tuple2<String, Integer> in : elements) {\n\t\t\t\t\t\t\t\t\tout.collect(in);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\tOneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation();\n\t\tOneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator = transform.getOperator();\n\t\tAssert.assertTrue(operator instanceof EvictingWindowOperator);\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?> winOperator = (EvictingWindowOperator<String, Tuple2<String, Integer>, ?, ?>) operator;\n\t\tAssert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);\n\t\tAssert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);\n\t\tAssert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);\n\t\tAssert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);\n\n\t\tprocessElementAndEnsureOutput(winOperator, winOperator.getKeySelector(), BasicTypeInfo.STRING_TYPE_INFO, new Tuple2<>(\"hello\", 1));\n\t}\n","realPath":"flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowTranslationTest.java","repoName":"flink","snippetEndLine":0,"snippetStartLine":0,"startLine":960,"status":"M"}],"commitId":"cb4de07a4004b46702edf7809f8a556866fe3da1","commitMessage":"@@@[FLINK-19317] Remove unnecessary calls to setStreamTimeCharacteristic (java)\n\nI'm just removing calls the set EventTime because that's the new default\nnow.\n\nI'm also removing most calls to set ProcessingTime because it's not\nneeded for making processing-time timers/windows work. I only left it\nfor some tests that check specific failure behavior.\n\nI removed calls to set IngestionTime and replaced them by an explicit\nIngestionTimeWatermarkStrategy. I duplicated the same\nIngestionTimeWatermarkStrategy in all the examples/tests because I\nexplicitly didn't want to add an IngestionTimeWatermarkStrategy in one\nof the core packages so that it is not discoverable because I think we\nshouldn't encourage users to use ingestion time.\n","date":"2020-10-01 23:03:45","modifiedFileCount":"30","status":"M","submitter":"Aljoscha Krettek"}]
